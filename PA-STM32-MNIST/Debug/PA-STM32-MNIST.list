
PA-STM32-MNIST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017ec8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0013800c  08018078  08018078  00028078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08150084  08150084  00170a9c  2**0
                  CONTENTS
  4 .ARM          00000008  08150084  08150084  00160084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0815008c  0815008c  00170a9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0815008c  0815008c  0016008c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08150090  08150090  00160090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a9c  20000000  08150094  00170000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00170a9c  2**0
                  CONTENTS
 10 .bss          00019550  20000a9c  20000a9c  00170a9c  2**2
                  ALLOC
 11 ._user_heap_stack 00006004  20019fec  20019fec  00170a9c  2**0
                  ALLOC
 12 .ARM.attributes 00000034  00000000  00000000  00170a9c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023db0  00000000  00000000  00170ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052de  00000000  00000000  00194880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001df0  00000000  00000000  00199b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b90  00000000  00000000  0019b950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c2d2  00000000  00000000  0019d4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025d88  00000000  00000000  001c97b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f8be8  00000000  00000000  001ef53a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00006176  00000000  00000000  002e8122  2**0
                  CONTENTS, READONLY
 21 .iar.rtmodel  000001e7  00000000  00000000  002ee298  2**0
                  CONTENTS, READONLY
 22 .iar_vfe_header 00000024  00000000  00000000  002ee480  2**2
                  CONTENTS, READONLY
 23 .debug_frame  0000e000  00000000  00000000  002ee4a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000a9c 	.word	0x20000a9c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08018060 	.word	0x08018060

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000aa0 	.word	0x20000aa0
 80001ec:	08018060 	.word	0x08018060

080001f0 <_ai_platform_get_io_buffers_info>:
 80001f0:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001f4:	2500      	movs	r5, #0
 80001f6:	46aa      	mov	sl, r5
 80001f8:	b082      	sub	sp, #8
 80001fa:	4607      	mov	r7, r0
 80001fc:	46ab      	mov	fp, r5
 80001fe:	46d0      	mov	r8, sl
 8000200:	46d1      	mov	r9, sl
 8000202:	e028      	b.n	8000256 <_ai_platform_get_io_buffers_info+0x66>
 8000204:	2000      	movs	r0, #0
 8000206:	e01c      	b.n	8000242 <_ai_platform_get_io_buffers_info+0x52>
 8000208:	f850 400a 	ldr.w	r4, [r0, sl]
 800020c:	b364      	cbz	r4, 8000268 <_ai_platform_get_io_buffers_info+0x78>
 800020e:	68b8      	ldr	r0, [r7, #8]
 8000210:	6841      	ldr	r1, [r0, #4]
 8000212:	6880      	ldr	r0, [r0, #8]
 8000214:	4440      	add	r0, r8
 8000216:	eb01 0609 	add.w	r6, r1, r9
 800021a:	9000      	str	r0, [sp, #0]
 800021c:	69a1      	ldr	r1, [r4, #24]
 800021e:	6808      	ldr	r0, [r1, #0]
 8000220:	f005 fd58 	bl	8005cd4 <ai_array_to_buffer_fmt>
 8000224:	6030      	str	r0, [r6, #0]
 8000226:	2101      	movs	r1, #1
 8000228:	80b1      	strh	r1, [r6, #4]
 800022a:	68e0      	ldr	r0, [r4, #12]
 800022c:	68c1      	ldr	r1, [r0, #12]
 800022e:	80f1      	strh	r1, [r6, #6]
 8000230:	6882      	ldr	r2, [r0, #8]
 8000232:	8132      	strh	r2, [r6, #8]
 8000234:	6840      	ldr	r0, [r0, #4]
 8000236:	60f0      	str	r0, [r6, #12]
 8000238:	69a1      	ldr	r1, [r4, #24]
 800023a:	688a      	ldr	r2, [r1, #8]
 800023c:	6132      	str	r2, [r6, #16]
 800023e:	9800      	ldr	r0, [sp, #0]
 8000240:	b9e0      	cbnz	r0, 800027c <_ai_platform_get_io_buffers_info+0x8c>
 8000242:	6170      	str	r0, [r6, #20]
 8000244:	1c6d      	adds	r5, r5, #1
 8000246:	f10b 0b01 	add.w	fp, fp, #1
 800024a:	f109 0918 	add.w	r9, r9, #24
 800024e:	f108 0808 	add.w	r8, r8, #8
 8000252:	f10a 0a04 	add.w	sl, sl, #4
 8000256:	2f00      	cmp	r7, #0
 8000258:	bf14      	ite	ne
 800025a:	8838      	ldrhne	r0, [r7, #0]
 800025c:	2000      	moveq	r0, #0
 800025e:	4583      	cmp	fp, r0
 8000260:	d202      	bcs.n	8000268 <_ai_platform_get_io_buffers_info+0x78>
 8000262:	6878      	ldr	r0, [r7, #4]
 8000264:	2800      	cmp	r0, #0
 8000266:	d1cf      	bne.n	8000208 <_ai_platform_get_io_buffers_info+0x18>
 8000268:	b2a8      	uxth	r0, r5
 800026a:	b118      	cbz	r0, 8000274 <_ai_platform_get_io_buffers_info+0x84>
 800026c:	68b9      	ldr	r1, [r7, #8]
 800026e:	9802      	ldr	r0, [sp, #8]
 8000270:	684a      	ldr	r2, [r1, #4]
 8000272:	6002      	str	r2, [r0, #0]
 8000274:	b2a8      	uxth	r0, r5
 8000276:	b003      	add	sp, #12
 8000278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800027c:	9900      	ldr	r1, [sp, #0]
 800027e:	2000      	movs	r0, #0
 8000280:	6008      	str	r0, [r1, #0]
 8000282:	9a00      	ldr	r2, [sp, #0]
 8000284:	6820      	ldr	r0, [r4, #0]
 8000286:	6050      	str	r0, [r2, #4]
 8000288:	2800      	cmp	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	8840      	ldrhne	r0, [r0, #2]
 800028e:	2800      	cmpne	r0, #0
 8000290:	d0b8      	beq.n	8000204 <_ai_platform_get_io_buffers_info+0x14>
 8000292:	9800      	ldr	r0, [sp, #0]
 8000294:	2101      	movs	r1, #1
 8000296:	6001      	str	r1, [r0, #0]
 8000298:	9800      	ldr	r0, [sp, #0]
 800029a:	e7d2      	b.n	8000242 <_ai_platform_get_io_buffers_info+0x52>

0800029c <_platform_network_state_setup>:
 800029c:	b430      	push	{r4, r5}
 800029e:	68d3      	ldr	r3, [r2, #12]
 80002a0:	6955      	ldr	r5, [r2, #20]
 80002a2:	68dc      	ldr	r4, [r3, #12]
 80002a4:	68eb      	ldr	r3, [r5, #12]
 80002a6:	435c      	muls	r4, r3
 80002a8:	6084      	str	r4, [r0, #8]
 80002aa:	888d      	ldrh	r5, [r1, #4]
 80002ac:	436c      	muls	r4, r5
 80002ae:	60c4      	str	r4, [r0, #12]
 80002b0:	6909      	ldr	r1, [r1, #16]
 80002b2:	68c3      	ldr	r3, [r0, #12]
 80002b4:	6041      	str	r1, [r0, #4]
 80002b6:	4419      	add	r1, r3
 80002b8:	6001      	str	r1, [r0, #0]
 80002ba:	6992      	ldr	r2, [r2, #24]
 80002bc:	6814      	ldr	r4, [r2, #0]
 80002be:	00a1      	lsls	r1, r4, #2
 80002c0:	d407      	bmi.n	80002d2 <_platform_network_state_setup+0x36>
 80002c2:	6894      	ldr	r4, [r2, #8]
 80002c4:	68d1      	ldr	r1, [r2, #12]
 80002c6:	6843      	ldr	r3, [r0, #4]
 80002c8:	1a64      	subs	r4, r4, r1
 80002ca:	1919      	adds	r1, r3, r4
 80002cc:	6091      	str	r1, [r2, #8]
 80002ce:	6840      	ldr	r0, [r0, #4]
 80002d0:	60d0      	str	r0, [r2, #12]
 80002d2:	bc30      	pop	{r4, r5}
 80002d4:	4770      	bx	lr

080002d6 <ai_platform_runtime_get_revision>:
 80002d6:	f8df 0814 	ldr.w	r0, [pc, #2068]	; 8000aec <.text_18>
 80002da:	6801      	ldr	r1, [r0, #0]
 80002dc:	0849      	lsrs	r1, r1, #1
 80002de:	0049      	lsls	r1, r1, #1
 80002e0:	6001      	str	r1, [r0, #0]
 80002e2:	2001      	movs	r0, #1
 80002e4:	f8df 1808 	ldr.w	r1, [pc, #2056]	; 8000af0 <.text_19>
 80002e8:	6088      	str	r0, [r1, #8]
 80002ea:	6888      	ldr	r0, [r1, #8]
 80002ec:	2800      	cmp	r0, #0
 80002ee:	d1fc      	bne.n	80002ea <ai_platform_runtime_get_revision+0x14>
 80002f0:	f8df 2800 	ldr.w	r2, [pc, #2048]	; 8000af4 <.text_20>
 80002f4:	600a      	str	r2, [r1, #0]
 80002f6:	6808      	ldr	r0, [r1, #0]
 80002f8:	f8df 17fc 	ldr.w	r1, [pc, #2044]	; 8000af8 <.text_21>
 80002fc:	4288      	cmp	r0, r1
 80002fe:	d000      	beq.n	8000302 <ai_platform_runtime_get_revision+0x2c>
 8000300:	e7fe      	b.n	8000300 <ai_platform_runtime_get_revision+0x2a>
 8000302:	a0ad      	add	r0, pc, #692	; (adr r0, 80005b8 <.text_13>)
 8000304:	4770      	bx	lr

08000306 <ai_platform_runtime_get_version>:
 8000306:	f8df 07e4 	ldr.w	r0, [pc, #2020]	; 8000aec <.text_18>
 800030a:	6801      	ldr	r1, [r0, #0]
 800030c:	0849      	lsrs	r1, r1, #1
 800030e:	0049      	lsls	r1, r1, #1
 8000310:	6001      	str	r1, [r0, #0]
 8000312:	2001      	movs	r0, #1
 8000314:	f8df 17d8 	ldr.w	r1, [pc, #2008]	; 8000af0 <.text_19>
 8000318:	6088      	str	r0, [r1, #8]
 800031a:	6888      	ldr	r0, [r1, #8]
 800031c:	2800      	cmp	r0, #0
 800031e:	d1fc      	bne.n	800031a <ai_platform_runtime_get_version+0x14>
 8000320:	f8df 27d0 	ldr.w	r2, [pc, #2000]	; 8000af4 <.text_20>
 8000324:	600a      	str	r2, [r1, #0]
 8000326:	6808      	ldr	r0, [r1, #0]
 8000328:	f8df 17cc 	ldr.w	r1, [pc, #1996]	; 8000af8 <.text_21>
 800032c:	4288      	cmp	r0, r1
 800032e:	d000      	beq.n	8000332 <ai_platform_runtime_get_version+0x2c>
 8000330:	e7fe      	b.n	8000330 <ai_platform_runtime_get_version+0x2a>
 8000332:	f20f 72d0 	addw	r2, pc, #2000	; 0x7d0
 8000336:	6810      	ldr	r0, [r2, #0]
 8000338:	4770      	bx	lr

0800033a <ai_platform_api_get_version>:
 800033a:	f8df 07b0 	ldr.w	r0, [pc, #1968]	; 8000aec <.text_18>
 800033e:	6801      	ldr	r1, [r0, #0]
 8000340:	0849      	lsrs	r1, r1, #1
 8000342:	0049      	lsls	r1, r1, #1
 8000344:	6001      	str	r1, [r0, #0]
 8000346:	2001      	movs	r0, #1
 8000348:	f8df 17a4 	ldr.w	r1, [pc, #1956]	; 8000af0 <.text_19>
 800034c:	6088      	str	r0, [r1, #8]
 800034e:	6888      	ldr	r0, [r1, #8]
 8000350:	2800      	cmp	r0, #0
 8000352:	d1fc      	bne.n	800034e <ai_platform_api_get_version+0x14>
 8000354:	f8df 279c 	ldr.w	r2, [pc, #1948]	; 8000af4 <.text_20>
 8000358:	600a      	str	r2, [r1, #0]
 800035a:	6808      	ldr	r0, [r1, #0]
 800035c:	f8df 1798 	ldr.w	r1, [pc, #1944]	; 8000af8 <.text_21>
 8000360:	4288      	cmp	r0, r1
 8000362:	d000      	beq.n	8000366 <ai_platform_api_get_version+0x2c>
 8000364:	e7fe      	b.n	8000364 <ai_platform_api_get_version+0x2a>
 8000366:	f20f 72a0 	addw	r2, pc, #1952	; 0x7a0
 800036a:	6810      	ldr	r0, [r2, #0]
 800036c:	4770      	bx	lr

0800036e <ai_platform_interface_api_get_version>:
 800036e:	f8df 077c 	ldr.w	r0, [pc, #1916]	; 8000aec <.text_18>
 8000372:	6801      	ldr	r1, [r0, #0]
 8000374:	0849      	lsrs	r1, r1, #1
 8000376:	0049      	lsls	r1, r1, #1
 8000378:	6001      	str	r1, [r0, #0]
 800037a:	2001      	movs	r0, #1
 800037c:	f8df 1770 	ldr.w	r1, [pc, #1904]	; 8000af0 <.text_19>
 8000380:	6088      	str	r0, [r1, #8]
 8000382:	6888      	ldr	r0, [r1, #8]
 8000384:	2800      	cmp	r0, #0
 8000386:	d1fc      	bne.n	8000382 <ai_platform_interface_api_get_version+0x14>
 8000388:	f8df 2768 	ldr.w	r2, [pc, #1896]	; 8000af4 <.text_20>
 800038c:	600a      	str	r2, [r1, #0]
 800038e:	6808      	ldr	r0, [r1, #0]
 8000390:	f8df 1764 	ldr.w	r1, [pc, #1892]	; 8000af8 <.text_21>
 8000394:	4288      	cmp	r0, r1
 8000396:	d000      	beq.n	800039a <ai_platform_interface_api_get_version+0x2c>
 8000398:	e7fe      	b.n	8000398 <ai_platform_interface_api_get_version+0x2a>
 800039a:	f20f 7270 	addw	r2, pc, #1904	; 0x770
 800039e:	6810      	ldr	r0, [r2, #0]
 80003a0:	4770      	bx	lr

080003a2 <ai_platform_context_acquire>:
 80003a2:	b120      	cbz	r0, 80003ae <ai_platform_context_acquire+0xc>
 80003a4:	6801      	ldr	r1, [r0, #0]
 80003a6:	f8df 2754 	ldr.w	r2, [pc, #1876]	; 8000afc <.text_22>
 80003aa:	4291      	cmp	r1, r2
 80003ac:	d000      	beq.n	80003b0 <ai_platform_context_acquire+0xe>
 80003ae:	2000      	movs	r0, #0
 80003b0:	f8df 1738 	ldr.w	r1, [pc, #1848]	; 8000aec <.text_18>
 80003b4:	680a      	ldr	r2, [r1, #0]
 80003b6:	0852      	lsrs	r2, r2, #1
 80003b8:	0052      	lsls	r2, r2, #1
 80003ba:	600a      	str	r2, [r1, #0]
 80003bc:	2101      	movs	r1, #1
 80003be:	f8df 2730 	ldr.w	r2, [pc, #1840]	; 8000af0 <.text_19>
 80003c2:	6091      	str	r1, [r2, #8]
 80003c4:	6891      	ldr	r1, [r2, #8]
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d1fc      	bne.n	80003c4 <ai_platform_context_acquire+0x22>
 80003ca:	f8df 3728 	ldr.w	r3, [pc, #1832]	; 8000af4 <.text_20>
 80003ce:	6013      	str	r3, [r2, #0]
 80003d0:	6811      	ldr	r1, [r2, #0]
 80003d2:	f8df 2724 	ldr.w	r2, [pc, #1828]	; 8000af8 <.text_21>
 80003d6:	4291      	cmp	r1, r2
 80003d8:	d000      	beq.n	80003dc <ai_platform_context_acquire+0x3a>
 80003da:	e7fe      	b.n	80003da <ai_platform_context_acquire+0x38>
 80003dc:	4770      	bx	lr

080003de <ai_platform_context_release>:
 80003de:	f8df 171c 	ldr.w	r1, [pc, #1820]	; 8000afc <.text_22>
 80003e2:	6001      	str	r1, [r0, #0]
 80003e4:	4770      	bx	lr

080003e6 <ai_platform_network_get_error>:
 80003e6:	b120      	cbz	r0, 80003f2 <ai_platform_network_get_error+0xc>
 80003e8:	6801      	ldr	r1, [r0, #0]
 80003ea:	f8df 2710 	ldr.w	r2, [pc, #1808]	; 8000afc <.text_22>
 80003ee:	4291      	cmp	r1, r2
 80003f0:	d000      	beq.n	80003f4 <ai_platform_network_get_error+0xe>
 80003f2:	2000      	movs	r0, #0
 80003f4:	f8df 16f4 	ldr.w	r1, [pc, #1780]	; 8000aec <.text_18>
 80003f8:	680a      	ldr	r2, [r1, #0]
 80003fa:	0852      	lsrs	r2, r2, #1
 80003fc:	0052      	lsls	r2, r2, #1
 80003fe:	600a      	str	r2, [r1, #0]
 8000400:	2101      	movs	r1, #1
 8000402:	f8df 26ec 	ldr.w	r2, [pc, #1772]	; 8000af0 <.text_19>
 8000406:	6091      	str	r1, [r2, #8]
 8000408:	6891      	ldr	r1, [r2, #8]
 800040a:	2900      	cmp	r1, #0
 800040c:	d1fc      	bne.n	8000408 <ai_platform_network_get_error+0x22>
 800040e:	f8df 36e4 	ldr.w	r3, [pc, #1764]	; 8000af4 <.text_20>
 8000412:	6013      	str	r3, [r2, #0]
 8000414:	6811      	ldr	r1, [r2, #0]
 8000416:	f8df 26e0 	ldr.w	r2, [pc, #1760]	; 8000af8 <.text_21>
 800041a:	4291      	cmp	r1, r2
 800041c:	d000      	beq.n	8000420 <ai_platform_network_get_error+0x3a>
 800041e:	e7fe      	b.n	800041e <ai_platform_network_get_error+0x38>
 8000420:	2800      	cmp	r0, #0
 8000422:	bf1c      	itt	ne
 8000424:	3010      	addne	r0, #16
 8000426:	f000 bb83 	bne.w	8000b30 <core_get_error>
 800042a:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 800042e:	6800      	ldr	r0, [r0, #0]
 8000430:	4770      	bx	lr

08000432 <ai_platform_network_set_error>:
 8000432:	2800      	cmp	r0, #0
 8000434:	bf1c      	itt	ne
 8000436:	3010      	addne	r0, #16
 8000438:	f000 bb7f 	bne.w	8000b3a <core_set_error>
 800043c:	4770      	bx	lr

0800043e <ai_platform_api_get_network_report>:
 800043e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000442:	ea5f 0900 	movs.w	r9, r0
 8000446:	b081      	sub	sp, #4
 8000448:	460c      	mov	r4, r1
 800044a:	d005      	beq.n	8000458 <ai_platform_api_get_network_report+0x1a>
 800044c:	f8d9 0000 	ldr.w	r0, [r9]
 8000450:	f8df 16a8 	ldr.w	r1, [pc, #1704]	; 8000afc <.text_22>
 8000454:	4288      	cmp	r0, r1
 8000456:	d001      	beq.n	800045c <ai_platform_api_get_network_report+0x1e>
 8000458:	f04f 0900 	mov.w	r9, #0
 800045c:	f8df 568c 	ldr.w	r5, [pc, #1676]	; 8000aec <.text_18>
 8000460:	f8df 668c 	ldr.w	r6, [pc, #1676]	; 8000af0 <.text_19>
 8000464:	6828      	ldr	r0, [r5, #0]
 8000466:	0840      	lsrs	r0, r0, #1
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	6028      	str	r0, [r5, #0]
 800046c:	2101      	movs	r1, #1
 800046e:	60b1      	str	r1, [r6, #8]
 8000470:	68b0      	ldr	r0, [r6, #8]
 8000472:	2800      	cmp	r0, #0
 8000474:	d1fc      	bne.n	8000470 <ai_platform_api_get_network_report+0x32>
 8000476:	f8df 767c 	ldr.w	r7, [pc, #1660]	; 8000af4 <.text_20>
 800047a:	f8df 867c 	ldr.w	r8, [pc, #1660]	; 8000af8 <.text_21>
 800047e:	6037      	str	r7, [r6, #0]
 8000480:	6830      	ldr	r0, [r6, #0]
 8000482:	4540      	cmp	r0, r8
 8000484:	d000      	beq.n	8000488 <ai_platform_api_get_network_report+0x4a>
 8000486:	e7fe      	b.n	8000486 <ai_platform_api_get_network_report+0x48>
 8000488:	f1b9 0f00 	cmp.w	r9, #0
 800048c:	bf18      	it	ne
 800048e:	2c00      	cmpne	r4, #0
 8000490:	d034      	beq.n	80004fc <ai_platform_api_get_network_report+0xbe>
 8000492:	2000      	movs	r0, #0
 8000494:	66e0      	str	r0, [r4, #108]	; 0x6c
 8000496:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
 800049a:	b152      	cbz	r2, 80004b2 <ai_platform_api_get_network_report+0x74>
 800049c:	e000      	b.n	80004a0 <ai_platform_api_get_network_report+0x62>
 800049e:	4602      	mov	r2, r0
 80004a0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80004a2:	1c49      	adds	r1, r1, #1
 80004a4:	66e1      	str	r1, [r4, #108]	; 0x6c
 80004a6:	68d0      	ldr	r0, [r2, #12]
 80004a8:	4282      	cmp	r2, r0
 80004aa:	bf18      	it	ne
 80004ac:	2800      	cmpne	r0, #0
 80004ae:	d1f6      	bne.n	800049e <ai_platform_api_get_network_report+0x60>
 80004b0:	b911      	cbnz	r1, 80004b8 <ai_platform_api_get_network_report+0x7a>
 80004b2:	2218      	movs	r2, #24
 80004b4:	2111      	movs	r1, #17
 80004b6:	e01d      	b.n	80004f4 <ai_platform_api_get_network_report+0xb6>
 80004b8:	f8b9 0048 	ldrh.w	r0, [r9, #72]	; 0x48
 80004bc:	b108      	cbz	r0, 80004c2 <ai_platform_api_get_network_report+0x84>
 80004be:	f8d9 004c 	ldr.w	r0, [r9, #76]	; 0x4c
 80004c2:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80004c6:	f7ff fe93 	bl	80001f0 <_ai_platform_get_io_buffers_info>
 80004ca:	8620      	strh	r0, [r4, #48]	; 0x30
 80004cc:	b910      	cbnz	r0, 80004d4 <ai_platform_api_get_network_report+0x96>
 80004ce:	2218      	movs	r2, #24
 80004d0:	2112      	movs	r1, #18
 80004d2:	e00f      	b.n	80004f4 <ai_platform_api_get_network_report+0xb6>
 80004d4:	f8b9 0048 	ldrh.w	r0, [r9, #72]	; 0x48
 80004d8:	2802      	cmp	r0, #2
 80004da:	bfa6      	itte	ge
 80004dc:	f8d9 004c 	ldrge.w	r0, [r9, #76]	; 0x4c
 80004e0:	300c      	addge	r0, #12
 80004e2:	2000      	movlt	r0, #0
 80004e4:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80004e8:	f7ff fe82 	bl	80001f0 <_ai_platform_get_io_buffers_info>
 80004ec:	8660      	strh	r0, [r4, #50]	; 0x32
 80004ee:	b948      	cbnz	r0, 8000504 <ai_platform_api_get_network_report+0xc6>
 80004f0:	2218      	movs	r2, #24
 80004f2:	2113      	movs	r1, #19
 80004f4:	f109 0010 	add.w	r0, r9, #16
 80004f8:	f000 fb1f 	bl	8000b3a <core_set_error>
 80004fc:	2000      	movs	r0, #0
 80004fe:	b001      	add	sp, #4
 8000500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000504:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8000508:	6720      	str	r0, [r4, #112]	; 0x70
 800050a:	f109 0230 	add.w	r2, r9, #48	; 0x30
 800050e:	e892 5c09 	ldmia.w	r2, {r0, r3, sl, fp, ip, lr}
 8000512:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8000516:	f109 0918 	add.w	r9, r9, #24
 800051a:	e881 5c09 	stmia.w	r1, {r0, r3, sl, fp, ip, lr}
 800051e:	e899 540e 	ldmia.w	r9, {r1, r2, r3, sl, ip, lr}
 8000522:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8000526:	e880 540e 	stmia.w	r0, {r1, r2, r3, sl, ip, lr}
 800052a:	6828      	ldr	r0, [r5, #0]
 800052c:	0840      	lsrs	r0, r0, #1
 800052e:	0040      	lsls	r0, r0, #1
 8000530:	6028      	str	r0, [r5, #0]
 8000532:	2301      	movs	r3, #1
 8000534:	60b3      	str	r3, [r6, #8]
 8000536:	68b0      	ldr	r0, [r6, #8]
 8000538:	2800      	cmp	r0, #0
 800053a:	d1fc      	bne.n	8000536 <ai_platform_api_get_network_report+0xf8>
 800053c:	6037      	str	r7, [r6, #0]
 800053e:	6831      	ldr	r1, [r6, #0]
 8000540:	4541      	cmp	r1, r8
 8000542:	d000      	beq.n	8000546 <ai_platform_api_get_network_report+0x108>
 8000544:	e7fe      	b.n	8000544 <ai_platform_api_get_network_report+0x106>
 8000546:	a01c      	add	r0, pc, #112	; (adr r0, 80005b8 <.text_13>)
 8000548:	6120      	str	r0, [r4, #16]
 800054a:	6829      	ldr	r1, [r5, #0]
 800054c:	0849      	lsrs	r1, r1, #1
 800054e:	0049      	lsls	r1, r1, #1
 8000550:	6029      	str	r1, [r5, #0]
 8000552:	60b3      	str	r3, [r6, #8]
 8000554:	68b0      	ldr	r0, [r6, #8]
 8000556:	2800      	cmp	r0, #0
 8000558:	d1fc      	bne.n	8000554 <ai_platform_api_get_network_report+0x116>
 800055a:	6037      	str	r7, [r6, #0]
 800055c:	6831      	ldr	r1, [r6, #0]
 800055e:	4541      	cmp	r1, r8
 8000560:	d000      	beq.n	8000564 <ai_platform_api_get_network_report+0x126>
 8000562:	e7fe      	b.n	8000562 <ai_platform_api_get_network_report+0x124>
 8000564:	f20f 509c 	addw	r0, pc, #1436	; 0x59c
 8000568:	6802      	ldr	r2, [r0, #0]
 800056a:	6162      	str	r2, [r4, #20]
 800056c:	6829      	ldr	r1, [r5, #0]
 800056e:	0849      	lsrs	r1, r1, #1
 8000570:	0049      	lsls	r1, r1, #1
 8000572:	6029      	str	r1, [r5, #0]
 8000574:	60b3      	str	r3, [r6, #8]
 8000576:	68b0      	ldr	r0, [r6, #8]
 8000578:	2800      	cmp	r0, #0
 800057a:	d1fc      	bne.n	8000576 <ai_platform_api_get_network_report+0x138>
 800057c:	6037      	str	r7, [r6, #0]
 800057e:	6831      	ldr	r1, [r6, #0]
 8000580:	4541      	cmp	r1, r8
 8000582:	d000      	beq.n	8000586 <ai_platform_api_get_network_report+0x148>
 8000584:	e7fe      	b.n	8000584 <ai_platform_api_get_network_report+0x146>
 8000586:	f20f 5080 	addw	r0, pc, #1408	; 0x580
 800058a:	6802      	ldr	r2, [r0, #0]
 800058c:	6262      	str	r2, [r4, #36]	; 0x24
 800058e:	6829      	ldr	r1, [r5, #0]
 8000590:	0849      	lsrs	r1, r1, #1
 8000592:	0049      	lsls	r1, r1, #1
 8000594:	6029      	str	r1, [r5, #0]
 8000596:	60b3      	str	r3, [r6, #8]
 8000598:	68b0      	ldr	r0, [r6, #8]
 800059a:	2800      	cmp	r0, #0
 800059c:	d1fc      	bne.n	8000598 <ai_platform_api_get_network_report+0x15a>
 800059e:	6037      	str	r7, [r6, #0]
 80005a0:	6831      	ldr	r1, [r6, #0]
 80005a2:	4541      	cmp	r1, r8
 80005a4:	d000      	beq.n	80005a8 <ai_platform_api_get_network_report+0x16a>
 80005a6:	e7fe      	b.n	80005a6 <ai_platform_api_get_network_report+0x168>
 80005a8:	f20f 5060 	addw	r0, pc, #1376	; 0x560
 80005ac:	6802      	ldr	r2, [r0, #0]
 80005ae:	62a2      	str	r2, [r4, #40]	; 0x28
 80005b0:	2001      	movs	r0, #1
 80005b2:	b001      	add	sp, #4
 80005b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080005b8 <.text_13>:
 80005b8:	00000000 	.word	0x00000000

080005bc <ai_platform_network_create>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	9d04      	ldr	r5, [sp, #16]
 80005c0:	4604      	mov	r4, r0
 80005c2:	9805      	ldr	r0, [sp, #20]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	042d      	lsls	r5, r5, #16
 80005c8:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 80005cc:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 80005d0:	f20f 5050 	addw	r0, pc, #1360	; 0x550
 80005d4:	6806      	ldr	r6, [r0, #0]
 80005d6:	f8df 0514 	ldr.w	r0, [pc, #1300]	; 8000aec <.text_18>
 80005da:	6801      	ldr	r1, [r0, #0]
 80005dc:	0849      	lsrs	r1, r1, #1
 80005de:	0049      	lsls	r1, r1, #1
 80005e0:	6001      	str	r1, [r0, #0]
 80005e2:	2001      	movs	r0, #1
 80005e4:	f8df 1508 	ldr.w	r1, [pc, #1288]	; 8000af0 <.text_19>
 80005e8:	6088      	str	r0, [r1, #8]
 80005ea:	6888      	ldr	r0, [r1, #8]
 80005ec:	2800      	cmp	r0, #0
 80005ee:	d1fc      	bne.n	80005ea <ai_platform_network_create+0x2e>
 80005f0:	f8df 3500 	ldr.w	r3, [pc, #1280]	; 8000af4 <.text_20>
 80005f4:	600b      	str	r3, [r1, #0]
 80005f6:	6808      	ldr	r0, [r1, #0]
 80005f8:	f8df 14fc 	ldr.w	r1, [pc, #1276]	; 8000af8 <.text_21>
 80005fc:	4288      	cmp	r0, r1
 80005fe:	d000      	beq.n	8000602 <ai_platform_network_create+0x46>
 8000600:	e7fe      	b.n	8000600 <ai_platform_network_create+0x44>
 8000602:	b91c      	cbnz	r4, 800060c <ai_platform_network_create+0x50>
 8000604:	f20f 5020 	addw	r0, pc, #1312	; 0x520
 8000608:	6800      	ldr	r0, [r0, #0]
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f8df 14ec 	ldr.w	r1, [pc, #1260]	; 8000afc <.text_22>
 8000610:	6011      	str	r1, [r2, #0]
 8000612:	6022      	str	r2, [r4, #0]
 8000614:	f000 fa8a 	bl	8000b2c <core_init>
 8000618:	b910      	cbnz	r0, 8000620 <ai_platform_network_create+0x64>
 800061a:	f20f 40f4 	addw	r0, pc, #1268	; 0x4f4
 800061e:	e00d      	b.n	800063c <ai_platform_network_create+0x80>
 8000620:	f8df 14dc 	ldr.w	r1, [pc, #1244]	; 8000b00 <.text_23>
 8000624:	428d      	cmp	r5, r1
 8000626:	bf28      	it	cs
 8000628:	f20f 40e8 	addwcs	r0, pc, #1256	; 0x4e8
 800062c:	d206      	bcs.n	800063c <ai_platform_network_create+0x80>
 800062e:	f20f 40e8 	addw	r0, pc, #1256	; 0x4e8
 8000632:	f000 fa97 	bl	8000b64 <ai_check_custom_types>
 8000636:	b920      	cbnz	r0, 8000642 <ai_platform_network_create+0x86>
 8000638:	f20f 40e0 	addw	r0, pc, #1248	; 0x4e0
 800063c:	6806      	ldr	r6, [r0, #0]
 800063e:	2100      	movs	r1, #0
 8000640:	6021      	str	r1, [r4, #0]
 8000642:	4630      	mov	r0, r6
 8000644:	bd70      	pop	{r4, r5, r6, pc}

08000646 <ai_platform_network_destroy>:
 8000646:	b130      	cbz	r0, 8000656 <ai_platform_network_destroy+0x10>
 8000648:	6801      	ldr	r1, [r0, #0]
 800064a:	f8df 24b0 	ldr.w	r2, [pc, #1200]	; 8000afc <.text_22>
 800064e:	4291      	cmp	r1, r2
 8000650:	bf08      	it	eq
 8000652:	4602      	moveq	r2, r0
 8000654:	d000      	beq.n	8000658 <ai_platform_network_destroy+0x12>
 8000656:	2200      	movs	r2, #0
 8000658:	f8df 1490 	ldr.w	r1, [pc, #1168]	; 8000aec <.text_18>
 800065c:	680b      	ldr	r3, [r1, #0]
 800065e:	085b      	lsrs	r3, r3, #1
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	600b      	str	r3, [r1, #0]
 8000664:	2101      	movs	r1, #1
 8000666:	f8df 3488 	ldr.w	r3, [pc, #1160]	; 8000af0 <.text_19>
 800066a:	6099      	str	r1, [r3, #8]
 800066c:	6899      	ldr	r1, [r3, #8]
 800066e:	2900      	cmp	r1, #0
 8000670:	d1fc      	bne.n	800066c <ai_platform_network_destroy+0x26>
 8000672:	f8df c480 	ldr.w	ip, [pc, #1152]	; 8000af4 <.text_20>
 8000676:	f8c3 c000 	str.w	ip, [r3]
 800067a:	6819      	ldr	r1, [r3, #0]
 800067c:	f8df 3478 	ldr.w	r3, [pc, #1144]	; 8000af8 <.text_21>
 8000680:	4299      	cmp	r1, r3
 8000682:	d000      	beq.n	8000686 <ai_platform_network_destroy+0x40>
 8000684:	e7fe      	b.n	8000684 <ai_platform_network_destroy+0x3e>
 8000686:	b102      	cbz	r2, 800068a <ai_platform_network_destroy+0x44>
 8000688:	2000      	movs	r0, #0
 800068a:	4770      	bx	lr

0800068c <ai_platform_network_init>:
 800068c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000690:	b081      	sub	sp, #4
 8000692:	460a      	mov	r2, r1
 8000694:	b120      	cbz	r0, 80006a0 <ai_platform_network_init+0x14>
 8000696:	6801      	ldr	r1, [r0, #0]
 8000698:	f8df 3460 	ldr.w	r3, [pc, #1120]	; 8000afc <.text_22>
 800069c:	4299      	cmp	r1, r3
 800069e:	d000      	beq.n	80006a2 <ai_platform_network_init+0x16>
 80006a0:	2000      	movs	r0, #0
 80006a2:	f8df 1448 	ldr.w	r1, [pc, #1096]	; 8000aec <.text_18>
 80006a6:	680b      	ldr	r3, [r1, #0]
 80006a8:	085b      	lsrs	r3, r3, #1
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	600b      	str	r3, [r1, #0]
 80006ae:	2101      	movs	r1, #1
 80006b0:	f8df 343c 	ldr.w	r3, [pc, #1084]	; 8000af0 <.text_19>
 80006b4:	6099      	str	r1, [r3, #8]
 80006b6:	6899      	ldr	r1, [r3, #8]
 80006b8:	2900      	cmp	r1, #0
 80006ba:	d1fc      	bne.n	80006b6 <ai_platform_network_init+0x2a>
 80006bc:	f8df 4434 	ldr.w	r4, [pc, #1076]	; 8000af4 <.text_20>
 80006c0:	601c      	str	r4, [r3, #0]
 80006c2:	6819      	ldr	r1, [r3, #0]
 80006c4:	f8df 3430 	ldr.w	r3, [pc, #1072]	; 8000af8 <.text_21>
 80006c8:	4299      	cmp	r1, r3
 80006ca:	d000      	beq.n	80006ce <ai_platform_network_init+0x42>
 80006cc:	e7fe      	b.n	80006cc <ai_platform_network_init+0x40>
 80006ce:	2800      	cmp	r0, #0
 80006d0:	d035      	beq.n	800073e <ai_platform_network_init+0xb2>
 80006d2:	b90a      	cbnz	r2, 80006d8 <ai_platform_network_init+0x4c>
 80006d4:	2211      	movs	r2, #17
 80006d6:	e012      	b.n	80006fe <ai_platform_network_init+0x72>
 80006d8:	6913      	ldr	r3, [r2, #16]
 80006da:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80006dc:	b939      	cbnz	r1, 80006ee <ai_platform_network_init+0x62>
 80006de:	8c11      	ldrh	r1, [r2, #32]
 80006e0:	8bd5      	ldrh	r5, [r2, #30]
 80006e2:	6a54      	ldr	r4, [r2, #36]	; 0x24
 80006e4:	4369      	muls	r1, r5
 80006e6:	4361      	muls	r1, r4
 80006e8:	bf18      	it	ne
 80006ea:	2213      	movne	r2, #19
 80006ec:	d107      	bne.n	80006fe <ai_platform_network_init+0x72>
 80006ee:	b973      	cbnz	r3, 800070e <ai_platform_network_init+0x82>
 80006f0:	8911      	ldrh	r1, [r2, #8]
 80006f2:	88d4      	ldrh	r4, [r2, #6]
 80006f4:	68d3      	ldr	r3, [r2, #12]
 80006f6:	4361      	muls	r1, r4
 80006f8:	4359      	muls	r1, r3
 80006fa:	d008      	beq.n	800070e <ai_platform_network_init+0x82>
 80006fc:	2212      	movs	r2, #18
 80006fe:	2110      	movs	r1, #16
 8000700:	3010      	adds	r0, #16
 8000702:	f000 fa1a 	bl	8000b3a <core_set_error>
 8000706:	2000      	movs	r0, #0
 8000708:	b001      	add	sp, #4
 800070a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800070e:	e8b2 10f8 	ldmia.w	r2!, {r3, r4, r5, r6, r7, ip}
 8000712:	f100 0118 	add.w	r1, r0, #24
 8000716:	f100 0e30 	add.w	lr, r0, #48	; 0x30
 800071a:	e881 10f8 	stmia.w	r1, {r3, r4, r5, r6, r7, ip}
 800071e:	e892 0f0a 	ldmia.w	r2, {r1, r3, r8, r9, sl, fp}
 8000722:	e88e 0f0a 	stmia.w	lr, {r1, r3, r8, r9, sl, fp}
 8000726:	2103      	movs	r1, #3
 8000728:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800072a:	60c1      	str	r1, [r0, #12]
 800072c:	b13a      	cbz	r2, 800073e <ai_platform_network_init+0xb2>
 800072e:	e000      	b.n	8000732 <ai_platform_network_init+0xa6>
 8000730:	460a      	mov	r2, r1
 8000732:	68d1      	ldr	r1, [r2, #12]
 8000734:	6090      	str	r0, [r2, #8]
 8000736:	428a      	cmp	r2, r1
 8000738:	bf18      	it	ne
 800073a:	2900      	cmpne	r1, #0
 800073c:	d1f8      	bne.n	8000730 <ai_platform_network_init+0xa4>
 800073e:	b001      	add	sp, #4
 8000740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000744 <ai_platform_network_process>:
 8000744:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000748:	b082      	sub	sp, #8
 800074a:	460a      	mov	r2, r1
 800074c:	b120      	cbz	r0, 8000758 <ai_platform_network_process+0x14>
 800074e:	6801      	ldr	r1, [r0, #0]
 8000750:	f8df 33a8 	ldr.w	r3, [pc, #936]	; 8000afc <.text_22>
 8000754:	4299      	cmp	r1, r3
 8000756:	d000      	beq.n	800075a <ai_platform_network_process+0x16>
 8000758:	2000      	movs	r0, #0
 800075a:	f8df 1390 	ldr.w	r1, [pc, #912]	; 8000aec <.text_18>
 800075e:	680b      	ldr	r3, [r1, #0]
 8000760:	085b      	lsrs	r3, r3, #1
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	600b      	str	r3, [r1, #0]
 8000766:	2101      	movs	r1, #1
 8000768:	f8df 3384 	ldr.w	r3, [pc, #900]	; 8000af0 <.text_19>
 800076c:	6099      	str	r1, [r3, #8]
 800076e:	6899      	ldr	r1, [r3, #8]
 8000770:	2900      	cmp	r1, #0
 8000772:	d1fc      	bne.n	800076e <ai_platform_network_process+0x2a>
 8000774:	f8df 437c 	ldr.w	r4, [pc, #892]	; 8000af4 <.text_20>
 8000778:	601c      	str	r4, [r3, #0]
 800077a:	6819      	ldr	r1, [r3, #0]
 800077c:	f8df 3378 	ldr.w	r3, [pc, #888]	; 8000af8 <.text_21>
 8000780:	4299      	cmp	r1, r3
 8000782:	d000      	beq.n	8000786 <ai_platform_network_process+0x42>
 8000784:	e7fe      	b.n	8000784 <ai_platform_network_process+0x40>
 8000786:	2800      	cmp	r0, #0
 8000788:	f000 8113 	beq.w	80009b2 <ai_platform_network_process+0x26e>
 800078c:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
 8000790:	b101      	cbz	r1, 8000794 <ai_platform_network_process+0x50>
 8000792:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8000794:	2300      	movs	r3, #0
 8000796:	82c3      	strh	r3, [r0, #22]
 8000798:	2400      	movs	r4, #0
 800079a:	7b03      	ldrb	r3, [r0, #12]
 800079c:	8284      	strh	r4, [r0, #20]
 800079e:	f003 0303 	and.w	r3, r3, #3
 80007a2:	2b03      	cmp	r3, #3
 80007a4:	d002      	beq.n	80007ac <ai_platform_network_process+0x68>
 80007a6:	2230      	movs	r2, #48	; 0x30
 80007a8:	2111      	movs	r1, #17
 80007aa:	e0ff      	b.n	80009ac <ai_platform_network_process+0x268>
 80007ac:	2a00      	cmp	r2, #0
 80007ae:	bf1e      	ittt	ne
 80007b0:	2900      	cmpne	r1, #0
 80007b2:	880b      	ldrhne	r3, [r1, #0]
 80007b4:	2b00      	cmpne	r3, #0
 80007b6:	f000 80f7 	beq.w	80009a8 <ai_platform_network_process+0x264>
 80007ba:	f8b2 b004 	ldrh.w	fp, [r2, #4]
 80007be:	9100      	str	r1, [sp, #0]
 80007c0:	46a0      	mov	r8, r4
 80007c2:	46a1      	mov	r9, r4
 80007c4:	2600      	movs	r6, #0
 80007c6:	1d17      	adds	r7, r2, #4
 80007c8:	4682      	mov	sl, r0
 80007ca:	e014      	b.n	80007f6 <ai_platform_network_process+0xb2>
 80007cc:	68f8      	ldr	r0, [r7, #12]
 80007ce:	2800      	cmp	r0, #0
 80007d0:	f000 80e9 	beq.w	80009a6 <ai_platform_network_process+0x262>
 80007d4:	8838      	ldrh	r0, [r7, #0]
 80007d6:	2800      	cmp	r0, #0
 80007d8:	d052      	beq.n	8000880 <ai_platform_network_process+0x13c>
 80007da:	4558      	cmp	r0, fp
 80007dc:	bf28      	it	cs
 80007de:	4683      	movcs	fp, r0
 80007e0:	4622      	mov	r2, r4
 80007e2:	1f39      	subs	r1, r7, #4
 80007e4:	4628      	mov	r0, r5
 80007e6:	f7ff fd59 	bl	800029c <_platform_network_state_setup>
 80007ea:	f108 0801 	add.w	r8, r8, #1
 80007ee:	3718      	adds	r7, #24
 80007f0:	3610      	adds	r6, #16
 80007f2:	f109 0904 	add.w	r9, r9, #4
 80007f6:	9800      	ldr	r0, [sp, #0]
 80007f8:	8801      	ldrh	r1, [r0, #0]
 80007fa:	4588      	cmp	r8, r1
 80007fc:	d24a      	bcs.n	8000894 <ai_platform_network_process+0x150>
 80007fe:	6840      	ldr	r0, [r0, #4]
 8000800:	2800      	cmp	r0, #0
 8000802:	bf1c      	itt	ne
 8000804:	f850 4009 	ldrne.w	r4, [r0, r9]
 8000808:	2c00      	cmpne	r4, #0
 800080a:	d043      	beq.n	8000894 <ai_platform_network_process+0x150>
 800080c:	9800      	ldr	r0, [sp, #0]
 800080e:	6881      	ldr	r1, [r0, #8]
 8000810:	680a      	ldr	r2, [r1, #0]
 8000812:	1995      	adds	r5, r2, r6
 8000814:	f000 80c7 	beq.w	80009a6 <ai_platform_network_process+0x262>
 8000818:	69a0      	ldr	r0, [r4, #24]
 800081a:	6841      	ldr	r1, [r0, #4]
 800081c:	887b      	ldrh	r3, [r7, #2]
 800081e:	88ba      	ldrh	r2, [r7, #4]
 8000820:	68b8      	ldr	r0, [r7, #8]
 8000822:	fb03 fc02 	mul.w	ip, r3, r2
 8000826:	fb00 fc0c 	mul.w	ip, r0, ip
 800082a:	4561      	cmp	r1, ip
 800082c:	d32d      	bcc.n	800088a <ai_platform_network_process+0x146>
 800082e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8000832:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8000836:	459e      	cmp	lr, r3
 8000838:	bf01      	itttt	eq
 800083a:	f8dc 3008 	ldreq.w	r3, [ip, #8]
 800083e:	4293      	cmpeq	r3, r2
 8000840:	f8dc 2004 	ldreq.w	r2, [ip, #4]
 8000844:	4282      	cmpeq	r2, r0
 8000846:	d120      	bne.n	800088a <ai_platform_network_process+0x146>
 8000848:	69a0      	ldr	r0, [r4, #24]
 800084a:	6800      	ldr	r0, [r0, #0]
 800084c:	f005 fb1a 	bl	8005e84 <ai_array_get_byte_size>
 8000850:	68e1      	ldr	r1, [r4, #12]
 8000852:	68ca      	ldr	r2, [r1, #12]
 8000854:	6961      	ldr	r1, [r4, #20]
 8000856:	68cb      	ldr	r3, [r1, #12]
 8000858:	435a      	muls	r2, r3
 800085a:	4290      	cmp	r0, r2
 800085c:	d315      	bcc.n	800088a <ai_platform_network_process+0x146>
 800085e:	69a0      	ldr	r0, [r4, #24]
 8000860:	6800      	ldr	r0, [r0, #0]
 8000862:	f005 fa37 	bl	8005cd4 <ai_array_to_buffer_fmt>
 8000866:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800086a:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800086e:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8000872:	4288      	cmp	r0, r1
 8000874:	d0aa      	beq.n	80007cc <ai_platform_network_process+0x88>
 8000876:	2219      	movs	r2, #25
 8000878:	2112      	movs	r1, #18
 800087a:	f10a 0010 	add.w	r0, sl, #16
 800087e:	e096      	b.n	80009ae <ai_platform_network_process+0x26a>
 8000880:	2221      	movs	r2, #33	; 0x21
 8000882:	2112      	movs	r1, #18
 8000884:	f10a 0010 	add.w	r0, sl, #16
 8000888:	e091      	b.n	80009ae <ai_platform_network_process+0x26a>
 800088a:	2218      	movs	r2, #24
 800088c:	2112      	movs	r1, #18
 800088e:	f10a 0010 	add.w	r0, sl, #16
 8000892:	e08c      	b.n	80009ae <ai_platform_network_process+0x26a>
 8000894:	9902      	ldr	r1, [sp, #8]
 8000896:	2900      	cmp	r1, #0
 8000898:	4655      	mov	r5, sl
 800089a:	d075      	beq.n	8000988 <ai_platform_network_process+0x244>
 800089c:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 80008a0:	2802      	cmp	r0, #2
 80008a2:	db7b      	blt.n	800099c <ai_platform_network_process+0x258>
 80008a4:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 80008a6:	300c      	adds	r0, #12
 80008a8:	bf1c      	itt	ne
 80008aa:	8802      	ldrhne	r2, [r0, #0]
 80008ac:	2a00      	cmpne	r2, #0
 80008ae:	d075      	beq.n	800099c <ai_platform_network_process+0x258>
 80008b0:	f04f 0800 	mov.w	r8, #0
 80008b4:	46c1      	mov	r9, r8
 80008b6:	2600      	movs	r6, #0
 80008b8:	1d0f      	adds	r7, r1, #4
 80008ba:	9000      	str	r0, [sp, #0]
 80008bc:	e013      	b.n	80008e6 <ai_platform_network_process+0x1a2>
 80008be:	68f8      	ldr	r0, [r7, #12]
 80008c0:	2800      	cmp	r0, #0
 80008c2:	d059      	beq.n	8000978 <ai_platform_network_process+0x234>
 80008c4:	8838      	ldrh	r0, [r7, #0]
 80008c6:	2800      	cmp	r0, #0
 80008c8:	d051      	beq.n	800096e <ai_platform_network_process+0x22a>
 80008ca:	4558      	cmp	r0, fp
 80008cc:	bf28      	it	cs
 80008ce:	4683      	movcs	fp, r0
 80008d0:	4622      	mov	r2, r4
 80008d2:	1f39      	subs	r1, r7, #4
 80008d4:	4628      	mov	r0, r5
 80008d6:	f7ff fce1 	bl	800029c <_platform_network_state_setup>
 80008da:	f108 0801 	add.w	r8, r8, #1
 80008de:	3718      	adds	r7, #24
 80008e0:	3610      	adds	r6, #16
 80008e2:	f109 0904 	add.w	r9, r9, #4
 80008e6:	9800      	ldr	r0, [sp, #0]
 80008e8:	8801      	ldrh	r1, [r0, #0]
 80008ea:	4588      	cmp	r8, r1
 80008ec:	d249      	bcs.n	8000982 <ai_platform_network_process+0x23e>
 80008ee:	6840      	ldr	r0, [r0, #4]
 80008f0:	2800      	cmp	r0, #0
 80008f2:	bf1c      	itt	ne
 80008f4:	f850 4009 	ldrne.w	r4, [r0, r9]
 80008f8:	2c00      	cmpne	r4, #0
 80008fa:	d042      	beq.n	8000982 <ai_platform_network_process+0x23e>
 80008fc:	9800      	ldr	r0, [sp, #0]
 80008fe:	6881      	ldr	r1, [r0, #8]
 8000900:	680a      	ldr	r2, [r1, #0]
 8000902:	1995      	adds	r5, r2, r6
 8000904:	d038      	beq.n	8000978 <ai_platform_network_process+0x234>
 8000906:	69a0      	ldr	r0, [r4, #24]
 8000908:	6841      	ldr	r1, [r0, #4]
 800090a:	887b      	ldrh	r3, [r7, #2]
 800090c:	88ba      	ldrh	r2, [r7, #4]
 800090e:	68b8      	ldr	r0, [r7, #8]
 8000910:	fb03 fc02 	mul.w	ip, r3, r2
 8000914:	fb00 fc0c 	mul.w	ip, r0, ip
 8000918:	4561      	cmp	r1, ip
 800091a:	d33e      	bcc.n	800099a <ai_platform_network_process+0x256>
 800091c:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8000920:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8000924:	459e      	cmp	lr, r3
 8000926:	bf01      	itttt	eq
 8000928:	f8dc 3008 	ldreq.w	r3, [ip, #8]
 800092c:	4293      	cmpeq	r3, r2
 800092e:	f8dc 2004 	ldreq.w	r2, [ip, #4]
 8000932:	4282      	cmpeq	r2, r0
 8000934:	d131      	bne.n	800099a <ai_platform_network_process+0x256>
 8000936:	69a0      	ldr	r0, [r4, #24]
 8000938:	6800      	ldr	r0, [r0, #0]
 800093a:	f005 faa3 	bl	8005e84 <ai_array_get_byte_size>
 800093e:	68e1      	ldr	r1, [r4, #12]
 8000940:	68ca      	ldr	r2, [r1, #12]
 8000942:	6961      	ldr	r1, [r4, #20]
 8000944:	68cb      	ldr	r3, [r1, #12]
 8000946:	435a      	muls	r2, r3
 8000948:	4290      	cmp	r0, r2
 800094a:	d326      	bcc.n	800099a <ai_platform_network_process+0x256>
 800094c:	69a0      	ldr	r0, [r4, #24]
 800094e:	6800      	ldr	r0, [r0, #0]
 8000950:	f005 f9c0 	bl	8005cd4 <ai_array_to_buffer_fmt>
 8000954:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8000958:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800095c:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8000960:	4288      	cmp	r0, r1
 8000962:	d0ac      	beq.n	80008be <ai_platform_network_process+0x17a>
 8000964:	2219      	movs	r2, #25
 8000966:	2113      	movs	r1, #19
 8000968:	f10a 0010 	add.w	r0, sl, #16
 800096c:	e01f      	b.n	80009ae <ai_platform_network_process+0x26a>
 800096e:	2221      	movs	r2, #33	; 0x21
 8000970:	2113      	movs	r1, #19
 8000972:	f10a 0010 	add.w	r0, sl, #16
 8000976:	e01a      	b.n	80009ae <ai_platform_network_process+0x26a>
 8000978:	2217      	movs	r2, #23
 800097a:	2113      	movs	r1, #19
 800097c:	f10a 0010 	add.w	r0, sl, #16
 8000980:	e015      	b.n	80009ae <ai_platform_network_process+0x26a>
 8000982:	4655      	mov	r5, sl
 8000984:	f8a5 b014 	strh.w	fp, [r5, #20]
 8000988:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 800098c:	2800      	cmp	r0, #0
 800098e:	bf14      	ite	ne
 8000990:	f8d5 a04c 	ldrne.w	sl, [r5, #76]	; 0x4c
 8000994:	f04f 0a00 	moveq.w	sl, #0
 8000998:	e00f      	b.n	80009ba <ai_platform_network_process+0x276>
 800099a:	4655      	mov	r5, sl
 800099c:	2218      	movs	r2, #24
 800099e:	2113      	movs	r1, #19
 80009a0:	f105 0010 	add.w	r0, r5, #16
 80009a4:	e003      	b.n	80009ae <ai_platform_network_process+0x26a>
 80009a6:	4650      	mov	r0, sl
 80009a8:	2217      	movs	r2, #23
 80009aa:	2112      	movs	r1, #18
 80009ac:	3010      	adds	r0, #16
 80009ae:	f000 f8c4 	bl	8000b3a <core_set_error>
 80009b2:	2000      	movs	r0, #0
 80009b4:	b003      	add	sp, #12
 80009b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009ba:	2802      	cmp	r0, #2
 80009bc:	bfa6      	itte	ge
 80009be:	6ce8      	ldrge	r0, [r5, #76]	; 0x4c
 80009c0:	f100 0b0c 	addge.w	fp, r0, #12
 80009c4:	f04f 0b00 	movlt.w	fp, #0
 80009c8:	8ae8      	ldrh	r0, [r5, #22]
 80009ca:	8aa9      	ldrh	r1, [r5, #20]
 80009cc:	ebb0 0f01 	cmp.w	r0, r1
 80009d0:	f080 8087 	bcs.w	8000ae2 <ai_platform_network_process+0x39e>
 80009d4:	f04f 0800 	mov.w	r8, #0
 80009d8:	4654      	mov	r4, sl
 80009da:	46c1      	mov	r9, r8
 80009dc:	46c2      	mov	sl, r8
 80009de:	e018      	b.n	8000a12 <ai_platform_network_process+0x2ce>
 80009e0:	6882      	ldr	r2, [r0, #8]
 80009e2:	68c3      	ldr	r3, [r0, #12]
 80009e4:	6871      	ldr	r1, [r6, #4]
 80009e6:	1ad2      	subs	r2, r2, r3
 80009e8:	4411      	add	r1, r2
 80009ea:	6081      	str	r1, [r0, #8]
 80009ec:	6872      	ldr	r2, [r6, #4]
 80009ee:	60c2      	str	r2, [r0, #12]
 80009f0:	6870      	ldr	r0, [r6, #4]
 80009f2:	68b1      	ldr	r1, [r6, #8]
 80009f4:	4408      	add	r0, r1
 80009f6:	6070      	str	r0, [r6, #4]
 80009f8:	6831      	ldr	r1, [r6, #0]
 80009fa:	4288      	cmp	r0, r1
 80009fc:	d302      	bcc.n	8000a04 <ai_platform_network_process+0x2c0>
 80009fe:	68f0      	ldr	r0, [r6, #12]
 8000a00:	4240      	negs	r0, r0
 8000a02:	4408      	add	r0, r1
 8000a04:	6070      	str	r0, [r6, #4]
 8000a06:	f10a 0a01 	add.w	sl, sl, #1
 8000a0a:	f109 0910 	add.w	r9, r9, #16
 8000a0e:	f108 0804 	add.w	r8, r8, #4
 8000a12:	2c00      	cmp	r4, #0
 8000a14:	bf14      	ite	ne
 8000a16:	8820      	ldrhne	r0, [r4, #0]
 8000a18:	2000      	moveq	r0, #0
 8000a1a:	4582      	cmp	sl, r0
 8000a1c:	d212      	bcs.n	8000a44 <ai_platform_network_process+0x300>
 8000a1e:	6860      	ldr	r0, [r4, #4]
 8000a20:	b180      	cbz	r0, 8000a44 <ai_platform_network_process+0x300>
 8000a22:	f850 0008 	ldr.w	r0, [r0, r8]
 8000a26:	b168      	cbz	r0, 8000a44 <ai_platform_network_process+0x300>
 8000a28:	68a1      	ldr	r1, [r4, #8]
 8000a2a:	6980      	ldr	r0, [r0, #24]
 8000a2c:	680a      	ldr	r2, [r1, #0]
 8000a2e:	6801      	ldr	r1, [r0, #0]
 8000a30:	eb02 0609 	add.w	r6, r2, r9
 8000a34:	008a      	lsls	r2, r1, #2
 8000a36:	d5d3      	bpl.n	80009e0 <ai_platform_network_process+0x29c>
 8000a38:	68b2      	ldr	r2, [r6, #8]
 8000a3a:	6871      	ldr	r1, [r6, #4]
 8000a3c:	6880      	ldr	r0, [r0, #8]
 8000a3e:	f00f feba 	bl	80107b6 <__aeabi_memcpy>
 8000a42:	e7d5      	b.n	80009f0 <ai_platform_network_process+0x2ac>
 8000a44:	46a2      	mov	sl, r4
 8000a46:	4628      	mov	r0, r5
 8000a48:	f000 f936 	bl	8000cb8 <ai_layers_forward_all>
 8000a4c:	f04f 0800 	mov.w	r8, #0
 8000a50:	465c      	mov	r4, fp
 8000a52:	46c1      	mov	r9, r8
 8000a54:	46c3      	mov	fp, r8
 8000a56:	e017      	b.n	8000a88 <ai_platform_network_process+0x344>
 8000a58:	6871      	ldr	r1, [r6, #4]
 8000a5a:	68b2      	ldr	r2, [r6, #8]
 8000a5c:	4411      	add	r1, r2
 8000a5e:	6071      	str	r1, [r6, #4]
 8000a60:	6832      	ldr	r2, [r6, #0]
 8000a62:	4291      	cmp	r1, r2
 8000a64:	d302      	bcc.n	8000a6c <ai_platform_network_process+0x328>
 8000a66:	68f1      	ldr	r1, [r6, #12]
 8000a68:	4249      	negs	r1, r1
 8000a6a:	4411      	add	r1, r2
 8000a6c:	6071      	str	r1, [r6, #4]
 8000a6e:	6882      	ldr	r2, [r0, #8]
 8000a70:	68c3      	ldr	r3, [r0, #12]
 8000a72:	1ad2      	subs	r2, r2, r3
 8000a74:	4411      	add	r1, r2
 8000a76:	6081      	str	r1, [r0, #8]
 8000a78:	6872      	ldr	r2, [r6, #4]
 8000a7a:	60c2      	str	r2, [r0, #12]
 8000a7c:	f10b 0b01 	add.w	fp, fp, #1
 8000a80:	f109 0910 	add.w	r9, r9, #16
 8000a84:	f108 0804 	add.w	r8, r8, #4
 8000a88:	2c00      	cmp	r4, #0
 8000a8a:	bf14      	ite	ne
 8000a8c:	8820      	ldrhne	r0, [r4, #0]
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4583      	cmp	fp, r0
 8000a92:	d21d      	bcs.n	8000ad0 <ai_platform_network_process+0x38c>
 8000a94:	6860      	ldr	r0, [r4, #4]
 8000a96:	b1d8      	cbz	r0, 8000ad0 <ai_platform_network_process+0x38c>
 8000a98:	f850 0008 	ldr.w	r0, [r0, r8]
 8000a9c:	b1c0      	cbz	r0, 8000ad0 <ai_platform_network_process+0x38c>
 8000a9e:	68a1      	ldr	r1, [r4, #8]
 8000aa0:	6980      	ldr	r0, [r0, #24]
 8000aa2:	680a      	ldr	r2, [r1, #0]
 8000aa4:	6801      	ldr	r1, [r0, #0]
 8000aa6:	eb02 0609 	add.w	r6, r2, r9
 8000aaa:	008a      	lsls	r2, r1, #2
 8000aac:	d5d4      	bpl.n	8000a58 <ai_platform_network_process+0x314>
 8000aae:	6881      	ldr	r1, [r0, #8]
 8000ab0:	68b2      	ldr	r2, [r6, #8]
 8000ab2:	6870      	ldr	r0, [r6, #4]
 8000ab4:	f00f fe7f 	bl	80107b6 <__aeabi_memcpy>
 8000ab8:	6870      	ldr	r0, [r6, #4]
 8000aba:	68b1      	ldr	r1, [r6, #8]
 8000abc:	4408      	add	r0, r1
 8000abe:	6070      	str	r0, [r6, #4]
 8000ac0:	6831      	ldr	r1, [r6, #0]
 8000ac2:	4288      	cmp	r0, r1
 8000ac4:	d302      	bcc.n	8000acc <ai_platform_network_process+0x388>
 8000ac6:	68f0      	ldr	r0, [r6, #12]
 8000ac8:	4240      	negs	r0, r0
 8000aca:	4408      	add	r0, r1
 8000acc:	6070      	str	r0, [r6, #4]
 8000ace:	e7d5      	b.n	8000a7c <ai_platform_network_process+0x338>
 8000ad0:	8ae8      	ldrh	r0, [r5, #22]
 8000ad2:	8aa9      	ldrh	r1, [r5, #20]
 8000ad4:	1c40      	adds	r0, r0, #1
 8000ad6:	82e8      	strh	r0, [r5, #22]
 8000ad8:	46a3      	mov	fp, r4
 8000ada:	b280      	uxth	r0, r0
 8000adc:	4288      	cmp	r0, r1
 8000ade:	f4ff af79 	bcc.w	80009d4 <ai_platform_network_process+0x290>
 8000ae2:	8ae8      	ldrh	r0, [r5, #22]
 8000ae4:	b003      	add	sp, #12
 8000ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000aec <.text_18>:
 8000aec:	e0002000 	.word	0xe0002000

08000af0 <.text_19>:
 8000af0:	40023000 	.word	0x40023000

08000af4 <.text_20>:
 8000af4:	f407a5c2 	.word	0xf407a5c2

08000af8 <.text_21>:
 8000af8:	b5e8b5cd 	.word	0xb5e8b5cd

08000afc <.text_22>:
 8000afc:	a1c00100 	.word	0xa1c00100

08000b00 <.text_23>:
 8000b00:	01030001 	.word	0x01030001

08000b04 <.text_24>:
 8000b04:	00000104 	.word	0x00000104

08000b08 <.text_25>:
 8000b08:	00000101 	.word	0x00000101

08000b0c <.text_26>:
 8000b0c:	00000301 	.word	0x00000301

08000b10 <.text_27>:
 8000b10:	00001030 	.word	0x00001030

08000b14 <.text_28>:
 8000b14:	00001001 	.word	0x00001001

08000b18 <_platform_network_sanity_check{5}::signatures>:
 8000b18:	84048403                                ....

08000b1c <.text_30>:
 8000b1c:	00001002 	.word	0x00001002

08000b20 <.text_31>:
 8000b20:	00001010 	.word	0x00001010

08000b24 <.text_32>:
 8000b24:	00000000 	.word	0x00000000

08000b28 <.text_33>:
 8000b28:	00001010 	.word	0x00001010

08000b2c <core_init>:
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	4770      	bx	lr

08000b30 <core_get_error>:
 8000b30:	4601      	mov	r1, r0
 8000b32:	2200      	movs	r2, #0
 8000b34:	6808      	ldr	r0, [r1, #0]
 8000b36:	600a      	str	r2, [r1, #0]
 8000b38:	4770      	bx	lr

08000b3a <core_set_error>:
 8000b3a:	7803      	ldrb	r3, [r0, #0]
 8000b3c:	ea5f 6c03 	movs.w	ip, r3, lsl #24
 8000b40:	d104      	bne.n	8000b4c <core_set_error+0x12>
 8000b42:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8000b46:	6001      	str	r1, [r0, #0]
 8000b48:	2001      	movs	r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	4770      	bx	lr

08000b50 <ai_layers_forward_layer>:
 8000b50:	b510      	push	{r4, lr}
 8000b52:	4604      	mov	r4, r0
 8000b54:	6921      	ldr	r1, [r4, #16]
 8000b56:	4788      	blx	r1
 8000b58:	68e0      	ldr	r0, [r4, #12]
 8000b5a:	42a0      	cmp	r0, r4
 8000b5c:	bf08      	it	eq
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	bd10      	pop	{r4, pc}
	...

08000b64 <ai_check_custom_types>:
 8000b64:	b500      	push	{lr}
 8000b66:	b081      	sub	sp, #4
 8000b68:	b160      	cbz	r0, 8000b84 <ai_check_custom_types+0x20>
 8000b6a:	7801      	ldrb	r1, [r0, #0]
 8000b6c:	2903      	cmp	r1, #3
 8000b6e:	d109      	bne.n	8000b84 <ai_check_custom_types+0x20>
 8000b70:	f05f 0204 	movs.w	r2, #4
 8000b74:	a18d      	add	r1, pc, #564	; (adr r1, 8000dac <ai_check_custom_types::ref_signatures>)
 8000b76:	f00f fe4b 	bl	8010810 <memcmp>
 8000b7a:	1e40      	subs	r0, r0, #1
 8000b7c:	4180      	sbcs	r0, r0
 8000b7e:	0fc0      	lsrs	r0, r0, #31
 8000b80:	b001      	add	sp, #4
 8000b82:	bd00      	pop	{pc}
 8000b84:	2000      	movs	r0, #0
 8000b86:	b001      	add	sp, #4
 8000b88:	bd00      	pop	{pc}
	...

08000b8c <ai_layer_type_name>:
 8000b8c:	f242 7211 	movw	r2, #10001	; 0x2711
 8000b90:	1a81      	subs	r1, r0, r2
 8000b92:	2901      	cmp	r1, #1
 8000b94:	bf81      	itttt	hi
 8000b96:	1ec9      	subhi	r1, r1, #3
 8000b98:	290d      	cmphi	r1, #13
 8000b9a:	390f      	subhi	r1, #15
 8000b9c:	2909      	cmphi	r1, #9
 8000b9e:	f200 806b 	bhi.w	8000c78 <ai_layer_type_name+0xec>
 8000ba2:	1a80      	subs	r0, r0, r2
 8000ba4:	d033      	beq.n	8000c0e <ai_layer_type_name+0x82>
 8000ba6:	1e40      	subs	r0, r0, #1
 8000ba8:	d033      	beq.n	8000c12 <ai_layer_type_name+0x86>
 8000baa:	1e80      	subs	r0, r0, #2
 8000bac:	d033      	beq.n	8000c16 <ai_layer_type_name+0x8a>
 8000bae:	1e40      	subs	r0, r0, #1
 8000bb0:	d034      	beq.n	8000c1c <ai_layer_type_name+0x90>
 8000bb2:	1e40      	subs	r0, r0, #1
 8000bb4:	d034      	beq.n	8000c20 <ai_layer_type_name+0x94>
 8000bb6:	1e40      	subs	r0, r0, #1
 8000bb8:	d034      	beq.n	8000c24 <ai_layer_type_name+0x98>
 8000bba:	1e40      	subs	r0, r0, #1
 8000bbc:	d034      	beq.n	8000c28 <ai_layer_type_name+0x9c>
 8000bbe:	1e40      	subs	r0, r0, #1
 8000bc0:	d034      	beq.n	8000c2c <ai_layer_type_name+0xa0>
 8000bc2:	1e40      	subs	r0, r0, #1
 8000bc4:	d034      	beq.n	8000c30 <ai_layer_type_name+0xa4>
 8000bc6:	1e40      	subs	r0, r0, #1
 8000bc8:	d034      	beq.n	8000c34 <ai_layer_type_name+0xa8>
 8000bca:	1e40      	subs	r0, r0, #1
 8000bcc:	d034      	beq.n	8000c38 <ai_layer_type_name+0xac>
 8000bce:	1e40      	subs	r0, r0, #1
 8000bd0:	d034      	beq.n	8000c3c <ai_layer_type_name+0xb0>
 8000bd2:	1e40      	subs	r0, r0, #1
 8000bd4:	d034      	beq.n	8000c40 <ai_layer_type_name+0xb4>
 8000bd6:	1e40      	subs	r0, r0, #1
 8000bd8:	d034      	beq.n	8000c44 <ai_layer_type_name+0xb8>
 8000bda:	1e40      	subs	r0, r0, #1
 8000bdc:	d034      	beq.n	8000c48 <ai_layer_type_name+0xbc>
 8000bde:	1e40      	subs	r0, r0, #1
 8000be0:	d034      	beq.n	8000c4c <ai_layer_type_name+0xc0>
 8000be2:	1e80      	subs	r0, r0, #2
 8000be4:	d034      	beq.n	8000c50 <ai_layer_type_name+0xc4>
 8000be6:	1e40      	subs	r0, r0, #1
 8000be8:	d034      	beq.n	8000c54 <ai_layer_type_name+0xc8>
 8000bea:	1e40      	subs	r0, r0, #1
 8000bec:	d034      	beq.n	8000c58 <ai_layer_type_name+0xcc>
 8000bee:	1e40      	subs	r0, r0, #1
 8000bf0:	d034      	beq.n	8000c5c <ai_layer_type_name+0xd0>
 8000bf2:	1e40      	subs	r0, r0, #1
 8000bf4:	d034      	beq.n	8000c60 <ai_layer_type_name+0xd4>
 8000bf6:	1e40      	subs	r0, r0, #1
 8000bf8:	d034      	beq.n	8000c64 <ai_layer_type_name+0xd8>
 8000bfa:	1e40      	subs	r0, r0, #1
 8000bfc:	d034      	beq.n	8000c68 <ai_layer_type_name+0xdc>
 8000bfe:	1e40      	subs	r0, r0, #1
 8000c00:	d034      	beq.n	8000c6c <ai_layer_type_name+0xe0>
 8000c02:	1e40      	subs	r0, r0, #1
 8000c04:	d034      	beq.n	8000c70 <ai_layer_type_name+0xe4>
 8000c06:	1e40      	subs	r0, r0, #1
 8000c08:	d034      	beq.n	8000c74 <ai_layer_type_name+0xe8>
 8000c0a:	a01c      	add	r0, pc, #112	; (adr r0, 8000c7c <.text_5>)
 8000c0c:	4770      	bx	lr
 8000c0e:	a01c      	add	r0, pc, #112	; (adr r0, 8000c80 <.text_6>)
 8000c10:	4770      	bx	lr
 8000c12:	a01c      	add	r0, pc, #112	; (adr r0, 8000c84 <.text_7>)
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	a031      	add	r0, pc, #196	; (adr r0, 8000ce0 <.text_15>)
 8000c1a:	4770      	bx	lr
 8000c1c:	a032      	add	r0, pc, #200	; (adr r0, 8000ce8 <.text_16>)
 8000c1e:	4770      	bx	lr
 8000c20:	a019      	add	r0, pc, #100	; (adr r0, 8000c88 <.text_8>)
 8000c22:	4770      	bx	lr
 8000c24:	a019      	add	r0, pc, #100	; (adr r0, 8000c8c <.text_9>)
 8000c26:	4770      	bx	lr
 8000c28:	a031      	add	r0, pc, #196	; (adr r0, 8000cf0 <.text_17>)
 8000c2a:	4770      	bx	lr
 8000c2c:	a018      	add	r0, pc, #96	; (adr r0, 8000c90 <.text_10>)
 8000c2e:	4770      	bx	lr
 8000c30:	a031      	add	r0, pc, #196	; (adr r0, 8000cf8 <.text_18>)
 8000c32:	4770      	bx	lr
 8000c34:	a032      	add	r0, pc, #200	; (adr r0, 8000d00 <.text_19>)
 8000c36:	4770      	bx	lr
 8000c38:	a036      	add	r0, pc, #216	; (adr r0, 8000d14 <.text_20>)
 8000c3a:	4770      	bx	lr
 8000c3c:	a038      	add	r0, pc, #224	; (adr r0, 8000d20 <.text_21>)
 8000c3e:	4770      	bx	lr
 8000c40:	a014      	add	r0, pc, #80	; (adr r0, 8000c94 <.text_11>)
 8000c42:	4770      	bx	lr
 8000c44:	a038      	add	r0, pc, #224	; (adr r0, 8000d28 <.text_22>)
 8000c46:	4770      	bx	lr
 8000c48:	a039      	add	r0, pc, #228	; (adr r0, 8000d30 <.text_23>)
 8000c4a:	4770      	bx	lr
 8000c4c:	a03b      	add	r0, pc, #236	; (adr r0, 8000d3c <.text_24>)
 8000c4e:	4770      	bx	lr
 8000c50:	a03f      	add	r0, pc, #252	; (adr r0, 8000d50 <.text_25>)
 8000c52:	4770      	bx	lr
 8000c54:	a040      	add	r0, pc, #256	; (adr r0, 8000d58 <.text_26>)
 8000c56:	4770      	bx	lr
 8000c58:	a041      	add	r0, pc, #260	; (adr r0, 8000d60 <.text_27>)
 8000c5a:	4770      	bx	lr
 8000c5c:	a043      	add	r0, pc, #268	; (adr r0, 8000d6c <.text_28>)
 8000c5e:	4770      	bx	lr
 8000c60:	a044      	add	r0, pc, #272	; (adr r0, 8000d74 <.text_29>)
 8000c62:	4770      	bx	lr
 8000c64:	a045      	add	r0, pc, #276	; (adr r0, 8000d7c <.text_30>)
 8000c66:	4770      	bx	lr
 8000c68:	a00b      	add	r0, pc, #44	; (adr r0, 8000c98 <.text_12>)
 8000c6a:	4770      	bx	lr
 8000c6c:	a049      	add	r0, pc, #292	; (adr r0, 8000d94 <.text_31>)
 8000c6e:	4770      	bx	lr
 8000c70:	a04a      	add	r0, pc, #296	; (adr r0, 8000d9c <.text_32>)
 8000c72:	4770      	bx	lr
 8000c74:	a04b      	add	r0, pc, #300	; (adr r0, 8000da4 <.text_33>)
 8000c76:	4770      	bx	lr
 8000c78:	a000      	add	r0, pc, #0	; (adr r0, 8000c7c <.text_5>)
 8000c7a:	4770      	bx	lr

08000c7c <.text_5>:
 8000c7c:	00000000 	.word	0x00000000

08000c80 <.text_6>:
 8000c80:	00444441 	.word	0x00444441

08000c84 <.text_7>:
 8000c84:	00004e42 	.word	0x00004e42

08000c88 <.text_8>:
 8000c88:	00555247 	.word	0x00555247

08000c8c <.text_9>:
 8000c8c:	004e524c 	.word	0x004e524c

08000c90 <.text_10>:
 8000c90:	00004c4e 	.word	0x00004c4e

08000c94 <.text_11>:
 8000c94:	00004d53 	.word	0x00004d53

08000c98 <.text_12>:
 8000c98:	00444150 	.word	0x00444150

08000c9c <ai_layer_type_is_valid>:
 8000c9c:	f242 7111 	movw	r1, #10001	; 0x2711
 8000ca0:	1a40      	subs	r0, r0, r1
 8000ca2:	2801      	cmp	r0, #1
 8000ca4:	bf81      	itttt	hi
 8000ca6:	1ec0      	subhi	r0, r0, #3
 8000ca8:	280d      	cmphi	r0, #13
 8000caa:	380f      	subhi	r0, #15
 8000cac:	2809      	cmphi	r0, #9
 8000cae:	d801      	bhi.n	8000cb4 <ai_layer_type_is_valid+0x18>
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	4770      	bx	lr
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	4770      	bx	lr

08000cb8 <ai_layers_forward_all>:
 8000cb8:	b530      	push	{r4, r5, lr}
 8000cba:	4604      	mov	r4, r0
 8000cbc:	b081      	sub	sp, #4
 8000cbe:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8000cc0:	b158      	cbz	r0, 8000cda <ai_layers_forward_all+0x22>
 8000cc2:	6560      	str	r0, [r4, #84]	; 0x54
 8000cc4:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8000cc6:	6929      	ldr	r1, [r5, #16]
 8000cc8:	4628      	mov	r0, r5
 8000cca:	4788      	blx	r1
 8000ccc:	68e8      	ldr	r0, [r5, #12]
 8000cce:	42a8      	cmp	r0, r5
 8000cd0:	bf08      	it	eq
 8000cd2:	2000      	moveq	r0, #0
 8000cd4:	2800      	cmp	r0, #0
 8000cd6:	6560      	str	r0, [r4, #84]	; 0x54
 8000cd8:	d1f4      	bne.n	8000cc4 <ai_layers_forward_all+0xc>
 8000cda:	b001      	add	sp, #4
 8000cdc:	bd30      	pop	{r4, r5, pc}
	...

08000ce0 <.text_15>:
 8000ce0:	564e4f43 	.word	0x564e4f43
 8000ce4:	00004432 	.word	0x00004432

08000ce8 <.text_16>:
 8000ce8:	534e4544 	.word	0x534e4544
 8000cec:	0045      	.short	0x0045
	...

08000cf0 <.text_17>:
 8000cf0:	4d54534c 	.word	0x4d54534c
 8000cf4:	00          	.byte	0x00
 8000cf5:	00          	.byte	0x00
	...

08000cf8 <.text_18>:
 8000cf8:	4d524f4e 	.word	0x4d524f4e
 8000cfc:	00          	.byte	0x00
 8000cfd:	00          	.byte	0x00
	...

08000d00 <.text_19>:
 8000d00:	4954504f 	.word	0x4954504f
 8000d04:	455a494d 	.word	0x455a494d
 8000d08:	4f435f44 	.word	0x4f435f44
 8000d0c:	4432564e 	.word	0x4432564e
 8000d10:	00          	.byte	0x00
 8000d11:	00          	.byte	0x00
	...

08000d14 <.text_20>:
 8000d14:	4e415254 	.word	0x4e415254
 8000d18:	534f5053 	.word	0x534f5053
 8000d1c:	0045      	.short	0x0045
	...

08000d20 <.text_21>:
 8000d20:	4c4f4f50 	.word	0x4c4f4f50
 8000d24:	00          	.byte	0x00
 8000d25:	00          	.byte	0x00
	...

08000d28 <.text_22>:
 8000d28:	494c5053 	.word	0x494c5053
 8000d2c:	0054      	.short	0x0054
	...

08000d30 <.text_23>:
 8000d30:	454d4954 	.word	0x454d4954
 8000d34:	4c45445f 	.word	0x4c45445f
 8000d38:	00005941 	.word	0x00005941

08000d3c <.text_24>:
 8000d3c:	454d4954 	.word	0x454d4954
 8000d40:	5349445f 	.word	0x5349445f
 8000d44:	42495254 	.word	0x42495254
 8000d48:	44455455 	.word	0x44455455
 8000d4c:	00          	.byte	0x00
 8000d4d:	00          	.byte	0x00
	...

08000d50 <.text_25>:
 8000d50:	434e4f43 	.word	0x434e4f43
 8000d54:	00005441 	.word	0x00005441

08000d58 <.text_26>:
 8000d58:	4d4d4547 	.word	0x4d4d4547
 8000d5c:	00          	.byte	0x00
 8000d5d:	00          	.byte	0x00
	...

08000d60 <.text_27>:
 8000d60:	41535055 	.word	0x41535055
 8000d64:	454c504d 	.word	0x454c504d
 8000d68:	00          	.byte	0x00
 8000d69:	00          	.byte	0x00
	...

08000d6c <.text_28>:
 8000d6c:	57544c45 	.word	0x57544c45
 8000d70:	00455349 	.word	0x00455349

08000d74 <.text_29>:
 8000d74:	454e4547 	.word	0x454e4547
 8000d78:	00434952 	.word	0x00434952

08000d7c <.text_30>:
 8000d7c:	54534e49 	.word	0x54534e49
 8000d80:	45434e41 	.word	0x45434e41
 8000d84:	4d524f4e 	.word	0x4d524f4e
 8000d88:	5a494c41 	.word	0x5a494c41
 8000d8c:	4f495441 	.word	0x4f495441
 8000d90:	004e      	.short	0x004e
	...

08000d94 <.text_31>:
 8000d94:	43494c53 	.word	0x43494c53
 8000d98:	0045      	.short	0x0045
	...

08000d9c <.text_32>:
 8000d9c:	454c4954 	.word	0x454c4954
 8000da0:	00          	.byte	0x00
 8000da1:	00          	.byte	0x00
	...

08000da4 <.text_33>:
 8000da4:	55444552 	.word	0x55444552
 8000da8:	00004543 	.word	0x00004543

08000dac <ai_check_custom_types::ref_signatures>:
 8000dac:	84048403                                ....

08000db0 <ai_conv2d_stripe_f32>:
 8000db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000db4:	b098      	sub	sp, #96	; 0x60
 8000db6:	9825      	ldr	r0, [sp, #148]	; 0x94
 8000db8:	2800      	cmp	r0, #0
 8000dba:	f000 82cb 	beq.w	8001354 <ai_conv2d_stripe_f32+0x5a4>
 8000dbe:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8000dc2:	f8dd a0b4 	ldr.w	sl, [sp, #180]	; 0xb4
 8000dc6:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8000dc8:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8000dca:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 8000dcc:	9004      	str	r0, [sp, #16]
 8000dce:	fb07 6a0a 	mla	sl, r7, sl, r6
 8000dd2:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8000dd4:	f9bd 60c0 	ldrsh.w	r6, [sp, #192]	; 0xc0
 8000dd8:	f8cd a014 	str.w	sl, [sp, #20]
 8000ddc:	1904      	adds	r4, r0, r4
 8000dde:	1e64      	subs	r4, r4, #1
 8000de0:	9826      	ldr	r0, [sp, #152]	; 0x98
 8000de2:	9100      	str	r1, [sp, #0]
 8000de4:	fb94 f6f6 	sdiv	r6, r4, r6
 8000de8:	f9bd 40bc 	ldrsh.w	r4, [sp, #188]	; 0xbc
 8000dec:	9217      	str	r2, [sp, #92]	; 0x5c
 8000dee:	4346      	muls	r6, r0
 8000df0:	9616      	str	r6, [sp, #88]	; 0x58
 8000df2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000df6:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8000df8:	9822      	ldr	r0, [sp, #136]	; 0x88
 8000dfa:	9306      	str	r3, [sp, #24]
 8000dfc:	4344      	muls	r4, r0
 8000dfe:	9415      	str	r4, [sp, #84]	; 0x54
 8000e00:	437e      	muls	r6, r7
 8000e02:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8000e06:	437c      	muls	r4, r7
 8000e08:	9414      	str	r4, [sp, #80]	; 0x50
 8000e0a:	4346      	muls	r6, r0
 8000e0c:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8000e10:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8000e12:	960b      	str	r6, [sp, #44]	; 0x2c
 8000e14:	1a24      	subs	r4, r4, r0
 8000e16:	9413      	str	r4, [sp, #76]	; 0x4c
 8000e18:	4604      	mov	r4, r0
 8000e1a:	9826      	ldr	r0, [sp, #152]	; 0x98
 8000e1c:	9e26      	ldr	r6, [sp, #152]	; 0x98
 8000e1e:	4344      	muls	r4, r0
 8000e20:	9412      	str	r4, [sp, #72]	; 0x48
 8000e22:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8000e24:	4344      	muls	r4, r0
 8000e26:	9411      	str	r4, [sp, #68]	; 0x44
 8000e28:	f9bd 00c0 	ldrsh.w	r0, [sp, #192]	; 0xc0
 8000e2c:	f9bd 40bc 	ldrsh.w	r4, [sp, #188]	; 0xbc
 8000e30:	fb14 f000 	smulbb	r0, r4, r0
 8000e34:	900a      	str	r0, [sp, #40]	; 0x28
 8000e36:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8000e38:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000e3a:	fbb4 f0f0 	udiv	r0, r4, r0
 8000e3e:	9010      	str	r0, [sp, #64]	; 0x40
 8000e40:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8000e42:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000e44:	fbb4 f0f0 	udiv	r0, r4, r0
 8000e48:	900f      	str	r0, [sp, #60]	; 0x3c
 8000e4a:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8000e4c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8000e4e:	fbb4 f0f0 	udiv	r0, r4, r0
 8000e52:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8000e54:	900e      	str	r0, [sp, #56]	; 0x38
 8000e56:	4374      	muls	r4, r6
 8000e58:	940d      	str	r4, [sp, #52]	; 0x34
 8000e5a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8000e5c:	1b2d      	subs	r5, r5, r4
 8000e5e:	950c      	str	r5, [sp, #48]	; 0x30
 8000e60:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
 8000e62:	9924      	ldr	r1, [sp, #144]	; 0x90
 8000e64:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8000e66:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8000e68:	427f      	negs	r7, r7
 8000e6a:	bfd8      	it	le
 8000e6c:	2700      	movle	r7, #0
 8000e6e:	1a09      	subs	r1, r1, r0
 8000e70:	4291      	cmp	r1, r2
 8000e72:	bf3d      	ittte	cc
 8000e74:	9824      	ldrcc	r0, [sp, #144]	; 0x90
 8000e76:	9e2c      	ldrcc	r6, [sp, #176]	; 0xb0
 8000e78:	1b86      	subcc	r6, r0, r6
 8000e7a:	4616      	movcs	r6, r2
 8000e7c:	9a05      	ldr	r2, [sp, #20]
 8000e7e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8000e80:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8000e82:	18ba      	adds	r2, r7, r2
 8000e84:	434a      	muls	r2, r1
 8000e86:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000e8a:	9821      	ldr	r0, [sp, #132]	; 0x84
 8000e8c:	b900      	cbnz	r0, 8000e90 <ai_conv2d_stripe_f32+0xe0>
 8000e8e:	9800      	ldr	r0, [sp, #0]
 8000e90:	9001      	str	r0, [sp, #4]
 8000e92:	1bf6      	subs	r6, r6, r7
 8000e94:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000e96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000e98:	2801      	cmp	r0, #1
 8000e9a:	bf04      	itt	eq
 8000e9c:	980a      	ldreq	r0, [sp, #40]	; 0x28
 8000e9e:	2801      	cmpeq	r0, #1
 8000ea0:	f040 80a9 	bne.w	8000ff6 <ai_conv2d_stripe_f32+0x246>
 8000ea4:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8000ea6:	9826      	ldr	r0, [sp, #152]	; 0x98
 8000ea8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000eaa:	1ba4      	subs	r4, r4, r6
 8000eac:	434c      	muls	r4, r1
 8000eae:	1b80      	subs	r0, r0, r6
 8000eb0:	4341      	muls	r1, r0
 8000eb2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8000eb4:	1b40      	subs	r0, r0, r5
 8000eb6:	fb00 fc03 	mul.w	ip, r0, r3
 8000eba:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000ebc:	9b06      	ldr	r3, [sp, #24]
 8000ebe:	4407      	add	r7, r0
 8000ec0:	9822      	ldr	r0, [sp, #136]	; 0x88
 8000ec2:	4347      	muls	r7, r0
 8000ec4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8000ec8:	4370      	muls	r0, r6
 8000eca:	9e01      	ldr	r6, [sp, #4]
 8000ecc:	9b00      	ldr	r3, [sp, #0]
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000ed2:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8000ed6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8000ed8:	bf0c      	ite	eq
 8000eda:	eddf 0aaf 	vldreq	s1, [pc, #700]	; 8001198 <ai_conv2d_stripe_f32+0x3e8>
 8000ede:	eef0 0a40 	vmovne.f32	s1, s0
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	f000 8222 	beq.w	800132c <ai_conv2d_stripe_f32+0x57c>
 8000ee8:	46b0      	mov	r8, r6
 8000eea:	462e      	mov	r6, r5
 8000eec:	4613      	mov	r3, r2
 8000eee:	f8cd c008 	str.w	ip, [sp, #8]
 8000ef2:	461d      	mov	r5, r3
 8000ef4:	f8dd e000 	ldr.w	lr, [sp]
 8000ef8:	9b00      	ldr	r3, [sp, #0]
 8000efa:	463a      	mov	r2, r7
 8000efc:	4682      	mov	sl, r0
 8000efe:	f8cd 9004 	str.w	r9, [sp, #4]
 8000f02:	46c4      	mov	ip, r8
 8000f04:	f02a 0703 	bic.w	r7, sl, #3
 8000f08:	ed9c 1a00 	vldr	s2, [ip]
 8000f0c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8000f10:	2e00      	cmp	r6, #0
 8000f12:	ee21 1a20 	vmul.f32	s2, s2, s1
 8000f16:	dd61      	ble.n	8000fdc <ai_conv2d_stripe_f32+0x22c>
 8000f18:	4630      	mov	r0, r6
 8000f1a:	2f00      	cmp	r7, #0
 8000f1c:	f04f 0900 	mov.w	r9, #0
 8000f20:	f340 801f 	ble.w	8000f62 <ai_conv2d_stripe_f32+0x1b2>
 8000f24:	edd2 4a00 	vldr	s9, [r2]
 8000f28:	ed98 5a00 	vldr	s10, [r8]
 8000f2c:	edd2 3a01 	vldr	s7, [r2, #4]
 8000f30:	ed98 4a01 	vldr	s8, [r8, #4]
 8000f34:	edd2 2a02 	vldr	s5, [r2, #8]
 8000f38:	ed98 3a02 	vldr	s6, [r8, #8]
 8000f3c:	edd2 1a03 	vldr	s3, [r2, #12]
 8000f40:	ed98 2a03 	vldr	s4, [r8, #12]
 8000f44:	ee04 1a85 	vmla.f32	s2, s9, s10
 8000f48:	ee03 1a84 	vmla.f32	s2, s7, s8
 8000f4c:	3210      	adds	r2, #16
 8000f4e:	f109 0904 	add.w	r9, r9, #4
 8000f52:	ee02 1a83 	vmla.f32	s2, s5, s6
 8000f56:	45b9      	cmp	r9, r7
 8000f58:	ee01 1a82 	vmla.f32	s2, s3, s4
 8000f5c:	f108 0810 	add.w	r8, r8, #16
 8000f60:	dbe0      	blt.n	8000f24 <ai_conv2d_stripe_f32+0x174>
 8000f62:	45d1      	cmp	r9, sl
 8000f64:	f280 8034 	bge.w	8000fd0 <ai_conv2d_stripe_f32+0x220>
 8000f68:	f109 0901 	add.w	r9, r9, #1
 8000f6c:	edd2 2a00 	vldr	s5, [r2]
 8000f70:	edd8 1a00 	vldr	s3, [r8]
 8000f74:	1d12      	adds	r2, r2, #4
 8000f76:	45d1      	cmp	r9, sl
 8000f78:	ee02 1aa1 	vmla.f32	s2, s5, s3
 8000f7c:	f108 0804 	add.w	r8, r8, #4
 8000f80:	da26      	bge.n	8000fd0 <ai_conv2d_stripe_f32+0x220>
 8000f82:	f109 0901 	add.w	r9, r9, #1
 8000f86:	ed92 3a00 	vldr	s6, [r2]
 8000f8a:	ed98 2a00 	vldr	s4, [r8]
 8000f8e:	1d12      	adds	r2, r2, #4
 8000f90:	45d1      	cmp	r9, sl
 8000f92:	ee03 1a02 	vmla.f32	s2, s6, s4
 8000f96:	f108 0804 	add.w	r8, r8, #4
 8000f9a:	da19      	bge.n	8000fd0 <ai_conv2d_stripe_f32+0x220>
 8000f9c:	f109 0901 	add.w	r9, r9, #1
 8000fa0:	edd2 2a00 	vldr	s5, [r2]
 8000fa4:	edd8 1a00 	vldr	s3, [r8]
 8000fa8:	1d12      	adds	r2, r2, #4
 8000faa:	45d1      	cmp	r9, sl
 8000fac:	ee02 1aa1 	vmla.f32	s2, s5, s3
 8000fb0:	f108 0804 	add.w	r8, r8, #4
 8000fb4:	da0c      	bge.n	8000fd0 <ai_conv2d_stripe_f32+0x220>
 8000fb6:	f109 0901 	add.w	r9, r9, #1
 8000fba:	ed92 2a00 	vldr	s4, [r2]
 8000fbe:	ed98 3a00 	vldr	s6, [r8]
 8000fc2:	1d12      	adds	r2, r2, #4
 8000fc4:	45d1      	cmp	r9, sl
 8000fc6:	ee02 1a03 	vmla.f32	s2, s4, s6
 8000fca:	f108 0804 	add.w	r8, r8, #4
 8000fce:	dbcb      	blt.n	8000f68 <ai_conv2d_stripe_f32+0x1b8>
 8000fd0:	1e40      	subs	r0, r0, #1
 8000fd2:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8000fd6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8000fda:	d19e      	bne.n	8000f1a <ai_conv2d_stripe_f32+0x16a>
 8000fdc:	9802      	ldr	r0, [sp, #8]
 8000fde:	ed8e 1a00 	vstr	s2, [lr]
 8000fe2:	1e6d      	subs	r5, r5, #1
 8000fe4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8000fe8:	f10e 0e04 	add.w	lr, lr, #4
 8000fec:	f10c 0c04 	add.w	ip, ip, #4
 8000ff0:	d18a      	bne.n	8000f08 <ai_conv2d_stripe_f32+0x158>
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	e19a      	b.n	800132c <ai_conv2d_stripe_f32+0x57c>
 8000ff6:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000ff8:	4288      	cmp	r0, r1
 8000ffa:	bf04      	itt	eq
 8000ffc:	980a      	ldreq	r0, [sp, #40]	; 0x28
 8000ffe:	2801      	cmpeq	r0, #1
 8001000:	f040 80cc 	bne.w	800119c <ai_conv2d_stripe_f32+0x3ec>
 8001004:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001006:	9b06      	ldr	r3, [sp, #24]
 8001008:	9c00      	ldr	r4, [sp, #0]
 800100a:	9002      	str	r0, [sp, #8]
 800100c:	9824      	ldr	r0, [sp, #144]	; 0x90
 800100e:	1b81      	subs	r1, r0, r6
 8001010:	9822      	ldr	r0, [sp, #136]	; 0x88
 8001012:	fb01 fa00 	mul.w	sl, r1, r0
 8001016:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001018:	9926      	ldr	r1, [sp, #152]	; 0x98
 800101a:	eba0 0c06 	sub.w	ip, r0, r6
 800101e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8001020:	1b40      	subs	r0, r0, r5
 8001022:	4341      	muls	r1, r0
 8001024:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001026:	183f      	adds	r7, r7, r0
 8001028:	eb03 0087 	add.w	r0, r3, r7, lsl #2
 800102c:	9b01      	ldr	r3, [sp, #4]
 800102e:	42a3      	cmp	r3, r4
 8001030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001032:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8001036:	bf0c      	ite	eq
 8001038:	eddf 0a57 	vldreq	s1, [pc, #348]	; 8001198 <ai_conv2d_stripe_f32+0x3e8>
 800103c:	eef0 0a40 	vmovne.f32	s1, s0
 8001040:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001042:	2400      	movs	r4, #0
 8001044:	eb0e 0283 	add.w	r2, lr, r3, lsl #2
 8001048:	4596      	cmp	lr, r2
 800104a:	9203      	str	r2, [sp, #12]
 800104c:	f080 816e 	bcs.w	800132c <ai_conv2d_stripe_f32+0x57c>
 8001050:	9b00      	ldr	r3, [sp, #0]
 8001052:	9a02      	ldr	r2, [sp, #8]
 8001054:	2a00      	cmp	r2, #0
 8001056:	f000 8097 	beq.w	8001188 <ai_conv2d_stripe_f32+0x3d8>
 800105a:	9a01      	ldr	r2, [sp, #4]
 800105c:	9500      	str	r5, [sp, #0]
 800105e:	eb02 0784 	add.w	r7, r2, r4, lsl #2
 8001062:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 8001066:	f8dd b008 	ldr.w	fp, [sp, #8]
 800106a:	9108      	str	r1, [sp, #32]
 800106c:	f8cd e01c 	str.w	lr, [sp, #28]
 8001070:	4615      	mov	r5, r2
 8001072:	9a00      	ldr	r2, [sp, #0]
 8001074:	ed97 1a00 	vldr	s2, [r7]
 8001078:	9907      	ldr	r1, [sp, #28]
 800107a:	2a00      	cmp	r2, #0
 800107c:	ee21 1a20 	vmul.f32	s2, s2, s1
 8001080:	f340 8072 	ble.w	8001168 <ai_conv2d_stripe_f32+0x3b8>
 8001084:	f026 0e03 	bic.w	lr, r6, #3
 8001088:	f1be 0f00 	cmp.w	lr, #0
 800108c:	f04f 0900 	mov.w	r9, #0
 8001090:	f340 8029 	ble.w	80010e6 <ai_conv2d_stripe_f32+0x336>
 8001094:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
 8001098:	edd0 1a00 	vldr	s3, [r0]
 800109c:	ed91 2a00 	vldr	s4, [r1]
 80010a0:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80010a4:	ee01 1a82 	vmla.f32	s2, s3, s4
 80010a8:	edd0 1a01 	vldr	s3, [r0, #4]
 80010ac:	ed91 2a00 	vldr	s4, [r1]
 80010b0:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80010b4:	ee01 1a82 	vmla.f32	s2, s3, s4
 80010b8:	edd0 1a02 	vldr	s3, [r0, #8]
 80010bc:	ed91 2a00 	vldr	s4, [r1]
 80010c0:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80010c4:	ee01 1a82 	vmla.f32	s2, s3, s4
 80010c8:	f109 0904 	add.w	r9, r9, #4
 80010cc:	edd0 1a03 	vldr	s3, [r0, #12]
 80010d0:	ed91 2a00 	vldr	s4, [r1]
 80010d4:	3010      	adds	r0, #16
 80010d6:	45f1      	cmp	r9, lr
 80010d8:	ee01 1a82 	vmla.f32	s2, s3, s4
 80010dc:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80010e0:	dbda      	blt.n	8001098 <ai_conv2d_stripe_f32+0x2e8>
 80010e2:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
 80010e6:	45b1      	cmp	r9, r6
 80010e8:	f280 8038 	bge.w	800115c <ai_conv2d_stripe_f32+0x3ac>
 80010ec:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 80010f0:	f109 0901 	add.w	r9, r9, #1
 80010f4:	edd0 1a00 	vldr	s3, [r0]
 80010f8:	ed91 2a00 	vldr	s4, [r1]
 80010fc:	1d00      	adds	r0, r0, #4
 80010fe:	45b1      	cmp	r9, r6
 8001100:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001104:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8001108:	da26      	bge.n	8001158 <ai_conv2d_stripe_f32+0x3a8>
 800110a:	f109 0901 	add.w	r9, r9, #1
 800110e:	ed90 2a00 	vldr	s4, [r0]
 8001112:	edd1 1a00 	vldr	s3, [r1]
 8001116:	1d00      	adds	r0, r0, #4
 8001118:	45b1      	cmp	r9, r6
 800111a:	ee02 1a21 	vmla.f32	s2, s4, s3
 800111e:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8001122:	da19      	bge.n	8001158 <ai_conv2d_stripe_f32+0x3a8>
 8001124:	f109 0901 	add.w	r9, r9, #1
 8001128:	edd0 1a00 	vldr	s3, [r0]
 800112c:	ed91 2a00 	vldr	s4, [r1]
 8001130:	1d00      	adds	r0, r0, #4
 8001132:	45b1      	cmp	r9, r6
 8001134:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001138:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 800113c:	da0c      	bge.n	8001158 <ai_conv2d_stripe_f32+0x3a8>
 800113e:	f109 0901 	add.w	r9, r9, #1
 8001142:	ed90 2a00 	vldr	s4, [r0]
 8001146:	edd1 1a00 	vldr	s3, [r1]
 800114a:	1d00      	adds	r0, r0, #4
 800114c:	45b1      	cmp	r9, r6
 800114e:	ee02 1a21 	vmla.f32	s2, s4, s3
 8001152:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8001156:	dbcb      	blt.n	80010f0 <ai_conv2d_stripe_f32+0x340>
 8001158:	f8cd e088 	str.w	lr, [sp, #136]	; 0x88
 800115c:	1e52      	subs	r2, r2, #1
 800115e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8001162:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8001166:	d18d      	bne.n	8001084 <ai_conv2d_stripe_f32+0x2d4>
 8001168:	9908      	ldr	r1, [sp, #32]
 800116a:	ed85 1a00 	vstr	s2, [r5]
 800116e:	1c64      	adds	r4, r4, #1
 8001170:	1d2d      	adds	r5, r5, #4
 8001172:	1d3f      	adds	r7, r7, #4
 8001174:	f1bb 0b01 	subs.w	fp, fp, #1
 8001178:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800117c:	f47f af79 	bne.w	8001072 <ai_conv2d_stripe_f32+0x2c2>
 8001180:	9d00      	ldr	r5, [sp, #0]
 8001182:	9908      	ldr	r1, [sp, #32]
 8001184:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8001188:	9a03      	ldr	r2, [sp, #12]
 800118a:	f10e 0e04 	add.w	lr, lr, #4
 800118e:	4596      	cmp	lr, r2
 8001190:	f4bf af2f 	bcs.w	8000ff2 <ai_conv2d_stripe_f32+0x242>
 8001194:	e75d      	b.n	8001052 <ai_conv2d_stripe_f32+0x2a2>
 8001196:	bf00      	nop
 8001198:	00000000 	.word	0x00000000
 800119c:	f9bd 10bc 	ldrsh.w	r1, [sp, #188]	; 0xbc
 80011a0:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 80011a4:	4608      	mov	r0, r1
 80011a6:	1bcb      	subs	r3, r1, r7
 80011a8:	fb97 f4f0 	sdiv	r4, r7, r0
 80011ac:	fb00 3004 	mla	r0, r0, r4, r3
 80011b0:	fb90 faf1 	sdiv	sl, r0, r1
 80011b4:	fb01 0a1a 	mls	sl, r1, sl, r0
 80011b8:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 80011bc:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80011be:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80011c0:	fb90 f0f3 	sdiv	r0, r0, r3
 80011c4:	fb03 4000 	mla	r0, r3, r0, r4
 80011c8:	1876      	adds	r6, r6, r1
 80011ca:	fb90 fbf3 	sdiv	fp, r0, r3
 80011ce:	1e76      	subs	r6, r6, #1
 80011d0:	187f      	adds	r7, r7, r1
 80011d2:	fb03 0b1b 	mls	fp, r3, fp, r0
 80011d6:	eba6 060a 	sub.w	r6, r6, sl
 80011da:	eba5 050b 	sub.w	r5, r5, fp
 80011de:	1e7f      	subs	r7, r7, #1
 80011e0:	fb96 f0f1 	sdiv	r0, r6, r1
 80011e4:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80011e6:	9c22      	ldr	r4, [sp, #136]	; 0x88
 80011e8:	195d      	adds	r5, r3, r5
 80011ea:	1e6d      	subs	r5, r5, #1
 80011ec:	fb00 9911 	mls	r9, r0, r1, r9
 80011f0:	fb97 f1f1 	sdiv	r1, r7, r1
 80011f4:	fb95 fcf3 	sdiv	ip, r5, r3
 80011f8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80011fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80011fc:	9509      	str	r5, [sp, #36]	; 0x24
 80011fe:	eba6 060c 	sub.w	r6, r6, ip
 8001202:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8001204:	1a2d      	subs	r5, r5, r0
 8001206:	fb05 f803 	mul.w	r8, r5, r3
 800120a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800120c:	435d      	muls	r5, r3
 800120e:	fb06 fe05 	mul.w	lr, r6, r5
 8001212:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8001214:	9e06      	ldr	r6, [sp, #24]
 8001216:	194d      	adds	r5, r1, r5
 8001218:	fb04 f909 	mul.w	r9, r4, r9
 800121c:	435d      	muls	r5, r3
 800121e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8001220:	eb06 0185 	add.w	r1, r6, r5, lsl #2
 8001224:	9d01      	ldr	r5, [sp, #4]
 8001226:	9e00      	ldr	r6, [sp, #0]
 8001228:	1ae4      	subs	r4, r4, r3
 800122a:	42b5      	cmp	r5, r6
 800122c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800122e:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8001230:	445d      	add	r5, fp
 8001232:	fb06 aa05 	mla	sl, r6, r5, sl
 8001236:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8001238:	fb0a f505 	mul.w	r5, sl, r5
 800123c:	bf0c      	ite	eq
 800123e:	eddf 0a9e 	vldreq	s1, [pc, #632]	; 80014b8 <.text_5>
 8001242:	eef0 0a40 	vmovne.f32	s1, s0
 8001246:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 800124a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800124c:	2500      	movs	r5, #0
 800124e:	2a00      	cmp	r2, #0
 8001250:	d06c      	beq.n	800132c <ai_conv2d_stripe_f32+0x57c>
 8001252:	9202      	str	r2, [sp, #8]
 8001254:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001256:	2a00      	cmp	r2, #0
 8001258:	d062      	beq.n	8001320 <ai_conv2d_stripe_f32+0x570>
 800125a:	9a01      	ldr	r2, [sp, #4]
 800125c:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 8001260:	9a00      	ldr	r2, [sp, #0]
 8001262:	f8cd c00c 	str.w	ip, [sp, #12]
 8001266:	eb02 0a85 	add.w	sl, r2, r5, lsl #2
 800126a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800126c:	f8cd e020 	str.w	lr, [sp, #32]
 8001270:	f8cd 701c 	str.w	r7, [sp, #28]
 8001274:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8001278:	ed96 1a00 	vldr	s2, [r6]
 800127c:	9f07      	ldr	r7, [sp, #28]
 800127e:	f1be 0f00 	cmp.w	lr, #0
 8001282:	ee21 1a20 	vmul.f32	s2, s2, s1
 8001286:	dd3b      	ble.n	8001300 <ai_conv2d_stripe_f32+0x550>
 8001288:	2800      	cmp	r0, #0
 800128a:	dd32      	ble.n	80012f2 <ai_conv2d_stripe_f32+0x542>
 800128c:	ea4f 0c00 	mov.w	ip, r0
 8001290:	eb07 0b83 	add.w	fp, r7, r3, lsl #2
 8001294:	455f      	cmp	r7, fp
 8001296:	d227      	bcs.n	80012e8 <ai_conv2d_stripe_f32+0x538>
 8001298:	edd1 2a00 	vldr	s5, [r1]
 800129c:	edd7 1a00 	vldr	s3, [r7]
 80012a0:	1d09      	adds	r1, r1, #4
 80012a2:	1d3f      	adds	r7, r7, #4
 80012a4:	455f      	cmp	r7, fp
 80012a6:	ee02 1aa1 	vmla.f32	s2, s5, s3
 80012aa:	d21d      	bcs.n	80012e8 <ai_conv2d_stripe_f32+0x538>
 80012ac:	ed91 3a00 	vldr	s6, [r1]
 80012b0:	ed97 2a00 	vldr	s4, [r7]
 80012b4:	1d09      	adds	r1, r1, #4
 80012b6:	1d3f      	adds	r7, r7, #4
 80012b8:	455f      	cmp	r7, fp
 80012ba:	ee03 1a02 	vmla.f32	s2, s6, s4
 80012be:	d213      	bcs.n	80012e8 <ai_conv2d_stripe_f32+0x538>
 80012c0:	edd1 2a00 	vldr	s5, [r1]
 80012c4:	edd7 1a00 	vldr	s3, [r7]
 80012c8:	1d09      	adds	r1, r1, #4
 80012ca:	1d3f      	adds	r7, r7, #4
 80012cc:	455f      	cmp	r7, fp
 80012ce:	ee02 1aa1 	vmla.f32	s2, s5, s3
 80012d2:	d209      	bcs.n	80012e8 <ai_conv2d_stripe_f32+0x538>
 80012d4:	ed91 2a00 	vldr	s4, [r1]
 80012d8:	ed97 3a00 	vldr	s6, [r7]
 80012dc:	1d09      	adds	r1, r1, #4
 80012de:	1d3f      	adds	r7, r7, #4
 80012e0:	455f      	cmp	r7, fp
 80012e2:	ee02 1a03 	vmla.f32	s2, s4, s6
 80012e6:	d3d7      	bcc.n	8001298 <ai_conv2d_stripe_f32+0x4e8>
 80012e8:	f1bc 0c01 	subs.w	ip, ip, #1
 80012ec:	eb07 0784 	add.w	r7, r7, r4, lsl #2
 80012f0:	d1ce      	bne.n	8001290 <ai_conv2d_stripe_f32+0x4e0>
 80012f2:	f1be 0e01 	subs.w	lr, lr, #1
 80012f6:	eb07 0789 	add.w	r7, r7, r9, lsl #2
 80012fa:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80012fe:	d1c3      	bne.n	8001288 <ai_conv2d_stripe_f32+0x4d8>
 8001300:	9f08      	ldr	r7, [sp, #32]
 8001302:	1c6d      	adds	r5, r5, #1
 8001304:	1d36      	adds	r6, r6, #4
 8001306:	ed8a 1a00 	vstr	s2, [sl]
 800130a:	1e52      	subs	r2, r2, #1
 800130c:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 8001310:	f10a 0a04 	add.w	sl, sl, #4
 8001314:	d1ae      	bne.n	8001274 <ai_conv2d_stripe_f32+0x4c4>
 8001316:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800131a:	f8dd e020 	ldr.w	lr, [sp, #32]
 800131e:	9f07      	ldr	r7, [sp, #28]
 8001320:	9a02      	ldr	r2, [sp, #8]
 8001322:	1e52      	subs	r2, r2, #1
 8001324:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8001328:	9202      	str	r2, [sp, #8]
 800132a:	d193      	bne.n	8001254 <ai_conv2d_stripe_f32+0x4a4>
 800132c:	9800      	ldr	r0, [sp, #0]
 800132e:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8001330:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8001334:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8001336:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	; 0xa0
 800133a:	9200      	str	r2, [sp, #0]
 800133c:	1841      	adds	r1, r0, r1
 800133e:	912c      	str	r1, [sp, #176]	; 0xb0
 8001340:	9805      	ldr	r0, [sp, #20]
 8001342:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	; 0xa0
 8001346:	1841      	adds	r1, r0, r1
 8001348:	9804      	ldr	r0, [sp, #16]
 800134a:	9105      	str	r1, [sp, #20]
 800134c:	1e40      	subs	r0, r0, #1
 800134e:	9004      	str	r0, [sp, #16]
 8001350:	f47f ad86 	bne.w	8000e60 <ai_conv2d_stripe_f32+0xb0>
 8001354:	b018      	add	sp, #96	; 0x60
 8001356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800135a <func_dummy>:
 800135a:	4770      	bx	lr

0800135c <ai_dict8_dot_array_f32>:
 800135c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001360:	b081      	sub	sp, #4
 8001362:	4682      	mov	sl, r0
 8001364:	ed2d 8b02 	vpush	{d8}
 8001368:	4615      	mov	r5, r2
 800136a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800136c:	08e0      	lsrs	r0, r4, #3
 800136e:	460f      	mov	r7, r1
 8001370:	461a      	mov	r2, r3
 8001372:	ed9f 0a51 	vldr	s0, [pc, #324]	; 80014b8 <.text_5>
 8001376:	d052      	beq.n	800141e <ai_dict8_dot_array_f32+0xc2>
 8001378:	4629      	mov	r1, r5
 800137a:	783b      	ldrb	r3, [r7, #0]
 800137c:	787d      	ldrb	r5, [r7, #1]
 800137e:	78be      	ldrb	r6, [r7, #2]
 8001380:	f897 b003 	ldrb.w	fp, [r7, #3]
 8001384:	ed92 8a00 	vldr	s16, [r2]
 8001388:	ed92 7a01 	vldr	s14, [r2, #4]
 800138c:	f817 cf04 	ldrb.w	ip, [r7, #4]!
 8001390:	ed92 6a02 	vldr	s12, [r2, #8]
 8001394:	ed92 5a03 	vldr	s10, [r2, #12]
 8001398:	f897 e001 	ldrb.w	lr, [r7, #1]
 800139c:	f897 8002 	ldrb.w	r8, [r7, #2]
 80013a0:	f897 9003 	ldrb.w	r9, [r7, #3]
 80013a4:	ed92 4a04 	vldr	s8, [r2, #16]
 80013a8:	ed92 3a05 	vldr	s6, [r2, #20]
 80013ac:	ed92 2a06 	vldr	s4, [r2, #24]
 80013b0:	ed92 1a07 	vldr	s2, [r2, #28]
 80013b4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80013b8:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 80013bc:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80013c0:	edd3 7a00 	vldr	s15, [r3]
 80013c4:	edd5 6a00 	vldr	s13, [r5]
 80013c8:	eb01 0b8b 	add.w	fp, r1, fp, lsl #2
 80013cc:	ee07 0a88 	vmla.f32	s0, s15, s16
 80013d0:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 80013d4:	edd6 5a00 	vldr	s11, [r6]
 80013d8:	eddb 4a00 	vldr	s9, [fp]
 80013dc:	eddc 3a00 	vldr	s7, [ip]
 80013e0:	ee06 0a87 	vmla.f32	s0, s13, s14
 80013e4:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
 80013e8:	ee05 0a86 	vmla.f32	s0, s11, s12
 80013ec:	eb01 0888 	add.w	r8, r1, r8, lsl #2
 80013f0:	ee04 0a85 	vmla.f32	s0, s9, s10
 80013f4:	eb01 0989 	add.w	r9, r1, r9, lsl #2
 80013f8:	edde 2a00 	vldr	s5, [lr]
 80013fc:	edd8 1a00 	vldr	s3, [r8]
 8001400:	edd9 0a00 	vldr	s1, [r9]
 8001404:	ee03 0a84 	vmla.f32	s0, s7, s8
 8001408:	1d3f      	adds	r7, r7, #4
 800140a:	ee02 0a83 	vmla.f32	s0, s5, s6
 800140e:	3220      	adds	r2, #32
 8001410:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001414:	1e40      	subs	r0, r0, #1
 8001416:	ee00 0a81 	vmla.f32	s0, s1, s2
 800141a:	d1ae      	bne.n	800137a <ai_dict8_dot_array_f32+0x1e>
 800141c:	460d      	mov	r5, r1
 800141e:	f014 0007 	ands.w	r0, r4, #7
 8001422:	d03e      	beq.n	80014a2 <ai_dict8_dot_array_f32+0x146>
 8001424:	f010 0103 	ands.w	r1, r0, #3
 8001428:	f000 800d 	beq.w	8001446 <ai_dict8_dot_array_f32+0xea>
 800142c:	f817 3b01 	ldrb.w	r3, [r7], #1
 8001430:	ed92 1a00 	vldr	s2, [r2]
 8001434:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 8001438:	1d12      	adds	r2, r2, #4
 800143a:	edd6 0a00 	vldr	s1, [r6]
 800143e:	1e49      	subs	r1, r1, #1
 8001440:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001444:	d1f2      	bne.n	800142c <ai_dict8_dot_array_f32+0xd0>
 8001446:	0880      	lsrs	r0, r0, #2
 8001448:	f000 802b 	beq.w	80014a2 <ai_dict8_dot_array_f32+0x146>
 800144c:	f817 3b01 	ldrb.w	r3, [r7], #1
 8001450:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001454:	ed92 1a00 	vldr	s2, [r2]
 8001458:	edd2 0a01 	vldr	s1, [r2, #4]
 800145c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001460:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8001464:	ed93 2a00 	vldr	s4, [r3]
 8001468:	edd1 1a00 	vldr	s3, [r1]
 800146c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001470:	f817 3b01 	ldrb.w	r3, [r7], #1
 8001474:	ee02 0a01 	vmla.f32	s0, s4, s2
 8001478:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800147c:	ee01 0aa0 	vmla.f32	s0, s3, s1
 8001480:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001484:	edd2 0a02 	vldr	s1, [r2, #8]
 8001488:	ed91 2a00 	vldr	s4, [r1]
 800148c:	ed92 1a03 	vldr	s2, [r2, #12]
 8001490:	edd3 1a00 	vldr	s3, [r3]
 8001494:	3210      	adds	r2, #16
 8001496:	ee02 0a20 	vmla.f32	s0, s4, s1
 800149a:	1e40      	subs	r0, r0, #1
 800149c:	ee01 0a81 	vmla.f32	s0, s3, s2
 80014a0:	d1d4      	bne.n	800144c <ai_dict8_dot_array_f32+0xf0>
 80014a2:	edda 0a00 	vldr	s1, [sl]
 80014a6:	ee30 0a80 	vadd.f32	s0, s1, s0
 80014aa:	ed8a 0a00 	vstr	s0, [sl]
 80014ae:	ecbd 8b02 	vpop	{d8}
 80014b2:	b001      	add	sp, #4
 80014b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080014b8 <.text_5>:
 80014b8:	00000000 	.word	0x00000000

080014bc <ai_dict4_dot_array_f32>:
 80014bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014c0:	ed2d 8b02 	vpush	{d8}
 80014c4:	4680      	mov	r8, r0
 80014c6:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 80014ca:	ea4f 005c 	mov.w	r0, ip, lsr #1
 80014ce:	461e      	mov	r6, r3
 80014d0:	0040      	lsls	r0, r0, #1
 80014d2:	ea5f 03dc 	movs.w	r3, ip, lsr #3
 80014d6:	460c      	mov	r4, r1
 80014d8:	4615      	mov	r5, r2
 80014da:	eb06 0e80 	add.w	lr, r6, r0, lsl #2
 80014de:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8001620 <.text_7>
 80014e2:	d053      	beq.n	800158c <ai_dict4_dot_array_f32+0xd0>
 80014e4:	ed96 8a00 	vldr	s16, [r6]
 80014e8:	ed96 7a01 	vldr	s14, [r6, #4]
 80014ec:	ed96 6a02 	vldr	s12, [r6, #8]
 80014f0:	ed96 5a03 	vldr	s10, [r6, #12]
 80014f4:	7820      	ldrb	r0, [r4, #0]
 80014f6:	7861      	ldrb	r1, [r4, #1]
 80014f8:	78a2      	ldrb	r2, [r4, #2]
 80014fa:	78e7      	ldrb	r7, [r4, #3]
 80014fc:	ed96 4a04 	vldr	s8, [r6, #16]
 8001500:	ed96 3a05 	vldr	s6, [r6, #20]
 8001504:	ed96 2a06 	vldr	s4, [r6, #24]
 8001508:	ed96 1a07 	vldr	s2, [r6, #28]
 800150c:	f007 090f 	and.w	r9, r7, #15
 8001510:	093f      	lsrs	r7, r7, #4
 8001512:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8001516:	eb05 0a89 	add.w	sl, r5, r9, lsl #2
 800151a:	edd7 1a00 	vldr	s3, [r7]
 800151e:	edda 0a00 	vldr	s1, [sl]
 8001522:	f002 070f 	and.w	r7, r2, #15
 8001526:	0912      	lsrs	r2, r2, #4
 8001528:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800152c:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8001530:	edd2 3a00 	vldr	s7, [r2]
 8001534:	edd7 2a00 	vldr	s5, [r7]
 8001538:	f001 020f 	and.w	r2, r1, #15
 800153c:	0909      	lsrs	r1, r1, #4
 800153e:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8001542:	eb05 0782 	add.w	r7, r5, r2, lsl #2
 8001546:	edd1 5a00 	vldr	s11, [r1]
 800154a:	edd7 4a00 	vldr	s9, [r7]
 800154e:	f000 010f 	and.w	r1, r0, #15
 8001552:	0900      	lsrs	r0, r0, #4
 8001554:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8001558:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 800155c:	edd0 7a00 	vldr	s15, [r0]
 8001560:	edd2 6a00 	vldr	s13, [r2]
 8001564:	ee07 0a88 	vmla.f32	s0, s15, s16
 8001568:	ee06 0a87 	vmla.f32	s0, s13, s14
 800156c:	ee05 0a86 	vmla.f32	s0, s11, s12
 8001570:	ee04 0a85 	vmla.f32	s0, s9, s10
 8001574:	ee03 0a84 	vmla.f32	s0, s7, s8
 8001578:	1d24      	adds	r4, r4, #4
 800157a:	ee02 0a83 	vmla.f32	s0, s5, s6
 800157e:	3620      	adds	r6, #32
 8001580:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001584:	1e5b      	subs	r3, r3, #1
 8001586:	ee00 0a81 	vmla.f32	s0, s1, s2
 800158a:	d1ab      	bne.n	80014e4 <ai_dict4_dot_array_f32+0x28>
 800158c:	4576      	cmp	r6, lr
 800158e:	d22f      	bcs.n	80015f0 <ai_dict4_dot_array_f32+0x134>
 8001590:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001594:	edd6 1a00 	vldr	s3, [r6]
 8001598:	edd6 0a01 	vldr	s1, [r6, #4]
 800159c:	f000 010f 	and.w	r1, r0, #15
 80015a0:	0900      	lsrs	r0, r0, #4
 80015a2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80015a6:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 80015aa:	ed90 2a00 	vldr	s4, [r0]
 80015ae:	ed92 1a00 	vldr	s2, [r2]
 80015b2:	3608      	adds	r6, #8
 80015b4:	ee02 0a21 	vmla.f32	s0, s4, s3
 80015b8:	4576      	cmp	r6, lr
 80015ba:	ee01 0a20 	vmla.f32	s0, s2, s1
 80015be:	d217      	bcs.n	80015f0 <ai_dict4_dot_array_f32+0x134>
 80015c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80015c4:	ed96 1a00 	vldr	s2, [r6]
 80015c8:	ed96 2a01 	vldr	s4, [r6, #4]
 80015cc:	f000 010f 	and.w	r1, r0, #15
 80015d0:	0900      	lsrs	r0, r0, #4
 80015d2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80015d6:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 80015da:	edd0 1a00 	vldr	s3, [r0]
 80015de:	edd2 0a00 	vldr	s1, [r2]
 80015e2:	3608      	adds	r6, #8
 80015e4:	ee01 0a81 	vmla.f32	s0, s3, s2
 80015e8:	4576      	cmp	r6, lr
 80015ea:	ee00 0a82 	vmla.f32	s0, s1, s4
 80015ee:	d3cf      	bcc.n	8001590 <ai_dict4_dot_array_f32+0xd4>
 80015f0:	ea5f 70cc 	movs.w	r0, ip, lsl #31
 80015f4:	d509      	bpl.n	800160a <ai_dict4_dot_array_f32+0x14e>
 80015f6:	7821      	ldrb	r1, [r4, #0]
 80015f8:	ed96 1a00 	vldr	s2, [r6]
 80015fc:	0909      	lsrs	r1, r1, #4
 80015fe:	eb05 0081 	add.w	r0, r5, r1, lsl #2
 8001602:	edd0 0a00 	vldr	s1, [r0]
 8001606:	ee00 0a81 	vmla.f32	s0, s1, s2
 800160a:	edd8 1a00 	vldr	s3, [r8]
 800160e:	ee31 0a80 	vadd.f32	s0, s3, s0
 8001612:	ed88 0a00 	vstr	s0, [r8]
 8001616:	ecbd 8b02 	vpop	{d8}
 800161a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08001620 <.text_7>:
 8001620:	00000000 	.word	0x00000000

08001624 <ai_dict_decompress_f32>:
 8001624:	b4f0      	push	{r4, r5, r6, r7}
 8001626:	4604      	mov	r4, r0
 8001628:	9805      	ldr	r0, [sp, #20]
 800162a:	9e04      	ldr	r6, [sp, #16]
 800162c:	2b04      	cmp	r3, #4
 800162e:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8001632:	d003      	beq.n	800163c <ai_dict_decompress_f32+0x18>
 8001634:	2b08      	cmp	r3, #8
 8001636:	d03e      	beq.n	80016b6 <ai_dict_decompress_f32+0x92>
 8001638:	bcf0      	pop	{r4, r5, r6, r7}
 800163a:	4770      	bx	lr
 800163c:	42ac      	cmp	r4, r5
 800163e:	d259      	bcs.n	80016f4 <ai_dict_decompress_f32+0xd0>
 8001640:	0870      	lsrs	r0, r6, #1
 8001642:	d02e      	beq.n	80016a2 <ai_dict_decompress_f32+0x7e>
 8001644:	07c3      	lsls	r3, r0, #31
 8001646:	d50c      	bpl.n	8001662 <ai_dict_decompress_f32+0x3e>
 8001648:	780f      	ldrb	r7, [r1, #0]
 800164a:	093f      	lsrs	r7, r7, #4
 800164c:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 8001650:	6023      	str	r3, [r4, #0]
 8001652:	f811 7b01 	ldrb.w	r7, [r1], #1
 8001656:	f007 070f 	and.w	r7, r7, #15
 800165a:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 800165e:	6063      	str	r3, [r4, #4]
 8001660:	3408      	adds	r4, #8
 8001662:	0840      	lsrs	r0, r0, #1
 8001664:	d01d      	beq.n	80016a2 <ai_dict_decompress_f32+0x7e>
 8001666:	780b      	ldrb	r3, [r1, #0]
 8001668:	091b      	lsrs	r3, r3, #4
 800166a:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 800166e:	6027      	str	r7, [r4, #0]
 8001670:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001674:	f003 030f 	and.w	r3, r3, #15
 8001678:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 800167c:	6067      	str	r7, [r4, #4]
 800167e:	f104 0308 	add.w	r3, r4, #8
 8001682:	780c      	ldrb	r4, [r1, #0]
 8001684:	0924      	lsrs	r4, r4, #4
 8001686:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 800168a:	601f      	str	r7, [r3, #0]
 800168c:	1e40      	subs	r0, r0, #1
 800168e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001692:	f004 040f 	and.w	r4, r4, #15
 8001696:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 800169a:	605f      	str	r7, [r3, #4]
 800169c:	f103 0408 	add.w	r4, r3, #8
 80016a0:	d1e1      	bne.n	8001666 <ai_dict_decompress_f32+0x42>
 80016a2:	07f0      	lsls	r0, r6, #31
 80016a4:	d5ca      	bpl.n	800163c <ai_dict_decompress_f32+0x18>
 80016a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80016aa:	091b      	lsrs	r3, r3, #4
 80016ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80016b0:	f844 0b04 	str.w	r0, [r4], #4
 80016b4:	e7c2      	b.n	800163c <ai_dict_decompress_f32+0x18>
 80016b6:	42ac      	cmp	r4, r5
 80016b8:	d21c      	bcs.n	80016f4 <ai_dict_decompress_f32+0xd0>
 80016ba:	7808      	ldrb	r0, [r1, #0]
 80016bc:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80016c0:	6020      	str	r0, [r4, #0]
 80016c2:	1d20      	adds	r0, r4, #4
 80016c4:	42a8      	cmp	r0, r5
 80016c6:	bf3f      	itttt	cc
 80016c8:	784c      	ldrbcc	r4, [r1, #1]
 80016ca:	f852 3024 	ldrcc.w	r3, [r2, r4, lsl #2]
 80016ce:	f840 3b04 	strcc.w	r3, [r0], #4
 80016d2:	42a8      	cmpcc	r0, r5
 80016d4:	d20e      	bcs.n	80016f4 <ai_dict_decompress_f32+0xd0>
 80016d6:	788b      	ldrb	r3, [r1, #2]
 80016d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016dc:	f840 3b04 	str.w	r3, [r0], #4
 80016e0:	42a8      	cmp	r0, r5
 80016e2:	d207      	bcs.n	80016f4 <ai_dict_decompress_f32+0xd0>
 80016e4:	78cc      	ldrb	r4, [r1, #3]
 80016e6:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 80016ea:	1d09      	adds	r1, r1, #4
 80016ec:	1d04      	adds	r4, r0, #4
 80016ee:	42ac      	cmp	r4, r5
 80016f0:	6003      	str	r3, [r0, #0]
 80016f2:	d3e2      	bcc.n	80016ba <ai_dict_decompress_f32+0x96>
 80016f4:	bcf0      	pop	{r4, r5, r6, r7}
 80016f6:	4770      	bx	lr

080016f8 <forward_conv2d>:
 80016f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016fc:	4605      	mov	r5, r0
 80016fe:	b0a9      	sub	sp, #164	; 0xa4
 8001700:	696b      	ldr	r3, [r5, #20]
 8001702:	8819      	ldrh	r1, [r3, #0]
 8001704:	2900      	cmp	r1, #0
 8001706:	bf1a      	itte	ne
 8001708:	6858      	ldrne	r0, [r3, #4]
 800170a:	1d00      	addne	r0, r0, #4
 800170c:	2004      	moveq	r0, #4
 800170e:	6800      	ldr	r0, [r0, #0]
 8001710:	2800      	cmp	r0, #0
 8001712:	bf14      	ite	ne
 8001714:	6802      	ldrne	r2, [r0, #0]
 8001716:	2200      	moveq	r2, #0
 8001718:	2901      	cmp	r1, #1
 800171a:	bfc6      	itte	gt
 800171c:	6858      	ldrgt	r0, [r3, #4]
 800171e:	3010      	addgt	r0, #16
 8001720:	2004      	movle	r0, #4
 8001722:	6800      	ldr	r0, [r0, #0]
 8001724:	2800      	cmp	r0, #0
 8001726:	bf14      	ite	ne
 8001728:	f8d0 a000 	ldrne.w	sl, [r0]
 800172c:	f04f 0a00 	moveq.w	sl, #0
 8001730:	2902      	cmp	r1, #2
 8001732:	bfc6      	itte	gt
 8001734:	6858      	ldrgt	r0, [r3, #4]
 8001736:	f100 041c 	addgt.w	r4, r0, #28
 800173a:	2404      	movle	r4, #4
 800173c:	6820      	ldr	r0, [r4, #0]
 800173e:	2800      	cmp	r0, #0
 8001740:	bf14      	ite	ne
 8001742:	6806      	ldrne	r6, [r0, #0]
 8001744:	2600      	moveq	r6, #0
 8001746:	2902      	cmp	r1, #2
 8001748:	dd0a      	ble.n	8001760 <forward_conv2d+0x68>
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f113 0118 	adds.w	r1, r3, #24
 8001750:	d006      	beq.n	8001760 <forward_conv2d+0x68>
 8001752:	8b19      	ldrh	r1, [r3, #24]
 8001754:	2901      	cmp	r1, #1
 8001756:	dd03      	ble.n	8001760 <forward_conv2d+0x68>
 8001758:	69d9      	ldr	r1, [r3, #28]
 800175a:	b109      	cbz	r1, 8001760 <forward_conv2d+0x68>
 800175c:	6849      	ldr	r1, [r1, #4]
 800175e:	e000      	b.n	8001762 <forward_conv2d+0x6a>
 8001760:	2100      	movs	r1, #0
 8001762:	b100      	cbz	r0, 8001766 <forward_conv2d+0x6e>
 8001764:	6880      	ldr	r0, [r0, #8]
 8001766:	68d7      	ldr	r7, [r2, #12]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	931b      	str	r3, [sp, #108]	; 0x6c
 800176c:	f8da 300c 	ldr.w	r3, [sl, #12]
 8001770:	685c      	ldr	r4, [r3, #4]
 8001772:	9404      	str	r4, [sp, #16]
 8001774:	68dc      	ldr	r4, [r3, #12]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	9314      	str	r3, [sp, #80]	; 0x50
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	931a      	str	r3, [sp, #104]	; 0x68
 800177e:	68bf      	ldr	r7, [r7, #8]
 8001780:	9720      	str	r7, [sp, #128]	; 0x80
 8001782:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001784:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8001788:	8d2f      	ldrh	r7, [r5, #40]	; 0x28
 800178a:	971f      	str	r7, [sp, #124]	; 0x7c
 800178c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800178e:	681f      	ldr	r7, [r3, #0]
 8001790:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8001794:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001796:	9319      	str	r3, [sp, #100]	; 0x64
 8001798:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800179a:	9318      	str	r3, [sp, #96]	; 0x60
 800179c:	68f3      	ldr	r3, [r6, #12]
 800179e:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80017a2:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	9312      	str	r3, [sp, #72]	; 0x48
 80017aa:	69ab      	ldr	r3, [r5, #24]
 80017ac:	931e      	str	r3, [sp, #120]	; 0x78
 80017ae:	6992      	ldr	r2, [r2, #24]
 80017b0:	6893      	ldr	r3, [r2, #8]
 80017b2:	931d      	str	r3, [sp, #116]	; 0x74
 80017b4:	69b2      	ldr	r2, [r6, #24]
 80017b6:	f8d2 9008 	ldr.w	r9, [r2, #8]
 80017ba:	b119      	cbz	r1, 80017c4 <forward_conv2d+0xcc>
 80017bc:	698a      	ldr	r2, [r1, #24]
 80017be:	6893      	ldr	r3, [r2, #8]
 80017c0:	9317      	str	r3, [sp, #92]	; 0x5c
 80017c2:	e001      	b.n	80017c8 <forward_conv2d+0xd0>
 80017c4:	2200      	movs	r2, #0
 80017c6:	9217      	str	r2, [sp, #92]	; 0x5c
 80017c8:	f8da 1018 	ldr.w	r1, [sl, #24]
 80017cc:	688a      	ldr	r2, [r1, #8]
 80017ce:	9203      	str	r2, [sp, #12]
 80017d0:	69e9      	ldr	r1, [r5, #28]
 80017d2:	b118      	cbz	r0, 80017dc <forward_conv2d+0xe4>
 80017d4:	6981      	ldr	r1, [r0, #24]
 80017d6:	688a      	ldr	r2, [r1, #8]
 80017d8:	9215      	str	r2, [sp, #84]	; 0x54
 80017da:	e005      	b.n	80017e8 <forward_conv2d+0xf0>
 80017dc:	b111      	cbz	r1, 80017e4 <forward_conv2d+0xec>
 80017de:	688a      	ldr	r2, [r1, #8]
 80017e0:	9215      	str	r2, [sp, #84]	; 0x54
 80017e2:	e001      	b.n	80017e8 <forward_conv2d+0xf0>
 80017e4:	2300      	movs	r3, #0
 80017e6:	9315      	str	r3, [sp, #84]	; 0x54
 80017e8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80017ea:	9102      	str	r1, [sp, #8]
 80017ec:	b920      	cbnz	r0, 80017f8 <forward_conv2d+0x100>
 80017ee:	2100      	movs	r1, #0
 80017f0:	2201      	movs	r2, #1
 80017f2:	9124      	str	r1, [sp, #144]	; 0x90
 80017f4:	9223      	str	r2, [sp, #140]	; 0x8c
 80017f6:	e008      	b.n	800180a <forward_conv2d+0x112>
 80017f8:	6941      	ldr	r1, [r0, #20]
 80017fa:	688a      	ldr	r2, [r1, #8]
 80017fc:	9224      	str	r2, [sp, #144]	; 0x90
 80017fe:	6980      	ldr	r0, [r0, #24]
 8001800:	6841      	ldr	r1, [r0, #4]
 8001802:	6800      	ldr	r0, [r0, #0]
 8001804:	f004 fb3e 	bl	8005e84 <ai_array_get_byte_size>
 8001808:	9023      	str	r0, [sp, #140]	; 0x8c
 800180a:	aa18      	add	r2, sp, #96	; 0x60
 800180c:	6a28      	ldr	r0, [r5, #32]
 800180e:	2800      	cmp	r0, #0
 8001810:	bf12      	itee	ne
 8001812:	9022      	strne	r0, [sp, #136]	; 0x88
 8001814:	f8df 1d28 	ldreq.w	r1, [pc, #3368]	; 8002540 <.text_15>
 8001818:	9122      	streq	r1, [sp, #136]	; 0x88
 800181a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800181c:	8813      	ldrh	r3, [r2, #0]
 800181e:	1e48      	subs	r0, r1, #1
 8001820:	1e5b      	subs	r3, r3, #1
 8001822:	aa19      	add	r2, sp, #100	; 0x64
 8001824:	fb03 1100 	mla	r1, r3, r0, r1
 8001828:	9116      	str	r1, [sp, #88]	; 0x58
 800182a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800182c:	8813      	ldrh	r3, [r2, #0]
 800182e:	1e41      	subs	r1, r0, #1
 8001830:	1e5b      	subs	r3, r3, #1
 8001832:	fb03 0001 	mla	r0, r3, r1, r0
 8001836:	901c      	str	r0, [sp, #112]	; 0x70
 8001838:	2200      	movs	r2, #0
 800183a:	69b6      	ldr	r6, [r6, #24]
 800183c:	6831      	ldr	r1, [r6, #0]
 800183e:	11cb      	asrs	r3, r1, #7
 8001840:	ea4f 5c61 	mov.w	ip, r1, asr #21
 8001844:	1449      	asrs	r1, r1, #17
 8001846:	f001 010f 	and.w	r1, r1, #15
 800184a:	2000      	movs	r0, #0
 800184c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001850:	f00c 0c03 	and.w	ip, ip, #3
 8001854:	2904      	cmp	r1, #4
 8001856:	4683      	mov	fp, r0
 8001858:	fa23 f30c 	lsr.w	r3, r3, ip
 800185c:	bf14      	ite	ne
 800185e:	2908      	cmpne	r1, #8
 8001860:	68f2      	ldreq	r2, [r6, #12]
 8001862:	b1da      	cbz	r2, 800189c <forward_conv2d+0x1a4>
 8001864:	6969      	ldr	r1, [r5, #20]
 8001866:	880d      	ldrh	r5, [r1, #0]
 8001868:	2d04      	cmp	r5, #4
 800186a:	bfa6      	itte	ge
 800186c:	6849      	ldrge	r1, [r1, #4]
 800186e:	3128      	addge	r1, #40	; 0x28
 8001870:	2104      	movlt	r1, #4
 8001872:	6809      	ldr	r1, [r1, #0]
 8001874:	2900      	cmp	r1, #0
 8001876:	bf1f      	itttt	ne
 8001878:	6808      	ldrne	r0, [r1, #0]
 800187a:	2800      	cmpne	r0, #0
 800187c:	6981      	ldrne	r1, [r0, #24]
 800187e:	f8d1 b008 	ldrne.w	fp, [r1, #8]
 8001882:	6980      	ldr	r0, [r0, #24]
 8001884:	6841      	ldr	r1, [r0, #4]
 8001886:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001888:	9101      	str	r1, [sp, #4]
 800188a:	9000      	str	r0, [sp, #0]
 800188c:	4658      	mov	r0, fp
 800188e:	68b1      	ldr	r1, [r6, #8]
 8001890:	f7ff fec8 	bl	8001624 <ai_dict_decompress_f32>
 8001894:	f1bb 0f00 	cmp.w	fp, #0
 8001898:	bf18      	it	ne
 800189a:	46d9      	movne	r9, fp
 800189c:	b2bf      	uxth	r7, r7
 800189e:	427f      	negs	r7, r7
 80018a0:	2c00      	cmp	r4, #0
 80018a2:	d073      	beq.n	800198c <forward_conv2d+0x294>
 80018a4:	4622      	mov	r2, r4
 80018a6:	f1c8 0800 	rsb	r8, r8, #0
 80018aa:	9c04      	ldr	r4, [sp, #16]
 80018ac:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80018b0:	9e02      	ldr	r6, [sp, #8]
 80018b2:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
 80018b6:	f8cd 909c 	str.w	r9, [sp, #156]	; 0x9c
 80018ba:	9711      	str	r7, [sp, #68]	; 0x44
 80018bc:	9221      	str	r2, [sp, #132]	; 0x84
 80018be:	9826      	ldr	r0, [sp, #152]	; 0x98
 80018c0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80018c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80018c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80018c6:	9025      	str	r0, [sp, #148]	; 0x94
 80018c8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80018ca:	4240      	negs	r0, r0
 80018cc:	bfd8      	it	le
 80018ce:	2000      	movle	r0, #0
 80018d0:	1a89      	subs	r1, r1, r2
 80018d2:	4299      	cmp	r1, r3
 80018d4:	bf3d      	ittte	cc
 80018d6:	9a1a      	ldrcc	r2, [sp, #104]	; 0x68
 80018d8:	9911      	ldrcc	r1, [sp, #68]	; 0x44
 80018da:	1a51      	subcc	r1, r2, r1
 80018dc:	4619      	movcs	r1, r3
 80018de:	910a      	str	r1, [sp, #40]	; 0x28
 80018e0:	9009      	str	r0, [sp, #36]	; 0x24
 80018e2:	9402      	str	r4, [sp, #8]
 80018e4:	981e      	ldr	r0, [sp, #120]	; 0x78
 80018e6:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 80018ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80018ec:	9008      	str	r0, [sp, #32]
 80018ee:	9107      	str	r1, [sp, #28]
 80018f0:	b212      	sxth	r2, r2
 80018f2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80018f4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80018f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80018f8:	920f      	str	r2, [sp, #60]	; 0x3c
 80018fa:	9006      	str	r0, [sp, #24]
 80018fc:	9105      	str	r1, [sp, #20]
 80018fe:	b21b      	sxth	r3, r3
 8001900:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001902:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001904:	9920      	ldr	r1, [sp, #128]	; 0x80
 8001906:	930e      	str	r3, [sp, #56]	; 0x38
 8001908:	920d      	str	r2, [sp, #52]	; 0x34
 800190a:	9004      	str	r0, [sp, #16]
 800190c:	9103      	str	r1, [sp, #12]
 800190e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001910:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8001912:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001914:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001916:	930c      	str	r3, [sp, #48]	; 0x30
 8001918:	920b      	str	r2, [sp, #44]	; 0x2c
 800191a:	9001      	str	r0, [sp, #4]
 800191c:	9100      	str	r1, [sp, #0]
 800191e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8001920:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8001922:	4659      	mov	r1, fp
 8001924:	2000      	movs	r0, #0
 8001926:	f7ff fa43 	bl	8000db0 <ai_conv2d_stripe_f32>
 800192a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800192c:	b310      	cbz	r0, 8001974 <forward_conv2d+0x27c>
 800192e:	f8cd a000 	str.w	sl, [sp]
 8001932:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8001934:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8001936:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 800193a:	f8dd 9088 	ldr.w	r9, [sp, #136]	; 0x88
 800193e:	4682      	mov	sl, r0
 8001940:	9800      	ldr	r0, [sp, #0]
 8001942:	6981      	ldr	r1, [r0, #24]
 8001944:	f8c1 b008 	str.w	fp, [r1, #8]
 8001948:	462b      	mov	r3, r5
 800194a:	4622      	mov	r2, r4
 800194c:	4608      	mov	r0, r1
 800194e:	47c8      	blx	r9
 8001950:	443d      	add	r5, r7
 8001952:	1ba8      	subs	r0, r5, r6
 8001954:	4540      	cmp	r0, r8
 8001956:	bfa8      	it	ge
 8001958:	4635      	movge	r5, r6
 800195a:	f1ba 0a01 	subs.w	sl, sl, #1
 800195e:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 8001962:	d1ed      	bne.n	8001940 <forward_conv2d+0x248>
 8001964:	f8dd a000 	ldr.w	sl, [sp]
 8001968:	9515      	str	r5, [sp, #84]	; 0x54
 800196a:	9724      	str	r7, [sp, #144]	; 0x90
 800196c:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
 8001970:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 8001974:	f8da 0018 	ldr.w	r0, [sl, #24]
 8001978:	68c1      	ldr	r1, [r0, #12]
 800197a:	6081      	str	r1, [r0, #8]
 800197c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800197e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8001980:	1808      	adds	r0, r1, r0
 8001982:	9011      	str	r0, [sp, #68]	; 0x44
 8001984:	9821      	ldr	r0, [sp, #132]	; 0x84
 8001986:	1e40      	subs	r0, r0, #1
 8001988:	9021      	str	r0, [sp, #132]	; 0x84
 800198a:	d198      	bne.n	80018be <forward_conv2d+0x1c6>
 800198c:	b029      	add	sp, #164	; 0xa4
 800198e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001994 <forward_conv2d_nl_pool>:
 8001994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001998:	4604      	mov	r4, r0
 800199a:	b0b9      	sub	sp, #228	; 0xe4
 800199c:	6963      	ldr	r3, [r4, #20]
 800199e:	8819      	ldrh	r1, [r3, #0]
 80019a0:	2900      	cmp	r1, #0
 80019a2:	bf1a      	itte	ne
 80019a4:	6858      	ldrne	r0, [r3, #4]
 80019a6:	1d00      	addne	r0, r0, #4
 80019a8:	2004      	moveq	r0, #4
 80019aa:	6800      	ldr	r0, [r0, #0]
 80019ac:	2800      	cmp	r0, #0
 80019ae:	bf14      	ite	ne
 80019b0:	6802      	ldrne	r2, [r0, #0]
 80019b2:	2200      	moveq	r2, #0
 80019b4:	2901      	cmp	r1, #1
 80019b6:	bfc6      	itte	gt
 80019b8:	6858      	ldrgt	r0, [r3, #4]
 80019ba:	3010      	addgt	r0, #16
 80019bc:	2004      	movle	r0, #4
 80019be:	6800      	ldr	r0, [r0, #0]
 80019c0:	2800      	cmp	r0, #0
 80019c2:	bf14      	ite	ne
 80019c4:	f8d0 9000 	ldrne.w	r9, [r0]
 80019c8:	f04f 0900 	moveq.w	r9, #0
 80019cc:	2902      	cmp	r1, #2
 80019ce:	bfc6      	itte	gt
 80019d0:	6858      	ldrgt	r0, [r3, #4]
 80019d2:	f100 071c 	addgt.w	r7, r0, #28
 80019d6:	2704      	movle	r7, #4
 80019d8:	6838      	ldr	r0, [r7, #0]
 80019da:	2800      	cmp	r0, #0
 80019dc:	bf14      	ite	ne
 80019de:	6806      	ldrne	r6, [r0, #0]
 80019e0:	2600      	moveq	r6, #0
 80019e2:	2902      	cmp	r1, #2
 80019e4:	dd0a      	ble.n	80019fc <forward_conv2d_nl_pool+0x68>
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f113 0118 	adds.w	r1, r3, #24
 80019ec:	d006      	beq.n	80019fc <forward_conv2d_nl_pool+0x68>
 80019ee:	8b19      	ldrh	r1, [r3, #24]
 80019f0:	2901      	cmp	r1, #1
 80019f2:	dd03      	ble.n	80019fc <forward_conv2d_nl_pool+0x68>
 80019f4:	69d9      	ldr	r1, [r3, #28]
 80019f6:	b109      	cbz	r1, 80019fc <forward_conv2d_nl_pool+0x68>
 80019f8:	6849      	ldr	r1, [r1, #4]
 80019fa:	e000      	b.n	80019fe <forward_conv2d_nl_pool+0x6a>
 80019fc:	2100      	movs	r1, #0
 80019fe:	b100      	cbz	r0, 8001a02 <forward_conv2d_nl_pool+0x6e>
 8001a00:	6880      	ldr	r0, [r0, #8]
 8001a02:	68d7      	ldr	r7, [r2, #12]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	9323      	str	r3, [sp, #140]	; 0x8c
 8001a08:	f8d9 500c 	ldr.w	r5, [r9, #12]
 8001a0c:	686b      	ldr	r3, [r5, #4]
 8001a0e:	9310      	str	r3, [sp, #64]	; 0x40
 8001a10:	68eb      	ldr	r3, [r5, #12]
 8001a12:	9322      	str	r3, [sp, #136]	; 0x88
 8001a14:	68ab      	ldr	r3, [r5, #8]
 8001a16:	9321      	str	r3, [sp, #132]	; 0x84
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	931b      	str	r3, [sp, #108]	; 0x6c
 8001a1c:	68bf      	ldr	r7, [r7, #8]
 8001a1e:	972d      	str	r7, [sp, #180]	; 0xb4
 8001a20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a22:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8001a26:	8d27      	ldrh	r7, [r4, #40]	; 0x28
 8001a28:	9720      	str	r7, [sp, #128]	; 0x80
 8001a2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a2c:	881f      	ldrh	r7, [r3, #0]
 8001a2e:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8001a32:	689d      	ldr	r5, [r3, #8]
 8001a34:	69a3      	ldr	r3, [r4, #24]
 8001a36:	932c      	str	r3, [sp, #176]	; 0xb0
 8001a38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a3a:	931f      	str	r3, [sp, #124]	; 0x7c
 8001a3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a3e:	931e      	str	r3, [sp, #120]	; 0x78
 8001a40:	68f3      	ldr	r3, [r6, #12]
 8001a42:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8001a46:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	9319      	str	r3, [sp, #100]	; 0x64
 8001a4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a50:	932b      	str	r3, [sp, #172]	; 0xac
 8001a52:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a54:	932a      	str	r3, [sp, #168]	; 0xa8
 8001a56:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001a58:	9311      	str	r3, [sp, #68]	; 0x44
 8001a5a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001a5c:	f8d3 a000 	ldr.w	sl, [r3]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	9329      	str	r3, [sp, #164]	; 0xa4
 8001a64:	6992      	ldr	r2, [r2, #24]
 8001a66:	6893      	ldr	r3, [r2, #8]
 8001a68:	9328      	str	r3, [sp, #160]	; 0xa0
 8001a6a:	69b2      	ldr	r2, [r6, #24]
 8001a6c:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8001a70:	b119      	cbz	r1, 8001a7a <forward_conv2d_nl_pool+0xe6>
 8001a72:	698a      	ldr	r2, [r1, #24]
 8001a74:	6893      	ldr	r3, [r2, #8]
 8001a76:	931d      	str	r3, [sp, #116]	; 0x74
 8001a78:	e001      	b.n	8001a7e <forward_conv2d_nl_pool+0xea>
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	921d      	str	r2, [sp, #116]	; 0x74
 8001a7e:	69e1      	ldr	r1, [r4, #28]
 8001a80:	b118      	cbz	r0, 8001a8a <forward_conv2d_nl_pool+0xf6>
 8001a82:	6981      	ldr	r1, [r0, #24]
 8001a84:	688a      	ldr	r2, [r1, #8]
 8001a86:	921c      	str	r2, [sp, #112]	; 0x70
 8001a88:	e005      	b.n	8001a96 <forward_conv2d_nl_pool+0x102>
 8001a8a:	b111      	cbz	r1, 8001a92 <forward_conv2d_nl_pool+0xfe>
 8001a8c:	688a      	ldr	r2, [r1, #8]
 8001a8e:	921c      	str	r2, [sp, #112]	; 0x70
 8001a90:	e001      	b.n	8001a96 <forward_conv2d_nl_pool+0x102>
 8001a92:	2300      	movs	r3, #0
 8001a94:	931c      	str	r3, [sp, #112]	; 0x70
 8001a96:	991c      	ldr	r1, [sp, #112]	; 0x70
 8001a98:	9102      	str	r1, [sp, #8]
 8001a9a:	b920      	cbnz	r0, 8001aa6 <forward_conv2d_nl_pool+0x112>
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	9116      	str	r1, [sp, #88]	; 0x58
 8001aa2:	9215      	str	r2, [sp, #84]	; 0x54
 8001aa4:	e008      	b.n	8001ab8 <forward_conv2d_nl_pool+0x124>
 8001aa6:	6941      	ldr	r1, [r0, #20]
 8001aa8:	688a      	ldr	r2, [r1, #8]
 8001aaa:	9216      	str	r2, [sp, #88]	; 0x58
 8001aac:	6980      	ldr	r0, [r0, #24]
 8001aae:	6841      	ldr	r1, [r0, #4]
 8001ab0:	6800      	ldr	r0, [r0, #0]
 8001ab2:	f004 f9e7 	bl	8005e84 <ai_array_get_byte_size>
 8001ab6:	9015      	str	r0, [sp, #84]	; 0x54
 8001ab8:	aa1e      	add	r2, sp, #120	; 0x78
 8001aba:	6a20      	ldr	r0, [r4, #32]
 8001abc:	2800      	cmp	r0, #0
 8001abe:	bf12      	itee	ne
 8001ac0:	9030      	strne	r0, [sp, #192]	; 0xc0
 8001ac2:	f8df 1a7c 	ldreq.w	r1, [pc, #2684]	; 8002540 <.text_15>
 8001ac6:	9130      	streq	r1, [sp, #192]	; 0xc0
 8001ac8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001aca:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001acc:	8813      	ldrh	r3, [r2, #0]
 8001ace:	9127      	str	r1, [sp, #156]	; 0x9c
 8001ad0:	1e5b      	subs	r3, r3, #1
 8001ad2:	1e41      	subs	r1, r0, #1
 8001ad4:	aa1f      	add	r2, sp, #124	; 0x7c
 8001ad6:	fb03 0001 	mla	r0, r3, r1, r0
 8001ada:	9018      	str	r0, [sp, #96]	; 0x60
 8001adc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001ade:	8813      	ldrh	r3, [r2, #0]
 8001ae0:	1e48      	subs	r0, r1, #1
 8001ae2:	1e5b      	subs	r3, r3, #1
 8001ae4:	fb03 1100 	mla	r1, r3, r0, r1
 8001ae8:	9126      	str	r1, [sp, #152]	; 0x98
 8001aea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001aec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8001aee:	9818      	ldr	r0, [sp, #96]	; 0x60
 8001af0:	9112      	str	r1, [sp, #72]	; 0x48
 8001af2:	1a12      	subs	r2, r2, r0
 8001af4:	18ba      	adds	r2, r7, r2
 8001af6:	9920      	ldr	r1, [sp, #128]	; 0x80
 8001af8:	fa12 f085 	uxtah	r0, r2, r5
 8001afc:	fbb0 f1f1 	udiv	r1, r0, r1
 8001b00:	1c49      	adds	r1, r1, #1
 8001b02:	9114      	str	r1, [sp, #80]	; 0x50
 8001b04:	2000      	movs	r0, #0
 8001b06:	69b6      	ldr	r6, [r6, #24]
 8001b08:	6831      	ldr	r1, [r6, #0]
 8001b0a:	2500      	movs	r5, #0
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	11cb      	asrs	r3, r1, #7
 8001b10:	ea4f 5c61 	mov.w	ip, r1, asr #21
 8001b14:	1449      	asrs	r1, r1, #17
 8001b16:	f001 010f 	and.w	r1, r1, #15
 8001b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b1e:	f00c 0c03 	and.w	ip, ip, #3
 8001b22:	2904      	cmp	r1, #4
 8001b24:	fa23 f30c 	lsr.w	r3, r3, ip
 8001b28:	bf14      	ite	ne
 8001b2a:	2908      	cmpne	r1, #8
 8001b2c:	68f2      	ldreq	r2, [r6, #12]
 8001b2e:	b1da      	cbz	r2, 8001b68 <forward_conv2d_nl_pool+0x1d4>
 8001b30:	6961      	ldr	r1, [r4, #20]
 8001b32:	f8b1 c000 	ldrh.w	ip, [r1]
 8001b36:	f1bc 0f04 	cmp.w	ip, #4
 8001b3a:	bfa6      	itte	ge
 8001b3c:	6849      	ldrge	r1, [r1, #4]
 8001b3e:	3128      	addge	r1, #40	; 0x28
 8001b40:	2104      	movlt	r1, #4
 8001b42:	6809      	ldr	r1, [r1, #0]
 8001b44:	2900      	cmp	r1, #0
 8001b46:	bf1f      	itttt	ne
 8001b48:	6848      	ldrne	r0, [r1, #4]
 8001b4a:	2800      	cmpne	r0, #0
 8001b4c:	6981      	ldrne	r1, [r0, #24]
 8001b4e:	688d      	ldrne	r5, [r1, #8]
 8001b50:	6980      	ldr	r0, [r0, #24]
 8001b52:	6841      	ldr	r1, [r0, #4]
 8001b54:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8001b56:	9101      	str	r1, [sp, #4]
 8001b58:	9000      	str	r0, [sp, #0]
 8001b5a:	4628      	mov	r0, r5
 8001b5c:	68b1      	ldr	r1, [r6, #8]
 8001b5e:	f7ff fd61 	bl	8001624 <ai_dict_decompress_f32>
 8001b62:	b10d      	cbz	r5, 8001b68 <forward_conv2d_nl_pool+0x1d4>
 8001b64:	4628      	mov	r0, r5
 8001b66:	e000      	b.n	8001b6a <forward_conv2d_nl_pool+0x1d6>
 8001b68:	4658      	mov	r0, fp
 8001b6a:	6963      	ldr	r3, [r4, #20]
 8001b6c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8001b70:	881c      	ldrh	r4, [r3, #0]
 8001b72:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8001b76:	2600      	movs	r6, #0
 8001b78:	2c04      	cmp	r4, #4
 8001b7a:	bfa6      	itte	ge
 8001b7c:	685b      	ldrge	r3, [r3, #4]
 8001b7e:	3328      	addge	r3, #40	; 0x28
 8001b80:	2304      	movlt	r3, #4
 8001b82:	f10d 0e44 	add.w	lr, sp, #68	; 0x44
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	bf14      	ite	ne
 8001b8c:	681d      	ldrne	r5, [r3, #0]
 8001b8e:	2500      	moveq	r5, #0
 8001b90:	427f      	negs	r7, r7
 8001b92:	69ac      	ldr	r4, [r5, #24]
 8001b94:	68eb      	ldr	r3, [r5, #12]
 8001b96:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8001b9e:	435c      	muls	r4, r3
 8001ba0:	fb0c f404 	mul.w	r4, ip, r4
 8001ba4:	9437      	str	r4, [sp, #220]	; 0xdc
 8001ba6:	fa0f f28a 	sxth.w	r2, sl
 8001baa:	f9be 4000 	ldrsh.w	r4, [lr]
 8001bae:	f8dd c084 	ldr.w	ip, [sp, #132]	; 0x84
 8001bb2:	9436      	str	r4, [sp, #216]	; 0xd8
 8001bb4:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
 8001bb8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8001bba:	fb0c f404 	mul.w	r4, ip, r4
 8001bbe:	9435      	str	r4, [sp, #212]	; 0xd4
 8001bc0:	f1c8 0800 	rsb	r8, r8, #0
 8001bc4:	f9be 4000 	ldrsh.w	r4, [lr]
 8001bc8:	9434      	str	r4, [sp, #208]	; 0xd0
 8001bca:	4691      	mov	r9, r2
 8001bcc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8001bce:	f8cd 80c8 	str.w	r8, [sp, #200]	; 0xc8
 8001bd2:	435c      	muls	r4, r3
 8001bd4:	9433      	str	r4, [sp, #204]	; 0xcc
 8001bd6:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8001bd8:	2c00      	cmp	r4, #0
 8001bda:	f000 812e 	beq.w	8001e3a <forward_conv2d_nl_pool+0x4a6>
 8001bde:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001be2:	9038      	str	r0, [sp, #224]	; 0xe0
 8001be4:	9125      	str	r1, [sp, #148]	; 0x94
 8001be6:	4614      	mov	r4, r2
 8001be8:	962f      	str	r6, [sp, #188]	; 0xbc
 8001bea:	962e      	str	r6, [sp, #184]	; 0xb8
 8001bec:	9324      	str	r3, [sp, #144]	; 0x90
 8001bee:	9717      	str	r7, [sp, #92]	; 0x5c
 8001bf0:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001bf2:	2800      	cmp	r0, #0
 8001bf4:	dd6a      	ble.n	8001ccc <forward_conv2d_nl_pool+0x338>
 8001bf6:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8001bf8:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8001bfa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8001bfc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8001bfe:	9031      	str	r0, [sp, #196]	; 0xc4
 8001c00:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001c02:	4240      	negs	r0, r0
 8001c04:	bfd8      	it	le
 8001c06:	2000      	movle	r0, #0
 8001c08:	1a89      	subs	r1, r1, r2
 8001c0a:	4299      	cmp	r1, r3
 8001c0c:	bf3d      	ittte	cc
 8001c0e:	9a1b      	ldrcc	r2, [sp, #108]	; 0x6c
 8001c10:	9917      	ldrcc	r1, [sp, #92]	; 0x5c
 8001c12:	1a51      	subcc	r1, r2, r1
 8001c14:	4619      	movcs	r1, r3
 8001c16:	9009      	str	r0, [sp, #36]	; 0x24
 8001c18:	910a      	str	r1, [sp, #40]	; 0x28
 8001c1a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8001c1c:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8001c20:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8001c22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001c24:	9008      	str	r0, [sp, #32]
 8001c26:	9107      	str	r1, [sp, #28]
 8001c28:	b212      	sxth	r2, r2
 8001c2a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001c2c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001c2e:	9006      	str	r0, [sp, #24]
 8001c30:	920f      	str	r2, [sp, #60]	; 0x3c
 8001c32:	9105      	str	r1, [sp, #20]
 8001c34:	b21b      	sxth	r3, r3
 8001c36:	9824      	ldr	r0, [sp, #144]	; 0x90
 8001c38:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8001c3a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8001c3c:	9004      	str	r0, [sp, #16]
 8001c3e:	930e      	str	r3, [sp, #56]	; 0x38
 8001c40:	920d      	str	r2, [sp, #52]	; 0x34
 8001c42:	9103      	str	r1, [sp, #12]
 8001c44:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001c46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001c48:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8001c4a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8001c4c:	9002      	str	r0, [sp, #8]
 8001c4e:	930c      	str	r3, [sp, #48]	; 0x30
 8001c50:	920b      	str	r2, [sp, #44]	; 0x2c
 8001c52:	9101      	str	r1, [sp, #4]
 8001c54:	4659      	mov	r1, fp
 8001c56:	981d      	ldr	r0, [sp, #116]	; 0x74
 8001c58:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8001c5a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8001c5c:	9000      	str	r0, [sp, #0]
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f7ff f8a6 	bl	8000db0 <ai_conv2d_stripe_f32>
 8001c64:	9824      	ldr	r0, [sp, #144]	; 0x90
 8001c66:	b350      	cbz	r0, 8001cbe <forward_conv2d_nl_pool+0x32a>
 8001c68:	f8cd a008 	str.w	sl, [sp, #8]
 8001c6c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8001c6e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8001c70:	f8dd 80c0 	ldr.w	r8, [sp, #192]	; 0xc0
 8001c74:	4682      	mov	sl, r0
 8001c76:	69a9      	ldr	r1, [r5, #24]
 8001c78:	463b      	mov	r3, r7
 8001c7a:	f8c1 b008 	str.w	fp, [r1, #8]
 8001c7e:	4632      	mov	r2, r6
 8001c80:	4608      	mov	r0, r1
 8001c82:	47c0      	blx	r8
 8001c84:	9816      	ldr	r0, [sp, #88]	; 0x58
 8001c86:	9902      	ldr	r1, [sp, #8]
 8001c88:	4407      	add	r7, r0
 8001c8a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8001c8c:	1a79      	subs	r1, r7, r1
 8001c8e:	4281      	cmp	r1, r0
 8001c90:	69a8      	ldr	r0, [r5, #24]
 8001c92:	6841      	ldr	r1, [r0, #4]
 8001c94:	68c0      	ldr	r0, [r0, #12]
 8001c96:	bfa8      	it	ge
 8001c98:	9f02      	ldrge	r7, [sp, #8]
 8001c9a:	eb0b 0b86 	add.w	fp, fp, r6, lsl #2
 8001c9e:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8001ca2:	4593      	cmp	fp, r2
 8001ca4:	d302      	bcc.n	8001cac <forward_conv2d_nl_pool+0x318>
 8001ca6:	0089      	lsls	r1, r1, #2
 8001ca8:	4249      	negs	r1, r1
 8001caa:	448b      	add	fp, r1
 8001cac:	f1ba 0a01 	subs.w	sl, sl, #1
 8001cb0:	d1e1      	bne.n	8001c76 <forward_conv2d_nl_pool+0x2e2>
 8001cb2:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001cb6:	9610      	str	r6, [sp, #64]	; 0x40
 8001cb8:	971c      	str	r7, [sp, #112]	; 0x70
 8001cba:	f8cd 80c0 	str.w	r8, [sp, #192]	; 0xc0
 8001cbe:	69a8      	ldr	r0, [r5, #24]
 8001cc0:	68c1      	ldr	r1, [r0, #12]
 8001cc2:	6081      	str	r1, [r0, #8]
 8001cc4:	f109 0001 	add.w	r0, r9, #1
 8001cc8:	fa0f f980 	sxth.w	r9, r0
 8001ccc:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001cce:	1e40      	subs	r0, r0, #1
 8001cd0:	9014      	str	r0, [sp, #80]	; 0x50
 8001cd2:	d56b      	bpl.n	8001dac <forward_conv2d_nl_pool+0x418>
 8001cd4:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8001cd6:	fb00 f009 	mul.w	r0, r0, r9
 8001cda:	0080      	lsls	r0, r0, #2
 8001cdc:	4240      	negs	r0, r0
 8001cde:	eb0b 0200 	add.w	r2, fp, r0
 8001ce2:	69a8      	ldr	r0, [r5, #24]
 8001ce4:	68c3      	ldr	r3, [r0, #12]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	bf3c      	itt	cc
 8001cea:	6847      	ldrcc	r7, [r0, #4]
 8001cec:	eb02 0287 	addcc.w	r2, r2, r7, lsl #2
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	4659      	mov	r1, fp
 8001cf4:	d236      	bcs.n	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001cf6:	9e34      	ldr	r6, [sp, #208]	; 0xd0
 8001cf8:	45b1      	cmp	r9, r6
 8001cfa:	d033      	beq.n	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001cfc:	6846      	ldr	r6, [r0, #4]
 8001cfe:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8001d02:	429a      	cmp	r2, r3
 8001d04:	f080 802e 	bcs.w	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001d08:	ed92 0a00 	vldr	s0, [r2]
 8001d0c:	ed8b 0a00 	vstr	s0, [fp]
 8001d10:	68c3      	ldr	r3, [r0, #12]
 8001d12:	6846      	ldr	r6, [r0, #4]
 8001d14:	1d12      	adds	r2, r2, #4
 8001d16:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001d1a:	42ba      	cmp	r2, r7
 8001d1c:	d222      	bcs.n	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001d1e:	edd2 0a00 	vldr	s1, [r2]
 8001d22:	edcb 0a01 	vstr	s1, [fp, #4]
 8001d26:	68c3      	ldr	r3, [r0, #12]
 8001d28:	6846      	ldr	r6, [r0, #4]
 8001d2a:	1d12      	adds	r2, r2, #4
 8001d2c:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001d30:	42ba      	cmp	r2, r7
 8001d32:	d217      	bcs.n	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001d34:	ed92 0a00 	vldr	s0, [r2]
 8001d38:	ed8b 0a02 	vstr	s0, [fp, #8]
 8001d3c:	68c3      	ldr	r3, [r0, #12]
 8001d3e:	6846      	ldr	r6, [r0, #4]
 8001d40:	1d12      	adds	r2, r2, #4
 8001d42:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001d46:	42ba      	cmp	r2, r7
 8001d48:	d20c      	bcs.n	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001d4a:	edd2 0a00 	vldr	s1, [r2]
 8001d4e:	edcb 0a03 	vstr	s1, [fp, #12]
 8001d52:	68c3      	ldr	r3, [r0, #12]
 8001d54:	6846      	ldr	r6, [r0, #4]
 8001d56:	1d12      	adds	r2, r2, #4
 8001d58:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001d5c:	42ba      	cmp	r2, r7
 8001d5e:	f10b 0b10 	add.w	fp, fp, #16
 8001d62:	d3d1      	bcc.n	8001d08 <forward_conv2d_nl_pool+0x374>
 8001d64:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8001d66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001d68:	189a      	adds	r2, r3, r2
 8001d6a:	eba2 0209 	sub.w	r2, r2, r9
 8001d6e:	922f      	str	r2, [sp, #188]	; 0xbc
 8001d70:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001d72:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8001d74:	444a      	add	r2, r9
 8001d76:	fa0f f982 	sxth.w	r9, r2
 8001d7a:	eb01 0b83 	add.w	fp, r1, r3, lsl #2
 8001d7e:	68c1      	ldr	r1, [r0, #12]
 8001d80:	6842      	ldr	r2, [r0, #4]
 8001d82:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8001d86:	459b      	cmp	fp, r3
 8001d88:	460b      	mov	r3, r1
 8001d8a:	d30f      	bcc.n	8001dac <forward_conv2d_nl_pool+0x418>
 8001d8c:	6841      	ldr	r1, [r0, #4]
 8001d8e:	008a      	lsls	r2, r1, #2
 8001d90:	4252      	negs	r2, r2
 8001d92:	4493      	add	fp, r2
 8001d94:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001d98:	458b      	cmp	fp, r1
 8001d9a:	bf24      	itt	cs
 8001d9c:	4493      	addcs	fp, r2
 8001d9e:	458b      	cmpcs	fp, r1
 8001da0:	bf21      	itttt	cs
 8001da2:	4493      	addcs	fp, r2
 8001da4:	458b      	cmpcs	fp, r1
 8001da6:	4493      	addcs	fp, r2
 8001da8:	458b      	cmpcs	fp, r1
 8001daa:	d2ef      	bcs.n	8001d8c <forward_conv2d_nl_pool+0x3f8>
 8001dac:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001dae:	4581      	cmp	r9, r0
 8001db0:	d339      	bcc.n	8001e26 <forward_conv2d_nl_pool+0x492>
 8001db2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8001db4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8001db6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001db8:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8001dba:	eba9 0001 	sub.w	r0, r9, r1
 8001dbe:	fa0f f980 	sxth.w	r9, r0
 8001dc2:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8001dc4:	1c40      	adds	r0, r0, #1
 8001dc6:	902e      	str	r0, [sp, #184]	; 0xb8
 8001dc8:	2101      	movs	r1, #1
 8001dca:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001dcc:	9008      	str	r0, [sp, #32]
 8001dce:	9107      	str	r1, [sp, #28]
 8001dd0:	b292      	uxth	r2, r2
 8001dd2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001dd4:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8001dd6:	9206      	str	r2, [sp, #24]
 8001dd8:	b280      	uxth	r0, r0
 8001dda:	9005      	str	r0, [sp, #20]
 8001ddc:	b289      	uxth	r1, r1
 8001dde:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8001de0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001de2:	9104      	str	r1, [sp, #16]
 8001de4:	b280      	uxth	r0, r0
 8001de6:	b2a1      	uxth	r1, r4
 8001de8:	9002      	str	r0, [sp, #8]
 8001dea:	9103      	str	r1, [sp, #12]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	982b      	ldr	r0, [sp, #172]	; 0xac
 8001df0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001df2:	b280      	uxth	r0, r0
 8001df4:	b289      	uxth	r1, r1
 8001df6:	9000      	str	r0, [sp, #0]
 8001df8:	9101      	str	r1, [sp, #4]
 8001dfa:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8001dfc:	9924      	ldr	r1, [sp, #144]	; 0x90
 8001dfe:	1a12      	subs	r2, r2, r0
 8001e00:	69a8      	ldr	r0, [r5, #24]
 8001e02:	b292      	uxth	r2, r2
 8001e04:	b289      	uxth	r1, r1
 8001e06:	47b0      	blx	r6
 8001e08:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001e0a:	6881      	ldr	r1, [r0, #8]
 8001e0c:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8001e0e:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8001e12:	9925      	ldr	r1, [sp, #148]	; 0x94
 8001e14:	608a      	str	r2, [r1, #8]
 8001e16:	9836      	ldr	r0, [sp, #216]	; 0xd8
 8001e18:	1a20      	subs	r0, r4, r0
 8001e1a:	2800      	cmp	r0, #0
 8001e1c:	bfc3      	ittte	gt
 8001e1e:	9811      	ldrgt	r0, [sp, #68]	; 0x44
 8001e20:	1a24      	subgt	r4, r4, r0
 8001e22:	b224      	sxthgt	r4, r4
 8001e24:	2400      	movle	r4, #0
 8001e26:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001e28:	9920      	ldr	r1, [sp, #128]	; 0x80
 8001e2a:	1808      	adds	r0, r1, r0
 8001e2c:	9017      	str	r0, [sp, #92]	; 0x5c
 8001e2e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8001e30:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8001e32:	4288      	cmp	r0, r1
 8001e34:	f4ff aedc 	bcc.w	8001bf0 <forward_conv2d_nl_pool+0x25c>
 8001e38:	9925      	ldr	r1, [sp, #148]	; 0x94
 8001e3a:	69a8      	ldr	r0, [r5, #24]
 8001e3c:	68c2      	ldr	r2, [r0, #12]
 8001e3e:	6082      	str	r2, [r0, #8]
 8001e40:	68c8      	ldr	r0, [r1, #12]
 8001e42:	6088      	str	r0, [r1, #8]
 8001e44:	b039      	add	sp, #228	; 0xe4
 8001e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001e4c <forward_dense>:
 8001e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e50:	b081      	sub	sp, #4
 8001e52:	ed2d 8b02 	vpush	{d8}
 8001e56:	b088      	sub	sp, #32
 8001e58:	6944      	ldr	r4, [r0, #20]
 8001e5a:	8820      	ldrh	r0, [r4, #0]
 8001e5c:	2800      	cmp	r0, #0
 8001e5e:	bf1a      	itte	ne
 8001e60:	6861      	ldrne	r1, [r4, #4]
 8001e62:	1d09      	addne	r1, r1, #4
 8001e64:	2104      	moveq	r1, #4
 8001e66:	6809      	ldr	r1, [r1, #0]
 8001e68:	2900      	cmp	r1, #0
 8001e6a:	bf14      	ite	ne
 8001e6c:	680a      	ldrne	r2, [r1, #0]
 8001e6e:	2200      	moveq	r2, #0
 8001e70:	2802      	cmp	r0, #2
 8001e72:	bfa6      	itte	ge
 8001e74:	6861      	ldrge	r1, [r4, #4]
 8001e76:	3110      	addge	r1, #16
 8001e78:	2104      	movlt	r1, #4
 8001e7a:	6809      	ldr	r1, [r1, #0]
 8001e7c:	2900      	cmp	r1, #0
 8001e7e:	bf14      	ite	ne
 8001e80:	680f      	ldrne	r7, [r1, #0]
 8001e82:	2700      	moveq	r7, #0
 8001e84:	2802      	cmp	r0, #2
 8001e86:	bfc6      	itte	gt
 8001e88:	6861      	ldrgt	r1, [r4, #4]
 8001e8a:	311c      	addgt	r1, #28
 8001e8c:	2104      	movle	r1, #4
 8001e8e:	6809      	ldr	r1, [r1, #0]
 8001e90:	2900      	cmp	r1, #0
 8001e92:	bf14      	ite	ne
 8001e94:	680b      	ldrne	r3, [r1, #0]
 8001e96:	2300      	moveq	r3, #0
 8001e98:	2802      	cmp	r0, #2
 8001e9a:	dd0b      	ble.n	8001eb4 <forward_dense+0x68>
 8001e9c:	6861      	ldr	r1, [r4, #4]
 8001e9e:	f111 0018 	adds.w	r0, r1, #24
 8001ea2:	d007      	beq.n	8001eb4 <forward_dense+0x68>
 8001ea4:	8b08      	ldrh	r0, [r1, #24]
 8001ea6:	2802      	cmp	r0, #2
 8001ea8:	db04      	blt.n	8001eb4 <forward_dense+0x68>
 8001eaa:	69c8      	ldr	r0, [r1, #28]
 8001eac:	b110      	cbz	r0, 8001eb4 <forward_dense+0x68>
 8001eae:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8001eb2:	e001      	b.n	8001eb8 <forward_dense+0x6c>
 8001eb4:	f04f 0a00 	mov.w	sl, #0
 8001eb8:	68d0      	ldr	r0, [r2, #12]
 8001eba:	6844      	ldr	r4, [r0, #4]
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	6845      	ldr	r5, [r0, #4]
 8001ec0:	6881      	ldr	r1, [r0, #8]
 8001ec2:	68c0      	ldr	r0, [r0, #12]
 8001ec4:	699e      	ldr	r6, [r3, #24]
 8001ec6:	69bf      	ldr	r7, [r7, #24]
 8001ec8:	f8d6 e000 	ldr.w	lr, [r6]
 8001ecc:	6992      	ldr	r2, [r2, #24]
 8001ece:	68bf      	ldr	r7, [r7, #8]
 8001ed0:	4341      	muls	r1, r0
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	ea4f 19ee 	mov.w	r9, lr, asr #7
 8001ed8:	ea4f 586e 	mov.w	r8, lr, asr #21
 8001edc:	ea4f 4e6e 	mov.w	lr, lr, asr #17
 8001ee0:	f00e 0e0f 	and.w	lr, lr, #15
 8001ee4:	f1be 0f04 	cmp.w	lr, #4
 8001ee8:	bf14      	ite	ne
 8001eea:	f1be 0f08 	cmpne.w	lr, #8
 8001eee:	68f0      	ldreq	r0, [r6, #12]
 8001ef0:	f009 097f 	and.w	r9, r9, #127	; 0x7f
 8001ef4:	f008 0803 	and.w	r8, r8, #3
 8001ef8:	695e      	ldr	r6, [r3, #20]
 8001efa:	6876      	ldr	r6, [r6, #4]
 8001efc:	fa29 f908 	lsr.w	r9, r9, r8
 8001f00:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8001f04:	2900      	cmp	r1, #0
 8001f06:	eb07 0285 	add.w	r2, r7, r5, lsl #2
 8001f0a:	f000 80ea 	beq.w	80020e2 <forward_dense+0x296>
 8001f0e:	9307      	str	r3, [sp, #28]
 8001f10:	f8cd a014 	str.w	sl, [sp, #20]
 8001f14:	9506      	str	r5, [sp, #24]
 8001f16:	9201      	str	r2, [sp, #4]
 8001f18:	9104      	str	r1, [sp, #16]
 8001f1a:	9907      	ldr	r1, [sp, #28]
 8001f1c:	698a      	ldr	r2, [r1, #24]
 8001f1e:	9905      	ldr	r1, [sp, #20]
 8001f20:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8001f24:	9b01      	ldr	r3, [sp, #4]
 8001f26:	2900      	cmp	r1, #0
 8001f28:	bf1a      	itte	ne
 8001f2a:	698a      	ldrne	r2, [r1, #24]
 8001f2c:	6892      	ldrne	r2, [r2, #8]
 8001f2e:	2200      	moveq	r2, #0
 8001f30:	2800      	cmp	r0, #0
 8001f32:	f040 80ab 	bne.w	800208c <forward_dense+0x240>
 8001f36:	429f      	cmp	r7, r3
 8001f38:	f080 80c7 	bcs.w	80020ca <forward_dense+0x27e>
 8001f3c:	9003      	str	r0, [sp, #12]
 8001f3e:	2a00      	cmp	r2, #0
 8001f40:	bf0e      	itee	eq
 8001f42:	ed9f 0a6b 	vldreq	s0, [pc, #428]	; 80020f0 <.text_12>
 8001f46:	ed92 0a00 	vldrne	s0, [r2]
 8001f4a:	1d12      	addne	r2, r2, #4
 8001f4c:	2c04      	cmp	r4, #4
 8001f4e:	4620      	mov	r0, r4
 8001f50:	46c6      	mov	lr, r8
 8001f52:	46dc      	mov	ip, fp
 8001f54:	eddf 0a66 	vldr	s1, [pc, #408]	; 80020f0 <.text_12>
 8001f58:	d35d      	bcc.n	8002016 <forward_dense+0x1ca>
 8001f5a:	08a1      	lsrs	r1, r4, #2
 8001f5c:	07cd      	lsls	r5, r1, #31
 8001f5e:	d51c      	bpl.n	8001f9a <forward_dense+0x14e>
 8001f60:	ed9c 4a00 	vldr	s8, [ip]
 8001f64:	edde 4a00 	vldr	s9, [lr]
 8001f68:	ed9c 3a01 	vldr	s6, [ip, #4]
 8001f6c:	edde 3a01 	vldr	s7, [lr, #4]
 8001f70:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001f74:	edde 2a02 	vldr	s5, [lr, #8]
 8001f78:	ed9c 1a03 	vldr	s2, [ip, #12]
 8001f7c:	edde 1a03 	vldr	s3, [lr, #12]
 8001f80:	ee44 0a24 	vmla.f32	s1, s8, s9
 8001f84:	ee43 0a23 	vmla.f32	s1, s6, s7
 8001f88:	ee42 0a22 	vmla.f32	s1, s4, s5
 8001f8c:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001f90:	f10e 0e10 	add.w	lr, lr, #16
 8001f94:	f10c 0c10 	add.w	ip, ip, #16
 8001f98:	1f00      	subs	r0, r0, #4
 8001f9a:	0849      	lsrs	r1, r1, #1
 8001f9c:	f000 803b 	beq.w	8002016 <forward_dense+0x1ca>
 8001fa0:	edde 4a00 	vldr	s9, [lr]
 8001fa4:	edde 3a01 	vldr	s7, [lr, #4]
 8001fa8:	edde 2a02 	vldr	s5, [lr, #8]
 8001fac:	edde 1a03 	vldr	s3, [lr, #12]
 8001fb0:	ed9c 1a03 	vldr	s2, [ip, #12]
 8001fb4:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001fb8:	ed9c 3a01 	vldr	s6, [ip, #4]
 8001fbc:	ed9c 4a00 	vldr	s8, [ip]
 8001fc0:	ee44 0a24 	vmla.f32	s1, s8, s9
 8001fc4:	ee43 0a23 	vmla.f32	s1, s6, s7
 8001fc8:	ee42 0a22 	vmla.f32	s1, s4, s5
 8001fcc:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001fd0:	f10e 0510 	add.w	r5, lr, #16
 8001fd4:	f10c 0c10 	add.w	ip, ip, #16
 8001fd8:	edd5 8a00 	vldr	s17, [r5]
 8001fdc:	ed9c 8a00 	vldr	s16, [ip]
 8001fe0:	ed9c 7a01 	vldr	s14, [ip, #4]
 8001fe4:	edd5 7a01 	vldr	s15, [r5, #4]
 8001fe8:	ed9c 6a02 	vldr	s12, [ip, #8]
 8001fec:	edd5 6a02 	vldr	s13, [r5, #8]
 8001ff0:	ed9c 5a03 	vldr	s10, [ip, #12]
 8001ff4:	edd5 5a03 	vldr	s11, [r5, #12]
 8001ff8:	ee48 0a28 	vmla.f32	s1, s16, s17
 8001ffc:	ee47 0a27 	vmla.f32	s1, s14, s15
 8002000:	3808      	subs	r0, #8
 8002002:	ee46 0a26 	vmla.f32	s1, s12, s13
 8002006:	1e49      	subs	r1, r1, #1
 8002008:	ee45 0a25 	vmla.f32	s1, s10, s11
 800200c:	f105 0e10 	add.w	lr, r5, #16
 8002010:	f10c 0c10 	add.w	ip, ip, #16
 8002014:	d1c4      	bne.n	8001fa0 <forward_dense+0x154>
 8002016:	b378      	cbz	r0, 8002078 <forward_dense+0x22c>
 8002018:	f010 0103 	ands.w	r1, r0, #3
 800201c:	f000 800c 	beq.w	8002038 <forward_dense+0x1ec>
 8002020:	ed9c 1a00 	vldr	s2, [ip]
 8002024:	edde 1a00 	vldr	s3, [lr]
 8002028:	1e49      	subs	r1, r1, #1
 800202a:	ee41 0a21 	vmla.f32	s1, s2, s3
 800202e:	f10e 0e04 	add.w	lr, lr, #4
 8002032:	f10c 0c04 	add.w	ip, ip, #4
 8002036:	d1f3      	bne.n	8002020 <forward_dense+0x1d4>
 8002038:	0880      	lsrs	r0, r0, #2
 800203a:	d01d      	beq.n	8002078 <forward_dense+0x22c>
 800203c:	ed9c 2a00 	vldr	s4, [ip]
 8002040:	ed9e 1a00 	vldr	s2, [lr]
 8002044:	eddc 1a01 	vldr	s3, [ip, #4]
 8002048:	edde 2a01 	vldr	s5, [lr, #4]
 800204c:	ee42 0a01 	vmla.f32	s1, s4, s2
 8002050:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8002054:	ed9c 2a02 	vldr	s4, [ip, #8]
 8002058:	ed9e 1a02 	vldr	s2, [lr, #8]
 800205c:	eddc 1a03 	vldr	s3, [ip, #12]
 8002060:	edde 2a03 	vldr	s5, [lr, #12]
 8002064:	ee42 0a01 	vmla.f32	s1, s4, s2
 8002068:	1e40      	subs	r0, r0, #1
 800206a:	ee41 0aa2 	vmla.f32	s1, s3, s5
 800206e:	f10e 0e10 	add.w	lr, lr, #16
 8002072:	f10c 0c10 	add.w	ip, ip, #16
 8002076:	d1e1      	bne.n	800203c <forward_dense+0x1f0>
 8002078:	ee30 0a20 	vadd.f32	s0, s0, s1
 800207c:	ed87 0a00 	vstr	s0, [r7]
 8002080:	1d3f      	adds	r7, r7, #4
 8002082:	429f      	cmp	r7, r3
 8002084:	44b3      	add	fp, r6
 8002086:	f4ff af5a 	bcc.w	8001f3e <forward_dense+0xf2>
 800208a:	e01d      	b.n	80020c8 <forward_dense+0x27c>
 800208c:	429f      	cmp	r7, r3
 800208e:	d21c      	bcs.n	80020ca <forward_dense+0x27e>
 8002090:	469a      	mov	sl, r3
 8002092:	9003      	str	r0, [sp, #12]
 8002094:	4615      	mov	r5, r2
 8002096:	2d00      	cmp	r5, #0
 8002098:	bf14      	ite	ne
 800209a:	f855 0b04 	ldrne.w	r0, [r5], #4
 800209e:	2000      	moveq	r0, #0
 80020a0:	9002      	str	r0, [sp, #8]
 80020a2:	f1b9 0f04 	cmp.w	r9, #4
 80020a6:	9a03      	ldr	r2, [sp, #12]
 80020a8:	9400      	str	r4, [sp, #0]
 80020aa:	4643      	mov	r3, r8
 80020ac:	4659      	mov	r1, fp
 80020ae:	a802      	add	r0, sp, #8
 80020b0:	d102      	bne.n	80020b8 <forward_dense+0x26c>
 80020b2:	f7ff fa03 	bl	80014bc <ai_dict4_dot_array_f32>
 80020b6:	e001      	b.n	80020bc <forward_dense+0x270>
 80020b8:	f7ff f950 	bl	800135c <ai_dict8_dot_array_f32>
 80020bc:	9802      	ldr	r0, [sp, #8]
 80020be:	f847 0b04 	str.w	r0, [r7], #4
 80020c2:	4557      	cmp	r7, sl
 80020c4:	44b3      	add	fp, r6
 80020c6:	d3e6      	bcc.n	8002096 <forward_dense+0x24a>
 80020c8:	9803      	ldr	r0, [sp, #12]
 80020ca:	9901      	ldr	r1, [sp, #4]
 80020cc:	9a06      	ldr	r2, [sp, #24]
 80020ce:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80020d2:	9904      	ldr	r1, [sp, #16]
 80020d4:	9301      	str	r3, [sp, #4]
 80020d6:	1e49      	subs	r1, r1, #1
 80020d8:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 80020dc:	9104      	str	r1, [sp, #16]
 80020de:	f47f af1c 	bne.w	8001f1a <forward_dense+0xce>
 80020e2:	b008      	add	sp, #32
 80020e4:	ecbd 8b02 	vpop	{d8}
 80020e8:	b001      	add	sp, #4
 80020ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080020f0 <.text_12>:
 80020f0:	00000000 	.word	0x00000000

080020f4 <forward_gemm>:
 80020f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020f8:	4604      	mov	r4, r0
 80020fa:	b091      	sub	sp, #68	; 0x44
 80020fc:	6961      	ldr	r1, [r4, #20]
 80020fe:	8808      	ldrh	r0, [r1, #0]
 8002100:	2800      	cmp	r0, #0
 8002102:	bf1a      	itte	ne
 8002104:	6848      	ldrne	r0, [r1, #4]
 8002106:	1d02      	addne	r2, r0, #4
 8002108:	2204      	moveq	r2, #4
 800210a:	460b      	mov	r3, r1
 800210c:	6810      	ldr	r0, [r2, #0]
 800210e:	8819      	ldrh	r1, [r3, #0]
 8002110:	2800      	cmp	r0, #0
 8002112:	bf14      	ite	ne
 8002114:	6805      	ldrne	r5, [r0, #0]
 8002116:	2500      	moveq	r5, #0
 8002118:	2900      	cmp	r1, #0
 800211a:	bf1d      	ittte	ne
 800211c:	6858      	ldrne	r0, [r3, #4]
 800211e:	2800      	cmpne	r0, #0
 8002120:	f8b0 c000 	ldrhne.w	ip, [r0]
 8002124:	f04f 0c00 	moveq.w	ip, #0
 8002128:	2902      	cmp	r1, #2
 800212a:	bfa6      	itte	ge
 800212c:	6858      	ldrge	r0, [r3, #4]
 800212e:	3010      	addge	r0, #16
 8002130:	2004      	movlt	r0, #4
 8002132:	6800      	ldr	r0, [r0, #0]
 8002134:	2800      	cmp	r0, #0
 8002136:	bf14      	ite	ne
 8002138:	6801      	ldrne	r1, [r0, #0]
 800213a:	2100      	moveq	r1, #0
 800213c:	2600      	movs	r6, #0
 800213e:	f1bc 0f03 	cmp.w	ip, #3
 8002142:	46b2      	mov	sl, r6
 8002144:	d107      	bne.n	8002156 <forward_gemm+0x62>
 8002146:	6810      	ldr	r0, [r2, #0]
 8002148:	2800      	cmp	r0, #0
 800214a:	d026      	beq.n	800219a <forward_gemm+0xa6>
 800214c:	6846      	ldr	r6, [r0, #4]
 800214e:	d024      	beq.n	800219a <forward_gemm+0xa6>
 8002150:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8002154:	e021      	b.n	800219a <forward_gemm+0xa6>
 8002156:	f1bc 0f02 	cmp.w	ip, #2
 800215a:	d10d      	bne.n	8002178 <forward_gemm+0x84>
 800215c:	6810      	ldr	r0, [r2, #0]
 800215e:	b100      	cbz	r0, 8002162 <forward_gemm+0x6e>
 8002160:	6846      	ldr	r6, [r0, #4]
 8002162:	881a      	ldrh	r2, [r3, #0]
 8002164:	2a02      	cmp	r2, #2
 8002166:	bfc6      	itte	gt
 8002168:	6858      	ldrgt	r0, [r3, #4]
 800216a:	301c      	addgt	r0, #28
 800216c:	2004      	movle	r0, #4
 800216e:	6800      	ldr	r0, [r0, #0]
 8002170:	b198      	cbz	r0, 800219a <forward_gemm+0xa6>
 8002172:	f8d0 a000 	ldr.w	sl, [r0]
 8002176:	e010      	b.n	800219a <forward_gemm+0xa6>
 8002178:	f1bc 0f01 	cmp.w	ip, #1
 800217c:	d10d      	bne.n	800219a <forward_gemm+0xa6>
 800217e:	881a      	ldrh	r2, [r3, #0]
 8002180:	2a02      	cmp	r2, #2
 8002182:	bfc6      	itte	gt
 8002184:	6858      	ldrgt	r0, [r3, #4]
 8002186:	f100 021c 	addgt.w	r2, r0, #28
 800218a:	2204      	movle	r2, #4
 800218c:	6810      	ldr	r0, [r2, #0]
 800218e:	2800      	cmp	r0, #0
 8002190:	d003      	beq.n	800219a <forward_gemm+0xa6>
 8002192:	6806      	ldr	r6, [r0, #0]
 8002194:	bf18      	it	ne
 8002196:	f8d0 a004 	ldrne.w	sl, [r0, #4]
 800219a:	68c8      	ldr	r0, [r1, #12]
 800219c:	6989      	ldr	r1, [r1, #24]
 800219e:	688b      	ldr	r3, [r1, #8]
 80021a0:	6842      	ldr	r2, [r0, #4]
 80021a2:	68c1      	ldr	r1, [r0, #12]
 80021a4:	b292      	uxth	r2, r2
 80021a6:	b289      	uxth	r1, r1
 80021a8:	a806      	add	r0, sp, #24
 80021aa:	f004 f831 	bl	8006210 <arm_mat_init_f32>
 80021ae:	69a9      	ldr	r1, [r5, #24]
 80021b0:	68e8      	ldr	r0, [r5, #12]
 80021b2:	688b      	ldr	r3, [r1, #8]
 80021b4:	6842      	ldr	r2, [r0, #4]
 80021b6:	68c1      	ldr	r1, [r0, #12]
 80021b8:	b292      	uxth	r2, r2
 80021ba:	b289      	uxth	r1, r1
 80021bc:	a804      	add	r0, sp, #16
 80021be:	f004 f827 	bl	8006210 <arm_mat_init_f32>
 80021c2:	69b1      	ldr	r1, [r6, #24]
 80021c4:	68f0      	ldr	r0, [r6, #12]
 80021c6:	688b      	ldr	r3, [r1, #8]
 80021c8:	6842      	ldr	r2, [r0, #4]
 80021ca:	68c1      	ldr	r1, [r0, #12]
 80021cc:	b292      	uxth	r2, r2
 80021ce:	b289      	uxth	r1, r1
 80021d0:	a802      	add	r0, sp, #8
 80021d2:	f004 f81d 	bl	8006210 <arm_mat_init_f32>
 80021d6:	f8da 1018 	ldr.w	r1, [sl, #24]
 80021da:	f8da 000c 	ldr.w	r0, [sl, #12]
 80021de:	688b      	ldr	r3, [r1, #8]
 80021e0:	6842      	ldr	r2, [r0, #4]
 80021e2:	68c1      	ldr	r1, [r0, #12]
 80021e4:	b292      	uxth	r2, r2
 80021e6:	b289      	uxth	r1, r1
 80021e8:	4668      	mov	r0, sp
 80021ea:	f004 f811 	bl	8006210 <arm_mat_init_f32>
 80021ee:	f994 5021 	ldrsb.w	r5, [r4, #33]	; 0x21
 80021f2:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80021f6:	9905      	ldr	r1, [sp, #20]
 80021f8:	9a03      	ldr	r2, [sp, #12]
 80021fa:	ed94 0a07 	vldr	s0, [r4, #28]
 80021fe:	edd4 0a06 	vldr	s1, [r4, #24]
 8002202:	910b      	str	r1, [sp, #44]	; 0x2c
 8002204:	920e      	str	r2, [sp, #56]	; 0x38
 8002206:	920d      	str	r2, [sp, #52]	; 0x34
 8002208:	2300      	movs	r3, #0
 800220a:	f8bd e010 	ldrh.w	lr, [sp, #16]
 800220e:	f8bd 8012 	ldrh.w	r8, [sp, #18]
 8002212:	9901      	ldr	r1, [sp, #4]
 8002214:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8002218:	f8bd c000 	ldrh.w	ip, [sp]
 800221c:	9c07      	ldr	r4, [sp, #28]
 800221e:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8002222:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 8002226:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 800222a:	9108      	str	r1, [sp, #32]
 800222c:	0002      	movs	r2, r0
 800222e:	bf0c      	ite	eq
 8002230:	4672      	moveq	r2, lr
 8002232:	4642      	movne	r2, r8
 8002234:	2f01      	cmp	r7, #1
 8002236:	bf0c      	ite	eq
 8002238:	4699      	moveq	r9, r3
 800223a:	f04f 0904 	movne.w	r9, #4
 800223e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8002242:	f1bc 0f01 	cmp.w	ip, #1
 8002246:	d104      	bne.n	8002252 <forward_gemm+0x15e>
 8002248:	2f01      	cmp	r7, #1
 800224a:	d004      	beq.n	8002256 <forward_gemm+0x162>
 800224c:	f1cb 0700 	rsb	r7, fp, #0
 8002250:	e002      	b.n	8002258 <forward_gemm+0x164>
 8002252:	2f01      	cmp	r7, #1
 8002254:	d000      	beq.n	8002258 <forward_gemm+0x164>
 8002256:	2700      	movs	r7, #0
 8002258:	2800      	cmp	r0, #0
 800225a:	bf0c      	ite	eq
 800225c:	46f4      	moveq	ip, lr
 800225e:	46c4      	movne	ip, r8
 8002260:	b23f      	sxth	r7, r7
 8002262:	45b4      	cmp	ip, r6
 8002264:	970c      	str	r7, [sp, #48]	; 0x30
 8002266:	f040 808b 	bne.w	8002380 <forward_gemm+0x28c>
 800226a:	2d00      	cmp	r5, #0
 800226c:	bf0c      	ite	eq
 800226e:	9109      	streq	r1, [sp, #36]	; 0x24
 8002270:	f8cd a024 	strne.w	sl, [sp, #36]	; 0x24
 8002274:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002276:	455f      	cmp	r7, fp
 8002278:	f040 8082 	bne.w	8002380 <forward_gemm+0x28c>
 800227c:	2800      	cmp	r0, #0
 800227e:	bf0c      	ite	eq
 8002280:	46c4      	moveq	ip, r8
 8002282:	46f4      	movne	ip, lr
 8002284:	2d00      	cmp	r5, #0
 8002286:	bf0c      	ite	eq
 8002288:	4657      	moveq	r7, sl
 800228a:	460f      	movne	r7, r1
 800228c:	45bc      	cmp	ip, r7
 800228e:	d177      	bne.n	8002380 <forward_gemm+0x28c>
 8002290:	9e08      	ldr	r6, [sp, #32]
 8002292:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8002296:	9410      	str	r4, [sp, #64]	; 0x40
 8002298:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800229c:	f8ad 2020 	strh.w	r2, [sp, #32]
 80022a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80022a2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80022a6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80022aa:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80022ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80022b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80022b2:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 80022b6:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 80022ba:	ea4f 0488 	mov.w	r4, r8, lsl #2
 80022be:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 80022c2:	2800      	cmp	r0, #0
 80022c4:	bf0c      	ite	eq
 80022c6:	f8dd 803c 	ldreq.w	r8, [sp, #60]	; 0x3c
 80022ca:	f8bd 8028 	ldrhne.w	r8, [sp, #40]	; 0x28
 80022ce:	fa1f fb88 	uxth.w	fp, r8
 80022d2:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 80022d6:	f1bb 0f00 	cmp.w	fp, #0
 80022da:	ed9f 1a9a 	vldr	s2, [pc, #616]	; 8002544 <.text_16>
 80022de:	d019      	beq.n	8002314 <forward_gemm+0x220>
 80022e0:	2800      	cmp	r0, #0
 80022e2:	bf0c      	ite	eq
 80022e4:	f04f 0b04 	moveq.w	fp, #4
 80022e8:	46a3      	movne	fp, r4
 80022ea:	2d00      	cmp	r5, #0
 80022ec:	f1a8 0801 	sub.w	r8, r8, #1
 80022f0:	edde 1a00 	vldr	s3, [lr]
 80022f4:	ed93 2a00 	vldr	s4, [r3]
 80022f8:	44de      	add	lr, fp
 80022fa:	bf0c      	ite	eq
 80022fc:	ea4f 0b81 	moveq.w	fp, r1, lsl #2
 8002300:	f04f 0b04 	movne.w	fp, #4
 8002304:	445b      	add	r3, fp
 8002306:	fa1f fb88 	uxth.w	fp, r8
 800230a:	f1bb 0f00 	cmp.w	fp, #0
 800230e:	ee01 1a82 	vmla.f32	s2, s3, s4
 8002312:	d1e5      	bne.n	80022e0 <forward_gemm+0x1ec>
 8002314:	ee20 1a81 	vmul.f32	s2, s1, s2
 8002318:	edd6 1a00 	vldr	s3, [r6]
 800231c:	ee00 1a21 	vmla.f32	s2, s0, s3
 8002320:	ed87 1a00 	vstr	s2, [r7]
 8002324:	1d3f      	adds	r7, r7, #4
 8002326:	1e52      	subs	r2, r2, #1
 8002328:	b292      	uxth	r2, r2
 800232a:	002b      	movs	r3, r5
 800232c:	bf0e      	itee	eq
 800232e:	1a8b      	subeq	r3, r1, r2
 8002330:	ebaa 0302 	subne.w	r3, sl, r2
 8002334:	434b      	mulne	r3, r1
 8002336:	2a00      	cmp	r2, #0
 8002338:	444e      	add	r6, r9
 800233a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800233e:	d1c0      	bne.n	80022c2 <forward_gemm+0x1ce>
 8002340:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
 8002344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002346:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002348:	f8bd e028 	ldrh.w	lr, [sp, #40]	; 0x28
 800234c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8002350:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8002354:	19df      	adds	r7, r3, r7
 8002356:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 800235a:	b100      	cbz	r0, 800235e <forward_gemm+0x26a>
 800235c:	2404      	movs	r4, #4
 800235e:	eb02 0c04 	add.w	ip, r2, r4
 8002362:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8002366:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002368:	1e67      	subs	r7, r4, #1
 800236a:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 800236e:	f8ad 7020 	strh.w	r7, [sp, #32]
 8002372:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8002376:	2a00      	cmp	r2, #0
 8002378:	d192      	bne.n	80022a0 <forward_gemm+0x1ac>
 800237a:	b011      	add	sp, #68	; 0x44
 800237c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002380:	fb0b f606 	mul.w	r6, fp, r6
 8002384:	2e00      	cmp	r6, #0
 8002386:	ddf8      	ble.n	800237a <forward_gemm+0x286>
 8002388:	f016 0003 	ands.w	r0, r6, #3
 800238c:	d003      	beq.n	8002396 <forward_gemm+0x2a2>
 800238e:	1e40      	subs	r0, r0, #1
 8002390:	f844 3b04 	str.w	r3, [r4], #4
 8002394:	d1fb      	bne.n	800238e <forward_gemm+0x29a>
 8002396:	08b1      	lsrs	r1, r6, #2
 8002398:	d0ef      	beq.n	800237a <forward_gemm+0x286>
 800239a:	6023      	str	r3, [r4, #0]
 800239c:	6063      	str	r3, [r4, #4]
 800239e:	60a3      	str	r3, [r4, #8]
 80023a0:	60e3      	str	r3, [r4, #12]
 80023a2:	3410      	adds	r4, #16
 80023a4:	1e49      	subs	r1, r1, #1
 80023a6:	d1f8      	bne.n	800239a <forward_gemm+0x2a6>
 80023a8:	b011      	add	sp, #68	; 0x44
 80023aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080023b0 <forward_matmul>:
 80023b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023b4:	b08b      	sub	sp, #44	; 0x2c
 80023b6:	6944      	ldr	r4, [r0, #20]
 80023b8:	8822      	ldrh	r2, [r4, #0]
 80023ba:	2a00      	cmp	r2, #0
 80023bc:	bf1a      	itte	ne
 80023be:	6860      	ldrne	r0, [r4, #4]
 80023c0:	1d03      	addne	r3, r0, #4
 80023c2:	2304      	moveq	r3, #4
 80023c4:	6819      	ldr	r1, [r3, #0]
 80023c6:	2900      	cmp	r1, #0
 80023c8:	bf14      	ite	ne
 80023ca:	6808      	ldrne	r0, [r1, #0]
 80023cc:	2000      	moveq	r0, #0
 80023ce:	2900      	cmp	r1, #0
 80023d0:	bf14      	ite	ne
 80023d2:	f8d1 b004 	ldrne.w	fp, [r1, #4]
 80023d6:	f04f 0b00 	moveq.w	fp, #0
 80023da:	2a02      	cmp	r2, #2
 80023dc:	bfa6      	itte	ge
 80023de:	6861      	ldrge	r1, [r4, #4]
 80023e0:	3110      	addge	r1, #16
 80023e2:	2104      	movlt	r1, #4
 80023e4:	6809      	ldr	r1, [r1, #0]
 80023e6:	2900      	cmp	r1, #0
 80023e8:	bf14      	ite	ne
 80023ea:	680b      	ldrne	r3, [r1, #0]
 80023ec:	2300      	moveq	r3, #0
 80023ee:	f1bb 0f00 	cmp.w	fp, #0
 80023f2:	d108      	bne.n	8002406 <forward_matmul+0x56>
 80023f4:	2a02      	cmp	r2, #2
 80023f6:	bfc6      	itte	gt
 80023f8:	6861      	ldrgt	r1, [r4, #4]
 80023fa:	311c      	addgt	r1, #28
 80023fc:	2104      	movle	r1, #4
 80023fe:	6809      	ldr	r1, [r1, #0]
 8002400:	b109      	cbz	r1, 8002406 <forward_matmul+0x56>
 8002402:	f8d1 b000 	ldr.w	fp, [r1]
 8002406:	68dd      	ldr	r5, [r3, #12]
 8002408:	68c4      	ldr	r4, [r0, #12]
 800240a:	f8db 900c 	ldr.w	r9, [fp, #12]
 800240e:	686e      	ldr	r6, [r5, #4]
 8002410:	f8d4 e000 	ldr.w	lr, [r4]
 8002414:	f8d9 2000 	ldr.w	r2, [r9]
 8002418:	f8d5 a000 	ldr.w	sl, [r5]
 800241c:	68a1      	ldr	r1, [r4, #8]
 800241e:	f8d9 8008 	ldr.w	r8, [r9, #8]
 8002422:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8002426:	68ef      	ldr	r7, [r5, #12]
 8002428:	9706      	str	r7, [sp, #24]
 800242a:	fb01 f50e 	mul.w	r5, r1, lr
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	68e7      	ldr	r7, [r4, #12]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	434f      	muls	r7, r1
 8002436:	fb0e f707 	mul.w	r7, lr, r7
 800243a:	970a      	str	r7, [sp, #40]	; 0x28
 800243c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8002440:	fb08 f404 	mul.w	r4, r8, r4
 8002444:	4354      	muls	r4, r2
 8002446:	2e00      	cmp	r6, #0
 8002448:	9409      	str	r4, [sp, #36]	; 0x24
 800244a:	fb08 f802 	mul.w	r8, r8, r2
 800244e:	d074      	beq.n	800253a <forward_matmul+0x18a>
 8002450:	2400      	movs	r4, #0
 8002452:	46a1      	mov	r9, r4
 8002454:	9602      	str	r6, [sp, #8]
 8002456:	9e06      	ldr	r6, [sp, #24]
 8002458:	2e00      	cmp	r6, #0
 800245a:	d064      	beq.n	8002526 <forward_matmul+0x176>
 800245c:	9f06      	ldr	r7, [sp, #24]
 800245e:	9701      	str	r7, [sp, #4]
 8002460:	f8cd c00c 	str.w	ip, [sp, #12]
 8002464:	2600      	movs	r6, #0
 8002466:	9505      	str	r5, [sp, #20]
 8002468:	9d03      	ldr	r5, [sp, #12]
 800246a:	2d00      	cmp	r5, #0
 800246c:	d051      	beq.n	8002512 <forward_matmul+0x162>
 800246e:	9500      	str	r5, [sp, #0]
 8002470:	f8cd a010 	str.w	sl, [sp, #16]
 8002474:	9207      	str	r2, [sp, #28]
 8002476:	f04f 0a00 	mov.w	sl, #0
 800247a:	9a04      	ldr	r2, [sp, #16]
 800247c:	2a00      	cmp	r2, #0
 800247e:	d03f      	beq.n	8002500 <forward_matmul+0x150>
 8002480:	f04f 0c00 	mov.w	ip, #0
 8002484:	9008      	str	r0, [sp, #32]
 8002486:	9808      	ldr	r0, [sp, #32]
 8002488:	6985      	ldr	r5, [r0, #24]
 800248a:	68a8      	ldr	r0, [r5, #8]
 800248c:	f8db 7018 	ldr.w	r7, [fp, #24]
 8002490:	4420      	add	r0, r4
 8002492:	4430      	add	r0, r6
 8002494:	eb00 050c 	add.w	r5, r0, ip
 8002498:	68b8      	ldr	r0, [r7, #8]
 800249a:	4448      	add	r0, r9
 800249c:	4450      	add	r0, sl
 800249e:	eb00 070c 	add.w	r7, r0, ip
 80024a2:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8002544 <.text_16>
 80024a6:	b319      	cbz	r1, 80024f0 <forward_matmul+0x140>
 80024a8:	07c8      	lsls	r0, r1, #31
 80024aa:	d509      	bpl.n	80024c0 <forward_matmul+0x110>
 80024ac:	edd5 0a00 	vldr	s1, [r5]
 80024b0:	ed97 1a00 	vldr	s2, [r7]
 80024b4:	ee00 0a81 	vmla.f32	s0, s1, s2
 80024b8:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 80024bc:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80024c0:	0848      	lsrs	r0, r1, #1
 80024c2:	d015      	beq.n	80024f0 <forward_matmul+0x140>
 80024c4:	edd5 0a00 	vldr	s1, [r5]
 80024c8:	ed97 1a00 	vldr	s2, [r7]
 80024cc:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 80024d0:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80024d4:	ee00 0a81 	vmla.f32	s0, s1, s2
 80024d8:	edd5 0a00 	vldr	s1, [r5]
 80024dc:	ed97 1a00 	vldr	s2, [r7]
 80024e0:	1e40      	subs	r0, r0, #1
 80024e2:	ee00 0a81 	vmla.f32	s0, s1, s2
 80024e6:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 80024ea:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80024ee:	d1e9      	bne.n	80024c4 <forward_matmul+0x114>
 80024f0:	ed83 0a00 	vstr	s0, [r3]
 80024f4:	1d1b      	adds	r3, r3, #4
 80024f6:	1e52      	subs	r2, r2, #1
 80024f8:	f10c 0c04 	add.w	ip, ip, #4
 80024fc:	d1c3      	bne.n	8002486 <forward_matmul+0xd6>
 80024fe:	9808      	ldr	r0, [sp, #32]
 8002500:	9d00      	ldr	r5, [sp, #0]
 8002502:	9a07      	ldr	r2, [sp, #28]
 8002504:	1e6d      	subs	r5, r5, #1
 8002506:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
 800250a:	9500      	str	r5, [sp, #0]
 800250c:	d1b5      	bne.n	800247a <forward_matmul+0xca>
 800250e:	f8dd a010 	ldr.w	sl, [sp, #16]
 8002512:	9f01      	ldr	r7, [sp, #4]
 8002514:	9d05      	ldr	r5, [sp, #20]
 8002516:	1e7f      	subs	r7, r7, #1
 8002518:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 800251c:	9701      	str	r7, [sp, #4]
 800251e:	d1a3      	bne.n	8002468 <forward_matmul+0xb8>
 8002520:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8002524:	9d05      	ldr	r5, [sp, #20]
 8002526:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002528:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800252a:	eb09 0986 	add.w	r9, r9, r6, lsl #2
 800252e:	9e02      	ldr	r6, [sp, #8]
 8002530:	1e76      	subs	r6, r6, #1
 8002532:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 8002536:	9602      	str	r6, [sp, #8]
 8002538:	d18d      	bne.n	8002456 <forward_matmul+0xa6>
 800253a:	b00b      	add	sp, #44	; 0x2c
 800253c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002540 <.text_15>:
 8002540:	0800135b 	.word	0x0800135b

08002544 <.text_16>:
 8002544:	00000000 	.word	0x00000000

08002548 <ai_shape_get_size>:
 8002548:	b470      	push	{r4, r5, r6}
 800254a:	4601      	mov	r1, r0
 800254c:	f04f 0201 	mov.w	r2, #1
 8002550:	680b      	ldr	r3, [r1, #0]
 8002552:	0a1b      	lsrs	r3, r3, #8
 8002554:	d01e      	beq.n	8002594 <ai_shape_get_size+0x4c>
 8002556:	684c      	ldr	r4, [r1, #4]
 8002558:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 800255c:	4618      	mov	r0, r3
 800255e:	1f0d      	subs	r5, r1, #4
 8002560:	f010 0103 	ands.w	r1, r0, #3
 8002564:	f000 8006 	beq.w	8002574 <ai_shape_get_size+0x2c>
 8002568:	f855 6904 	ldr.w	r6, [r5], #-4
 800256c:	1e5b      	subs	r3, r3, #1
 800256e:	4372      	muls	r2, r6
 8002570:	1e49      	subs	r1, r1, #1
 8002572:	d1f9      	bne.n	8002568 <ai_shape_get_size+0x20>
 8002574:	0880      	lsrs	r0, r0, #2
 8002576:	d00d      	beq.n	8002594 <ai_shape_get_size+0x4c>
 8002578:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 800257c:	3910      	subs	r1, #16
 800257e:	68cb      	ldr	r3, [r1, #12]
 8002580:	688c      	ldr	r4, [r1, #8]
 8002582:	684d      	ldr	r5, [r1, #4]
 8002584:	f851 6910 	ldr.w	r6, [r1], #-16
 8002588:	4363      	muls	r3, r4
 800258a:	436b      	muls	r3, r5
 800258c:	4373      	muls	r3, r6
 800258e:	435a      	muls	r2, r3
 8002590:	1e40      	subs	r0, r0, #1
 8002592:	d1f4      	bne.n	800257e <ai_shape_get_size+0x36>
 8002594:	bc70      	pop	{r4, r5, r6}
 8002596:	4610      	mov	r0, r2
 8002598:	4770      	bx	lr
	...

0800259c <nl_func_acos_array_f32>:
 800259c:	b570      	push	{r4, r5, r6, lr}
 800259e:	688c      	ldr	r4, [r1, #8]
 80025a0:	6880      	ldr	r0, [r0, #8]
 80025a2:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80025a6:	1f0d      	subs	r5, r1, #4
 80025a8:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80025ac:	1f0e      	subs	r6, r1, #4
 80025ae:	42a5      	cmp	r5, r4
 80025b0:	f0c0 800a 	bcc.w	80025c8 <nl_func_acos_array_f32+0x2c>
 80025b4:	ed95 0a00 	vldr	s0, [r5]
 80025b8:	f013 fc08 	bl	8015dcc <acosf>
 80025bc:	ed86 0a00 	vstr	s0, [r6]
 80025c0:	1f2d      	subs	r5, r5, #4
 80025c2:	1f36      	subs	r6, r6, #4
 80025c4:	42a5      	cmp	r5, r4
 80025c6:	d2f5      	bcs.n	80025b4 <nl_func_acos_array_f32+0x18>
 80025c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080025cc <forward_acos>:
 80025cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ce:	b081      	sub	sp, #4
 80025d0:	6942      	ldr	r2, [r0, #20]
 80025d2:	8811      	ldrh	r1, [r2, #0]
 80025d4:	2900      	cmp	r1, #0
 80025d6:	bf1a      	itte	ne
 80025d8:	6850      	ldrne	r0, [r2, #4]
 80025da:	1d00      	addne	r0, r0, #4
 80025dc:	2004      	moveq	r0, #4
 80025de:	f04f 0501 	mov.w	r5, #1
 80025e2:	6800      	ldr	r0, [r0, #0]
 80025e4:	2800      	cmp	r0, #0
 80025e6:	bf14      	ite	ne
 80025e8:	6803      	ldrne	r3, [r0, #0]
 80025ea:	2300      	moveq	r3, #0
 80025ec:	2902      	cmp	r1, #2
 80025ee:	bfa6      	itte	ge
 80025f0:	6850      	ldrge	r0, [r2, #4]
 80025f2:	3010      	addge	r0, #16
 80025f4:	2004      	movlt	r0, #4
 80025f6:	6800      	ldr	r0, [r0, #0]
 80025f8:	2800      	cmp	r0, #0
 80025fa:	bf19      	ittee	ne
 80025fc:	6800      	ldrne	r0, [r0, #0]
 80025fe:	f100 0418 	addne.w	r4, r0, #24
 8002602:	2100      	moveq	r1, #0
 8002604:	f101 0418 	addeq.w	r4, r1, #24
 8002608:	f103 0108 	add.w	r1, r3, #8
 800260c:	680a      	ldr	r2, [r1, #0]
 800260e:	0a12      	lsrs	r2, r2, #8
 8002610:	d01e      	beq.n	8002650 <forward_acos+0x84>
 8002612:	684e      	ldr	r6, [r1, #4]
 8002614:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002618:	4610      	mov	r0, r2
 800261a:	1f0f      	subs	r7, r1, #4
 800261c:	f010 0103 	ands.w	r1, r0, #3
 8002620:	d006      	beq.n	8002630 <forward_acos+0x64>
 8002622:	1e52      	subs	r2, r2, #1
 8002624:	f857 c904 	ldr.w	ip, [r7], #-4
 8002628:	1e49      	subs	r1, r1, #1
 800262a:	fb0c f505 	mul.w	r5, ip, r5
 800262e:	d1f8      	bne.n	8002622 <forward_acos+0x56>
 8002630:	0880      	lsrs	r0, r0, #2
 8002632:	d00d      	beq.n	8002650 <forward_acos+0x84>
 8002634:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002638:	3910      	subs	r1, #16
 800263a:	68ca      	ldr	r2, [r1, #12]
 800263c:	688e      	ldr	r6, [r1, #8]
 800263e:	684f      	ldr	r7, [r1, #4]
 8002640:	4372      	muls	r2, r6
 8002642:	f851 6910 	ldr.w	r6, [r1], #-16
 8002646:	437a      	muls	r2, r7
 8002648:	4372      	muls	r2, r6
 800264a:	4355      	muls	r5, r2
 800264c:	1e40      	subs	r0, r0, #1
 800264e:	d1f4      	bne.n	800263a <forward_acos+0x6e>
 8002650:	6998      	ldr	r0, [r3, #24]
 8002652:	6886      	ldr	r6, [r0, #8]
 8002654:	6821      	ldr	r1, [r4, #0]
 8002656:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800265a:	1f07      	subs	r7, r0, #4
 800265c:	6888      	ldr	r0, [r1, #8]
 800265e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002662:	1f14      	subs	r4, r2, #4
 8002664:	42b7      	cmp	r7, r6
 8002666:	d309      	bcc.n	800267c <forward_acos+0xb0>
 8002668:	ed97 0a00 	vldr	s0, [r7]
 800266c:	f013 fbae 	bl	8015dcc <acosf>
 8002670:	ed84 0a00 	vstr	s0, [r4]
 8002674:	1f3f      	subs	r7, r7, #4
 8002676:	1f24      	subs	r4, r4, #4
 8002678:	42b7      	cmp	r7, r6
 800267a:	d2f5      	bcs.n	8002668 <forward_acos+0x9c>
 800267c:	b001      	add	sp, #4
 800267e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002680 <nl_func_acosh_array_f32>:
 8002680:	b570      	push	{r4, r5, r6, lr}
 8002682:	688c      	ldr	r4, [r1, #8]
 8002684:	6880      	ldr	r0, [r0, #8]
 8002686:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800268a:	1f0d      	subs	r5, r1, #4
 800268c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002690:	1f0e      	subs	r6, r1, #4
 8002692:	42a5      	cmp	r5, r4
 8002694:	f0c0 800a 	bcc.w	80026ac <nl_func_acosh_array_f32+0x2c>
 8002698:	ed95 0a00 	vldr	s0, [r5]
 800269c:	f013 fbc2 	bl	8015e24 <acoshf>
 80026a0:	ed86 0a00 	vstr	s0, [r6]
 80026a4:	1f2d      	subs	r5, r5, #4
 80026a6:	1f36      	subs	r6, r6, #4
 80026a8:	42a5      	cmp	r5, r4
 80026aa:	d2f5      	bcs.n	8002698 <nl_func_acosh_array_f32+0x18>
 80026ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080026b0 <forward_acosh>:
 80026b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026b2:	b081      	sub	sp, #4
 80026b4:	6942      	ldr	r2, [r0, #20]
 80026b6:	8811      	ldrh	r1, [r2, #0]
 80026b8:	2900      	cmp	r1, #0
 80026ba:	bf1a      	itte	ne
 80026bc:	6850      	ldrne	r0, [r2, #4]
 80026be:	1d00      	addne	r0, r0, #4
 80026c0:	2004      	moveq	r0, #4
 80026c2:	f04f 0501 	mov.w	r5, #1
 80026c6:	6800      	ldr	r0, [r0, #0]
 80026c8:	2800      	cmp	r0, #0
 80026ca:	bf14      	ite	ne
 80026cc:	6803      	ldrne	r3, [r0, #0]
 80026ce:	2300      	moveq	r3, #0
 80026d0:	2902      	cmp	r1, #2
 80026d2:	bfa6      	itte	ge
 80026d4:	6850      	ldrge	r0, [r2, #4]
 80026d6:	3010      	addge	r0, #16
 80026d8:	2004      	movlt	r0, #4
 80026da:	6800      	ldr	r0, [r0, #0]
 80026dc:	2800      	cmp	r0, #0
 80026de:	bf19      	ittee	ne
 80026e0:	6800      	ldrne	r0, [r0, #0]
 80026e2:	f100 0418 	addne.w	r4, r0, #24
 80026e6:	2100      	moveq	r1, #0
 80026e8:	f101 0418 	addeq.w	r4, r1, #24
 80026ec:	f103 0108 	add.w	r1, r3, #8
 80026f0:	680a      	ldr	r2, [r1, #0]
 80026f2:	0a12      	lsrs	r2, r2, #8
 80026f4:	d01e      	beq.n	8002734 <forward_acosh+0x84>
 80026f6:	684e      	ldr	r6, [r1, #4]
 80026f8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80026fc:	4610      	mov	r0, r2
 80026fe:	1f0f      	subs	r7, r1, #4
 8002700:	f010 0103 	ands.w	r1, r0, #3
 8002704:	d006      	beq.n	8002714 <forward_acosh+0x64>
 8002706:	1e52      	subs	r2, r2, #1
 8002708:	f857 c904 	ldr.w	ip, [r7], #-4
 800270c:	1e49      	subs	r1, r1, #1
 800270e:	fb0c f505 	mul.w	r5, ip, r5
 8002712:	d1f8      	bne.n	8002706 <forward_acosh+0x56>
 8002714:	0880      	lsrs	r0, r0, #2
 8002716:	d00d      	beq.n	8002734 <forward_acosh+0x84>
 8002718:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800271c:	3910      	subs	r1, #16
 800271e:	68ca      	ldr	r2, [r1, #12]
 8002720:	688e      	ldr	r6, [r1, #8]
 8002722:	684f      	ldr	r7, [r1, #4]
 8002724:	4372      	muls	r2, r6
 8002726:	f851 6910 	ldr.w	r6, [r1], #-16
 800272a:	437a      	muls	r2, r7
 800272c:	4372      	muls	r2, r6
 800272e:	4355      	muls	r5, r2
 8002730:	1e40      	subs	r0, r0, #1
 8002732:	d1f4      	bne.n	800271e <forward_acosh+0x6e>
 8002734:	6998      	ldr	r0, [r3, #24]
 8002736:	6886      	ldr	r6, [r0, #8]
 8002738:	6821      	ldr	r1, [r4, #0]
 800273a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800273e:	1f07      	subs	r7, r0, #4
 8002740:	6888      	ldr	r0, [r1, #8]
 8002742:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002746:	1f14      	subs	r4, r2, #4
 8002748:	42b7      	cmp	r7, r6
 800274a:	d309      	bcc.n	8002760 <forward_acosh+0xb0>
 800274c:	ed97 0a00 	vldr	s0, [r7]
 8002750:	f013 fb68 	bl	8015e24 <acoshf>
 8002754:	ed84 0a00 	vstr	s0, [r4]
 8002758:	1f3f      	subs	r7, r7, #4
 800275a:	1f24      	subs	r4, r4, #4
 800275c:	42b7      	cmp	r7, r6
 800275e:	d2f5      	bcs.n	800274c <forward_acosh+0x9c>
 8002760:	b001      	add	sp, #4
 8002762:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002764 <nl_func_asin_array_f32>:
 8002764:	b570      	push	{r4, r5, r6, lr}
 8002766:	688c      	ldr	r4, [r1, #8]
 8002768:	6880      	ldr	r0, [r0, #8]
 800276a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800276e:	1f0d      	subs	r5, r1, #4
 8002770:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002774:	1f0e      	subs	r6, r1, #4
 8002776:	42a5      	cmp	r5, r4
 8002778:	f0c0 800a 	bcc.w	8002790 <nl_func_asin_array_f32+0x2c>
 800277c:	ed95 0a00 	vldr	s0, [r5]
 8002780:	f013 fb70 	bl	8015e64 <asinf>
 8002784:	ed86 0a00 	vstr	s0, [r6]
 8002788:	1f2d      	subs	r5, r5, #4
 800278a:	1f36      	subs	r6, r6, #4
 800278c:	42a5      	cmp	r5, r4
 800278e:	d2f5      	bcs.n	800277c <nl_func_asin_array_f32+0x18>
 8002790:	bd70      	pop	{r4, r5, r6, pc}
	...

08002794 <forward_asin>:
 8002794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002796:	b081      	sub	sp, #4
 8002798:	6942      	ldr	r2, [r0, #20]
 800279a:	8811      	ldrh	r1, [r2, #0]
 800279c:	2900      	cmp	r1, #0
 800279e:	bf1a      	itte	ne
 80027a0:	6850      	ldrne	r0, [r2, #4]
 80027a2:	1d00      	addne	r0, r0, #4
 80027a4:	2004      	moveq	r0, #4
 80027a6:	f04f 0501 	mov.w	r5, #1
 80027aa:	6800      	ldr	r0, [r0, #0]
 80027ac:	2800      	cmp	r0, #0
 80027ae:	bf14      	ite	ne
 80027b0:	6803      	ldrne	r3, [r0, #0]
 80027b2:	2300      	moveq	r3, #0
 80027b4:	2902      	cmp	r1, #2
 80027b6:	bfa6      	itte	ge
 80027b8:	6850      	ldrge	r0, [r2, #4]
 80027ba:	3010      	addge	r0, #16
 80027bc:	2004      	movlt	r0, #4
 80027be:	6800      	ldr	r0, [r0, #0]
 80027c0:	2800      	cmp	r0, #0
 80027c2:	bf19      	ittee	ne
 80027c4:	6800      	ldrne	r0, [r0, #0]
 80027c6:	f100 0418 	addne.w	r4, r0, #24
 80027ca:	2100      	moveq	r1, #0
 80027cc:	f101 0418 	addeq.w	r4, r1, #24
 80027d0:	f103 0108 	add.w	r1, r3, #8
 80027d4:	680a      	ldr	r2, [r1, #0]
 80027d6:	0a12      	lsrs	r2, r2, #8
 80027d8:	d01e      	beq.n	8002818 <forward_asin+0x84>
 80027da:	684e      	ldr	r6, [r1, #4]
 80027dc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80027e0:	4610      	mov	r0, r2
 80027e2:	1f0f      	subs	r7, r1, #4
 80027e4:	f010 0103 	ands.w	r1, r0, #3
 80027e8:	d006      	beq.n	80027f8 <forward_asin+0x64>
 80027ea:	1e52      	subs	r2, r2, #1
 80027ec:	f857 c904 	ldr.w	ip, [r7], #-4
 80027f0:	1e49      	subs	r1, r1, #1
 80027f2:	fb0c f505 	mul.w	r5, ip, r5
 80027f6:	d1f8      	bne.n	80027ea <forward_asin+0x56>
 80027f8:	0880      	lsrs	r0, r0, #2
 80027fa:	d00d      	beq.n	8002818 <forward_asin+0x84>
 80027fc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002800:	3910      	subs	r1, #16
 8002802:	68ca      	ldr	r2, [r1, #12]
 8002804:	688e      	ldr	r6, [r1, #8]
 8002806:	684f      	ldr	r7, [r1, #4]
 8002808:	4372      	muls	r2, r6
 800280a:	f851 6910 	ldr.w	r6, [r1], #-16
 800280e:	437a      	muls	r2, r7
 8002810:	4372      	muls	r2, r6
 8002812:	4355      	muls	r5, r2
 8002814:	1e40      	subs	r0, r0, #1
 8002816:	d1f4      	bne.n	8002802 <forward_asin+0x6e>
 8002818:	6998      	ldr	r0, [r3, #24]
 800281a:	6886      	ldr	r6, [r0, #8]
 800281c:	6821      	ldr	r1, [r4, #0]
 800281e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002822:	1f07      	subs	r7, r0, #4
 8002824:	6888      	ldr	r0, [r1, #8]
 8002826:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800282a:	1f14      	subs	r4, r2, #4
 800282c:	42b7      	cmp	r7, r6
 800282e:	d309      	bcc.n	8002844 <forward_asin+0xb0>
 8002830:	ed97 0a00 	vldr	s0, [r7]
 8002834:	f013 fb16 	bl	8015e64 <asinf>
 8002838:	ed84 0a00 	vstr	s0, [r4]
 800283c:	1f3f      	subs	r7, r7, #4
 800283e:	1f24      	subs	r4, r4, #4
 8002840:	42b7      	cmp	r7, r6
 8002842:	d2f5      	bcs.n	8002830 <forward_asin+0x9c>
 8002844:	b001      	add	sp, #4
 8002846:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002848 <nl_func_asinh_array_f32>:
 8002848:	b570      	push	{r4, r5, r6, lr}
 800284a:	688c      	ldr	r4, [r1, #8]
 800284c:	6880      	ldr	r0, [r0, #8]
 800284e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002852:	1f0d      	subs	r5, r1, #4
 8002854:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002858:	1f0e      	subs	r6, r1, #4
 800285a:	42a5      	cmp	r5, r4
 800285c:	f0c0 800a 	bcc.w	8002874 <nl_func_asinh_array_f32+0x2c>
 8002860:	ed95 0a00 	vldr	s0, [r5]
 8002864:	f012 fce6 	bl	8015234 <asinhf>
 8002868:	ed86 0a00 	vstr	s0, [r6]
 800286c:	1f2d      	subs	r5, r5, #4
 800286e:	1f36      	subs	r6, r6, #4
 8002870:	42a5      	cmp	r5, r4
 8002872:	d2f5      	bcs.n	8002860 <nl_func_asinh_array_f32+0x18>
 8002874:	bd70      	pop	{r4, r5, r6, pc}
	...

08002878 <forward_asinh>:
 8002878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287a:	b081      	sub	sp, #4
 800287c:	6942      	ldr	r2, [r0, #20]
 800287e:	8811      	ldrh	r1, [r2, #0]
 8002880:	2900      	cmp	r1, #0
 8002882:	bf1a      	itte	ne
 8002884:	6850      	ldrne	r0, [r2, #4]
 8002886:	1d00      	addne	r0, r0, #4
 8002888:	2004      	moveq	r0, #4
 800288a:	f04f 0501 	mov.w	r5, #1
 800288e:	6800      	ldr	r0, [r0, #0]
 8002890:	2800      	cmp	r0, #0
 8002892:	bf14      	ite	ne
 8002894:	6803      	ldrne	r3, [r0, #0]
 8002896:	2300      	moveq	r3, #0
 8002898:	2902      	cmp	r1, #2
 800289a:	bfa6      	itte	ge
 800289c:	6850      	ldrge	r0, [r2, #4]
 800289e:	3010      	addge	r0, #16
 80028a0:	2004      	movlt	r0, #4
 80028a2:	6800      	ldr	r0, [r0, #0]
 80028a4:	2800      	cmp	r0, #0
 80028a6:	bf19      	ittee	ne
 80028a8:	6800      	ldrne	r0, [r0, #0]
 80028aa:	f100 0418 	addne.w	r4, r0, #24
 80028ae:	2100      	moveq	r1, #0
 80028b0:	f101 0418 	addeq.w	r4, r1, #24
 80028b4:	f103 0108 	add.w	r1, r3, #8
 80028b8:	680a      	ldr	r2, [r1, #0]
 80028ba:	0a12      	lsrs	r2, r2, #8
 80028bc:	d01e      	beq.n	80028fc <forward_asinh+0x84>
 80028be:	684e      	ldr	r6, [r1, #4]
 80028c0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80028c4:	4610      	mov	r0, r2
 80028c6:	1f0f      	subs	r7, r1, #4
 80028c8:	f010 0103 	ands.w	r1, r0, #3
 80028cc:	d006      	beq.n	80028dc <forward_asinh+0x64>
 80028ce:	1e52      	subs	r2, r2, #1
 80028d0:	f857 c904 	ldr.w	ip, [r7], #-4
 80028d4:	1e49      	subs	r1, r1, #1
 80028d6:	fb0c f505 	mul.w	r5, ip, r5
 80028da:	d1f8      	bne.n	80028ce <forward_asinh+0x56>
 80028dc:	0880      	lsrs	r0, r0, #2
 80028de:	d00d      	beq.n	80028fc <forward_asinh+0x84>
 80028e0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80028e4:	3910      	subs	r1, #16
 80028e6:	68ca      	ldr	r2, [r1, #12]
 80028e8:	688e      	ldr	r6, [r1, #8]
 80028ea:	684f      	ldr	r7, [r1, #4]
 80028ec:	4372      	muls	r2, r6
 80028ee:	f851 6910 	ldr.w	r6, [r1], #-16
 80028f2:	437a      	muls	r2, r7
 80028f4:	4372      	muls	r2, r6
 80028f6:	4355      	muls	r5, r2
 80028f8:	1e40      	subs	r0, r0, #1
 80028fa:	d1f4      	bne.n	80028e6 <forward_asinh+0x6e>
 80028fc:	6998      	ldr	r0, [r3, #24]
 80028fe:	6886      	ldr	r6, [r0, #8]
 8002900:	6821      	ldr	r1, [r4, #0]
 8002902:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002906:	1f07      	subs	r7, r0, #4
 8002908:	6888      	ldr	r0, [r1, #8]
 800290a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800290e:	1f14      	subs	r4, r2, #4
 8002910:	42b7      	cmp	r7, r6
 8002912:	d309      	bcc.n	8002928 <forward_asinh+0xb0>
 8002914:	ed97 0a00 	vldr	s0, [r7]
 8002918:	f012 fc8c 	bl	8015234 <asinhf>
 800291c:	ed84 0a00 	vstr	s0, [r4]
 8002920:	1f3f      	subs	r7, r7, #4
 8002922:	1f24      	subs	r4, r4, #4
 8002924:	42b7      	cmp	r7, r6
 8002926:	d2f5      	bcs.n	8002914 <forward_asinh+0x9c>
 8002928:	b001      	add	sp, #4
 800292a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800292c <nl_func_atan_array_f32>:
 800292c:	b570      	push	{r4, r5, r6, lr}
 800292e:	688c      	ldr	r4, [r1, #8]
 8002930:	6880      	ldr	r0, [r0, #8]
 8002932:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002936:	1f0d      	subs	r5, r1, #4
 8002938:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800293c:	1f0e      	subs	r6, r1, #4
 800293e:	42a5      	cmp	r5, r4
 8002940:	f0c0 800a 	bcc.w	8002958 <nl_func_atan_array_f32+0x2c>
 8002944:	ed95 0a00 	vldr	s0, [r5]
 8002948:	f012 fcdc 	bl	8015304 <atanf>
 800294c:	ed86 0a00 	vstr	s0, [r6]
 8002950:	1f2d      	subs	r5, r5, #4
 8002952:	1f36      	subs	r6, r6, #4
 8002954:	42a5      	cmp	r5, r4
 8002956:	d2f5      	bcs.n	8002944 <nl_func_atan_array_f32+0x18>
 8002958:	bd70      	pop	{r4, r5, r6, pc}
	...

0800295c <forward_atan>:
 800295c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800295e:	b081      	sub	sp, #4
 8002960:	6942      	ldr	r2, [r0, #20]
 8002962:	8811      	ldrh	r1, [r2, #0]
 8002964:	2900      	cmp	r1, #0
 8002966:	bf1a      	itte	ne
 8002968:	6850      	ldrne	r0, [r2, #4]
 800296a:	1d00      	addne	r0, r0, #4
 800296c:	2004      	moveq	r0, #4
 800296e:	f04f 0501 	mov.w	r5, #1
 8002972:	6800      	ldr	r0, [r0, #0]
 8002974:	2800      	cmp	r0, #0
 8002976:	bf14      	ite	ne
 8002978:	6803      	ldrne	r3, [r0, #0]
 800297a:	2300      	moveq	r3, #0
 800297c:	2902      	cmp	r1, #2
 800297e:	bfa6      	itte	ge
 8002980:	6850      	ldrge	r0, [r2, #4]
 8002982:	3010      	addge	r0, #16
 8002984:	2004      	movlt	r0, #4
 8002986:	6800      	ldr	r0, [r0, #0]
 8002988:	2800      	cmp	r0, #0
 800298a:	bf19      	ittee	ne
 800298c:	6800      	ldrne	r0, [r0, #0]
 800298e:	f100 0418 	addne.w	r4, r0, #24
 8002992:	2100      	moveq	r1, #0
 8002994:	f101 0418 	addeq.w	r4, r1, #24
 8002998:	f103 0108 	add.w	r1, r3, #8
 800299c:	680a      	ldr	r2, [r1, #0]
 800299e:	0a12      	lsrs	r2, r2, #8
 80029a0:	d01e      	beq.n	80029e0 <forward_atan+0x84>
 80029a2:	684e      	ldr	r6, [r1, #4]
 80029a4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80029a8:	4610      	mov	r0, r2
 80029aa:	1f0f      	subs	r7, r1, #4
 80029ac:	f010 0103 	ands.w	r1, r0, #3
 80029b0:	d006      	beq.n	80029c0 <forward_atan+0x64>
 80029b2:	1e52      	subs	r2, r2, #1
 80029b4:	f857 c904 	ldr.w	ip, [r7], #-4
 80029b8:	1e49      	subs	r1, r1, #1
 80029ba:	fb0c f505 	mul.w	r5, ip, r5
 80029be:	d1f8      	bne.n	80029b2 <forward_atan+0x56>
 80029c0:	0880      	lsrs	r0, r0, #2
 80029c2:	d00d      	beq.n	80029e0 <forward_atan+0x84>
 80029c4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80029c8:	3910      	subs	r1, #16
 80029ca:	68ca      	ldr	r2, [r1, #12]
 80029cc:	688e      	ldr	r6, [r1, #8]
 80029ce:	684f      	ldr	r7, [r1, #4]
 80029d0:	4372      	muls	r2, r6
 80029d2:	f851 6910 	ldr.w	r6, [r1], #-16
 80029d6:	437a      	muls	r2, r7
 80029d8:	4372      	muls	r2, r6
 80029da:	4355      	muls	r5, r2
 80029dc:	1e40      	subs	r0, r0, #1
 80029de:	d1f4      	bne.n	80029ca <forward_atan+0x6e>
 80029e0:	6998      	ldr	r0, [r3, #24]
 80029e2:	6886      	ldr	r6, [r0, #8]
 80029e4:	6821      	ldr	r1, [r4, #0]
 80029e6:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80029ea:	1f07      	subs	r7, r0, #4
 80029ec:	6888      	ldr	r0, [r1, #8]
 80029ee:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80029f2:	1f14      	subs	r4, r2, #4
 80029f4:	42b7      	cmp	r7, r6
 80029f6:	d309      	bcc.n	8002a0c <forward_atan+0xb0>
 80029f8:	ed97 0a00 	vldr	s0, [r7]
 80029fc:	f012 fc82 	bl	8015304 <atanf>
 8002a00:	ed84 0a00 	vstr	s0, [r4]
 8002a04:	1f3f      	subs	r7, r7, #4
 8002a06:	1f24      	subs	r4, r4, #4
 8002a08:	42b7      	cmp	r7, r6
 8002a0a:	d2f5      	bcs.n	80029f8 <forward_atan+0x9c>
 8002a0c:	b001      	add	sp, #4
 8002a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a10 <nl_func_atanh_array_f32>:
 8002a10:	b570      	push	{r4, r5, r6, lr}
 8002a12:	688c      	ldr	r4, [r1, #8]
 8002a14:	6880      	ldr	r0, [r0, #8]
 8002a16:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002a1a:	1f0d      	subs	r5, r1, #4
 8002a1c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002a20:	1f0e      	subs	r6, r1, #4
 8002a22:	42a5      	cmp	r5, r4
 8002a24:	f0c0 800a 	bcc.w	8002a3c <nl_func_atanh_array_f32+0x2c>
 8002a28:	ed95 0a00 	vldr	s0, [r5]
 8002a2c:	f013 fa46 	bl	8015ebc <atanhf>
 8002a30:	ed86 0a00 	vstr	s0, [r6]
 8002a34:	1f2d      	subs	r5, r5, #4
 8002a36:	1f36      	subs	r6, r6, #4
 8002a38:	42a5      	cmp	r5, r4
 8002a3a:	d2f5      	bcs.n	8002a28 <nl_func_atanh_array_f32+0x18>
 8002a3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002a40 <forward_atanh>:
 8002a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a42:	b081      	sub	sp, #4
 8002a44:	6942      	ldr	r2, [r0, #20]
 8002a46:	8811      	ldrh	r1, [r2, #0]
 8002a48:	2900      	cmp	r1, #0
 8002a4a:	bf1a      	itte	ne
 8002a4c:	6850      	ldrne	r0, [r2, #4]
 8002a4e:	1d00      	addne	r0, r0, #4
 8002a50:	2004      	moveq	r0, #4
 8002a52:	f04f 0501 	mov.w	r5, #1
 8002a56:	6800      	ldr	r0, [r0, #0]
 8002a58:	2800      	cmp	r0, #0
 8002a5a:	bf14      	ite	ne
 8002a5c:	6803      	ldrne	r3, [r0, #0]
 8002a5e:	2300      	moveq	r3, #0
 8002a60:	2902      	cmp	r1, #2
 8002a62:	bfa6      	itte	ge
 8002a64:	6850      	ldrge	r0, [r2, #4]
 8002a66:	3010      	addge	r0, #16
 8002a68:	2004      	movlt	r0, #4
 8002a6a:	6800      	ldr	r0, [r0, #0]
 8002a6c:	2800      	cmp	r0, #0
 8002a6e:	bf19      	ittee	ne
 8002a70:	6800      	ldrne	r0, [r0, #0]
 8002a72:	f100 0418 	addne.w	r4, r0, #24
 8002a76:	2100      	moveq	r1, #0
 8002a78:	f101 0418 	addeq.w	r4, r1, #24
 8002a7c:	f103 0108 	add.w	r1, r3, #8
 8002a80:	680a      	ldr	r2, [r1, #0]
 8002a82:	0a12      	lsrs	r2, r2, #8
 8002a84:	d01e      	beq.n	8002ac4 <forward_atanh+0x84>
 8002a86:	684e      	ldr	r6, [r1, #4]
 8002a88:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	1f0f      	subs	r7, r1, #4
 8002a90:	f010 0103 	ands.w	r1, r0, #3
 8002a94:	d006      	beq.n	8002aa4 <forward_atanh+0x64>
 8002a96:	1e52      	subs	r2, r2, #1
 8002a98:	f857 c904 	ldr.w	ip, [r7], #-4
 8002a9c:	1e49      	subs	r1, r1, #1
 8002a9e:	fb0c f505 	mul.w	r5, ip, r5
 8002aa2:	d1f8      	bne.n	8002a96 <forward_atanh+0x56>
 8002aa4:	0880      	lsrs	r0, r0, #2
 8002aa6:	d00d      	beq.n	8002ac4 <forward_atanh+0x84>
 8002aa8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002aac:	3910      	subs	r1, #16
 8002aae:	68ca      	ldr	r2, [r1, #12]
 8002ab0:	688e      	ldr	r6, [r1, #8]
 8002ab2:	684f      	ldr	r7, [r1, #4]
 8002ab4:	4372      	muls	r2, r6
 8002ab6:	f851 6910 	ldr.w	r6, [r1], #-16
 8002aba:	437a      	muls	r2, r7
 8002abc:	4372      	muls	r2, r6
 8002abe:	4355      	muls	r5, r2
 8002ac0:	1e40      	subs	r0, r0, #1
 8002ac2:	d1f4      	bne.n	8002aae <forward_atanh+0x6e>
 8002ac4:	6998      	ldr	r0, [r3, #24]
 8002ac6:	6886      	ldr	r6, [r0, #8]
 8002ac8:	6821      	ldr	r1, [r4, #0]
 8002aca:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002ace:	1f07      	subs	r7, r0, #4
 8002ad0:	6888      	ldr	r0, [r1, #8]
 8002ad2:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002ad6:	1f14      	subs	r4, r2, #4
 8002ad8:	42b7      	cmp	r7, r6
 8002ada:	d309      	bcc.n	8002af0 <forward_atanh+0xb0>
 8002adc:	ed97 0a00 	vldr	s0, [r7]
 8002ae0:	f013 f9ec 	bl	8015ebc <atanhf>
 8002ae4:	ed84 0a00 	vstr	s0, [r4]
 8002ae8:	1f3f      	subs	r7, r7, #4
 8002aea:	1f24      	subs	r4, r4, #4
 8002aec:	42b7      	cmp	r7, r6
 8002aee:	d2f5      	bcs.n	8002adc <forward_atanh+0x9c>
 8002af0:	b001      	add	sp, #4
 8002af2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002af4 <nl_func_cos_array_f32>:
 8002af4:	b570      	push	{r4, r5, r6, lr}
 8002af6:	688c      	ldr	r4, [r1, #8]
 8002af8:	6880      	ldr	r0, [r0, #8]
 8002afa:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002afe:	1f0d      	subs	r5, r1, #4
 8002b00:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002b04:	1f0e      	subs	r6, r1, #4
 8002b06:	42a5      	cmp	r5, r4
 8002b08:	f0c0 800a 	bcc.w	8002b20 <nl_func_cos_array_f32+0x2c>
 8002b0c:	ed95 0a00 	vldr	s0, [r5]
 8002b10:	f012 fd0e 	bl	8015530 <cosf>
 8002b14:	ed86 0a00 	vstr	s0, [r6]
 8002b18:	1f2d      	subs	r5, r5, #4
 8002b1a:	1f36      	subs	r6, r6, #4
 8002b1c:	42a5      	cmp	r5, r4
 8002b1e:	d2f5      	bcs.n	8002b0c <nl_func_cos_array_f32+0x18>
 8002b20:	bd70      	pop	{r4, r5, r6, pc}
	...

08002b24 <forward_cos>:
 8002b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b26:	b081      	sub	sp, #4
 8002b28:	6942      	ldr	r2, [r0, #20]
 8002b2a:	8811      	ldrh	r1, [r2, #0]
 8002b2c:	2900      	cmp	r1, #0
 8002b2e:	bf1a      	itte	ne
 8002b30:	6850      	ldrne	r0, [r2, #4]
 8002b32:	1d00      	addne	r0, r0, #4
 8002b34:	2004      	moveq	r0, #4
 8002b36:	f04f 0501 	mov.w	r5, #1
 8002b3a:	6800      	ldr	r0, [r0, #0]
 8002b3c:	2800      	cmp	r0, #0
 8002b3e:	bf14      	ite	ne
 8002b40:	6803      	ldrne	r3, [r0, #0]
 8002b42:	2300      	moveq	r3, #0
 8002b44:	2902      	cmp	r1, #2
 8002b46:	bfa6      	itte	ge
 8002b48:	6850      	ldrge	r0, [r2, #4]
 8002b4a:	3010      	addge	r0, #16
 8002b4c:	2004      	movlt	r0, #4
 8002b4e:	6800      	ldr	r0, [r0, #0]
 8002b50:	2800      	cmp	r0, #0
 8002b52:	bf19      	ittee	ne
 8002b54:	6800      	ldrne	r0, [r0, #0]
 8002b56:	f100 0418 	addne.w	r4, r0, #24
 8002b5a:	2100      	moveq	r1, #0
 8002b5c:	f101 0418 	addeq.w	r4, r1, #24
 8002b60:	f103 0108 	add.w	r1, r3, #8
 8002b64:	680a      	ldr	r2, [r1, #0]
 8002b66:	0a12      	lsrs	r2, r2, #8
 8002b68:	d01e      	beq.n	8002ba8 <forward_cos+0x84>
 8002b6a:	684e      	ldr	r6, [r1, #4]
 8002b6c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002b70:	4610      	mov	r0, r2
 8002b72:	1f0f      	subs	r7, r1, #4
 8002b74:	f010 0103 	ands.w	r1, r0, #3
 8002b78:	d006      	beq.n	8002b88 <forward_cos+0x64>
 8002b7a:	1e52      	subs	r2, r2, #1
 8002b7c:	f857 c904 	ldr.w	ip, [r7], #-4
 8002b80:	1e49      	subs	r1, r1, #1
 8002b82:	fb0c f505 	mul.w	r5, ip, r5
 8002b86:	d1f8      	bne.n	8002b7a <forward_cos+0x56>
 8002b88:	0880      	lsrs	r0, r0, #2
 8002b8a:	d00d      	beq.n	8002ba8 <forward_cos+0x84>
 8002b8c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002b90:	3910      	subs	r1, #16
 8002b92:	68ca      	ldr	r2, [r1, #12]
 8002b94:	688e      	ldr	r6, [r1, #8]
 8002b96:	684f      	ldr	r7, [r1, #4]
 8002b98:	4372      	muls	r2, r6
 8002b9a:	f851 6910 	ldr.w	r6, [r1], #-16
 8002b9e:	437a      	muls	r2, r7
 8002ba0:	4372      	muls	r2, r6
 8002ba2:	4355      	muls	r5, r2
 8002ba4:	1e40      	subs	r0, r0, #1
 8002ba6:	d1f4      	bne.n	8002b92 <forward_cos+0x6e>
 8002ba8:	6998      	ldr	r0, [r3, #24]
 8002baa:	6886      	ldr	r6, [r0, #8]
 8002bac:	6821      	ldr	r1, [r4, #0]
 8002bae:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002bb2:	1f07      	subs	r7, r0, #4
 8002bb4:	6888      	ldr	r0, [r1, #8]
 8002bb6:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002bba:	1f14      	subs	r4, r2, #4
 8002bbc:	42b7      	cmp	r7, r6
 8002bbe:	d309      	bcc.n	8002bd4 <forward_cos+0xb0>
 8002bc0:	ed97 0a00 	vldr	s0, [r7]
 8002bc4:	f012 fcb4 	bl	8015530 <cosf>
 8002bc8:	ed84 0a00 	vstr	s0, [r4]
 8002bcc:	1f3f      	subs	r7, r7, #4
 8002bce:	1f24      	subs	r4, r4, #4
 8002bd0:	42b7      	cmp	r7, r6
 8002bd2:	d2f5      	bcs.n	8002bc0 <forward_cos+0x9c>
 8002bd4:	b001      	add	sp, #4
 8002bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bd8 <nl_func_cosh_array_f32>:
 8002bd8:	b570      	push	{r4, r5, r6, lr}
 8002bda:	688c      	ldr	r4, [r1, #8]
 8002bdc:	6880      	ldr	r0, [r0, #8]
 8002bde:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002be2:	1f0d      	subs	r5, r1, #4
 8002be4:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002be8:	1f0e      	subs	r6, r1, #4
 8002bea:	42a5      	cmp	r5, r4
 8002bec:	f0c0 800a 	bcc.w	8002c04 <nl_func_cosh_array_f32+0x2c>
 8002bf0:	ed95 0a00 	vldr	s0, [r5]
 8002bf4:	f013 f992 	bl	8015f1c <coshf>
 8002bf8:	ed86 0a00 	vstr	s0, [r6]
 8002bfc:	1f2d      	subs	r5, r5, #4
 8002bfe:	1f36      	subs	r6, r6, #4
 8002c00:	42a5      	cmp	r5, r4
 8002c02:	d2f5      	bcs.n	8002bf0 <nl_func_cosh_array_f32+0x18>
 8002c04:	bd70      	pop	{r4, r5, r6, pc}
	...

08002c08 <forward_cosh>:
 8002c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c0a:	b081      	sub	sp, #4
 8002c0c:	6942      	ldr	r2, [r0, #20]
 8002c0e:	8811      	ldrh	r1, [r2, #0]
 8002c10:	2900      	cmp	r1, #0
 8002c12:	bf1a      	itte	ne
 8002c14:	6850      	ldrne	r0, [r2, #4]
 8002c16:	1d00      	addne	r0, r0, #4
 8002c18:	2004      	moveq	r0, #4
 8002c1a:	f04f 0501 	mov.w	r5, #1
 8002c1e:	6800      	ldr	r0, [r0, #0]
 8002c20:	2800      	cmp	r0, #0
 8002c22:	bf14      	ite	ne
 8002c24:	6803      	ldrne	r3, [r0, #0]
 8002c26:	2300      	moveq	r3, #0
 8002c28:	2902      	cmp	r1, #2
 8002c2a:	bfa6      	itte	ge
 8002c2c:	6850      	ldrge	r0, [r2, #4]
 8002c2e:	3010      	addge	r0, #16
 8002c30:	2004      	movlt	r0, #4
 8002c32:	6800      	ldr	r0, [r0, #0]
 8002c34:	2800      	cmp	r0, #0
 8002c36:	bf19      	ittee	ne
 8002c38:	6800      	ldrne	r0, [r0, #0]
 8002c3a:	f100 0418 	addne.w	r4, r0, #24
 8002c3e:	2100      	moveq	r1, #0
 8002c40:	f101 0418 	addeq.w	r4, r1, #24
 8002c44:	f103 0108 	add.w	r1, r3, #8
 8002c48:	680a      	ldr	r2, [r1, #0]
 8002c4a:	0a12      	lsrs	r2, r2, #8
 8002c4c:	d01e      	beq.n	8002c8c <forward_cosh+0x84>
 8002c4e:	684e      	ldr	r6, [r1, #4]
 8002c50:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002c54:	4610      	mov	r0, r2
 8002c56:	1f0f      	subs	r7, r1, #4
 8002c58:	f010 0103 	ands.w	r1, r0, #3
 8002c5c:	d006      	beq.n	8002c6c <forward_cosh+0x64>
 8002c5e:	1e52      	subs	r2, r2, #1
 8002c60:	f857 c904 	ldr.w	ip, [r7], #-4
 8002c64:	1e49      	subs	r1, r1, #1
 8002c66:	fb0c f505 	mul.w	r5, ip, r5
 8002c6a:	d1f8      	bne.n	8002c5e <forward_cosh+0x56>
 8002c6c:	0880      	lsrs	r0, r0, #2
 8002c6e:	d00d      	beq.n	8002c8c <forward_cosh+0x84>
 8002c70:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002c74:	3910      	subs	r1, #16
 8002c76:	68ca      	ldr	r2, [r1, #12]
 8002c78:	688e      	ldr	r6, [r1, #8]
 8002c7a:	684f      	ldr	r7, [r1, #4]
 8002c7c:	4372      	muls	r2, r6
 8002c7e:	f851 6910 	ldr.w	r6, [r1], #-16
 8002c82:	437a      	muls	r2, r7
 8002c84:	4372      	muls	r2, r6
 8002c86:	4355      	muls	r5, r2
 8002c88:	1e40      	subs	r0, r0, #1
 8002c8a:	d1f4      	bne.n	8002c76 <forward_cosh+0x6e>
 8002c8c:	6998      	ldr	r0, [r3, #24]
 8002c8e:	6886      	ldr	r6, [r0, #8]
 8002c90:	6821      	ldr	r1, [r4, #0]
 8002c92:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002c96:	1f07      	subs	r7, r0, #4
 8002c98:	6888      	ldr	r0, [r1, #8]
 8002c9a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002c9e:	1f14      	subs	r4, r2, #4
 8002ca0:	42b7      	cmp	r7, r6
 8002ca2:	d309      	bcc.n	8002cb8 <forward_cosh+0xb0>
 8002ca4:	ed97 0a00 	vldr	s0, [r7]
 8002ca8:	f013 f938 	bl	8015f1c <coshf>
 8002cac:	ed84 0a00 	vstr	s0, [r4]
 8002cb0:	1f3f      	subs	r7, r7, #4
 8002cb2:	1f24      	subs	r4, r4, #4
 8002cb4:	42b7      	cmp	r7, r6
 8002cb6:	d2f5      	bcs.n	8002ca4 <forward_cosh+0x9c>
 8002cb8:	b001      	add	sp, #4
 8002cba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cbc <nl_func_erf_array_f32>:
 8002cbc:	b570      	push	{r4, r5, r6, lr}
 8002cbe:	688c      	ldr	r4, [r1, #8]
 8002cc0:	6880      	ldr	r0, [r0, #8]
 8002cc2:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002cc6:	1f0d      	subs	r5, r1, #4
 8002cc8:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002ccc:	1f0e      	subs	r6, r1, #4
 8002cce:	42a5      	cmp	r5, r4
 8002cd0:	f0c0 800a 	bcc.w	8002ce8 <nl_func_erf_array_f32+0x2c>
 8002cd4:	ed95 0a00 	vldr	s0, [r5]
 8002cd8:	f012 fc6e 	bl	80155b8 <erff>
 8002cdc:	ed86 0a00 	vstr	s0, [r6]
 8002ce0:	1f2d      	subs	r5, r5, #4
 8002ce2:	1f36      	subs	r6, r6, #4
 8002ce4:	42a5      	cmp	r5, r4
 8002ce6:	d2f5      	bcs.n	8002cd4 <nl_func_erf_array_f32+0x18>
 8002ce8:	bd70      	pop	{r4, r5, r6, pc}
	...

08002cec <forward_erf>:
 8002cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cee:	b081      	sub	sp, #4
 8002cf0:	6942      	ldr	r2, [r0, #20]
 8002cf2:	8811      	ldrh	r1, [r2, #0]
 8002cf4:	2900      	cmp	r1, #0
 8002cf6:	bf1a      	itte	ne
 8002cf8:	6850      	ldrne	r0, [r2, #4]
 8002cfa:	1d00      	addne	r0, r0, #4
 8002cfc:	2004      	moveq	r0, #4
 8002cfe:	f04f 0501 	mov.w	r5, #1
 8002d02:	6800      	ldr	r0, [r0, #0]
 8002d04:	2800      	cmp	r0, #0
 8002d06:	bf14      	ite	ne
 8002d08:	6803      	ldrne	r3, [r0, #0]
 8002d0a:	2300      	moveq	r3, #0
 8002d0c:	2902      	cmp	r1, #2
 8002d0e:	bfa6      	itte	ge
 8002d10:	6850      	ldrge	r0, [r2, #4]
 8002d12:	3010      	addge	r0, #16
 8002d14:	2004      	movlt	r0, #4
 8002d16:	6800      	ldr	r0, [r0, #0]
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	bf19      	ittee	ne
 8002d1c:	6800      	ldrne	r0, [r0, #0]
 8002d1e:	f100 0418 	addne.w	r4, r0, #24
 8002d22:	2100      	moveq	r1, #0
 8002d24:	f101 0418 	addeq.w	r4, r1, #24
 8002d28:	f103 0108 	add.w	r1, r3, #8
 8002d2c:	680a      	ldr	r2, [r1, #0]
 8002d2e:	0a12      	lsrs	r2, r2, #8
 8002d30:	d01e      	beq.n	8002d70 <forward_erf+0x84>
 8002d32:	684e      	ldr	r6, [r1, #4]
 8002d34:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002d38:	4610      	mov	r0, r2
 8002d3a:	1f0f      	subs	r7, r1, #4
 8002d3c:	f010 0103 	ands.w	r1, r0, #3
 8002d40:	d006      	beq.n	8002d50 <forward_erf+0x64>
 8002d42:	1e52      	subs	r2, r2, #1
 8002d44:	f857 c904 	ldr.w	ip, [r7], #-4
 8002d48:	1e49      	subs	r1, r1, #1
 8002d4a:	fb0c f505 	mul.w	r5, ip, r5
 8002d4e:	d1f8      	bne.n	8002d42 <forward_erf+0x56>
 8002d50:	0880      	lsrs	r0, r0, #2
 8002d52:	d00d      	beq.n	8002d70 <forward_erf+0x84>
 8002d54:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002d58:	3910      	subs	r1, #16
 8002d5a:	68ca      	ldr	r2, [r1, #12]
 8002d5c:	688e      	ldr	r6, [r1, #8]
 8002d5e:	684f      	ldr	r7, [r1, #4]
 8002d60:	4372      	muls	r2, r6
 8002d62:	f851 6910 	ldr.w	r6, [r1], #-16
 8002d66:	437a      	muls	r2, r7
 8002d68:	4372      	muls	r2, r6
 8002d6a:	4355      	muls	r5, r2
 8002d6c:	1e40      	subs	r0, r0, #1
 8002d6e:	d1f4      	bne.n	8002d5a <forward_erf+0x6e>
 8002d70:	6998      	ldr	r0, [r3, #24]
 8002d72:	6886      	ldr	r6, [r0, #8]
 8002d74:	6821      	ldr	r1, [r4, #0]
 8002d76:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002d7a:	1f07      	subs	r7, r0, #4
 8002d7c:	6888      	ldr	r0, [r1, #8]
 8002d7e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002d82:	1f14      	subs	r4, r2, #4
 8002d84:	42b7      	cmp	r7, r6
 8002d86:	d309      	bcc.n	8002d9c <forward_erf+0xb0>
 8002d88:	ed97 0a00 	vldr	s0, [r7]
 8002d8c:	f012 fc14 	bl	80155b8 <erff>
 8002d90:	ed84 0a00 	vstr	s0, [r4]
 8002d94:	1f3f      	subs	r7, r7, #4
 8002d96:	1f24      	subs	r4, r4, #4
 8002d98:	42b7      	cmp	r7, r6
 8002d9a:	d2f5      	bcs.n	8002d88 <forward_erf+0x9c>
 8002d9c:	b001      	add	sp, #4
 8002d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002da0 <nl_func_log_array_f32>:
 8002da0:	b570      	push	{r4, r5, r6, lr}
 8002da2:	688c      	ldr	r4, [r1, #8]
 8002da4:	6880      	ldr	r0, [r0, #8]
 8002da6:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002daa:	1f0d      	subs	r5, r1, #4
 8002dac:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002db0:	1f0e      	subs	r6, r1, #4
 8002db2:	42a5      	cmp	r5, r4
 8002db4:	f0c0 800a 	bcc.w	8002dcc <nl_func_log_array_f32+0x2c>
 8002db8:	ed95 0a00 	vldr	s0, [r5]
 8002dbc:	f013 f92c 	bl	8016018 <logf>
 8002dc0:	ed86 0a00 	vstr	s0, [r6]
 8002dc4:	1f2d      	subs	r5, r5, #4
 8002dc6:	1f36      	subs	r6, r6, #4
 8002dc8:	42a5      	cmp	r5, r4
 8002dca:	d2f5      	bcs.n	8002db8 <nl_func_log_array_f32+0x18>
 8002dcc:	bd70      	pop	{r4, r5, r6, pc}
	...

08002dd0 <forward_log>:
 8002dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dd2:	b081      	sub	sp, #4
 8002dd4:	6942      	ldr	r2, [r0, #20]
 8002dd6:	8811      	ldrh	r1, [r2, #0]
 8002dd8:	2900      	cmp	r1, #0
 8002dda:	bf1a      	itte	ne
 8002ddc:	6850      	ldrne	r0, [r2, #4]
 8002dde:	1d00      	addne	r0, r0, #4
 8002de0:	2004      	moveq	r0, #4
 8002de2:	f04f 0501 	mov.w	r5, #1
 8002de6:	6800      	ldr	r0, [r0, #0]
 8002de8:	2800      	cmp	r0, #0
 8002dea:	bf14      	ite	ne
 8002dec:	6803      	ldrne	r3, [r0, #0]
 8002dee:	2300      	moveq	r3, #0
 8002df0:	2902      	cmp	r1, #2
 8002df2:	bfa6      	itte	ge
 8002df4:	6850      	ldrge	r0, [r2, #4]
 8002df6:	3010      	addge	r0, #16
 8002df8:	2004      	movlt	r0, #4
 8002dfa:	6800      	ldr	r0, [r0, #0]
 8002dfc:	2800      	cmp	r0, #0
 8002dfe:	bf19      	ittee	ne
 8002e00:	6800      	ldrne	r0, [r0, #0]
 8002e02:	f100 0418 	addne.w	r4, r0, #24
 8002e06:	2100      	moveq	r1, #0
 8002e08:	f101 0418 	addeq.w	r4, r1, #24
 8002e0c:	f103 0108 	add.w	r1, r3, #8
 8002e10:	680a      	ldr	r2, [r1, #0]
 8002e12:	0a12      	lsrs	r2, r2, #8
 8002e14:	d01e      	beq.n	8002e54 <forward_log+0x84>
 8002e16:	684e      	ldr	r6, [r1, #4]
 8002e18:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	1f0f      	subs	r7, r1, #4
 8002e20:	f010 0103 	ands.w	r1, r0, #3
 8002e24:	d006      	beq.n	8002e34 <forward_log+0x64>
 8002e26:	1e52      	subs	r2, r2, #1
 8002e28:	f857 c904 	ldr.w	ip, [r7], #-4
 8002e2c:	1e49      	subs	r1, r1, #1
 8002e2e:	fb0c f505 	mul.w	r5, ip, r5
 8002e32:	d1f8      	bne.n	8002e26 <forward_log+0x56>
 8002e34:	0880      	lsrs	r0, r0, #2
 8002e36:	d00d      	beq.n	8002e54 <forward_log+0x84>
 8002e38:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002e3c:	3910      	subs	r1, #16
 8002e3e:	68ca      	ldr	r2, [r1, #12]
 8002e40:	688e      	ldr	r6, [r1, #8]
 8002e42:	684f      	ldr	r7, [r1, #4]
 8002e44:	4372      	muls	r2, r6
 8002e46:	f851 6910 	ldr.w	r6, [r1], #-16
 8002e4a:	437a      	muls	r2, r7
 8002e4c:	4372      	muls	r2, r6
 8002e4e:	4355      	muls	r5, r2
 8002e50:	1e40      	subs	r0, r0, #1
 8002e52:	d1f4      	bne.n	8002e3e <forward_log+0x6e>
 8002e54:	6998      	ldr	r0, [r3, #24]
 8002e56:	6886      	ldr	r6, [r0, #8]
 8002e58:	6821      	ldr	r1, [r4, #0]
 8002e5a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002e5e:	1f07      	subs	r7, r0, #4
 8002e60:	6888      	ldr	r0, [r1, #8]
 8002e62:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002e66:	1f14      	subs	r4, r2, #4
 8002e68:	42b7      	cmp	r7, r6
 8002e6a:	d309      	bcc.n	8002e80 <forward_log+0xb0>
 8002e6c:	ed97 0a00 	vldr	s0, [r7]
 8002e70:	f013 f8d2 	bl	8016018 <logf>
 8002e74:	ed84 0a00 	vstr	s0, [r4]
 8002e78:	1f3f      	subs	r7, r7, #4
 8002e7a:	1f24      	subs	r4, r4, #4
 8002e7c:	42b7      	cmp	r7, r6
 8002e7e:	d2f5      	bcs.n	8002e6c <forward_log+0x9c>
 8002e80:	b001      	add	sp, #4
 8002e82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e84 <nl_func_rsqrt_array_f32>:
 8002e84:	b570      	push	{r4, r5, r6, lr}
 8002e86:	460c      	mov	r4, r1
 8002e88:	6880      	ldr	r0, [r0, #8]
 8002e8a:	68a1      	ldr	r1, [r4, #8]
 8002e8c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002e90:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002e94:	1f1d      	subs	r5, r3, #4
 8002e96:	1f16      	subs	r6, r2, #4
 8002e98:	428d      	cmp	r5, r1
 8002e9a:	d30e      	bcc.n	8002eba <nl_func_rsqrt_array_f32+0x36>
 8002e9c:	ed95 0a00 	vldr	s0, [r5]
 8002ea0:	f003 f930 	bl	8006104 <ai_math_sqrt>
 8002ea4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002ea8:	eec0 0a80 	vdiv.f32	s1, s1, s0
 8002eac:	edc6 0a00 	vstr	s1, [r6]
 8002eb0:	1f2d      	subs	r5, r5, #4
 8002eb2:	68a0      	ldr	r0, [r4, #8]
 8002eb4:	1f36      	subs	r6, r6, #4
 8002eb6:	4285      	cmp	r5, r0
 8002eb8:	d2f0      	bcs.n	8002e9c <nl_func_rsqrt_array_f32+0x18>
 8002eba:	bd70      	pop	{r4, r5, r6, pc}

08002ebc <forward_rsqrt>:
 8002ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ebe:	b081      	sub	sp, #4
 8002ec0:	6942      	ldr	r2, [r0, #20]
 8002ec2:	8811      	ldrh	r1, [r2, #0]
 8002ec4:	2900      	cmp	r1, #0
 8002ec6:	bf1a      	itte	ne
 8002ec8:	6850      	ldrne	r0, [r2, #4]
 8002eca:	1d00      	addne	r0, r0, #4
 8002ecc:	2004      	moveq	r0, #4
 8002ece:	f04f 0501 	mov.w	r5, #1
 8002ed2:	6800      	ldr	r0, [r0, #0]
 8002ed4:	2800      	cmp	r0, #0
 8002ed6:	bf14      	ite	ne
 8002ed8:	6803      	ldrne	r3, [r0, #0]
 8002eda:	2300      	moveq	r3, #0
 8002edc:	2902      	cmp	r1, #2
 8002ede:	bfa6      	itte	ge
 8002ee0:	6850      	ldrge	r0, [r2, #4]
 8002ee2:	3010      	addge	r0, #16
 8002ee4:	2004      	movlt	r0, #4
 8002ee6:	6800      	ldr	r0, [r0, #0]
 8002ee8:	2800      	cmp	r0, #0
 8002eea:	bf19      	ittee	ne
 8002eec:	6800      	ldrne	r0, [r0, #0]
 8002eee:	f100 0418 	addne.w	r4, r0, #24
 8002ef2:	2100      	moveq	r1, #0
 8002ef4:	f101 0418 	addeq.w	r4, r1, #24
 8002ef8:	f103 0108 	add.w	r1, r3, #8
 8002efc:	680a      	ldr	r2, [r1, #0]
 8002efe:	0a12      	lsrs	r2, r2, #8
 8002f00:	d01e      	beq.n	8002f40 <forward_rsqrt+0x84>
 8002f02:	684e      	ldr	r6, [r1, #4]
 8002f04:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002f08:	4610      	mov	r0, r2
 8002f0a:	1f0f      	subs	r7, r1, #4
 8002f0c:	f010 0103 	ands.w	r1, r0, #3
 8002f10:	d006      	beq.n	8002f20 <forward_rsqrt+0x64>
 8002f12:	1e52      	subs	r2, r2, #1
 8002f14:	f857 c904 	ldr.w	ip, [r7], #-4
 8002f18:	1e49      	subs	r1, r1, #1
 8002f1a:	fb0c f505 	mul.w	r5, ip, r5
 8002f1e:	d1f8      	bne.n	8002f12 <forward_rsqrt+0x56>
 8002f20:	0880      	lsrs	r0, r0, #2
 8002f22:	d00d      	beq.n	8002f40 <forward_rsqrt+0x84>
 8002f24:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002f28:	3910      	subs	r1, #16
 8002f2a:	68ca      	ldr	r2, [r1, #12]
 8002f2c:	688e      	ldr	r6, [r1, #8]
 8002f2e:	684f      	ldr	r7, [r1, #4]
 8002f30:	4372      	muls	r2, r6
 8002f32:	f851 6910 	ldr.w	r6, [r1], #-16
 8002f36:	437a      	muls	r2, r7
 8002f38:	4372      	muls	r2, r6
 8002f3a:	4355      	muls	r5, r2
 8002f3c:	1e40      	subs	r0, r0, #1
 8002f3e:	d1f4      	bne.n	8002f2a <forward_rsqrt+0x6e>
 8002f40:	699e      	ldr	r6, [r3, #24]
 8002f42:	68b0      	ldr	r0, [r6, #8]
 8002f44:	6822      	ldr	r2, [r4, #0]
 8002f46:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8002f4a:	1f0f      	subs	r7, r1, #4
 8002f4c:	6891      	ldr	r1, [r2, #8]
 8002f4e:	eb01 0385 	add.w	r3, r1, r5, lsl #2
 8002f52:	1f1c      	subs	r4, r3, #4
 8002f54:	4287      	cmp	r7, r0
 8002f56:	d30e      	bcc.n	8002f76 <forward_rsqrt+0xba>
 8002f58:	ed97 0a00 	vldr	s0, [r7]
 8002f5c:	f003 f8d2 	bl	8006104 <ai_math_sqrt>
 8002f60:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002f64:	eec0 0a80 	vdiv.f32	s1, s1, s0
 8002f68:	edc4 0a00 	vstr	s1, [r4]
 8002f6c:	1f3f      	subs	r7, r7, #4
 8002f6e:	68b0      	ldr	r0, [r6, #8]
 8002f70:	1f24      	subs	r4, r4, #4
 8002f72:	4287      	cmp	r7, r0
 8002f74:	d2f0      	bcs.n	8002f58 <forward_rsqrt+0x9c>
 8002f76:	b001      	add	sp, #4
 8002f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002f7c <nl_func_sin_array_f32>:
 8002f7c:	b570      	push	{r4, r5, r6, lr}
 8002f7e:	688c      	ldr	r4, [r1, #8]
 8002f80:	6880      	ldr	r0, [r0, #8]
 8002f82:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002f86:	1f0d      	subs	r5, r1, #4
 8002f88:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002f8c:	1f0e      	subs	r6, r1, #4
 8002f8e:	42a5      	cmp	r5, r4
 8002f90:	f0c0 800a 	bcc.w	8002fa8 <nl_func_sin_array_f32+0x2c>
 8002f94:	ed95 0a00 	vldr	s0, [r5]
 8002f98:	f012 fe54 	bl	8015c44 <sinf>
 8002f9c:	ed86 0a00 	vstr	s0, [r6]
 8002fa0:	1f2d      	subs	r5, r5, #4
 8002fa2:	1f36      	subs	r6, r6, #4
 8002fa4:	42a5      	cmp	r5, r4
 8002fa6:	d2f5      	bcs.n	8002f94 <nl_func_sin_array_f32+0x18>
 8002fa8:	bd70      	pop	{r4, r5, r6, pc}
	...

08002fac <forward_sin>:
 8002fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fae:	b081      	sub	sp, #4
 8002fb0:	6942      	ldr	r2, [r0, #20]
 8002fb2:	8811      	ldrh	r1, [r2, #0]
 8002fb4:	2900      	cmp	r1, #0
 8002fb6:	bf1a      	itte	ne
 8002fb8:	6850      	ldrne	r0, [r2, #4]
 8002fba:	1d00      	addne	r0, r0, #4
 8002fbc:	2004      	moveq	r0, #4
 8002fbe:	f04f 0501 	mov.w	r5, #1
 8002fc2:	6800      	ldr	r0, [r0, #0]
 8002fc4:	2800      	cmp	r0, #0
 8002fc6:	bf14      	ite	ne
 8002fc8:	6803      	ldrne	r3, [r0, #0]
 8002fca:	2300      	moveq	r3, #0
 8002fcc:	2902      	cmp	r1, #2
 8002fce:	bfa6      	itte	ge
 8002fd0:	6850      	ldrge	r0, [r2, #4]
 8002fd2:	3010      	addge	r0, #16
 8002fd4:	2004      	movlt	r0, #4
 8002fd6:	6800      	ldr	r0, [r0, #0]
 8002fd8:	2800      	cmp	r0, #0
 8002fda:	bf19      	ittee	ne
 8002fdc:	6800      	ldrne	r0, [r0, #0]
 8002fde:	f100 0418 	addne.w	r4, r0, #24
 8002fe2:	2100      	moveq	r1, #0
 8002fe4:	f101 0418 	addeq.w	r4, r1, #24
 8002fe8:	f103 0108 	add.w	r1, r3, #8
 8002fec:	680a      	ldr	r2, [r1, #0]
 8002fee:	0a12      	lsrs	r2, r2, #8
 8002ff0:	d01e      	beq.n	8003030 <forward_sin+0x84>
 8002ff2:	684e      	ldr	r6, [r1, #4]
 8002ff4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	1f0f      	subs	r7, r1, #4
 8002ffc:	f010 0103 	ands.w	r1, r0, #3
 8003000:	d006      	beq.n	8003010 <forward_sin+0x64>
 8003002:	1e52      	subs	r2, r2, #1
 8003004:	f857 c904 	ldr.w	ip, [r7], #-4
 8003008:	1e49      	subs	r1, r1, #1
 800300a:	fb0c f505 	mul.w	r5, ip, r5
 800300e:	d1f8      	bne.n	8003002 <forward_sin+0x56>
 8003010:	0880      	lsrs	r0, r0, #2
 8003012:	d00d      	beq.n	8003030 <forward_sin+0x84>
 8003014:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003018:	3910      	subs	r1, #16
 800301a:	68ca      	ldr	r2, [r1, #12]
 800301c:	688e      	ldr	r6, [r1, #8]
 800301e:	684f      	ldr	r7, [r1, #4]
 8003020:	4372      	muls	r2, r6
 8003022:	f851 6910 	ldr.w	r6, [r1], #-16
 8003026:	437a      	muls	r2, r7
 8003028:	4372      	muls	r2, r6
 800302a:	4355      	muls	r5, r2
 800302c:	1e40      	subs	r0, r0, #1
 800302e:	d1f4      	bne.n	800301a <forward_sin+0x6e>
 8003030:	6998      	ldr	r0, [r3, #24]
 8003032:	6886      	ldr	r6, [r0, #8]
 8003034:	6821      	ldr	r1, [r4, #0]
 8003036:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800303a:	1f07      	subs	r7, r0, #4
 800303c:	6888      	ldr	r0, [r1, #8]
 800303e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003042:	1f14      	subs	r4, r2, #4
 8003044:	42b7      	cmp	r7, r6
 8003046:	d309      	bcc.n	800305c <forward_sin+0xb0>
 8003048:	ed97 0a00 	vldr	s0, [r7]
 800304c:	f012 fdfa 	bl	8015c44 <sinf>
 8003050:	ed84 0a00 	vstr	s0, [r4]
 8003054:	1f3f      	subs	r7, r7, #4
 8003056:	1f24      	subs	r4, r4, #4
 8003058:	42b7      	cmp	r7, r6
 800305a:	d2f5      	bcs.n	8003048 <forward_sin+0x9c>
 800305c:	b001      	add	sp, #4
 800305e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003060 <nl_func_sinh_array_f32>:
 8003060:	b570      	push	{r4, r5, r6, lr}
 8003062:	688c      	ldr	r4, [r1, #8]
 8003064:	6880      	ldr	r0, [r0, #8]
 8003066:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800306a:	1f0d      	subs	r5, r1, #4
 800306c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003070:	1f0e      	subs	r6, r1, #4
 8003072:	42a5      	cmp	r5, r4
 8003074:	f0c0 800a 	bcc.w	800308c <nl_func_sinh_array_f32+0x2c>
 8003078:	ed95 0a00 	vldr	s0, [r5]
 800307c:	f013 f852 	bl	8016124 <sinhf>
 8003080:	ed86 0a00 	vstr	s0, [r6]
 8003084:	1f2d      	subs	r5, r5, #4
 8003086:	1f36      	subs	r6, r6, #4
 8003088:	42a5      	cmp	r5, r4
 800308a:	d2f5      	bcs.n	8003078 <nl_func_sinh_array_f32+0x18>
 800308c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003090 <forward_sinh>:
 8003090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003092:	b081      	sub	sp, #4
 8003094:	6942      	ldr	r2, [r0, #20]
 8003096:	8811      	ldrh	r1, [r2, #0]
 8003098:	2900      	cmp	r1, #0
 800309a:	bf1a      	itte	ne
 800309c:	6850      	ldrne	r0, [r2, #4]
 800309e:	1d00      	addne	r0, r0, #4
 80030a0:	2004      	moveq	r0, #4
 80030a2:	f04f 0501 	mov.w	r5, #1
 80030a6:	6800      	ldr	r0, [r0, #0]
 80030a8:	2800      	cmp	r0, #0
 80030aa:	bf14      	ite	ne
 80030ac:	6803      	ldrne	r3, [r0, #0]
 80030ae:	2300      	moveq	r3, #0
 80030b0:	2902      	cmp	r1, #2
 80030b2:	bfa6      	itte	ge
 80030b4:	6850      	ldrge	r0, [r2, #4]
 80030b6:	3010      	addge	r0, #16
 80030b8:	2004      	movlt	r0, #4
 80030ba:	6800      	ldr	r0, [r0, #0]
 80030bc:	2800      	cmp	r0, #0
 80030be:	bf19      	ittee	ne
 80030c0:	6800      	ldrne	r0, [r0, #0]
 80030c2:	f100 0418 	addne.w	r4, r0, #24
 80030c6:	2100      	moveq	r1, #0
 80030c8:	f101 0418 	addeq.w	r4, r1, #24
 80030cc:	f103 0108 	add.w	r1, r3, #8
 80030d0:	680a      	ldr	r2, [r1, #0]
 80030d2:	0a12      	lsrs	r2, r2, #8
 80030d4:	d01e      	beq.n	8003114 <forward_sinh+0x84>
 80030d6:	684e      	ldr	r6, [r1, #4]
 80030d8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80030dc:	4610      	mov	r0, r2
 80030de:	1f0f      	subs	r7, r1, #4
 80030e0:	f010 0103 	ands.w	r1, r0, #3
 80030e4:	d006      	beq.n	80030f4 <forward_sinh+0x64>
 80030e6:	1e52      	subs	r2, r2, #1
 80030e8:	f857 c904 	ldr.w	ip, [r7], #-4
 80030ec:	1e49      	subs	r1, r1, #1
 80030ee:	fb0c f505 	mul.w	r5, ip, r5
 80030f2:	d1f8      	bne.n	80030e6 <forward_sinh+0x56>
 80030f4:	0880      	lsrs	r0, r0, #2
 80030f6:	d00d      	beq.n	8003114 <forward_sinh+0x84>
 80030f8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80030fc:	3910      	subs	r1, #16
 80030fe:	68ca      	ldr	r2, [r1, #12]
 8003100:	688e      	ldr	r6, [r1, #8]
 8003102:	684f      	ldr	r7, [r1, #4]
 8003104:	4372      	muls	r2, r6
 8003106:	f851 6910 	ldr.w	r6, [r1], #-16
 800310a:	437a      	muls	r2, r7
 800310c:	4372      	muls	r2, r6
 800310e:	4355      	muls	r5, r2
 8003110:	1e40      	subs	r0, r0, #1
 8003112:	d1f4      	bne.n	80030fe <forward_sinh+0x6e>
 8003114:	6998      	ldr	r0, [r3, #24]
 8003116:	6886      	ldr	r6, [r0, #8]
 8003118:	6821      	ldr	r1, [r4, #0]
 800311a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800311e:	1f07      	subs	r7, r0, #4
 8003120:	6888      	ldr	r0, [r1, #8]
 8003122:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003126:	1f14      	subs	r4, r2, #4
 8003128:	42b7      	cmp	r7, r6
 800312a:	d309      	bcc.n	8003140 <forward_sinh+0xb0>
 800312c:	ed97 0a00 	vldr	s0, [r7]
 8003130:	f012 fff8 	bl	8016124 <sinhf>
 8003134:	ed84 0a00 	vstr	s0, [r4]
 8003138:	1f3f      	subs	r7, r7, #4
 800313a:	1f24      	subs	r4, r4, #4
 800313c:	42b7      	cmp	r7, r6
 800313e:	d2f5      	bcs.n	800312c <forward_sinh+0x9c>
 8003140:	b001      	add	sp, #4
 8003142:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003144 <nl_func_tan_array_f32>:
 8003144:	b570      	push	{r4, r5, r6, lr}
 8003146:	688c      	ldr	r4, [r1, #8]
 8003148:	6880      	ldr	r0, [r0, #8]
 800314a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800314e:	1f0d      	subs	r5, r1, #4
 8003150:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003154:	1f0e      	subs	r6, r1, #4
 8003156:	42a5      	cmp	r5, r4
 8003158:	f0c0 800a 	bcc.w	8003170 <nl_func_tan_array_f32+0x2c>
 800315c:	ed95 0a00 	vldr	s0, [r5]
 8003160:	f012 fdb6 	bl	8015cd0 <tanf>
 8003164:	ed86 0a00 	vstr	s0, [r6]
 8003168:	1f2d      	subs	r5, r5, #4
 800316a:	1f36      	subs	r6, r6, #4
 800316c:	42a5      	cmp	r5, r4
 800316e:	d2f5      	bcs.n	800315c <nl_func_tan_array_f32+0x18>
 8003170:	bd70      	pop	{r4, r5, r6, pc}
	...

08003174 <forward_tan>:
 8003174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003176:	b081      	sub	sp, #4
 8003178:	6942      	ldr	r2, [r0, #20]
 800317a:	8811      	ldrh	r1, [r2, #0]
 800317c:	2900      	cmp	r1, #0
 800317e:	bf1a      	itte	ne
 8003180:	6850      	ldrne	r0, [r2, #4]
 8003182:	1d00      	addne	r0, r0, #4
 8003184:	2004      	moveq	r0, #4
 8003186:	f04f 0501 	mov.w	r5, #1
 800318a:	6800      	ldr	r0, [r0, #0]
 800318c:	2800      	cmp	r0, #0
 800318e:	bf14      	ite	ne
 8003190:	6803      	ldrne	r3, [r0, #0]
 8003192:	2300      	moveq	r3, #0
 8003194:	2902      	cmp	r1, #2
 8003196:	bfa6      	itte	ge
 8003198:	6850      	ldrge	r0, [r2, #4]
 800319a:	3010      	addge	r0, #16
 800319c:	2004      	movlt	r0, #4
 800319e:	6800      	ldr	r0, [r0, #0]
 80031a0:	2800      	cmp	r0, #0
 80031a2:	bf19      	ittee	ne
 80031a4:	6800      	ldrne	r0, [r0, #0]
 80031a6:	f100 0418 	addne.w	r4, r0, #24
 80031aa:	2100      	moveq	r1, #0
 80031ac:	f101 0418 	addeq.w	r4, r1, #24
 80031b0:	f103 0108 	add.w	r1, r3, #8
 80031b4:	680a      	ldr	r2, [r1, #0]
 80031b6:	0a12      	lsrs	r2, r2, #8
 80031b8:	d01e      	beq.n	80031f8 <forward_tan+0x84>
 80031ba:	684e      	ldr	r6, [r1, #4]
 80031bc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80031c0:	4610      	mov	r0, r2
 80031c2:	1f0f      	subs	r7, r1, #4
 80031c4:	f010 0103 	ands.w	r1, r0, #3
 80031c8:	d006      	beq.n	80031d8 <forward_tan+0x64>
 80031ca:	1e52      	subs	r2, r2, #1
 80031cc:	f857 c904 	ldr.w	ip, [r7], #-4
 80031d0:	1e49      	subs	r1, r1, #1
 80031d2:	fb0c f505 	mul.w	r5, ip, r5
 80031d6:	d1f8      	bne.n	80031ca <forward_tan+0x56>
 80031d8:	0880      	lsrs	r0, r0, #2
 80031da:	d00d      	beq.n	80031f8 <forward_tan+0x84>
 80031dc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80031e0:	3910      	subs	r1, #16
 80031e2:	68ca      	ldr	r2, [r1, #12]
 80031e4:	688e      	ldr	r6, [r1, #8]
 80031e6:	684f      	ldr	r7, [r1, #4]
 80031e8:	4372      	muls	r2, r6
 80031ea:	f851 6910 	ldr.w	r6, [r1], #-16
 80031ee:	437a      	muls	r2, r7
 80031f0:	4372      	muls	r2, r6
 80031f2:	4355      	muls	r5, r2
 80031f4:	1e40      	subs	r0, r0, #1
 80031f6:	d1f4      	bne.n	80031e2 <forward_tan+0x6e>
 80031f8:	6998      	ldr	r0, [r3, #24]
 80031fa:	6886      	ldr	r6, [r0, #8]
 80031fc:	6821      	ldr	r1, [r4, #0]
 80031fe:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003202:	1f07      	subs	r7, r0, #4
 8003204:	6888      	ldr	r0, [r1, #8]
 8003206:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800320a:	1f14      	subs	r4, r2, #4
 800320c:	42b7      	cmp	r7, r6
 800320e:	d309      	bcc.n	8003224 <forward_tan+0xb0>
 8003210:	ed97 0a00 	vldr	s0, [r7]
 8003214:	f012 fd5c 	bl	8015cd0 <tanf>
 8003218:	ed84 0a00 	vstr	s0, [r4]
 800321c:	1f3f      	subs	r7, r7, #4
 800321e:	1f24      	subs	r4, r4, #4
 8003220:	42b7      	cmp	r7, r6
 8003222:	d2f5      	bcs.n	8003210 <forward_tan+0x9c>
 8003224:	b001      	add	sp, #4
 8003226:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003228 <nl_func_abs_array_f32>:
 8003228:	6889      	ldr	r1, [r1, #8]
 800322a:	6880      	ldr	r0, [r0, #8]
 800322c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003230:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003234:	1f1b      	subs	r3, r3, #4
 8003236:	1f10      	subs	r0, r2, #4
 8003238:	428b      	cmp	r3, r1
 800323a:	d307      	bcc.n	800324c <nl_func_abs_array_f32+0x24>
 800323c:	f853 c904 	ldr.w	ip, [r3], #-4
 8003240:	f02c 4200 	bic.w	r2, ip, #2147483648	; 0x80000000
 8003244:	428b      	cmp	r3, r1
 8003246:	f840 2904 	str.w	r2, [r0], #-4
 800324a:	d2f7      	bcs.n	800323c <nl_func_abs_array_f32+0x14>
 800324c:	4770      	bx	lr
	...

08003250 <forward_abs>:
 8003250:	b4f0      	push	{r4, r5, r6, r7}
 8003252:	6942      	ldr	r2, [r0, #20]
 8003254:	8811      	ldrh	r1, [r2, #0]
 8003256:	2900      	cmp	r1, #0
 8003258:	bf1a      	itte	ne
 800325a:	6850      	ldrne	r0, [r2, #4]
 800325c:	1d00      	addne	r0, r0, #4
 800325e:	2004      	moveq	r0, #4
 8003260:	f04f 0501 	mov.w	r5, #1
 8003264:	6800      	ldr	r0, [r0, #0]
 8003266:	2800      	cmp	r0, #0
 8003268:	bf14      	ite	ne
 800326a:	6803      	ldrne	r3, [r0, #0]
 800326c:	2300      	moveq	r3, #0
 800326e:	2902      	cmp	r1, #2
 8003270:	bfa6      	itte	ge
 8003272:	6850      	ldrge	r0, [r2, #4]
 8003274:	3010      	addge	r0, #16
 8003276:	2004      	movlt	r0, #4
 8003278:	6800      	ldr	r0, [r0, #0]
 800327a:	2800      	cmp	r0, #0
 800327c:	bf19      	ittee	ne
 800327e:	6800      	ldrne	r0, [r0, #0]
 8003280:	f100 0418 	addne.w	r4, r0, #24
 8003284:	2100      	moveq	r1, #0
 8003286:	f101 0418 	addeq.w	r4, r1, #24
 800328a:	f103 0108 	add.w	r1, r3, #8
 800328e:	680a      	ldr	r2, [r1, #0]
 8003290:	0a12      	lsrs	r2, r2, #8
 8003292:	d01e      	beq.n	80032d2 <forward_abs+0x82>
 8003294:	684e      	ldr	r6, [r1, #4]
 8003296:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800329a:	4610      	mov	r0, r2
 800329c:	1f0f      	subs	r7, r1, #4
 800329e:	f010 0103 	ands.w	r1, r0, #3
 80032a2:	d006      	beq.n	80032b2 <forward_abs+0x62>
 80032a4:	1e52      	subs	r2, r2, #1
 80032a6:	f857 c904 	ldr.w	ip, [r7], #-4
 80032aa:	1e49      	subs	r1, r1, #1
 80032ac:	fb0c f505 	mul.w	r5, ip, r5
 80032b0:	d1f8      	bne.n	80032a4 <forward_abs+0x54>
 80032b2:	0880      	lsrs	r0, r0, #2
 80032b4:	d00d      	beq.n	80032d2 <forward_abs+0x82>
 80032b6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80032ba:	3910      	subs	r1, #16
 80032bc:	68ca      	ldr	r2, [r1, #12]
 80032be:	688e      	ldr	r6, [r1, #8]
 80032c0:	684f      	ldr	r7, [r1, #4]
 80032c2:	4372      	muls	r2, r6
 80032c4:	f851 6910 	ldr.w	r6, [r1], #-16
 80032c8:	437a      	muls	r2, r7
 80032ca:	4372      	muls	r2, r6
 80032cc:	4355      	muls	r5, r2
 80032ce:	1e40      	subs	r0, r0, #1
 80032d0:	d1f4      	bne.n	80032bc <forward_abs+0x6c>
 80032d2:	6998      	ldr	r0, [r3, #24]
 80032d4:	6822      	ldr	r2, [r4, #0]
 80032d6:	6880      	ldr	r0, [r0, #8]
 80032d8:	6893      	ldr	r3, [r2, #8]
 80032da:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80032de:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 80032e2:	1f09      	subs	r1, r1, #4
 80032e4:	1f22      	subs	r2, r4, #4
 80032e6:	4281      	cmp	r1, r0
 80032e8:	f0c0 8008 	bcc.w	80032fc <forward_abs+0xac>
 80032ec:	f851 3904 	ldr.w	r3, [r1], #-4
 80032f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032f4:	4281      	cmp	r1, r0
 80032f6:	f842 3904 	str.w	r3, [r2], #-4
 80032fa:	d2f7      	bcs.n	80032ec <forward_abs+0x9c>
 80032fc:	bcf0      	pop	{r4, r5, r6, r7}
 80032fe:	4770      	bx	lr

08003300 <nl_func_ceil_array_f32>:
 8003300:	b570      	push	{r4, r5, r6, lr}
 8003302:	688c      	ldr	r4, [r1, #8]
 8003304:	6880      	ldr	r0, [r0, #8]
 8003306:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800330a:	1f0d      	subs	r5, r1, #4
 800330c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003310:	1f0e      	subs	r6, r1, #4
 8003312:	42a5      	cmp	r5, r4
 8003314:	f0c0 800a 	bcc.w	800332c <nl_func_ceil_array_f32+0x2c>
 8003318:	ed95 0a00 	vldr	s0, [r5]
 800331c:	f012 f8c6 	bl	80154ac <ceilf>
 8003320:	ed86 0a00 	vstr	s0, [r6]
 8003324:	1f2d      	subs	r5, r5, #4
 8003326:	1f36      	subs	r6, r6, #4
 8003328:	42a5      	cmp	r5, r4
 800332a:	d2f5      	bcs.n	8003318 <nl_func_ceil_array_f32+0x18>
 800332c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003330 <forward_ceil>:
 8003330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003332:	b081      	sub	sp, #4
 8003334:	6942      	ldr	r2, [r0, #20]
 8003336:	8811      	ldrh	r1, [r2, #0]
 8003338:	2900      	cmp	r1, #0
 800333a:	bf1a      	itte	ne
 800333c:	6850      	ldrne	r0, [r2, #4]
 800333e:	1d00      	addne	r0, r0, #4
 8003340:	2004      	moveq	r0, #4
 8003342:	f04f 0501 	mov.w	r5, #1
 8003346:	6800      	ldr	r0, [r0, #0]
 8003348:	2800      	cmp	r0, #0
 800334a:	bf14      	ite	ne
 800334c:	6803      	ldrne	r3, [r0, #0]
 800334e:	2300      	moveq	r3, #0
 8003350:	2902      	cmp	r1, #2
 8003352:	bfa6      	itte	ge
 8003354:	6850      	ldrge	r0, [r2, #4]
 8003356:	3010      	addge	r0, #16
 8003358:	2004      	movlt	r0, #4
 800335a:	6800      	ldr	r0, [r0, #0]
 800335c:	2800      	cmp	r0, #0
 800335e:	bf19      	ittee	ne
 8003360:	6800      	ldrne	r0, [r0, #0]
 8003362:	f100 0418 	addne.w	r4, r0, #24
 8003366:	2100      	moveq	r1, #0
 8003368:	f101 0418 	addeq.w	r4, r1, #24
 800336c:	f103 0108 	add.w	r1, r3, #8
 8003370:	680a      	ldr	r2, [r1, #0]
 8003372:	0a12      	lsrs	r2, r2, #8
 8003374:	d01e      	beq.n	80033b4 <forward_ceil+0x84>
 8003376:	684e      	ldr	r6, [r1, #4]
 8003378:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800337c:	4610      	mov	r0, r2
 800337e:	1f0f      	subs	r7, r1, #4
 8003380:	f010 0103 	ands.w	r1, r0, #3
 8003384:	d006      	beq.n	8003394 <forward_ceil+0x64>
 8003386:	1e52      	subs	r2, r2, #1
 8003388:	f857 c904 	ldr.w	ip, [r7], #-4
 800338c:	1e49      	subs	r1, r1, #1
 800338e:	fb0c f505 	mul.w	r5, ip, r5
 8003392:	d1f8      	bne.n	8003386 <forward_ceil+0x56>
 8003394:	0880      	lsrs	r0, r0, #2
 8003396:	d00d      	beq.n	80033b4 <forward_ceil+0x84>
 8003398:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800339c:	3910      	subs	r1, #16
 800339e:	68ca      	ldr	r2, [r1, #12]
 80033a0:	688e      	ldr	r6, [r1, #8]
 80033a2:	684f      	ldr	r7, [r1, #4]
 80033a4:	4372      	muls	r2, r6
 80033a6:	f851 6910 	ldr.w	r6, [r1], #-16
 80033aa:	437a      	muls	r2, r7
 80033ac:	4372      	muls	r2, r6
 80033ae:	4355      	muls	r5, r2
 80033b0:	1e40      	subs	r0, r0, #1
 80033b2:	d1f4      	bne.n	800339e <forward_ceil+0x6e>
 80033b4:	6998      	ldr	r0, [r3, #24]
 80033b6:	6886      	ldr	r6, [r0, #8]
 80033b8:	6821      	ldr	r1, [r4, #0]
 80033ba:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80033be:	1f07      	subs	r7, r0, #4
 80033c0:	6888      	ldr	r0, [r1, #8]
 80033c2:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80033c6:	1f14      	subs	r4, r2, #4
 80033c8:	42b7      	cmp	r7, r6
 80033ca:	d309      	bcc.n	80033e0 <forward_ceil+0xb0>
 80033cc:	ed97 0a00 	vldr	s0, [r7]
 80033d0:	f012 f86c 	bl	80154ac <ceilf>
 80033d4:	ed84 0a00 	vstr	s0, [r4]
 80033d8:	1f3f      	subs	r7, r7, #4
 80033da:	1f24      	subs	r4, r4, #4
 80033dc:	42b7      	cmp	r7, r6
 80033de:	d2f5      	bcs.n	80033cc <forward_ceil+0x9c>
 80033e0:	b001      	add	sp, #4
 80033e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033e4 <nl_func_floor_array_f32>:
 80033e4:	b570      	push	{r4, r5, r6, lr}
 80033e6:	688c      	ldr	r4, [r1, #8]
 80033e8:	6880      	ldr	r0, [r0, #8]
 80033ea:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80033ee:	1f0d      	subs	r5, r1, #4
 80033f0:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80033f4:	1f0e      	subs	r6, r1, #4
 80033f6:	42a5      	cmp	r5, r4
 80033f8:	f0c0 800a 	bcc.w	8003410 <nl_func_floor_array_f32+0x2c>
 80033fc:	ed95 0a00 	vldr	s0, [r5]
 8003400:	f012 fabc 	bl	801597c <floorf>
 8003404:	ed86 0a00 	vstr	s0, [r6]
 8003408:	1f2d      	subs	r5, r5, #4
 800340a:	1f36      	subs	r6, r6, #4
 800340c:	42a5      	cmp	r5, r4
 800340e:	d2f5      	bcs.n	80033fc <nl_func_floor_array_f32+0x18>
 8003410:	bd70      	pop	{r4, r5, r6, pc}
	...

08003414 <forward_floor>:
 8003414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003416:	b081      	sub	sp, #4
 8003418:	6942      	ldr	r2, [r0, #20]
 800341a:	8811      	ldrh	r1, [r2, #0]
 800341c:	2900      	cmp	r1, #0
 800341e:	bf1a      	itte	ne
 8003420:	6850      	ldrne	r0, [r2, #4]
 8003422:	1d00      	addne	r0, r0, #4
 8003424:	2004      	moveq	r0, #4
 8003426:	f04f 0501 	mov.w	r5, #1
 800342a:	6800      	ldr	r0, [r0, #0]
 800342c:	2800      	cmp	r0, #0
 800342e:	bf14      	ite	ne
 8003430:	6803      	ldrne	r3, [r0, #0]
 8003432:	2300      	moveq	r3, #0
 8003434:	2902      	cmp	r1, #2
 8003436:	bfa6      	itte	ge
 8003438:	6850      	ldrge	r0, [r2, #4]
 800343a:	3010      	addge	r0, #16
 800343c:	2004      	movlt	r0, #4
 800343e:	6800      	ldr	r0, [r0, #0]
 8003440:	2800      	cmp	r0, #0
 8003442:	bf19      	ittee	ne
 8003444:	6800      	ldrne	r0, [r0, #0]
 8003446:	f100 0418 	addne.w	r4, r0, #24
 800344a:	2100      	moveq	r1, #0
 800344c:	f101 0418 	addeq.w	r4, r1, #24
 8003450:	f103 0108 	add.w	r1, r3, #8
 8003454:	680a      	ldr	r2, [r1, #0]
 8003456:	0a12      	lsrs	r2, r2, #8
 8003458:	d01e      	beq.n	8003498 <forward_floor+0x84>
 800345a:	684e      	ldr	r6, [r1, #4]
 800345c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003460:	4610      	mov	r0, r2
 8003462:	1f0f      	subs	r7, r1, #4
 8003464:	f010 0103 	ands.w	r1, r0, #3
 8003468:	d006      	beq.n	8003478 <forward_floor+0x64>
 800346a:	1e52      	subs	r2, r2, #1
 800346c:	f857 c904 	ldr.w	ip, [r7], #-4
 8003470:	1e49      	subs	r1, r1, #1
 8003472:	fb0c f505 	mul.w	r5, ip, r5
 8003476:	d1f8      	bne.n	800346a <forward_floor+0x56>
 8003478:	0880      	lsrs	r0, r0, #2
 800347a:	d00d      	beq.n	8003498 <forward_floor+0x84>
 800347c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003480:	3910      	subs	r1, #16
 8003482:	68ca      	ldr	r2, [r1, #12]
 8003484:	688e      	ldr	r6, [r1, #8]
 8003486:	684f      	ldr	r7, [r1, #4]
 8003488:	4372      	muls	r2, r6
 800348a:	f851 6910 	ldr.w	r6, [r1], #-16
 800348e:	437a      	muls	r2, r7
 8003490:	4372      	muls	r2, r6
 8003492:	4355      	muls	r5, r2
 8003494:	1e40      	subs	r0, r0, #1
 8003496:	d1f4      	bne.n	8003482 <forward_floor+0x6e>
 8003498:	6998      	ldr	r0, [r3, #24]
 800349a:	6886      	ldr	r6, [r0, #8]
 800349c:	6821      	ldr	r1, [r4, #0]
 800349e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80034a2:	1f07      	subs	r7, r0, #4
 80034a4:	6888      	ldr	r0, [r1, #8]
 80034a6:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80034aa:	1f14      	subs	r4, r2, #4
 80034ac:	42b7      	cmp	r7, r6
 80034ae:	d309      	bcc.n	80034c4 <forward_floor+0xb0>
 80034b0:	ed97 0a00 	vldr	s0, [r7]
 80034b4:	f012 fa62 	bl	801597c <floorf>
 80034b8:	ed84 0a00 	vstr	s0, [r4]
 80034bc:	1f3f      	subs	r7, r7, #4
 80034be:	1f24      	subs	r4, r4, #4
 80034c0:	42b7      	cmp	r7, r6
 80034c2:	d2f5      	bcs.n	80034b0 <forward_floor+0x9c>
 80034c4:	b001      	add	sp, #4
 80034c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034c8 <nl_func_round_array_f32>:
 80034c8:	b570      	push	{r4, r5, r6, lr}
 80034ca:	688c      	ldr	r4, [r1, #8]
 80034cc:	6880      	ldr	r0, [r0, #8]
 80034ce:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80034d2:	1f0d      	subs	r5, r1, #4
 80034d4:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80034d8:	1f0e      	subs	r6, r1, #4
 80034da:	42a5      	cmp	r5, r4
 80034dc:	f0c0 800a 	bcc.w	80034f4 <nl_func_round_array_f32+0x2c>
 80034e0:	ed95 0a00 	vldr	s0, [r5]
 80034e4:	f012 fb8a 	bl	8015bfc <roundf>
 80034e8:	ed86 0a00 	vstr	s0, [r6]
 80034ec:	1f2d      	subs	r5, r5, #4
 80034ee:	1f36      	subs	r6, r6, #4
 80034f0:	42a5      	cmp	r5, r4
 80034f2:	d2f5      	bcs.n	80034e0 <nl_func_round_array_f32+0x18>
 80034f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080034f8 <forward_round>:
 80034f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034fa:	b081      	sub	sp, #4
 80034fc:	6942      	ldr	r2, [r0, #20]
 80034fe:	8811      	ldrh	r1, [r2, #0]
 8003500:	2900      	cmp	r1, #0
 8003502:	bf1a      	itte	ne
 8003504:	6850      	ldrne	r0, [r2, #4]
 8003506:	1d00      	addne	r0, r0, #4
 8003508:	2004      	moveq	r0, #4
 800350a:	f04f 0501 	mov.w	r5, #1
 800350e:	6800      	ldr	r0, [r0, #0]
 8003510:	2800      	cmp	r0, #0
 8003512:	bf14      	ite	ne
 8003514:	6803      	ldrne	r3, [r0, #0]
 8003516:	2300      	moveq	r3, #0
 8003518:	2902      	cmp	r1, #2
 800351a:	bfa6      	itte	ge
 800351c:	6850      	ldrge	r0, [r2, #4]
 800351e:	3010      	addge	r0, #16
 8003520:	2004      	movlt	r0, #4
 8003522:	6800      	ldr	r0, [r0, #0]
 8003524:	2800      	cmp	r0, #0
 8003526:	bf19      	ittee	ne
 8003528:	6800      	ldrne	r0, [r0, #0]
 800352a:	f100 0418 	addne.w	r4, r0, #24
 800352e:	2100      	moveq	r1, #0
 8003530:	f101 0418 	addeq.w	r4, r1, #24
 8003534:	f103 0108 	add.w	r1, r3, #8
 8003538:	680a      	ldr	r2, [r1, #0]
 800353a:	0a12      	lsrs	r2, r2, #8
 800353c:	d01e      	beq.n	800357c <forward_round+0x84>
 800353e:	684e      	ldr	r6, [r1, #4]
 8003540:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003544:	4610      	mov	r0, r2
 8003546:	1f0f      	subs	r7, r1, #4
 8003548:	f010 0103 	ands.w	r1, r0, #3
 800354c:	d006      	beq.n	800355c <forward_round+0x64>
 800354e:	1e52      	subs	r2, r2, #1
 8003550:	f857 c904 	ldr.w	ip, [r7], #-4
 8003554:	1e49      	subs	r1, r1, #1
 8003556:	fb0c f505 	mul.w	r5, ip, r5
 800355a:	d1f8      	bne.n	800354e <forward_round+0x56>
 800355c:	0880      	lsrs	r0, r0, #2
 800355e:	d00d      	beq.n	800357c <forward_round+0x84>
 8003560:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003564:	3910      	subs	r1, #16
 8003566:	68ca      	ldr	r2, [r1, #12]
 8003568:	688e      	ldr	r6, [r1, #8]
 800356a:	684f      	ldr	r7, [r1, #4]
 800356c:	4372      	muls	r2, r6
 800356e:	f851 6910 	ldr.w	r6, [r1], #-16
 8003572:	437a      	muls	r2, r7
 8003574:	4372      	muls	r2, r6
 8003576:	4355      	muls	r5, r2
 8003578:	1e40      	subs	r0, r0, #1
 800357a:	d1f4      	bne.n	8003566 <forward_round+0x6e>
 800357c:	6998      	ldr	r0, [r3, #24]
 800357e:	6886      	ldr	r6, [r0, #8]
 8003580:	6821      	ldr	r1, [r4, #0]
 8003582:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003586:	1f07      	subs	r7, r0, #4
 8003588:	6888      	ldr	r0, [r1, #8]
 800358a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800358e:	1f14      	subs	r4, r2, #4
 8003590:	42b7      	cmp	r7, r6
 8003592:	d309      	bcc.n	80035a8 <forward_round+0xb0>
 8003594:	ed97 0a00 	vldr	s0, [r7]
 8003598:	f012 fb30 	bl	8015bfc <roundf>
 800359c:	ed84 0a00 	vstr	s0, [r4]
 80035a0:	1f3f      	subs	r7, r7, #4
 80035a2:	1f24      	subs	r4, r4, #4
 80035a4:	42b7      	cmp	r7, r6
 80035a6:	d2f5      	bcs.n	8003594 <forward_round+0x9c>
 80035a8:	b001      	add	sp, #4
 80035aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035ac <nl_func_neg_array_f32>:
 80035ac:	6889      	ldr	r1, [r1, #8]
 80035ae:	6880      	ldr	r0, [r0, #8]
 80035b0:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80035b4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80035b8:	1f1b      	subs	r3, r3, #4
 80035ba:	1f12      	subs	r2, r2, #4
 80035bc:	428b      	cmp	r3, r1
 80035be:	d32b      	bcc.n	8003618 <nl_func_neg_array_f32+0x6c>
 80035c0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80035c4:	edd3 0a00 	vldr	s1, [r3]
 80035c8:	1f18      	subs	r0, r3, #4
 80035ca:	ee60 0a80 	vmul.f32	s1, s1, s0
 80035ce:	4288      	cmp	r0, r1
 80035d0:	edc2 0a00 	vstr	s1, [r2]
 80035d4:	d320      	bcc.n	8003618 <nl_func_neg_array_f32+0x6c>
 80035d6:	ed90 1a00 	vldr	s2, [r0]
 80035da:	1f13      	subs	r3, r2, #4
 80035dc:	1f00      	subs	r0, r0, #4
 80035de:	ee21 1a00 	vmul.f32	s2, s2, s0
 80035e2:	4288      	cmp	r0, r1
 80035e4:	ed83 1a00 	vstr	s2, [r3]
 80035e8:	d316      	bcc.n	8003618 <nl_func_neg_array_f32+0x6c>
 80035ea:	edd0 0a00 	vldr	s1, [r0]
 80035ee:	f1a2 0308 	sub.w	r3, r2, #8
 80035f2:	1f00      	subs	r0, r0, #4
 80035f4:	ee60 0a80 	vmul.f32	s1, s1, s0
 80035f8:	4288      	cmp	r0, r1
 80035fa:	edc3 0a00 	vstr	s1, [r3]
 80035fe:	d30b      	bcc.n	8003618 <nl_func_neg_array_f32+0x6c>
 8003600:	ed90 1a00 	vldr	s2, [r0]
 8003604:	f1a2 030c 	sub.w	r3, r2, #12
 8003608:	ee61 0a00 	vmul.f32	s1, s2, s0
 800360c:	edc3 0a00 	vstr	s1, [r3]
 8003610:	1f03      	subs	r3, r0, #4
 8003612:	3a10      	subs	r2, #16
 8003614:	428b      	cmp	r3, r1
 8003616:	d2d5      	bcs.n	80035c4 <nl_func_neg_array_f32+0x18>
 8003618:	4770      	bx	lr
	...

0800361c <forward_neg>:
 800361c:	b4f0      	push	{r4, r5, r6, r7}
 800361e:	6942      	ldr	r2, [r0, #20]
 8003620:	8811      	ldrh	r1, [r2, #0]
 8003622:	2900      	cmp	r1, #0
 8003624:	bf1a      	itte	ne
 8003626:	6850      	ldrne	r0, [r2, #4]
 8003628:	1d00      	addne	r0, r0, #4
 800362a:	2004      	moveq	r0, #4
 800362c:	f04f 0501 	mov.w	r5, #1
 8003630:	6800      	ldr	r0, [r0, #0]
 8003632:	2800      	cmp	r0, #0
 8003634:	bf14      	ite	ne
 8003636:	6803      	ldrne	r3, [r0, #0]
 8003638:	2300      	moveq	r3, #0
 800363a:	2902      	cmp	r1, #2
 800363c:	bfa6      	itte	ge
 800363e:	6850      	ldrge	r0, [r2, #4]
 8003640:	3010      	addge	r0, #16
 8003642:	2004      	movlt	r0, #4
 8003644:	6800      	ldr	r0, [r0, #0]
 8003646:	2800      	cmp	r0, #0
 8003648:	bf19      	ittee	ne
 800364a:	6800      	ldrne	r0, [r0, #0]
 800364c:	f100 0418 	addne.w	r4, r0, #24
 8003650:	2100      	moveq	r1, #0
 8003652:	f101 0418 	addeq.w	r4, r1, #24
 8003656:	f103 0108 	add.w	r1, r3, #8
 800365a:	680a      	ldr	r2, [r1, #0]
 800365c:	0a12      	lsrs	r2, r2, #8
 800365e:	d01e      	beq.n	800369e <forward_neg+0x82>
 8003660:	684e      	ldr	r6, [r1, #4]
 8003662:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003666:	4610      	mov	r0, r2
 8003668:	1f0f      	subs	r7, r1, #4
 800366a:	f010 0103 	ands.w	r1, r0, #3
 800366e:	d006      	beq.n	800367e <forward_neg+0x62>
 8003670:	1e52      	subs	r2, r2, #1
 8003672:	f857 c904 	ldr.w	ip, [r7], #-4
 8003676:	1e49      	subs	r1, r1, #1
 8003678:	fb0c f505 	mul.w	r5, ip, r5
 800367c:	d1f8      	bne.n	8003670 <forward_neg+0x54>
 800367e:	0880      	lsrs	r0, r0, #2
 8003680:	d00d      	beq.n	800369e <forward_neg+0x82>
 8003682:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003686:	3910      	subs	r1, #16
 8003688:	68ca      	ldr	r2, [r1, #12]
 800368a:	688e      	ldr	r6, [r1, #8]
 800368c:	684f      	ldr	r7, [r1, #4]
 800368e:	4372      	muls	r2, r6
 8003690:	f851 6910 	ldr.w	r6, [r1], #-16
 8003694:	437a      	muls	r2, r7
 8003696:	4372      	muls	r2, r6
 8003698:	4355      	muls	r5, r2
 800369a:	1e40      	subs	r0, r0, #1
 800369c:	d1f4      	bne.n	8003688 <forward_neg+0x6c>
 800369e:	6998      	ldr	r0, [r3, #24]
 80036a0:	6822      	ldr	r2, [r4, #0]
 80036a2:	6880      	ldr	r0, [r0, #8]
 80036a4:	6893      	ldr	r3, [r2, #8]
 80036a6:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80036aa:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 80036ae:	1f09      	subs	r1, r1, #4
 80036b0:	1f22      	subs	r2, r4, #4
 80036b2:	4281      	cmp	r1, r0
 80036b4:	f0c0 802c 	bcc.w	8003710 <forward_neg+0xf4>
 80036b8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80036bc:	edd1 0a00 	vldr	s1, [r1]
 80036c0:	1f09      	subs	r1, r1, #4
 80036c2:	ee60 0a80 	vmul.f32	s1, s1, s0
 80036c6:	4281      	cmp	r1, r0
 80036c8:	edc2 0a00 	vstr	s1, [r2]
 80036cc:	d320      	bcc.n	8003710 <forward_neg+0xf4>
 80036ce:	ed91 1a00 	vldr	s2, [r1]
 80036d2:	1f13      	subs	r3, r2, #4
 80036d4:	1f09      	subs	r1, r1, #4
 80036d6:	ee21 1a00 	vmul.f32	s2, s2, s0
 80036da:	4281      	cmp	r1, r0
 80036dc:	ed83 1a00 	vstr	s2, [r3]
 80036e0:	d316      	bcc.n	8003710 <forward_neg+0xf4>
 80036e2:	edd1 0a00 	vldr	s1, [r1]
 80036e6:	f1a2 0308 	sub.w	r3, r2, #8
 80036ea:	1f09      	subs	r1, r1, #4
 80036ec:	ee60 0a80 	vmul.f32	s1, s1, s0
 80036f0:	4281      	cmp	r1, r0
 80036f2:	edc3 0a00 	vstr	s1, [r3]
 80036f6:	d30b      	bcc.n	8003710 <forward_neg+0xf4>
 80036f8:	ed91 1a00 	vldr	s2, [r1]
 80036fc:	f1a2 030c 	sub.w	r3, r2, #12
 8003700:	1f09      	subs	r1, r1, #4
 8003702:	3a10      	subs	r2, #16
 8003704:	ee61 0a00 	vmul.f32	s1, s2, s0
 8003708:	4281      	cmp	r1, r0
 800370a:	edc3 0a00 	vstr	s1, [r3]
 800370e:	d2d5      	bcs.n	80036bc <forward_neg+0xa0>
 8003710:	bcf0      	pop	{r4, r5, r6, r7}
 8003712:	4770      	bx	lr

08003714 <nl_func_reciprocal_array_f32>:
 8003714:	6889      	ldr	r1, [r1, #8]
 8003716:	6880      	ldr	r0, [r0, #8]
 8003718:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 800371c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003720:	1f1b      	subs	r3, r3, #4
 8003722:	1f12      	subs	r2, r2, #4
 8003724:	428b      	cmp	r3, r1
 8003726:	d331      	bcc.n	800378c <nl_func_reciprocal_array_f32+0x78>
 8003728:	ed93 0a00 	vldr	s0, [r3]
 800372c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003730:	1f18      	subs	r0, r3, #4
 8003732:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8003736:	4288      	cmp	r0, r1
 8003738:	ed82 0a00 	vstr	s0, [r2]
 800373c:	d326      	bcc.n	800378c <nl_func_reciprocal_array_f32+0x78>
 800373e:	edd0 0a00 	vldr	s1, [r0]
 8003742:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003746:	1f13      	subs	r3, r2, #4
 8003748:	1f00      	subs	r0, r0, #4
 800374a:	ee80 0a20 	vdiv.f32	s0, s0, s1
 800374e:	4288      	cmp	r0, r1
 8003750:	ed83 0a00 	vstr	s0, [r3]
 8003754:	d31a      	bcc.n	800378c <nl_func_reciprocal_array_f32+0x78>
 8003756:	ed90 0a00 	vldr	s0, [r0]
 800375a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800375e:	f1a2 0308 	sub.w	r3, r2, #8
 8003762:	1f00      	subs	r0, r0, #4
 8003764:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8003768:	4288      	cmp	r0, r1
 800376a:	ed83 0a00 	vstr	s0, [r3]
 800376e:	d30d      	bcc.n	800378c <nl_func_reciprocal_array_f32+0x78>
 8003770:	edd0 0a00 	vldr	s1, [r0]
 8003774:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003778:	f1a2 030c 	sub.w	r3, r2, #12
 800377c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003780:	ed83 0a00 	vstr	s0, [r3]
 8003784:	1f03      	subs	r3, r0, #4
 8003786:	3a10      	subs	r2, #16
 8003788:	428b      	cmp	r3, r1
 800378a:	d2cd      	bcs.n	8003728 <nl_func_reciprocal_array_f32+0x14>
 800378c:	4770      	bx	lr
	...

08003790 <forward_reciprocal>:
 8003790:	b4f0      	push	{r4, r5, r6, r7}
 8003792:	6942      	ldr	r2, [r0, #20]
 8003794:	8811      	ldrh	r1, [r2, #0]
 8003796:	2900      	cmp	r1, #0
 8003798:	bf1a      	itte	ne
 800379a:	6850      	ldrne	r0, [r2, #4]
 800379c:	1d00      	addne	r0, r0, #4
 800379e:	2004      	moveq	r0, #4
 80037a0:	f04f 0501 	mov.w	r5, #1
 80037a4:	6800      	ldr	r0, [r0, #0]
 80037a6:	2800      	cmp	r0, #0
 80037a8:	bf14      	ite	ne
 80037aa:	6803      	ldrne	r3, [r0, #0]
 80037ac:	2300      	moveq	r3, #0
 80037ae:	2902      	cmp	r1, #2
 80037b0:	bfa6      	itte	ge
 80037b2:	6850      	ldrge	r0, [r2, #4]
 80037b4:	3010      	addge	r0, #16
 80037b6:	2004      	movlt	r0, #4
 80037b8:	6800      	ldr	r0, [r0, #0]
 80037ba:	2800      	cmp	r0, #0
 80037bc:	bf19      	ittee	ne
 80037be:	6800      	ldrne	r0, [r0, #0]
 80037c0:	f100 0418 	addne.w	r4, r0, #24
 80037c4:	2100      	moveq	r1, #0
 80037c6:	f101 0418 	addeq.w	r4, r1, #24
 80037ca:	f103 0108 	add.w	r1, r3, #8
 80037ce:	680a      	ldr	r2, [r1, #0]
 80037d0:	0a12      	lsrs	r2, r2, #8
 80037d2:	d01e      	beq.n	8003812 <forward_reciprocal+0x82>
 80037d4:	684e      	ldr	r6, [r1, #4]
 80037d6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80037da:	4610      	mov	r0, r2
 80037dc:	1f0f      	subs	r7, r1, #4
 80037de:	f010 0103 	ands.w	r1, r0, #3
 80037e2:	d006      	beq.n	80037f2 <forward_reciprocal+0x62>
 80037e4:	1e52      	subs	r2, r2, #1
 80037e6:	f857 c904 	ldr.w	ip, [r7], #-4
 80037ea:	1e49      	subs	r1, r1, #1
 80037ec:	fb0c f505 	mul.w	r5, ip, r5
 80037f0:	d1f8      	bne.n	80037e4 <forward_reciprocal+0x54>
 80037f2:	0880      	lsrs	r0, r0, #2
 80037f4:	d00d      	beq.n	8003812 <forward_reciprocal+0x82>
 80037f6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80037fa:	3910      	subs	r1, #16
 80037fc:	68ca      	ldr	r2, [r1, #12]
 80037fe:	688e      	ldr	r6, [r1, #8]
 8003800:	684f      	ldr	r7, [r1, #4]
 8003802:	4372      	muls	r2, r6
 8003804:	f851 6910 	ldr.w	r6, [r1], #-16
 8003808:	437a      	muls	r2, r7
 800380a:	4372      	muls	r2, r6
 800380c:	4355      	muls	r5, r2
 800380e:	1e40      	subs	r0, r0, #1
 8003810:	d1f4      	bne.n	80037fc <forward_reciprocal+0x6c>
 8003812:	6998      	ldr	r0, [r3, #24]
 8003814:	6822      	ldr	r2, [r4, #0]
 8003816:	6880      	ldr	r0, [r0, #8]
 8003818:	6893      	ldr	r3, [r2, #8]
 800381a:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 800381e:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003822:	1f09      	subs	r1, r1, #4
 8003824:	1f22      	subs	r2, r4, #4
 8003826:	4281      	cmp	r1, r0
 8003828:	f0c0 8032 	bcc.w	8003890 <forward_reciprocal+0x100>
 800382c:	ed91 0a00 	vldr	s0, [r1]
 8003830:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003834:	1f09      	subs	r1, r1, #4
 8003836:	ee80 0a80 	vdiv.f32	s0, s1, s0
 800383a:	4281      	cmp	r1, r0
 800383c:	ed82 0a00 	vstr	s0, [r2]
 8003840:	d326      	bcc.n	8003890 <forward_reciprocal+0x100>
 8003842:	edd1 0a00 	vldr	s1, [r1]
 8003846:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800384a:	1f13      	subs	r3, r2, #4
 800384c:	1f09      	subs	r1, r1, #4
 800384e:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003852:	4281      	cmp	r1, r0
 8003854:	ed83 0a00 	vstr	s0, [r3]
 8003858:	d31a      	bcc.n	8003890 <forward_reciprocal+0x100>
 800385a:	ed91 0a00 	vldr	s0, [r1]
 800385e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003862:	f1a2 0308 	sub.w	r3, r2, #8
 8003866:	1f09      	subs	r1, r1, #4
 8003868:	ee80 0a80 	vdiv.f32	s0, s1, s0
 800386c:	4281      	cmp	r1, r0
 800386e:	ed83 0a00 	vstr	s0, [r3]
 8003872:	d30d      	bcc.n	8003890 <forward_reciprocal+0x100>
 8003874:	edd1 0a00 	vldr	s1, [r1]
 8003878:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800387c:	f1a2 030c 	sub.w	r3, r2, #12
 8003880:	1f09      	subs	r1, r1, #4
 8003882:	3a10      	subs	r2, #16
 8003884:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003888:	4281      	cmp	r1, r0
 800388a:	ed83 0a00 	vstr	s0, [r3]
 800388e:	d2cd      	bcs.n	800382c <forward_reciprocal+0x9c>
 8003890:	bcf0      	pop	{r4, r5, r6, r7}
 8003892:	4770      	bx	lr

08003894 <nl_func_exp_array_f32>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	688c      	ldr	r4, [r1, #8]
 8003898:	6880      	ldr	r0, [r0, #8]
 800389a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800389e:	1f0d      	subs	r5, r1, #4
 80038a0:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80038a4:	1f0e      	subs	r6, r1, #4
 80038a6:	42a5      	cmp	r5, r4
 80038a8:	f0c0 800a 	bcc.w	80038c0 <nl_func_exp_array_f32+0x2c>
 80038ac:	ed95 0a00 	vldr	s0, [r5]
 80038b0:	f012 fb5c 	bl	8015f6c <expf>
 80038b4:	ed86 0a00 	vstr	s0, [r6]
 80038b8:	1f2d      	subs	r5, r5, #4
 80038ba:	1f36      	subs	r6, r6, #4
 80038bc:	42a5      	cmp	r5, r4
 80038be:	d2f5      	bcs.n	80038ac <nl_func_exp_array_f32+0x18>
 80038c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080038c4 <forward_exp>:
 80038c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038c6:	b081      	sub	sp, #4
 80038c8:	6942      	ldr	r2, [r0, #20]
 80038ca:	8811      	ldrh	r1, [r2, #0]
 80038cc:	2900      	cmp	r1, #0
 80038ce:	bf1a      	itte	ne
 80038d0:	6850      	ldrne	r0, [r2, #4]
 80038d2:	1d00      	addne	r0, r0, #4
 80038d4:	2004      	moveq	r0, #4
 80038d6:	f04f 0501 	mov.w	r5, #1
 80038da:	6800      	ldr	r0, [r0, #0]
 80038dc:	2800      	cmp	r0, #0
 80038de:	bf14      	ite	ne
 80038e0:	6803      	ldrne	r3, [r0, #0]
 80038e2:	2300      	moveq	r3, #0
 80038e4:	2902      	cmp	r1, #2
 80038e6:	bfa6      	itte	ge
 80038e8:	6850      	ldrge	r0, [r2, #4]
 80038ea:	3010      	addge	r0, #16
 80038ec:	2004      	movlt	r0, #4
 80038ee:	6800      	ldr	r0, [r0, #0]
 80038f0:	2800      	cmp	r0, #0
 80038f2:	bf19      	ittee	ne
 80038f4:	6800      	ldrne	r0, [r0, #0]
 80038f6:	f100 0418 	addne.w	r4, r0, #24
 80038fa:	2100      	moveq	r1, #0
 80038fc:	f101 0418 	addeq.w	r4, r1, #24
 8003900:	f103 0108 	add.w	r1, r3, #8
 8003904:	680a      	ldr	r2, [r1, #0]
 8003906:	0a12      	lsrs	r2, r2, #8
 8003908:	d01e      	beq.n	8003948 <forward_exp+0x84>
 800390a:	684e      	ldr	r6, [r1, #4]
 800390c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003910:	4610      	mov	r0, r2
 8003912:	1f0f      	subs	r7, r1, #4
 8003914:	f010 0103 	ands.w	r1, r0, #3
 8003918:	d006      	beq.n	8003928 <forward_exp+0x64>
 800391a:	1e52      	subs	r2, r2, #1
 800391c:	f857 c904 	ldr.w	ip, [r7], #-4
 8003920:	1e49      	subs	r1, r1, #1
 8003922:	fb0c f505 	mul.w	r5, ip, r5
 8003926:	d1f8      	bne.n	800391a <forward_exp+0x56>
 8003928:	0880      	lsrs	r0, r0, #2
 800392a:	d00d      	beq.n	8003948 <forward_exp+0x84>
 800392c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003930:	3910      	subs	r1, #16
 8003932:	68ca      	ldr	r2, [r1, #12]
 8003934:	688e      	ldr	r6, [r1, #8]
 8003936:	684f      	ldr	r7, [r1, #4]
 8003938:	4372      	muls	r2, r6
 800393a:	f851 6910 	ldr.w	r6, [r1], #-16
 800393e:	437a      	muls	r2, r7
 8003940:	4372      	muls	r2, r6
 8003942:	4355      	muls	r5, r2
 8003944:	1e40      	subs	r0, r0, #1
 8003946:	d1f4      	bne.n	8003932 <forward_exp+0x6e>
 8003948:	6998      	ldr	r0, [r3, #24]
 800394a:	6886      	ldr	r6, [r0, #8]
 800394c:	6821      	ldr	r1, [r4, #0]
 800394e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003952:	1f07      	subs	r7, r0, #4
 8003954:	6888      	ldr	r0, [r1, #8]
 8003956:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800395a:	1f14      	subs	r4, r2, #4
 800395c:	42b7      	cmp	r7, r6
 800395e:	d309      	bcc.n	8003974 <forward_exp+0xb0>
 8003960:	ed97 0a00 	vldr	s0, [r7]
 8003964:	f012 fb02 	bl	8015f6c <expf>
 8003968:	ed84 0a00 	vstr	s0, [r4]
 800396c:	1f3f      	subs	r7, r7, #4
 800396e:	1f24      	subs	r4, r4, #4
 8003970:	42b7      	cmp	r7, r6
 8003972:	d2f5      	bcs.n	8003960 <forward_exp+0x9c>
 8003974:	b001      	add	sp, #4
 8003976:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003978 <nl_func_sigmoid_array_f32>:
 8003978:	b570      	push	{r4, r5, r6, lr}
 800397a:	688c      	ldr	r4, [r1, #8]
 800397c:	6880      	ldr	r0, [r0, #8]
 800397e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003982:	1f0d      	subs	r5, r1, #4
 8003984:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003988:	1f0e      	subs	r6, r1, #4
 800398a:	42a5      	cmp	r5, r4
 800398c:	f0c0 8014 	bcc.w	80039b8 <nl_func_sigmoid_array_f32+0x40>
 8003990:	ed95 0a00 	vldr	s0, [r5]
 8003994:	eeb1 0a40 	vneg.f32	s0, s0
 8003998:	f012 fae8 	bl	8015f6c <expf>
 800399c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80039a0:	ee70 0a20 	vadd.f32	s1, s0, s1
 80039a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80039a8:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80039ac:	ed86 0a00 	vstr	s0, [r6]
 80039b0:	1f2d      	subs	r5, r5, #4
 80039b2:	1f36      	subs	r6, r6, #4
 80039b4:	42a5      	cmp	r5, r4
 80039b6:	d2eb      	bcs.n	8003990 <nl_func_sigmoid_array_f32+0x18>
 80039b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080039bc <forward_sigmoid>:
 80039bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039be:	b081      	sub	sp, #4
 80039c0:	6942      	ldr	r2, [r0, #20]
 80039c2:	8811      	ldrh	r1, [r2, #0]
 80039c4:	2900      	cmp	r1, #0
 80039c6:	bf1a      	itte	ne
 80039c8:	6850      	ldrne	r0, [r2, #4]
 80039ca:	1d00      	addne	r0, r0, #4
 80039cc:	2004      	moveq	r0, #4
 80039ce:	f04f 0501 	mov.w	r5, #1
 80039d2:	6800      	ldr	r0, [r0, #0]
 80039d4:	2800      	cmp	r0, #0
 80039d6:	bf14      	ite	ne
 80039d8:	6803      	ldrne	r3, [r0, #0]
 80039da:	2300      	moveq	r3, #0
 80039dc:	2902      	cmp	r1, #2
 80039de:	bfa6      	itte	ge
 80039e0:	6850      	ldrge	r0, [r2, #4]
 80039e2:	3010      	addge	r0, #16
 80039e4:	2004      	movlt	r0, #4
 80039e6:	6800      	ldr	r0, [r0, #0]
 80039e8:	2800      	cmp	r0, #0
 80039ea:	bf19      	ittee	ne
 80039ec:	6800      	ldrne	r0, [r0, #0]
 80039ee:	f100 0418 	addne.w	r4, r0, #24
 80039f2:	2100      	moveq	r1, #0
 80039f4:	f101 0418 	addeq.w	r4, r1, #24
 80039f8:	f103 0108 	add.w	r1, r3, #8
 80039fc:	680a      	ldr	r2, [r1, #0]
 80039fe:	0a12      	lsrs	r2, r2, #8
 8003a00:	d01e      	beq.n	8003a40 <forward_sigmoid+0x84>
 8003a02:	684e      	ldr	r6, [r1, #4]
 8003a04:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003a08:	4610      	mov	r0, r2
 8003a0a:	1f0f      	subs	r7, r1, #4
 8003a0c:	f010 0103 	ands.w	r1, r0, #3
 8003a10:	d006      	beq.n	8003a20 <forward_sigmoid+0x64>
 8003a12:	1e52      	subs	r2, r2, #1
 8003a14:	f857 c904 	ldr.w	ip, [r7], #-4
 8003a18:	1e49      	subs	r1, r1, #1
 8003a1a:	fb0c f505 	mul.w	r5, ip, r5
 8003a1e:	d1f8      	bne.n	8003a12 <forward_sigmoid+0x56>
 8003a20:	0880      	lsrs	r0, r0, #2
 8003a22:	d00d      	beq.n	8003a40 <forward_sigmoid+0x84>
 8003a24:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003a28:	3910      	subs	r1, #16
 8003a2a:	68ca      	ldr	r2, [r1, #12]
 8003a2c:	688e      	ldr	r6, [r1, #8]
 8003a2e:	684f      	ldr	r7, [r1, #4]
 8003a30:	4372      	muls	r2, r6
 8003a32:	f851 6910 	ldr.w	r6, [r1], #-16
 8003a36:	437a      	muls	r2, r7
 8003a38:	4372      	muls	r2, r6
 8003a3a:	4355      	muls	r5, r2
 8003a3c:	1e40      	subs	r0, r0, #1
 8003a3e:	d1f4      	bne.n	8003a2a <forward_sigmoid+0x6e>
 8003a40:	6998      	ldr	r0, [r3, #24]
 8003a42:	6886      	ldr	r6, [r0, #8]
 8003a44:	6821      	ldr	r1, [r4, #0]
 8003a46:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003a4a:	1f07      	subs	r7, r0, #4
 8003a4c:	6888      	ldr	r0, [r1, #8]
 8003a4e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003a52:	1f14      	subs	r4, r2, #4
 8003a54:	42b7      	cmp	r7, r6
 8003a56:	d313      	bcc.n	8003a80 <forward_sigmoid+0xc4>
 8003a58:	ed97 0a00 	vldr	s0, [r7]
 8003a5c:	eeb1 0a40 	vneg.f32	s0, s0
 8003a60:	f012 fa84 	bl	8015f6c <expf>
 8003a64:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003a68:	ee70 0a20 	vadd.f32	s1, s0, s1
 8003a6c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003a70:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003a74:	ed84 0a00 	vstr	s0, [r4]
 8003a78:	1f3f      	subs	r7, r7, #4
 8003a7a:	1f24      	subs	r4, r4, #4
 8003a7c:	42b7      	cmp	r7, r6
 8003a7e:	d2eb      	bcs.n	8003a58 <forward_sigmoid+0x9c>
 8003a80:	b001      	add	sp, #4
 8003a82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a84 <nl_func_sign_array_f32>:
 8003a84:	6889      	ldr	r1, [r1, #8]
 8003a86:	6880      	ldr	r0, [r0, #8]
 8003a88:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003a8c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003a90:	1f1b      	subs	r3, r3, #4
 8003a92:	1f10      	subs	r0, r2, #4
 8003a94:	428b      	cmp	r3, r1
 8003a96:	d314      	bcc.n	8003ac2 <nl_func_sign_array_f32+0x3e>
 8003a98:	f04f 32ff 	mov.w	r2, #4294967295
 8003a9c:	ed93 0a00 	vldr	s0, [r3]
 8003aa0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa8:	bfcc      	ite	gt
 8003aaa:	ed9f 0a39 	vldrgt	s0, [pc, #228]	; 8003b90 <.text_49>
 8003aae:	ee00 2a10 	vmovle	s0, r2
 8003ab2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8003ab6:	ed80 0a00 	vstr	s0, [r0]
 8003aba:	1f1b      	subs	r3, r3, #4
 8003abc:	1f00      	subs	r0, r0, #4
 8003abe:	428b      	cmp	r3, r1
 8003ac0:	d2ec      	bcs.n	8003a9c <nl_func_sign_array_f32+0x18>
 8003ac2:	4770      	bx	lr

08003ac4 <forward_sign>:
 8003ac4:	b4f0      	push	{r4, r5, r6, r7}
 8003ac6:	6942      	ldr	r2, [r0, #20]
 8003ac8:	8811      	ldrh	r1, [r2, #0]
 8003aca:	2900      	cmp	r1, #0
 8003acc:	bf1a      	itte	ne
 8003ace:	6850      	ldrne	r0, [r2, #4]
 8003ad0:	1d00      	addne	r0, r0, #4
 8003ad2:	2004      	moveq	r0, #4
 8003ad4:	f04f 0501 	mov.w	r5, #1
 8003ad8:	6800      	ldr	r0, [r0, #0]
 8003ada:	2800      	cmp	r0, #0
 8003adc:	bf14      	ite	ne
 8003ade:	6803      	ldrne	r3, [r0, #0]
 8003ae0:	2300      	moveq	r3, #0
 8003ae2:	2901      	cmp	r1, #1
 8003ae4:	bfc6      	itte	gt
 8003ae6:	6850      	ldrgt	r0, [r2, #4]
 8003ae8:	3010      	addgt	r0, #16
 8003aea:	2004      	movle	r0, #4
 8003aec:	6800      	ldr	r0, [r0, #0]
 8003aee:	2800      	cmp	r0, #0
 8003af0:	bf19      	ittee	ne
 8003af2:	6800      	ldrne	r0, [r0, #0]
 8003af4:	f100 0418 	addne.w	r4, r0, #24
 8003af8:	2100      	moveq	r1, #0
 8003afa:	f101 0418 	addeq.w	r4, r1, #24
 8003afe:	f103 0108 	add.w	r1, r3, #8
 8003b02:	680a      	ldr	r2, [r1, #0]
 8003b04:	0a12      	lsrs	r2, r2, #8
 8003b06:	d01e      	beq.n	8003b46 <forward_sign+0x82>
 8003b08:	684e      	ldr	r6, [r1, #4]
 8003b0a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003b0e:	4610      	mov	r0, r2
 8003b10:	1f0f      	subs	r7, r1, #4
 8003b12:	f010 0103 	ands.w	r1, r0, #3
 8003b16:	d006      	beq.n	8003b26 <forward_sign+0x62>
 8003b18:	1e52      	subs	r2, r2, #1
 8003b1a:	f857 c904 	ldr.w	ip, [r7], #-4
 8003b1e:	1e49      	subs	r1, r1, #1
 8003b20:	fb0c f505 	mul.w	r5, ip, r5
 8003b24:	d1f8      	bne.n	8003b18 <forward_sign+0x54>
 8003b26:	0880      	lsrs	r0, r0, #2
 8003b28:	d00d      	beq.n	8003b46 <forward_sign+0x82>
 8003b2a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003b2e:	3910      	subs	r1, #16
 8003b30:	68ca      	ldr	r2, [r1, #12]
 8003b32:	688e      	ldr	r6, [r1, #8]
 8003b34:	684f      	ldr	r7, [r1, #4]
 8003b36:	4372      	muls	r2, r6
 8003b38:	f851 6910 	ldr.w	r6, [r1], #-16
 8003b3c:	437a      	muls	r2, r7
 8003b3e:	4372      	muls	r2, r6
 8003b40:	4355      	muls	r5, r2
 8003b42:	1e40      	subs	r0, r0, #1
 8003b44:	d1f4      	bne.n	8003b30 <forward_sign+0x6c>
 8003b46:	6998      	ldr	r0, [r3, #24]
 8003b48:	6822      	ldr	r2, [r4, #0]
 8003b4a:	6880      	ldr	r0, [r0, #8]
 8003b4c:	6893      	ldr	r3, [r2, #8]
 8003b4e:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003b52:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003b56:	1f09      	subs	r1, r1, #4
 8003b58:	1f22      	subs	r2, r4, #4
 8003b5a:	4281      	cmp	r1, r0
 8003b5c:	f0c0 8015 	bcc.w	8003b8a <forward_sign+0xc6>
 8003b60:	f04f 33ff 	mov.w	r3, #4294967295
 8003b64:	ed91 0a00 	vldr	s0, [r1]
 8003b68:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b70:	bfcc      	ite	gt
 8003b72:	ed9f 0a07 	vldrgt	s0, [pc, #28]	; 8003b90 <.text_49>
 8003b76:	ee00 3a10 	vmovle	s0, r3
 8003b7a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8003b7e:	ed82 0a00 	vstr	s0, [r2]
 8003b82:	1f09      	subs	r1, r1, #4
 8003b84:	1f12      	subs	r2, r2, #4
 8003b86:	4281      	cmp	r1, r0
 8003b88:	d2ec      	bcs.n	8003b64 <forward_sign+0xa0>
 8003b8a:	bcf0      	pop	{r4, r5, r6, r7}
 8003b8c:	4770      	bx	lr
	...

08003b90 <.text_49>:
 8003b90:	00000001 	.word	0x00000001

08003b94 <nl_func_sqrt_array_f32>:
 8003b94:	b570      	push	{r4, r5, r6, lr}
 8003b96:	460c      	mov	r4, r1
 8003b98:	6880      	ldr	r0, [r0, #8]
 8003b9a:	68a1      	ldr	r1, [r4, #8]
 8003b9c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003ba0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003ba4:	1f1d      	subs	r5, r3, #4
 8003ba6:	1f16      	subs	r6, r2, #4
 8003ba8:	428d      	cmp	r5, r1
 8003baa:	d30a      	bcc.n	8003bc2 <nl_func_sqrt_array_f32+0x2e>
 8003bac:	ed95 0a00 	vldr	s0, [r5]
 8003bb0:	f002 faa8 	bl	8006104 <ai_math_sqrt>
 8003bb4:	ed86 0a00 	vstr	s0, [r6]
 8003bb8:	1f2d      	subs	r5, r5, #4
 8003bba:	68a0      	ldr	r0, [r4, #8]
 8003bbc:	1f36      	subs	r6, r6, #4
 8003bbe:	4285      	cmp	r5, r0
 8003bc0:	d2f4      	bcs.n	8003bac <nl_func_sqrt_array_f32+0x18>
 8003bc2:	bd70      	pop	{r4, r5, r6, pc}

08003bc4 <forward_sqrt>:
 8003bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bc6:	b081      	sub	sp, #4
 8003bc8:	6942      	ldr	r2, [r0, #20]
 8003bca:	8811      	ldrh	r1, [r2, #0]
 8003bcc:	2900      	cmp	r1, #0
 8003bce:	bf1a      	itte	ne
 8003bd0:	6850      	ldrne	r0, [r2, #4]
 8003bd2:	1d00      	addne	r0, r0, #4
 8003bd4:	2004      	moveq	r0, #4
 8003bd6:	f04f 0501 	mov.w	r5, #1
 8003bda:	6800      	ldr	r0, [r0, #0]
 8003bdc:	2800      	cmp	r0, #0
 8003bde:	bf14      	ite	ne
 8003be0:	6803      	ldrne	r3, [r0, #0]
 8003be2:	2300      	moveq	r3, #0
 8003be4:	2902      	cmp	r1, #2
 8003be6:	bfa6      	itte	ge
 8003be8:	6850      	ldrge	r0, [r2, #4]
 8003bea:	3010      	addge	r0, #16
 8003bec:	2004      	movlt	r0, #4
 8003bee:	6800      	ldr	r0, [r0, #0]
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	bf19      	ittee	ne
 8003bf4:	6800      	ldrne	r0, [r0, #0]
 8003bf6:	f100 0418 	addne.w	r4, r0, #24
 8003bfa:	2100      	moveq	r1, #0
 8003bfc:	f101 0418 	addeq.w	r4, r1, #24
 8003c00:	f103 0108 	add.w	r1, r3, #8
 8003c04:	680a      	ldr	r2, [r1, #0]
 8003c06:	0a12      	lsrs	r2, r2, #8
 8003c08:	d01e      	beq.n	8003c48 <forward_sqrt+0x84>
 8003c0a:	684e      	ldr	r6, [r1, #4]
 8003c0c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003c10:	4610      	mov	r0, r2
 8003c12:	1f0f      	subs	r7, r1, #4
 8003c14:	f010 0103 	ands.w	r1, r0, #3
 8003c18:	d006      	beq.n	8003c28 <forward_sqrt+0x64>
 8003c1a:	1e52      	subs	r2, r2, #1
 8003c1c:	f857 c904 	ldr.w	ip, [r7], #-4
 8003c20:	1e49      	subs	r1, r1, #1
 8003c22:	fb0c f505 	mul.w	r5, ip, r5
 8003c26:	d1f8      	bne.n	8003c1a <forward_sqrt+0x56>
 8003c28:	0880      	lsrs	r0, r0, #2
 8003c2a:	d00d      	beq.n	8003c48 <forward_sqrt+0x84>
 8003c2c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003c30:	3910      	subs	r1, #16
 8003c32:	68ca      	ldr	r2, [r1, #12]
 8003c34:	688e      	ldr	r6, [r1, #8]
 8003c36:	684f      	ldr	r7, [r1, #4]
 8003c38:	4372      	muls	r2, r6
 8003c3a:	f851 6910 	ldr.w	r6, [r1], #-16
 8003c3e:	437a      	muls	r2, r7
 8003c40:	4372      	muls	r2, r6
 8003c42:	4355      	muls	r5, r2
 8003c44:	1e40      	subs	r0, r0, #1
 8003c46:	d1f4      	bne.n	8003c32 <forward_sqrt+0x6e>
 8003c48:	699e      	ldr	r6, [r3, #24]
 8003c4a:	68b0      	ldr	r0, [r6, #8]
 8003c4c:	6822      	ldr	r2, [r4, #0]
 8003c4e:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003c52:	1f0f      	subs	r7, r1, #4
 8003c54:	6891      	ldr	r1, [r2, #8]
 8003c56:	eb01 0385 	add.w	r3, r1, r5, lsl #2
 8003c5a:	1f1c      	subs	r4, r3, #4
 8003c5c:	4287      	cmp	r7, r0
 8003c5e:	d30a      	bcc.n	8003c76 <forward_sqrt+0xb2>
 8003c60:	ed97 0a00 	vldr	s0, [r7]
 8003c64:	f002 fa4e 	bl	8006104 <ai_math_sqrt>
 8003c68:	ed84 0a00 	vstr	s0, [r4]
 8003c6c:	1f3f      	subs	r7, r7, #4
 8003c6e:	68b0      	ldr	r0, [r6, #8]
 8003c70:	1f24      	subs	r4, r4, #4
 8003c72:	4287      	cmp	r7, r0
 8003c74:	d2f4      	bcs.n	8003c60 <forward_sqrt+0x9c>
 8003c76:	b001      	add	sp, #4
 8003c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003c7c <nl_func_soft_plus_array_f32>:
 8003c7c:	b570      	push	{r4, r5, r6, lr}
 8003c7e:	688c      	ldr	r4, [r1, #8]
 8003c80:	6880      	ldr	r0, [r0, #8]
 8003c82:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003c86:	1f0d      	subs	r5, r1, #4
 8003c88:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003c8c:	1f0e      	subs	r6, r1, #4
 8003c8e:	42a5      	cmp	r5, r4
 8003c90:	f0c0 8010 	bcc.w	8003cb4 <nl_func_soft_plus_array_f32+0x38>
 8003c94:	ed95 0a00 	vldr	s0, [r5]
 8003c98:	f012 f968 	bl	8015f6c <expf>
 8003c9c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003ca0:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003ca4:	f012 f9b8 	bl	8016018 <logf>
 8003ca8:	ed86 0a00 	vstr	s0, [r6]
 8003cac:	1f2d      	subs	r5, r5, #4
 8003cae:	1f36      	subs	r6, r6, #4
 8003cb0:	42a5      	cmp	r5, r4
 8003cb2:	d2ef      	bcs.n	8003c94 <nl_func_soft_plus_array_f32+0x18>
 8003cb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08003cb8 <forward_soft_plus>:
 8003cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cba:	b081      	sub	sp, #4
 8003cbc:	6942      	ldr	r2, [r0, #20]
 8003cbe:	8811      	ldrh	r1, [r2, #0]
 8003cc0:	2900      	cmp	r1, #0
 8003cc2:	bf1a      	itte	ne
 8003cc4:	6850      	ldrne	r0, [r2, #4]
 8003cc6:	1d00      	addne	r0, r0, #4
 8003cc8:	2004      	moveq	r0, #4
 8003cca:	f04f 0501 	mov.w	r5, #1
 8003cce:	6800      	ldr	r0, [r0, #0]
 8003cd0:	2800      	cmp	r0, #0
 8003cd2:	bf14      	ite	ne
 8003cd4:	6803      	ldrne	r3, [r0, #0]
 8003cd6:	2300      	moveq	r3, #0
 8003cd8:	2902      	cmp	r1, #2
 8003cda:	bfa6      	itte	ge
 8003cdc:	6850      	ldrge	r0, [r2, #4]
 8003cde:	3010      	addge	r0, #16
 8003ce0:	2004      	movlt	r0, #4
 8003ce2:	6800      	ldr	r0, [r0, #0]
 8003ce4:	2800      	cmp	r0, #0
 8003ce6:	bf19      	ittee	ne
 8003ce8:	6800      	ldrne	r0, [r0, #0]
 8003cea:	f100 0418 	addne.w	r4, r0, #24
 8003cee:	2100      	moveq	r1, #0
 8003cf0:	f101 0418 	addeq.w	r4, r1, #24
 8003cf4:	f103 0108 	add.w	r1, r3, #8
 8003cf8:	680a      	ldr	r2, [r1, #0]
 8003cfa:	0a12      	lsrs	r2, r2, #8
 8003cfc:	d01e      	beq.n	8003d3c <forward_soft_plus+0x84>
 8003cfe:	684e      	ldr	r6, [r1, #4]
 8003d00:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003d04:	4610      	mov	r0, r2
 8003d06:	1f0f      	subs	r7, r1, #4
 8003d08:	f010 0103 	ands.w	r1, r0, #3
 8003d0c:	d006      	beq.n	8003d1c <forward_soft_plus+0x64>
 8003d0e:	1e52      	subs	r2, r2, #1
 8003d10:	f857 c904 	ldr.w	ip, [r7], #-4
 8003d14:	1e49      	subs	r1, r1, #1
 8003d16:	fb0c f505 	mul.w	r5, ip, r5
 8003d1a:	d1f8      	bne.n	8003d0e <forward_soft_plus+0x56>
 8003d1c:	0880      	lsrs	r0, r0, #2
 8003d1e:	d00d      	beq.n	8003d3c <forward_soft_plus+0x84>
 8003d20:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003d24:	3910      	subs	r1, #16
 8003d26:	68ca      	ldr	r2, [r1, #12]
 8003d28:	688e      	ldr	r6, [r1, #8]
 8003d2a:	684f      	ldr	r7, [r1, #4]
 8003d2c:	4372      	muls	r2, r6
 8003d2e:	f851 6910 	ldr.w	r6, [r1], #-16
 8003d32:	437a      	muls	r2, r7
 8003d34:	4372      	muls	r2, r6
 8003d36:	4355      	muls	r5, r2
 8003d38:	1e40      	subs	r0, r0, #1
 8003d3a:	d1f4      	bne.n	8003d26 <forward_soft_plus+0x6e>
 8003d3c:	6998      	ldr	r0, [r3, #24]
 8003d3e:	6886      	ldr	r6, [r0, #8]
 8003d40:	6821      	ldr	r1, [r4, #0]
 8003d42:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003d46:	1f07      	subs	r7, r0, #4
 8003d48:	6888      	ldr	r0, [r1, #8]
 8003d4a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003d4e:	1f14      	subs	r4, r2, #4
 8003d50:	42b7      	cmp	r7, r6
 8003d52:	d30f      	bcc.n	8003d74 <forward_soft_plus+0xbc>
 8003d54:	ed97 0a00 	vldr	s0, [r7]
 8003d58:	f012 f908 	bl	8015f6c <expf>
 8003d5c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003d60:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003d64:	f012 f958 	bl	8016018 <logf>
 8003d68:	ed84 0a00 	vstr	s0, [r4]
 8003d6c:	1f3f      	subs	r7, r7, #4
 8003d6e:	1f24      	subs	r4, r4, #4
 8003d70:	42b7      	cmp	r7, r6
 8003d72:	d2ef      	bcs.n	8003d54 <forward_soft_plus+0x9c>
 8003d74:	b001      	add	sp, #4
 8003d76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d78 <nl_func_soft_sign_array_f32>:
 8003d78:	6889      	ldr	r1, [r1, #8]
 8003d7a:	6880      	ldr	r0, [r0, #8]
 8003d7c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003d80:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003d84:	1f1b      	subs	r3, r3, #4
 8003d86:	1f10      	subs	r0, r2, #4
 8003d88:	428b      	cmp	r3, r1
 8003d8a:	d30f      	bcc.n	8003dac <nl_func_soft_sign_array_f32+0x34>
 8003d8c:	ed93 0a00 	vldr	s0, [r3]
 8003d90:	eef0 0ac0 	vabs.f32	s1, s0
 8003d94:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003d98:	ee70 0a81 	vadd.f32	s1, s1, s2
 8003d9c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003da0:	ed80 0a00 	vstr	s0, [r0]
 8003da4:	1f1b      	subs	r3, r3, #4
 8003da6:	1f00      	subs	r0, r0, #4
 8003da8:	428b      	cmp	r3, r1
 8003daa:	d2ef      	bcs.n	8003d8c <nl_func_soft_sign_array_f32+0x14>
 8003dac:	4770      	bx	lr
	...

08003db0 <forward_soft_sign>:
 8003db0:	b4f0      	push	{r4, r5, r6, r7}
 8003db2:	6942      	ldr	r2, [r0, #20]
 8003db4:	8811      	ldrh	r1, [r2, #0]
 8003db6:	2900      	cmp	r1, #0
 8003db8:	bf1a      	itte	ne
 8003dba:	6850      	ldrne	r0, [r2, #4]
 8003dbc:	1d00      	addne	r0, r0, #4
 8003dbe:	2004      	moveq	r0, #4
 8003dc0:	f04f 0501 	mov.w	r5, #1
 8003dc4:	6800      	ldr	r0, [r0, #0]
 8003dc6:	2800      	cmp	r0, #0
 8003dc8:	bf14      	ite	ne
 8003dca:	6803      	ldrne	r3, [r0, #0]
 8003dcc:	2300      	moveq	r3, #0
 8003dce:	2902      	cmp	r1, #2
 8003dd0:	bfa6      	itte	ge
 8003dd2:	6850      	ldrge	r0, [r2, #4]
 8003dd4:	3010      	addge	r0, #16
 8003dd6:	2004      	movlt	r0, #4
 8003dd8:	6800      	ldr	r0, [r0, #0]
 8003dda:	2800      	cmp	r0, #0
 8003ddc:	bf19      	ittee	ne
 8003dde:	6800      	ldrne	r0, [r0, #0]
 8003de0:	f100 0418 	addne.w	r4, r0, #24
 8003de4:	2100      	moveq	r1, #0
 8003de6:	f101 0418 	addeq.w	r4, r1, #24
 8003dea:	f103 0108 	add.w	r1, r3, #8
 8003dee:	680a      	ldr	r2, [r1, #0]
 8003df0:	0a12      	lsrs	r2, r2, #8
 8003df2:	d01e      	beq.n	8003e32 <forward_soft_sign+0x82>
 8003df4:	684e      	ldr	r6, [r1, #4]
 8003df6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	1f0f      	subs	r7, r1, #4
 8003dfe:	f010 0103 	ands.w	r1, r0, #3
 8003e02:	d006      	beq.n	8003e12 <forward_soft_sign+0x62>
 8003e04:	1e52      	subs	r2, r2, #1
 8003e06:	f857 c904 	ldr.w	ip, [r7], #-4
 8003e0a:	1e49      	subs	r1, r1, #1
 8003e0c:	fb0c f505 	mul.w	r5, ip, r5
 8003e10:	d1f8      	bne.n	8003e04 <forward_soft_sign+0x54>
 8003e12:	0880      	lsrs	r0, r0, #2
 8003e14:	d00d      	beq.n	8003e32 <forward_soft_sign+0x82>
 8003e16:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003e1a:	3910      	subs	r1, #16
 8003e1c:	68ca      	ldr	r2, [r1, #12]
 8003e1e:	688e      	ldr	r6, [r1, #8]
 8003e20:	684f      	ldr	r7, [r1, #4]
 8003e22:	4372      	muls	r2, r6
 8003e24:	f851 6910 	ldr.w	r6, [r1], #-16
 8003e28:	437a      	muls	r2, r7
 8003e2a:	4372      	muls	r2, r6
 8003e2c:	4355      	muls	r5, r2
 8003e2e:	1e40      	subs	r0, r0, #1
 8003e30:	d1f4      	bne.n	8003e1c <forward_soft_sign+0x6c>
 8003e32:	6998      	ldr	r0, [r3, #24]
 8003e34:	6822      	ldr	r2, [r4, #0]
 8003e36:	6880      	ldr	r0, [r0, #8]
 8003e38:	6893      	ldr	r3, [r2, #8]
 8003e3a:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003e3e:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003e42:	1f09      	subs	r1, r1, #4
 8003e44:	1f22      	subs	r2, r4, #4
 8003e46:	4281      	cmp	r1, r0
 8003e48:	f0c0 8010 	bcc.w	8003e6c <forward_soft_sign+0xbc>
 8003e4c:	ed91 0a00 	vldr	s0, [r1]
 8003e50:	eef0 0ac0 	vabs.f32	s1, s0
 8003e54:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003e58:	ee70 0a81 	vadd.f32	s1, s1, s2
 8003e5c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003e60:	ed82 0a00 	vstr	s0, [r2]
 8003e64:	1f09      	subs	r1, r1, #4
 8003e66:	1f12      	subs	r2, r2, #4
 8003e68:	4281      	cmp	r1, r0
 8003e6a:	d2ef      	bcs.n	8003e4c <forward_soft_sign+0x9c>
 8003e6c:	bcf0      	pop	{r4, r5, r6, r7}
 8003e6e:	4770      	bx	lr

08003e70 <nl_func_tanh_array_f32>:
 8003e70:	b570      	push	{r4, r5, r6, lr}
 8003e72:	688c      	ldr	r4, [r1, #8]
 8003e74:	6880      	ldr	r0, [r0, #8]
 8003e76:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003e7a:	1f0d      	subs	r5, r1, #4
 8003e7c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003e80:	1f0e      	subs	r6, r1, #4
 8003e82:	42a5      	cmp	r5, r4
 8003e84:	f0c0 800a 	bcc.w	8003e9c <nl_func_tanh_array_f32+0x2c>
 8003e88:	ed95 0a00 	vldr	s0, [r5]
 8003e8c:	f011 ff4c 	bl	8015d28 <tanhf>
 8003e90:	ed86 0a00 	vstr	s0, [r6]
 8003e94:	1f2d      	subs	r5, r5, #4
 8003e96:	1f36      	subs	r6, r6, #4
 8003e98:	42a5      	cmp	r5, r4
 8003e9a:	d2f5      	bcs.n	8003e88 <nl_func_tanh_array_f32+0x18>
 8003e9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003ea0 <forward_tanh>:
 8003ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ea2:	b081      	sub	sp, #4
 8003ea4:	6942      	ldr	r2, [r0, #20]
 8003ea6:	8811      	ldrh	r1, [r2, #0]
 8003ea8:	2900      	cmp	r1, #0
 8003eaa:	bf1a      	itte	ne
 8003eac:	6850      	ldrne	r0, [r2, #4]
 8003eae:	1d00      	addne	r0, r0, #4
 8003eb0:	2004      	moveq	r0, #4
 8003eb2:	f04f 0501 	mov.w	r5, #1
 8003eb6:	6800      	ldr	r0, [r0, #0]
 8003eb8:	2800      	cmp	r0, #0
 8003eba:	bf14      	ite	ne
 8003ebc:	6803      	ldrne	r3, [r0, #0]
 8003ebe:	2300      	moveq	r3, #0
 8003ec0:	2902      	cmp	r1, #2
 8003ec2:	bfa6      	itte	ge
 8003ec4:	6850      	ldrge	r0, [r2, #4]
 8003ec6:	3010      	addge	r0, #16
 8003ec8:	2004      	movlt	r0, #4
 8003eca:	6800      	ldr	r0, [r0, #0]
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	bf19      	ittee	ne
 8003ed0:	6800      	ldrne	r0, [r0, #0]
 8003ed2:	f100 0418 	addne.w	r4, r0, #24
 8003ed6:	2100      	moveq	r1, #0
 8003ed8:	f101 0418 	addeq.w	r4, r1, #24
 8003edc:	f103 0108 	add.w	r1, r3, #8
 8003ee0:	680a      	ldr	r2, [r1, #0]
 8003ee2:	0a12      	lsrs	r2, r2, #8
 8003ee4:	d01e      	beq.n	8003f24 <forward_tanh+0x84>
 8003ee6:	684e      	ldr	r6, [r1, #4]
 8003ee8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003eec:	4610      	mov	r0, r2
 8003eee:	1f0f      	subs	r7, r1, #4
 8003ef0:	f010 0103 	ands.w	r1, r0, #3
 8003ef4:	d006      	beq.n	8003f04 <forward_tanh+0x64>
 8003ef6:	1e52      	subs	r2, r2, #1
 8003ef8:	f857 c904 	ldr.w	ip, [r7], #-4
 8003efc:	1e49      	subs	r1, r1, #1
 8003efe:	fb0c f505 	mul.w	r5, ip, r5
 8003f02:	d1f8      	bne.n	8003ef6 <forward_tanh+0x56>
 8003f04:	0880      	lsrs	r0, r0, #2
 8003f06:	d00d      	beq.n	8003f24 <forward_tanh+0x84>
 8003f08:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003f0c:	3910      	subs	r1, #16
 8003f0e:	68ca      	ldr	r2, [r1, #12]
 8003f10:	688e      	ldr	r6, [r1, #8]
 8003f12:	684f      	ldr	r7, [r1, #4]
 8003f14:	4372      	muls	r2, r6
 8003f16:	f851 6910 	ldr.w	r6, [r1], #-16
 8003f1a:	437a      	muls	r2, r7
 8003f1c:	4372      	muls	r2, r6
 8003f1e:	4355      	muls	r5, r2
 8003f20:	1e40      	subs	r0, r0, #1
 8003f22:	d1f4      	bne.n	8003f0e <forward_tanh+0x6e>
 8003f24:	6998      	ldr	r0, [r3, #24]
 8003f26:	6886      	ldr	r6, [r0, #8]
 8003f28:	6821      	ldr	r1, [r4, #0]
 8003f2a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003f2e:	1f07      	subs	r7, r0, #4
 8003f30:	6888      	ldr	r0, [r1, #8]
 8003f32:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003f36:	1f14      	subs	r4, r2, #4
 8003f38:	42b7      	cmp	r7, r6
 8003f3a:	d309      	bcc.n	8003f50 <forward_tanh+0xb0>
 8003f3c:	ed97 0a00 	vldr	s0, [r7]
 8003f40:	f011 fef2 	bl	8015d28 <tanhf>
 8003f44:	ed84 0a00 	vstr	s0, [r4]
 8003f48:	1f3f      	subs	r7, r7, #4
 8003f4a:	1f24      	subs	r4, r4, #4
 8003f4c:	42b7      	cmp	r7, r6
 8003f4e:	d2f5      	bcs.n	8003f3c <forward_tanh+0x9c>
 8003f50:	b001      	add	sp, #4
 8003f52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f54 <nl_func_relu_array_f32>:
 8003f54:	6889      	ldr	r1, [r1, #8]
 8003f56:	6880      	ldr	r0, [r0, #8]
 8003f58:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003f5c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003f60:	1f1b      	subs	r3, r3, #4
 8003f62:	1f10      	subs	r0, r2, #4
 8003f64:	428b      	cmp	r3, r1
 8003f66:	d30e      	bcc.n	8003f86 <nl_func_relu_array_f32+0x32>
 8003f68:	ed93 0a00 	vldr	s0, [r3]
 8003f6c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f74:	bf48      	it	mi
 8003f76:	ed9f 0a7b 	vldrmi	s0, [pc, #492]	; 8004164 <.text_62>
 8003f7a:	ed80 0a00 	vstr	s0, [r0]
 8003f7e:	1f1b      	subs	r3, r3, #4
 8003f80:	1f00      	subs	r0, r0, #4
 8003f82:	428b      	cmp	r3, r1
 8003f84:	d2f0      	bcs.n	8003f68 <nl_func_relu_array_f32+0x14>
 8003f86:	4770      	bx	lr

08003f88 <nl_func_sm_channel_f32>:
 8003f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f8c:	ed2d 8b02 	vpush	{d8}
 8003f90:	688f      	ldr	r7, [r1, #8]
 8003f92:	6886      	ldr	r6, [r0, #8]
 8003f94:	ed97 8a00 	vldr	s16, [r7]
 8003f98:	4614      	mov	r4, r2
 8003f9a:	2c02      	cmp	r4, #2
 8003f9c:	eddf 8a71 	vldr	s17, [pc, #452]	; 8004164 <.text_62>
 8003fa0:	d33d      	bcc.n	800401e <nl_func_sm_channel_f32+0x96>
 8003fa2:	1e61      	subs	r1, r4, #1
 8003fa4:	1d3a      	adds	r2, r7, #4
 8003fa6:	f011 0003 	ands.w	r0, r1, #3
 8003faa:	d00c      	beq.n	8003fc6 <nl_func_sm_channel_f32+0x3e>
 8003fac:	ed92 0a00 	vldr	s0, [r2]
 8003fb0:	eeb4 0a48 	vcmp.f32	s0, s16
 8003fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fb8:	bf58      	it	pl
 8003fba:	eeb0 8a40 	vmovpl.f32	s16, s0
 8003fbe:	1e40      	subs	r0, r0, #1
 8003fc0:	f102 0204 	add.w	r2, r2, #4
 8003fc4:	d1f2      	bne.n	8003fac <nl_func_sm_channel_f32+0x24>
 8003fc6:	0889      	lsrs	r1, r1, #2
 8003fc8:	f000 802b 	beq.w	8004022 <nl_func_sm_channel_f32+0x9a>
 8003fcc:	ed92 0a00 	vldr	s0, [r2]
 8003fd0:	eeb4 0a48 	vcmp.f32	s0, s16
 8003fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd8:	bf58      	it	pl
 8003fda:	eeb0 8a40 	vmovpl.f32	s16, s0
 8003fde:	ed92 0a01 	vldr	s0, [r2, #4]
 8003fe2:	eeb4 0a48 	vcmp.f32	s0, s16
 8003fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fea:	bf58      	it	pl
 8003fec:	eeb0 8a40 	vmovpl.f32	s16, s0
 8003ff0:	ed92 0a02 	vldr	s0, [r2, #8]
 8003ff4:	eeb4 0a48 	vcmp.f32	s0, s16
 8003ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ffc:	bf58      	it	pl
 8003ffe:	eeb0 8a40 	vmovpl.f32	s16, s0
 8004002:	ed92 0a03 	vldr	s0, [r2, #12]
 8004006:	eeb4 0a48 	vcmp.f32	s0, s16
 800400a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800400e:	bf58      	it	pl
 8004010:	eeb0 8a40 	vmovpl.f32	s16, s0
 8004014:	1e49      	subs	r1, r1, #1
 8004016:	f102 0210 	add.w	r2, r2, #16
 800401a:	d1d7      	bne.n	8003fcc <nl_func_sm_channel_f32+0x44>
 800401c:	e001      	b.n	8004022 <nl_func_sm_channel_f32+0x9a>
 800401e:	2c00      	cmp	r4, #0
 8004020:	d040      	beq.n	80040a4 <nl_func_sm_channel_f32+0x11c>
 8004022:	46b0      	mov	r8, r6
 8004024:	ea4f 0504 	mov.w	r5, r4
 8004028:	ed97 0a00 	vldr	s0, [r7]
 800402c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8004030:	f011 ff9c 	bl	8015f6c <expf>
 8004034:	1d3f      	adds	r7, r7, #4
 8004036:	ed88 0a00 	vstr	s0, [r8]
 800403a:	1e6d      	subs	r5, r5, #1
 800403c:	ee78 8a80 	vadd.f32	s17, s17, s0
 8004040:	f108 0804 	add.w	r8, r8, #4
 8004044:	d1f0      	bne.n	8004028 <nl_func_sm_channel_f32+0xa0>
 8004046:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800404a:	f014 0003 	ands.w	r0, r4, #3
 800404e:	ee80 0a28 	vdiv.f32	s0, s0, s17
 8004052:	d009      	beq.n	8004068 <nl_func_sm_channel_f32+0xe0>
 8004054:	edd6 0a00 	vldr	s1, [r6]
 8004058:	ee60 0a80 	vmul.f32	s1, s1, s0
 800405c:	edc6 0a00 	vstr	s1, [r6]
 8004060:	1e40      	subs	r0, r0, #1
 8004062:	f106 0604 	add.w	r6, r6, #4
 8004066:	d1f5      	bne.n	8004054 <nl_func_sm_channel_f32+0xcc>
 8004068:	08a4      	lsrs	r4, r4, #2
 800406a:	d01b      	beq.n	80040a4 <nl_func_sm_channel_f32+0x11c>
 800406c:	edd6 0a00 	vldr	s1, [r6]
 8004070:	ee60 0a80 	vmul.f32	s1, s1, s0
 8004074:	edc6 0a00 	vstr	s1, [r6]
 8004078:	1e64      	subs	r4, r4, #1
 800407a:	ed96 1a01 	vldr	s2, [r6, #4]
 800407e:	edd6 0a02 	vldr	s1, [r6, #8]
 8004082:	ee21 1a00 	vmul.f32	s2, s2, s0
 8004086:	ed86 1a01 	vstr	s2, [r6, #4]
 800408a:	ee60 0a80 	vmul.f32	s1, s1, s0
 800408e:	ed96 1a03 	vldr	s2, [r6, #12]
 8004092:	edc6 0a02 	vstr	s1, [r6, #8]
 8004096:	ee21 1a00 	vmul.f32	s2, s2, s0
 800409a:	ed86 1a03 	vstr	s2, [r6, #12]
 800409e:	f106 0610 	add.w	r6, r6, #16
 80040a2:	d1e3      	bne.n	800406c <nl_func_sm_channel_f32+0xe4>
 80040a4:	ecbd 8b02 	vpop	{d8}
 80040a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080040ac <nl_func_sm_array_f32>:
 80040ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040b0:	460d      	mov	r5, r1
 80040b2:	4604      	mov	r4, r0
 80040b4:	9f08      	ldr	r7, [sp, #32]
 80040b6:	68a8      	ldr	r0, [r5, #8]
 80040b8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80040ba:	00bf      	lsls	r7, r7, #2
 80040bc:	427f      	negs	r7, r7
 80040be:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80040c2:	68a0      	ldr	r0, [r4, #8]
 80040c4:	eb01 0a07 	add.w	sl, r1, r7
 80040c8:	00b6      	lsls	r6, r6, #2
 80040ca:	4276      	negs	r6, r6
 80040cc:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80040d0:	68ea      	ldr	r2, [r5, #12]
 80040d2:	4592      	cmp	sl, r2
 80040d4:	eb01 0906 	add.w	r9, r1, r6
 80040d8:	d30f      	bcc.n	80040fa <nl_func_sm_array_f32+0x4e>
 80040da:	4698      	mov	r8, r3
 80040dc:	f8c5 a008 	str.w	sl, [r5, #8]
 80040e0:	f8c4 9008 	str.w	r9, [r4, #8]
 80040e4:	2300      	movs	r3, #0
 80040e6:	4642      	mov	r2, r8
 80040e8:	4629      	mov	r1, r5
 80040ea:	4620      	mov	r0, r4
 80040ec:	f7ff ff4c 	bl	8003f88 <nl_func_sm_channel_f32>
 80040f0:	68e8      	ldr	r0, [r5, #12]
 80040f2:	44ba      	add	sl, r7
 80040f4:	4582      	cmp	sl, r0
 80040f6:	44b1      	add	r9, r6
 80040f8:	d2f0      	bcs.n	80040dc <nl_func_sm_array_f32+0x30>
 80040fa:	68e9      	ldr	r1, [r5, #12]
 80040fc:	60a9      	str	r1, [r5, #8]
 80040fe:	68e0      	ldr	r0, [r4, #12]
 8004100:	60a0      	str	r0, [r4, #8]
 8004102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08004108 <nl_func_hard_sigmoid_array_f32>:
 8004108:	6889      	ldr	r1, [r1, #8]
 800410a:	6880      	ldr	r0, [r0, #8]
 800410c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004110:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004114:	1f1b      	subs	r3, r3, #4
 8004116:	1f10      	subs	r0, r2, #4
 8004118:	428b      	cmp	r3, r1
 800411a:	d321      	bcc.n	8004160 <nl_func_hard_sigmoid_array_f32+0x58>
 800411c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004120:	eddf 0ab8 	vldr	s1, [pc, #736]	; 8004404 <.text_68>
 8004124:	edd3 1a00 	vldr	s3, [r3]
 8004128:	ed9f 2ab7 	vldr	s4, [pc, #732]	; 8004408 <.text_69>
 800412c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8004130:	ee01 1a82 	vmla.f32	s2, s3, s4
 8004134:	eeb4 1a60 	vcmp.f32	s2, s1
 8004138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800413c:	da08      	bge.n	8004150 <nl_func_hard_sigmoid_array_f32+0x48>
 800413e:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8004142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004146:	d505      	bpl.n	8004154 <nl_func_hard_sigmoid_array_f32+0x4c>
 8004148:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8004164 <.text_62>
 800414c:	e002      	b.n	8004154 <nl_func_hard_sigmoid_array_f32+0x4c>
 800414e:	bf00      	nop
 8004150:	eeb0 1a40 	vmov.f32	s2, s0
 8004154:	ed80 1a00 	vstr	s2, [r0]
 8004158:	1f1b      	subs	r3, r3, #4
 800415a:	1f00      	subs	r0, r0, #4
 800415c:	428b      	cmp	r3, r1
 800415e:	d2e1      	bcs.n	8004124 <nl_func_hard_sigmoid_array_f32+0x1c>
 8004160:	4770      	bx	lr
	...

08004164 <.text_62>:
 8004164:	00000000 	.word	0x00000000

08004168 <nl_func_clip_array_f32>:
 8004168:	6889      	ldr	r1, [r1, #8]
 800416a:	6880      	ldr	r0, [r0, #8]
 800416c:	ed93 0a00 	vldr	s0, [r3]
 8004170:	edd3 0a01 	vldr	s1, [r3, #4]
 8004174:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004178:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800417c:	1f1b      	subs	r3, r3, #4
 800417e:	1f10      	subs	r0, r2, #4
 8004180:	428b      	cmp	r3, r1
 8004182:	d315      	bcc.n	80041b0 <nl_func_clip_array_f32+0x48>
 8004184:	ed93 1a00 	vldr	s2, [r3]
 8004188:	eeb4 0a41 	vcmp.f32	s0, s2
 800418c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004190:	bf58      	it	pl
 8004192:	eeb0 1a40 	vmovpl.f32	s2, s0
 8004196:	eeb4 1a60 	vcmp.f32	s2, s1
 800419a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800419e:	bf58      	it	pl
 80041a0:	eeb0 1a60 	vmovpl.f32	s2, s1
 80041a4:	ed80 1a00 	vstr	s2, [r0]
 80041a8:	1f1b      	subs	r3, r3, #4
 80041aa:	1f00      	subs	r0, r0, #4
 80041ac:	428b      	cmp	r3, r1
 80041ae:	d2e9      	bcs.n	8004184 <nl_func_clip_array_f32+0x1c>
 80041b0:	4770      	bx	lr
	...

080041b4 <nl_func_hardmax_array_f32>:
 80041b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041b8:	6852      	ldr	r2, [r2, #4]
 80041ba:	6855      	ldr	r5, [r2, #4]
 80041bc:	68d4      	ldr	r4, [r2, #12]
 80041be:	688e      	ldr	r6, [r1, #8]
 80041c0:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80041c4:	436c      	muls	r4, r5
 80041c6:	00a1      	lsls	r1, r4, #2
 80041c8:	4640      	mov	r0, r8
 80041ca:	f00c faf1 	bl	80107b0 <__aeabi_memclr>
 80041ce:	2200      	movs	r2, #0
 80041d0:	2c00      	cmp	r4, #0
 80041d2:	4633      	mov	r3, r6
 80041d4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80041d8:	f000 805b 	beq.w	8004292 <nl_func_hardmax_array_f32+0xde>
 80041dc:	f102 0c01 	add.w	ip, r2, #1
 80041e0:	eb05 0e02 	add.w	lr, r5, r2
 80041e4:	45f4      	cmp	ip, lr
 80041e6:	edd3 0a00 	vldr	s1, [r3]
 80041ea:	d249      	bcs.n	8004280 <nl_func_hardmax_array_f32+0xcc>
 80041ec:	1e69      	subs	r1, r5, #1
 80041ee:	f011 0003 	ands.w	r0, r1, #3
 80041f2:	eb06 078c 	add.w	r7, r6, ip, lsl #2
 80041f6:	d00f      	beq.n	8004218 <nl_func_hardmax_array_f32+0x64>
 80041f8:	ed97 1a00 	vldr	s2, [r7]
 80041fc:	eef4 0a41 	vcmp.f32	s1, s2
 8004200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004204:	bf44      	itt	mi
 8004206:	eef0 0a41 	vmovmi.f32	s1, s2
 800420a:	4662      	movmi	r2, ip
 800420c:	1e40      	subs	r0, r0, #1
 800420e:	f10c 0c01 	add.w	ip, ip, #1
 8004212:	f107 0704 	add.w	r7, r7, #4
 8004216:	d1ef      	bne.n	80041f8 <nl_func_hardmax_array_f32+0x44>
 8004218:	0889      	lsrs	r1, r1, #2
 800421a:	d031      	beq.n	8004280 <nl_func_hardmax_array_f32+0xcc>
 800421c:	ed97 1a00 	vldr	s2, [r7]
 8004220:	eef4 0a41 	vcmp.f32	s1, s2
 8004224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004228:	bf44      	itt	mi
 800422a:	eef0 0a41 	vmovmi.f32	s1, s2
 800422e:	4662      	movmi	r2, ip
 8004230:	ed97 1a01 	vldr	s2, [r7, #4]
 8004234:	eef4 0a41 	vcmp.f32	s1, s2
 8004238:	f10c 0001 	add.w	r0, ip, #1
 800423c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004240:	bf44      	itt	mi
 8004242:	eef0 0a41 	vmovmi.f32	s1, s2
 8004246:	4602      	movmi	r2, r0
 8004248:	ed97 1a02 	vldr	s2, [r7, #8]
 800424c:	1c40      	adds	r0, r0, #1
 800424e:	eef4 0a41 	vcmp.f32	s1, s2
 8004252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004256:	bf44      	itt	mi
 8004258:	eef0 0a41 	vmovmi.f32	s1, s2
 800425c:	4602      	movmi	r2, r0
 800425e:	ed97 1a03 	vldr	s2, [r7, #12]
 8004262:	1c40      	adds	r0, r0, #1
 8004264:	eef4 0a41 	vcmp.f32	s1, s2
 8004268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800426c:	bf44      	itt	mi
 800426e:	eef0 0a41 	vmovmi.f32	s1, s2
 8004272:	4602      	movmi	r2, r0
 8004274:	1e49      	subs	r1, r1, #1
 8004276:	f100 0c01 	add.w	ip, r0, #1
 800427a:	f107 0710 	add.w	r7, r7, #16
 800427e:	d1cd      	bne.n	800421c <nl_func_hardmax_array_f32+0x68>
 8004280:	eb08 0082 	add.w	r0, r8, r2, lsl #2
 8004284:	4672      	mov	r2, lr
 8004286:	42a2      	cmp	r2, r4
 8004288:	ed80 0a00 	vstr	s0, [r0]
 800428c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8004290:	d3a4      	bcc.n	80041dc <nl_func_hardmax_array_f32+0x28>
 8004292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004298 <nl_func_relu_generic_array_f32>:
 8004298:	6880      	ldr	r0, [r0, #8]
 800429a:	ed93 0a00 	vldr	s0, [r3]
 800429e:	edd3 0a01 	vldr	s1, [r3, #4]
 80042a2:	ed93 1a02 	vldr	s2, [r3, #8]
 80042a6:	6889      	ldr	r1, [r1, #8]
 80042a8:	1f03      	subs	r3, r0, #4
 80042aa:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 80042ae:	eeb5 1a40 	vcmp.f32	s2, #0.0
 80042b2:	1f0b      	subs	r3, r1, #4
 80042b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80042bc:	d52a      	bpl.n	8004314 <nl_func_relu_generic_array_f32+0x7c>
 80042be:	eef5 0a40 	vcmp.f32	s1, #0.0
 80042c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042c6:	d013      	beq.n	80042f0 <nl_func_relu_generic_array_f32+0x58>
 80042c8:	428a      	cmp	r2, r1
 80042ca:	d310      	bcc.n	80042ee <nl_func_relu_generic_array_f32+0x56>
 80042cc:	ed92 1a00 	vldr	s2, [r2]
 80042d0:	eeb4 1a40 	vcmp.f32	s2, s0
 80042d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d8:	bf44      	itt	mi
 80042da:	ee31 1a40 	vsubmi.f32	s2, s2, s0
 80042de:	ee21 1a20 	vmulmi.f32	s2, s2, s1
 80042e2:	ed80 1a00 	vstr	s2, [r0]
 80042e6:	1f12      	subs	r2, r2, #4
 80042e8:	1f00      	subs	r0, r0, #4
 80042ea:	428a      	cmp	r2, r1
 80042ec:	d2ee      	bcs.n	80042cc <nl_func_relu_generic_array_f32+0x34>
 80042ee:	4770      	bx	lr
 80042f0:	428a      	cmp	r2, r1
 80042f2:	d3fc      	bcc.n	80042ee <nl_func_relu_generic_array_f32+0x56>
 80042f4:	edd2 0a00 	vldr	s1, [r2]
 80042f8:	eef4 0a40 	vcmp.f32	s1, s0
 80042fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004300:	bf48      	it	mi
 8004302:	eddf 0aa7 	vldrmi	s1, [pc, #668]	; 80045a0 <.text_73>
 8004306:	edc0 0a00 	vstr	s1, [r0]
 800430a:	1f12      	subs	r2, r2, #4
 800430c:	1f00      	subs	r0, r0, #4
 800430e:	428a      	cmp	r2, r1
 8004310:	d2f0      	bcs.n	80042f4 <nl_func_relu_generic_array_f32+0x5c>
 8004312:	4770      	bx	lr
 8004314:	428a      	cmp	r2, r1
 8004316:	d3ea      	bcc.n	80042ee <nl_func_relu_generic_array_f32+0x56>
 8004318:	edd2 1a00 	vldr	s3, [r2]
 800431c:	eef4 1a41 	vcmp.f32	s3, s2
 8004320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004324:	d50a      	bpl.n	800433c <nl_func_relu_generic_array_f32+0xa4>
 8004326:	eef4 1a40 	vcmp.f32	s3, s0
 800432a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800432e:	d507      	bpl.n	8004340 <nl_func_relu_generic_array_f32+0xa8>
 8004330:	ee71 1ac0 	vsub.f32	s3, s3, s0
 8004334:	ee61 1aa0 	vmul.f32	s3, s3, s1
 8004338:	e002      	b.n	8004340 <nl_func_relu_generic_array_f32+0xa8>
 800433a:	bf00      	nop
 800433c:	eef0 1a41 	vmov.f32	s3, s2
 8004340:	edc0 1a00 	vstr	s3, [r0]
 8004344:	1f12      	subs	r2, r2, #4
 8004346:	1f00      	subs	r0, r0, #4
 8004348:	428a      	cmp	r2, r1
 800434a:	d2e5      	bcs.n	8004318 <nl_func_relu_generic_array_f32+0x80>
 800434c:	4770      	bx	lr
	...

08004350 <nl_func_relu_thresholded_array_f32>:
 8004350:	6889      	ldr	r1, [r1, #8]
 8004352:	6880      	ldr	r0, [r0, #8]
 8004354:	ed93 0a00 	vldr	s0, [r3]
 8004358:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 800435c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004360:	1f1b      	subs	r3, r3, #4
 8004362:	1f10      	subs	r0, r2, #4
 8004364:	428b      	cmp	r3, r1
 8004366:	d30e      	bcc.n	8004386 <nl_func_relu_thresholded_array_f32+0x36>
 8004368:	edd3 0a00 	vldr	s1, [r3]
 800436c:	eef4 0a40 	vcmp.f32	s1, s0
 8004370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004374:	bf48      	it	mi
 8004376:	eddf 0a8a 	vldrmi	s1, [pc, #552]	; 80045a0 <.text_73>
 800437a:	edc0 0a00 	vstr	s1, [r0]
 800437e:	1f1b      	subs	r3, r3, #4
 8004380:	1f00      	subs	r0, r0, #4
 8004382:	428b      	cmp	r3, r1
 8004384:	d2f0      	bcs.n	8004368 <nl_func_relu_thresholded_array_f32+0x18>
 8004386:	4770      	bx	lr

08004388 <nl_func_elu_array_f32>:
 8004388:	b570      	push	{r4, r5, r6, lr}
 800438a:	ed2d 8b04 	vpush	{d8-d9}
 800438e:	688c      	ldr	r4, [r1, #8]
 8004390:	6880      	ldr	r0, [r0, #8]
 8004392:	ed93 8a00 	vldr	s16, [r3]
 8004396:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800439a:	1f0d      	subs	r5, r1, #4
 800439c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80043a0:	1f0e      	subs	r6, r1, #4
 80043a2:	42a5      	cmp	r5, r4
 80043a4:	f0c0 802a 	bcc.w	80043fc <nl_func_elu_array_f32+0x74>
 80043a8:	edd5 8a00 	vldr	s17, [r5]
 80043ac:	eef5 8a40 	vcmp.f32	s17, #0.0
 80043b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b4:	bf4c      	ite	mi
 80043b6:	ed9f 9a7a 	vldrmi	s18, [pc, #488]	; 80045a0 <.text_73>
 80043ba:	eeb0 9a68 	vmovpl.f32	s18, s17
 80043be:	eeb0 0a68 	vmov.f32	s0, s17
 80043c2:	f011 fdd3 	bl	8015f6c <expf>
 80043c6:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80043ca:	ee30 0a20 	vadd.f32	s0, s0, s1
 80043ce:	ee20 0a08 	vmul.f32	s0, s0, s16
 80043d2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80043d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043da:	dc09      	bgt.n	80043f0 <nl_func_elu_array_f32+0x68>
 80043dc:	eeb0 0a68 	vmov.f32	s0, s17
 80043e0:	f011 fdc4 	bl	8015f6c <expf>
 80043e4:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80043e8:	ee30 0a20 	vadd.f32	s0, s0, s1
 80043ec:	ee00 9a08 	vmla.f32	s18, s0, s16
 80043f0:	ed86 9a00 	vstr	s18, [r6]
 80043f4:	1f2d      	subs	r5, r5, #4
 80043f6:	1f36      	subs	r6, r6, #4
 80043f8:	42a5      	cmp	r5, r4
 80043fa:	d2d5      	bcs.n	80043a8 <nl_func_elu_array_f32+0x20>
 80043fc:	ecbd 8b04 	vpop	{d8-d9}
 8004400:	bd70      	pop	{r4, r5, r6, pc}
	...

08004404 <.text_68>:
 8004404:	3f800001 	.word	0x3f800001

08004408 <.text_69>:
 8004408:	3e4ccccd 	.word	0x3e4ccccd

0800440c <nl_func_selu_array_f32>:
 800440c:	b570      	push	{r4, r5, r6, lr}
 800440e:	ed2d 8b04 	vpush	{d8-d9}
 8004412:	688c      	ldr	r4, [r1, #8]
 8004414:	6880      	ldr	r0, [r0, #8]
 8004416:	ed93 8a00 	vldr	s16, [r3]
 800441a:	edd3 8a01 	vldr	s17, [r3, #4]
 800441e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8004422:	1f0d      	subs	r5, r1, #4
 8004424:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8004428:	1f0e      	subs	r6, r1, #4
 800442a:	42a5      	cmp	r5, r4
 800442c:	f0c0 802c 	bcc.w	8004488 <nl_func_selu_array_f32+0x7c>
 8004430:	ed95 9a00 	vldr	s18, [r5]
 8004434:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8004438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800443c:	bf4c      	ite	mi
 800443e:	eddf 9a58 	vldrmi	s19, [pc, #352]	; 80045a0 <.text_73>
 8004442:	eef0 9a49 	vmovpl.f32	s19, s18
 8004446:	eeb0 0a49 	vmov.f32	s0, s18
 800444a:	f011 fd8f 	bl	8015f6c <expf>
 800444e:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8004452:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004456:	ee20 0a08 	vmul.f32	s0, s0, s16
 800445a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800445e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004462:	dc09      	bgt.n	8004478 <nl_func_selu_array_f32+0x6c>
 8004464:	eeb0 0a49 	vmov.f32	s0, s18
 8004468:	f011 fd80 	bl	8015f6c <expf>
 800446c:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8004470:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004474:	ee40 9a08 	vmla.f32	s19, s0, s16
 8004478:	ee28 0aa9 	vmul.f32	s0, s17, s19
 800447c:	ed86 0a00 	vstr	s0, [r6]
 8004480:	1f2d      	subs	r5, r5, #4
 8004482:	1f36      	subs	r6, r6, #4
 8004484:	42a5      	cmp	r5, r4
 8004486:	d2d3      	bcs.n	8004430 <nl_func_selu_array_f32+0x24>
 8004488:	ecbd 8b04 	vpop	{d8-d9}
 800448c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004490 <nl_func_prelu_array_f32>:
 8004490:	6889      	ldr	r1, [r1, #8]
 8004492:	6880      	ldr	r0, [r0, #8]
 8004494:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004498:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800449c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80044a0:	1f1b      	subs	r3, r3, #4
 80044a2:	f1ac 0c04 	sub.w	ip, ip, #4
 80044a6:	1f10      	subs	r0, r2, #4
 80044a8:	458c      	cmp	ip, r1
 80044aa:	d320      	bcc.n	80044ee <nl_func_prelu_array_f32+0x5e>
 80044ac:	ed9c 0a00 	vldr	s0, [ip]
 80044b0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80044b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b8:	bf4c      	ite	mi
 80044ba:	eddf 0a39 	vldrmi	s1, [pc, #228]	; 80045a0 <.text_73>
 80044be:	eef0 0a40 	vmovpl.f32	s1, s0
 80044c2:	461a      	mov	r2, r3
 80044c4:	eeb1 0a40 	vneg.f32	s0, s0
 80044c8:	1f13      	subs	r3, r2, #4
 80044ca:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80044ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d2:	bf48      	it	mi
 80044d4:	ed9f 0a32 	vldrmi	s0, [pc, #200]	; 80045a0 <.text_73>
 80044d8:	ed92 1a00 	vldr	s2, [r2]
 80044dc:	ee41 0a40 	vmls.f32	s1, s2, s0
 80044e0:	edc0 0a00 	vstr	s1, [r0]
 80044e4:	f1ac 0c04 	sub.w	ip, ip, #4
 80044e8:	1f00      	subs	r0, r0, #4
 80044ea:	458c      	cmp	ip, r1
 80044ec:	d2de      	bcs.n	80044ac <nl_func_prelu_array_f32+0x1c>
 80044ee:	4770      	bx	lr

080044f0 <forward_relu>:
 80044f0:	b570      	push	{r4, r5, r6, lr}
 80044f2:	4604      	mov	r4, r0
 80044f4:	6962      	ldr	r2, [r4, #20]
 80044f6:	8811      	ldrh	r1, [r2, #0]
 80044f8:	2900      	cmp	r1, #0
 80044fa:	bf1a      	itte	ne
 80044fc:	6850      	ldrne	r0, [r2, #4]
 80044fe:	1d00      	addne	r0, r0, #4
 8004500:	2004      	moveq	r0, #4
 8004502:	6800      	ldr	r0, [r0, #0]
 8004504:	2800      	cmp	r0, #0
 8004506:	bf14      	ite	ne
 8004508:	6805      	ldrne	r5, [r0, #0]
 800450a:	2500      	moveq	r5, #0
 800450c:	2902      	cmp	r1, #2
 800450e:	bfa6      	itte	ge
 8004510:	6850      	ldrge	r0, [r2, #4]
 8004512:	3010      	addge	r0, #16
 8004514:	2004      	movlt	r0, #4
 8004516:	6800      	ldr	r0, [r0, #0]
 8004518:	2800      	cmp	r0, #0
 800451a:	bf19      	ittee	ne
 800451c:	6800      	ldrne	r0, [r0, #0]
 800451e:	f100 0618 	addne.w	r6, r0, #24
 8004522:	2100      	moveq	r1, #0
 8004524:	f101 0618 	addeq.w	r6, r1, #24
 8004528:	69a0      	ldr	r0, [r4, #24]
 800452a:	b9f8      	cbnz	r0, 800456c <forward_relu+0x7c>
 800452c:	f105 0008 	add.w	r0, r5, #8
 8004530:	f7fe f80a 	bl	8002548 <ai_shape_get_size>
 8004534:	69a9      	ldr	r1, [r5, #24]
 8004536:	6833      	ldr	r3, [r6, #0]
 8004538:	6889      	ldr	r1, [r1, #8]
 800453a:	689c      	ldr	r4, [r3, #8]
 800453c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8004540:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8004544:	1f12      	subs	r2, r2, #4
 8004546:	1f00      	subs	r0, r0, #4
 8004548:	428a      	cmp	r2, r1
 800454a:	d328      	bcc.n	800459e <forward_relu+0xae>
 800454c:	ed92 0a00 	vldr	s0, [r2]
 8004550:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004558:	bf48      	it	mi
 800455a:	ed9f 0a11 	vldrmi	s0, [pc, #68]	; 80045a0 <.text_73>
 800455e:	ed80 0a00 	vstr	s0, [r0]
 8004562:	1f12      	subs	r2, r2, #4
 8004564:	1f00      	subs	r0, r0, #4
 8004566:	428a      	cmp	r2, r1
 8004568:	d2f0      	bcs.n	800454c <forward_relu+0x5c>
 800456a:	bd70      	pop	{r4, r5, r6, pc}
 800456c:	6840      	ldr	r0, [r0, #4]
 800456e:	2801      	cmp	r0, #1
 8004570:	f105 0008 	add.w	r0, r5, #8
 8004574:	d109      	bne.n	800458a <forward_relu+0x9a>
 8004576:	f7fd ffe7 	bl	8002548 <ai_shape_get_size>
 800457a:	4602      	mov	r2, r0
 800457c:	69a0      	ldr	r0, [r4, #24]
 800457e:	6883      	ldr	r3, [r0, #8]
 8004580:	69a9      	ldr	r1, [r5, #24]
 8004582:	6830      	ldr	r0, [r6, #0]
 8004584:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004588:	e6e2      	b.n	8004350 <nl_func_relu_thresholded_array_f32>
 800458a:	f7fd ffdd 	bl	8002548 <ai_shape_get_size>
 800458e:	69a1      	ldr	r1, [r4, #24]
 8004590:	688b      	ldr	r3, [r1, #8]
 8004592:	69a9      	ldr	r1, [r5, #24]
 8004594:	4602      	mov	r2, r0
 8004596:	6830      	ldr	r0, [r6, #0]
 8004598:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800459c:	e67c      	b.n	8004298 <nl_func_relu_generic_array_f32>
 800459e:	bd70      	pop	{r4, r5, r6, pc}

080045a0 <.text_73>:
 80045a0:	00000000 	.word	0x00000000

080045a4 <forward_relu_thresholded>:
 80045a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045a6:	4602      	mov	r2, r0
 80045a8:	f04f 0601 	mov.w	r6, #1
 80045ac:	6953      	ldr	r3, [r2, #20]
 80045ae:	8819      	ldrh	r1, [r3, #0]
 80045b0:	2900      	cmp	r1, #0
 80045b2:	bf1a      	itte	ne
 80045b4:	6858      	ldrne	r0, [r3, #4]
 80045b6:	1d00      	addne	r0, r0, #4
 80045b8:	2004      	moveq	r0, #4
 80045ba:	6800      	ldr	r0, [r0, #0]
 80045bc:	2800      	cmp	r0, #0
 80045be:	bf14      	ite	ne
 80045c0:	6804      	ldrne	r4, [r0, #0]
 80045c2:	2400      	moveq	r4, #0
 80045c4:	2902      	cmp	r1, #2
 80045c6:	bfa6      	itte	ge
 80045c8:	6858      	ldrge	r0, [r3, #4]
 80045ca:	3010      	addge	r0, #16
 80045cc:	2004      	movlt	r0, #4
 80045ce:	6800      	ldr	r0, [r0, #0]
 80045d0:	2800      	cmp	r0, #0
 80045d2:	bf19      	ittee	ne
 80045d4:	6800      	ldrne	r0, [r0, #0]
 80045d6:	f100 0518 	addne.w	r5, r0, #24
 80045da:	2100      	moveq	r1, #0
 80045dc:	f101 0518 	addeq.w	r5, r1, #24
 80045e0:	f104 0108 	add.w	r1, r4, #8
 80045e4:	680b      	ldr	r3, [r1, #0]
 80045e6:	0a1b      	lsrs	r3, r3, #8
 80045e8:	d01f      	beq.n	800462a <forward_relu_thresholded+0x86>
 80045ea:	684f      	ldr	r7, [r1, #4]
 80045ec:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 80045f0:	4618      	mov	r0, r3
 80045f2:	f1a1 0c04 	sub.w	ip, r1, #4
 80045f6:	f010 0103 	ands.w	r1, r0, #3
 80045fa:	d006      	beq.n	800460a <forward_relu_thresholded+0x66>
 80045fc:	1e5b      	subs	r3, r3, #1
 80045fe:	f85c e904 	ldr.w	lr, [ip], #-4
 8004602:	1e49      	subs	r1, r1, #1
 8004604:	fb0e f606 	mul.w	r6, lr, r6
 8004608:	d1f8      	bne.n	80045fc <forward_relu_thresholded+0x58>
 800460a:	0880      	lsrs	r0, r0, #2
 800460c:	d00d      	beq.n	800462a <forward_relu_thresholded+0x86>
 800460e:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 8004612:	3910      	subs	r1, #16
 8004614:	68cb      	ldr	r3, [r1, #12]
 8004616:	688f      	ldr	r7, [r1, #8]
 8004618:	437b      	muls	r3, r7
 800461a:	684f      	ldr	r7, [r1, #4]
 800461c:	437b      	muls	r3, r7
 800461e:	f851 7910 	ldr.w	r7, [r1], #-16
 8004622:	437b      	muls	r3, r7
 8004624:	435e      	muls	r6, r3
 8004626:	1e40      	subs	r0, r0, #1
 8004628:	d1f4      	bne.n	8004614 <forward_relu_thresholded+0x70>
 800462a:	6990      	ldr	r0, [r2, #24]
 800462c:	6881      	ldr	r1, [r0, #8]
 800462e:	69a0      	ldr	r0, [r4, #24]
 8004630:	682a      	ldr	r2, [r5, #0]
 8004632:	6880      	ldr	r0, [r0, #8]
 8004634:	6893      	ldr	r3, [r2, #8]
 8004636:	ed91 0a00 	vldr	s0, [r1]
 800463a:	eb00 0186 	add.w	r1, r0, r6, lsl #2
 800463e:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8004642:	1f09      	subs	r1, r1, #4
 8004644:	1f22      	subs	r2, r4, #4
 8004646:	4281      	cmp	r1, r0
 8004648:	f0c0 800f 	bcc.w	800466a <forward_relu_thresholded+0xc6>
 800464c:	edd1 0a00 	vldr	s1, [r1]
 8004650:	eef4 0a40 	vcmp.f32	s1, s0
 8004654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004658:	bf48      	it	mi
 800465a:	eddf 0ac2 	vldrmi	s1, [pc, #776]	; 8004964 <.text_80>
 800465e:	edc2 0a00 	vstr	s1, [r2]
 8004662:	1f09      	subs	r1, r1, #4
 8004664:	1f12      	subs	r2, r2, #4
 8004666:	4281      	cmp	r1, r0
 8004668:	d2f0      	bcs.n	800464c <forward_relu_thresholded+0xa8>
 800466a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800466c <forward_elu>:
 800466c:	b570      	push	{r4, r5, r6, lr}
 800466e:	4604      	mov	r4, r0
 8004670:	6962      	ldr	r2, [r4, #20]
 8004672:	8811      	ldrh	r1, [r2, #0]
 8004674:	2900      	cmp	r1, #0
 8004676:	bf1a      	itte	ne
 8004678:	6850      	ldrne	r0, [r2, #4]
 800467a:	1d00      	addne	r0, r0, #4
 800467c:	2004      	moveq	r0, #4
 800467e:	6800      	ldr	r0, [r0, #0]
 8004680:	2800      	cmp	r0, #0
 8004682:	bf14      	ite	ne
 8004684:	6805      	ldrne	r5, [r0, #0]
 8004686:	2500      	moveq	r5, #0
 8004688:	2902      	cmp	r1, #2
 800468a:	bfa6      	itte	ge
 800468c:	6850      	ldrge	r0, [r2, #4]
 800468e:	3010      	addge	r0, #16
 8004690:	2004      	movlt	r0, #4
 8004692:	6800      	ldr	r0, [r0, #0]
 8004694:	2800      	cmp	r0, #0
 8004696:	bf19      	ittee	ne
 8004698:	6800      	ldrne	r0, [r0, #0]
 800469a:	f100 0618 	addne.w	r6, r0, #24
 800469e:	2100      	moveq	r1, #0
 80046a0:	f101 0618 	addeq.w	r6, r1, #24
 80046a4:	f105 0008 	add.w	r0, r5, #8
 80046a8:	f7fd ff4e 	bl	8002548 <ai_shape_get_size>
 80046ac:	4602      	mov	r2, r0
 80046ae:	69a0      	ldr	r0, [r4, #24]
 80046b0:	6883      	ldr	r3, [r0, #8]
 80046b2:	69a9      	ldr	r1, [r5, #24]
 80046b4:	6830      	ldr	r0, [r6, #0]
 80046b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80046ba:	e665      	b.n	8004388 <nl_func_elu_array_f32>

080046bc <forward_selu>:
 80046bc:	b570      	push	{r4, r5, r6, lr}
 80046be:	4604      	mov	r4, r0
 80046c0:	6962      	ldr	r2, [r4, #20]
 80046c2:	8811      	ldrh	r1, [r2, #0]
 80046c4:	2900      	cmp	r1, #0
 80046c6:	bf1a      	itte	ne
 80046c8:	6850      	ldrne	r0, [r2, #4]
 80046ca:	1d00      	addne	r0, r0, #4
 80046cc:	2004      	moveq	r0, #4
 80046ce:	6800      	ldr	r0, [r0, #0]
 80046d0:	2800      	cmp	r0, #0
 80046d2:	bf14      	ite	ne
 80046d4:	6805      	ldrne	r5, [r0, #0]
 80046d6:	2500      	moveq	r5, #0
 80046d8:	2902      	cmp	r1, #2
 80046da:	bfa6      	itte	ge
 80046dc:	6850      	ldrge	r0, [r2, #4]
 80046de:	3010      	addge	r0, #16
 80046e0:	2004      	movlt	r0, #4
 80046e2:	6800      	ldr	r0, [r0, #0]
 80046e4:	2800      	cmp	r0, #0
 80046e6:	bf19      	ittee	ne
 80046e8:	6800      	ldrne	r0, [r0, #0]
 80046ea:	f100 0618 	addne.w	r6, r0, #24
 80046ee:	2100      	moveq	r1, #0
 80046f0:	f101 0618 	addeq.w	r6, r1, #24
 80046f4:	f105 0008 	add.w	r0, r5, #8
 80046f8:	f7fd ff26 	bl	8002548 <ai_shape_get_size>
 80046fc:	4602      	mov	r2, r0
 80046fe:	69a0      	ldr	r0, [r4, #24]
 8004700:	6883      	ldr	r3, [r0, #8]
 8004702:	69a9      	ldr	r1, [r5, #24]
 8004704:	6830      	ldr	r0, [r6, #0]
 8004706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800470a:	e67f      	b.n	800440c <nl_func_selu_array_f32>

0800470c <forward_prelu>:
 800470c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004710:	b083      	sub	sp, #12
 8004712:	6942      	ldr	r2, [r0, #20]
 8004714:	8810      	ldrh	r0, [r2, #0]
 8004716:	2800      	cmp	r0, #0
 8004718:	bf1a      	itte	ne
 800471a:	6851      	ldrne	r1, [r2, #4]
 800471c:	1d09      	addne	r1, r1, #4
 800471e:	2104      	moveq	r1, #4
 8004720:	6809      	ldr	r1, [r1, #0]
 8004722:	2900      	cmp	r1, #0
 8004724:	bf19      	ittee	ne
 8004726:	6809      	ldrne	r1, [r1, #0]
 8004728:	f101 0518 	addne.w	r5, r1, #24
 800472c:	2300      	moveq	r3, #0
 800472e:	f103 0518 	addeq.w	r5, r3, #24
 8004732:	2801      	cmp	r0, #1
 8004734:	bfc6      	itte	gt
 8004736:	6851      	ldrgt	r1, [r2, #4]
 8004738:	3110      	addgt	r1, #16
 800473a:	2104      	movle	r1, #4
 800473c:	6809      	ldr	r1, [r1, #0]
 800473e:	2900      	cmp	r1, #0
 8004740:	bf19      	ittee	ne
 8004742:	6809      	ldrne	r1, [r1, #0]
 8004744:	f101 0618 	addne.w	r6, r1, #24
 8004748:	2300      	moveq	r3, #0
 800474a:	f103 0618 	addeq.w	r6, r3, #24
 800474e:	2802      	cmp	r0, #2
 8004750:	bfc6      	itte	gt
 8004752:	6850      	ldrgt	r0, [r2, #4]
 8004754:	301c      	addgt	r0, #28
 8004756:	2004      	movle	r0, #4
 8004758:	6800      	ldr	r0, [r0, #0]
 800475a:	2800      	cmp	r0, #0
 800475c:	bf14      	ite	ne
 800475e:	6804      	ldrne	r4, [r0, #0]
 8004760:	2400      	moveq	r4, #0
 8004762:	69a0      	ldr	r0, [r4, #24]
 8004764:	6887      	ldr	r7, [r0, #8]
 8004766:	b12c      	cbz	r4, 8004774 <forward_prelu+0x68>
 8004768:	6841      	ldr	r1, [r0, #4]
 800476a:	6800      	ldr	r0, [r0, #0]
 800476c:	f001 fb8a 	bl	8005e84 <ai_array_get_byte_size>
 8004770:	4680      	mov	r8, r0
 8004772:	e001      	b.n	8004778 <forward_prelu+0x6c>
 8004774:	f04f 0801 	mov.w	r8, #1
 8004778:	6828      	ldr	r0, [r5, #0]
 800477a:	6841      	ldr	r1, [r0, #4]
 800477c:	6800      	ldr	r0, [r0, #0]
 800477e:	f001 fb81 	bl	8005e84 <ai_array_get_byte_size>
 8004782:	4601      	mov	r1, r0
 8004784:	6828      	ldr	r0, [r5, #0]
 8004786:	6832      	ldr	r2, [r6, #0]
 8004788:	6880      	ldr	r0, [r0, #8]
 800478a:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800478e:	4401      	add	r1, r0
 8004790:	f104 0308 	add.w	r3, r4, #8
 8004794:	4288      	cmp	r0, r1
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	d241      	bcs.n	800481e <forward_prelu+0x112>
 800479a:	9702      	str	r7, [sp, #8]
 800479c:	9101      	str	r1, [sp, #4]
 800479e:	4607      	mov	r7, r0
 80047a0:	6829      	ldr	r1, [r5, #0]
 80047a2:	608f      	str	r7, [r1, #8]
 80047a4:	f04f 0201 	mov.w	r2, #1
 80047a8:	6834      	ldr	r4, [r6, #0]
 80047aa:	f8c4 9008 	str.w	r9, [r4, #8]
 80047ae:	9b00      	ldr	r3, [sp, #0]
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	0a00      	lsrs	r0, r0, #8
 80047b4:	d02a      	beq.n	800480c <forward_prelu+0x100>
 80047b6:	f8d3 e004 	ldr.w	lr, [r3, #4]
 80047ba:	eb0e 0380 	add.w	r3, lr, r0, lsl #2
 80047be:	4684      	mov	ip, r0
 80047c0:	f1a3 0a04 	sub.w	sl, r3, #4
 80047c4:	f01c 0303 	ands.w	r3, ip, #3
 80047c8:	d006      	beq.n	80047d8 <forward_prelu+0xcc>
 80047ca:	1e40      	subs	r0, r0, #1
 80047cc:	f85a b904 	ldr.w	fp, [sl], #-4
 80047d0:	1e5b      	subs	r3, r3, #1
 80047d2:	fb0b f202 	mul.w	r2, fp, r2
 80047d6:	d1f8      	bne.n	80047ca <forward_prelu+0xbe>
 80047d8:	ea5f 0c9c 	movs.w	ip, ip, lsr #2
 80047dc:	4663      	mov	r3, ip
 80047de:	d015      	beq.n	800480c <forward_prelu+0x100>
 80047e0:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 80047e4:	f1b0 0010 	subs.w	r0, r0, #16
 80047e8:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 80047ec:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80047f0:	f8d0 a004 	ldr.w	sl, [r0, #4]
 80047f4:	f850 b910 	ldr.w	fp, [r0], #-16
 80047f8:	fb0e fc0c 	mul.w	ip, lr, ip
 80047fc:	fb0a fc0c 	mul.w	ip, sl, ip
 8004800:	fb0b fc0c 	mul.w	ip, fp, ip
 8004804:	1e5b      	subs	r3, r3, #1
 8004806:	fb0c f202 	mul.w	r2, ip, r2
 800480a:	d1ed      	bne.n	80047e8 <forward_prelu+0xdc>
 800480c:	9b02      	ldr	r3, [sp, #8]
 800480e:	4620      	mov	r0, r4
 8004810:	f7ff fe3e 	bl	8004490 <nl_func_prelu_array_f32>
 8004814:	9801      	ldr	r0, [sp, #4]
 8004816:	4447      	add	r7, r8
 8004818:	4287      	cmp	r7, r0
 800481a:	44c1      	add	r9, r8
 800481c:	d3c0      	bcc.n	80047a0 <forward_prelu+0x94>
 800481e:	6828      	ldr	r0, [r5, #0]
 8004820:	68c1      	ldr	r1, [r0, #12]
 8004822:	6081      	str	r1, [r0, #8]
 8004824:	6830      	ldr	r0, [r6, #0]
 8004826:	68c1      	ldr	r1, [r0, #12]
 8004828:	6081      	str	r1, [r0, #8]
 800482a:	b003      	add	sp, #12
 800482c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004830 <forward_clip>:
 8004830:	b570      	push	{r4, r5, r6, lr}
 8004832:	4604      	mov	r4, r0
 8004834:	6962      	ldr	r2, [r4, #20]
 8004836:	8811      	ldrh	r1, [r2, #0]
 8004838:	2900      	cmp	r1, #0
 800483a:	bf1a      	itte	ne
 800483c:	6850      	ldrne	r0, [r2, #4]
 800483e:	1d00      	addne	r0, r0, #4
 8004840:	2004      	moveq	r0, #4
 8004842:	6800      	ldr	r0, [r0, #0]
 8004844:	2800      	cmp	r0, #0
 8004846:	bf14      	ite	ne
 8004848:	6805      	ldrne	r5, [r0, #0]
 800484a:	2500      	moveq	r5, #0
 800484c:	2902      	cmp	r1, #2
 800484e:	bfa6      	itte	ge
 8004850:	6850      	ldrge	r0, [r2, #4]
 8004852:	3010      	addge	r0, #16
 8004854:	2004      	movlt	r0, #4
 8004856:	6800      	ldr	r0, [r0, #0]
 8004858:	2800      	cmp	r0, #0
 800485a:	bf19      	ittee	ne
 800485c:	6800      	ldrne	r0, [r0, #0]
 800485e:	f100 0618 	addne.w	r6, r0, #24
 8004862:	2100      	moveq	r1, #0
 8004864:	f101 0618 	addeq.w	r6, r1, #24
 8004868:	f105 0008 	add.w	r0, r5, #8
 800486c:	f7fd fe6c 	bl	8002548 <ai_shape_get_size>
 8004870:	4602      	mov	r2, r0
 8004872:	69a0      	ldr	r0, [r4, #24]
 8004874:	6883      	ldr	r3, [r0, #8]
 8004876:	69a9      	ldr	r1, [r5, #24]
 8004878:	6830      	ldr	r0, [r6, #0]
 800487a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800487e:	e473      	b.n	8004168 <nl_func_clip_array_f32>

08004880 <forward_hard_sigmoid>:
 8004880:	b4f0      	push	{r4, r5, r6, r7}
 8004882:	6942      	ldr	r2, [r0, #20]
 8004884:	8811      	ldrh	r1, [r2, #0]
 8004886:	2900      	cmp	r1, #0
 8004888:	bf1a      	itte	ne
 800488a:	6850      	ldrne	r0, [r2, #4]
 800488c:	1d00      	addne	r0, r0, #4
 800488e:	2004      	moveq	r0, #4
 8004890:	f04f 0501 	mov.w	r5, #1
 8004894:	6800      	ldr	r0, [r0, #0]
 8004896:	2800      	cmp	r0, #0
 8004898:	bf14      	ite	ne
 800489a:	6803      	ldrne	r3, [r0, #0]
 800489c:	2300      	moveq	r3, #0
 800489e:	2902      	cmp	r1, #2
 80048a0:	bfa6      	itte	ge
 80048a2:	6850      	ldrge	r0, [r2, #4]
 80048a4:	3010      	addge	r0, #16
 80048a6:	2004      	movlt	r0, #4
 80048a8:	6800      	ldr	r0, [r0, #0]
 80048aa:	2800      	cmp	r0, #0
 80048ac:	bf19      	ittee	ne
 80048ae:	6800      	ldrne	r0, [r0, #0]
 80048b0:	f100 0418 	addne.w	r4, r0, #24
 80048b4:	2100      	moveq	r1, #0
 80048b6:	f101 0418 	addeq.w	r4, r1, #24
 80048ba:	f103 0108 	add.w	r1, r3, #8
 80048be:	680a      	ldr	r2, [r1, #0]
 80048c0:	0a12      	lsrs	r2, r2, #8
 80048c2:	d01e      	beq.n	8004902 <forward_hard_sigmoid+0x82>
 80048c4:	684e      	ldr	r6, [r1, #4]
 80048c6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80048ca:	4610      	mov	r0, r2
 80048cc:	1f0f      	subs	r7, r1, #4
 80048ce:	f010 0103 	ands.w	r1, r0, #3
 80048d2:	d006      	beq.n	80048e2 <forward_hard_sigmoid+0x62>
 80048d4:	1e52      	subs	r2, r2, #1
 80048d6:	f857 c904 	ldr.w	ip, [r7], #-4
 80048da:	1e49      	subs	r1, r1, #1
 80048dc:	fb0c f505 	mul.w	r5, ip, r5
 80048e0:	d1f8      	bne.n	80048d4 <forward_hard_sigmoid+0x54>
 80048e2:	0880      	lsrs	r0, r0, #2
 80048e4:	d00d      	beq.n	8004902 <forward_hard_sigmoid+0x82>
 80048e6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80048ea:	3910      	subs	r1, #16
 80048ec:	68ca      	ldr	r2, [r1, #12]
 80048ee:	688e      	ldr	r6, [r1, #8]
 80048f0:	684f      	ldr	r7, [r1, #4]
 80048f2:	4372      	muls	r2, r6
 80048f4:	f851 6910 	ldr.w	r6, [r1], #-16
 80048f8:	437a      	muls	r2, r7
 80048fa:	4372      	muls	r2, r6
 80048fc:	4355      	muls	r5, r2
 80048fe:	1e40      	subs	r0, r0, #1
 8004900:	d1f4      	bne.n	80048ec <forward_hard_sigmoid+0x6c>
 8004902:	6998      	ldr	r0, [r3, #24]
 8004904:	6822      	ldr	r2, [r4, #0]
 8004906:	6880      	ldr	r0, [r0, #8]
 8004908:	6893      	ldr	r3, [r2, #8]
 800490a:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 800490e:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8004912:	1f09      	subs	r1, r1, #4
 8004914:	1f22      	subs	r2, r4, #4
 8004916:	4281      	cmp	r1, r0
 8004918:	f0c0 8022 	bcc.w	8004960 <forward_hard_sigmoid+0xe0>
 800491c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004920:	eddf 0a11 	vldr	s1, [pc, #68]	; 8004968 <.text_81>
 8004924:	edd1 1a00 	vldr	s3, [r1]
 8004928:	ed9f 2a10 	vldr	s4, [pc, #64]	; 800496c <.text_82>
 800492c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8004930:	ee01 1a82 	vmla.f32	s2, s3, s4
 8004934:	eeb4 1a60 	vcmp.f32	s2, s1
 8004938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800493c:	da08      	bge.n	8004950 <forward_hard_sigmoid+0xd0>
 800493e:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8004942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004946:	d505      	bpl.n	8004954 <forward_hard_sigmoid+0xd4>
 8004948:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8004964 <.text_80>
 800494c:	e002      	b.n	8004954 <forward_hard_sigmoid+0xd4>
 800494e:	bf00      	nop
 8004950:	eeb0 1a40 	vmov.f32	s2, s0
 8004954:	ed82 1a00 	vstr	s2, [r2]
 8004958:	1f09      	subs	r1, r1, #4
 800495a:	1f12      	subs	r2, r2, #4
 800495c:	4281      	cmp	r1, r0
 800495e:	d2e1      	bcs.n	8004924 <forward_hard_sigmoid+0xa4>
 8004960:	bcf0      	pop	{r4, r5, r6, r7}
 8004962:	4770      	bx	lr

08004964 <.text_80>:
 8004964:	00000000 	.word	0x00000000

08004968 <.text_81>:
 8004968:	3f800001 	.word	0x3f800001

0800496c <.text_82>:
 800496c:	3e4ccccd 	.word	0x3e4ccccd

08004970 <forward_sm>:
 8004970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004972:	b083      	sub	sp, #12
 8004974:	6942      	ldr	r2, [r0, #20]
 8004976:	8811      	ldrh	r1, [r2, #0]
 8004978:	2900      	cmp	r1, #0
 800497a:	bf1a      	itte	ne
 800497c:	6850      	ldrne	r0, [r2, #4]
 800497e:	1d00      	addne	r0, r0, #4
 8004980:	2004      	moveq	r0, #4
 8004982:	6800      	ldr	r0, [r0, #0]
 8004984:	2800      	cmp	r0, #0
 8004986:	bf14      	ite	ne
 8004988:	6804      	ldrne	r4, [r0, #0]
 800498a:	2400      	moveq	r4, #0
 800498c:	2902      	cmp	r1, #2
 800498e:	bfa6      	itte	ge
 8004990:	6850      	ldrge	r0, [r2, #4]
 8004992:	3010      	addge	r0, #16
 8004994:	2004      	movlt	r0, #4
 8004996:	6800      	ldr	r0, [r0, #0]
 8004998:	2800      	cmp	r0, #0
 800499a:	bf14      	ite	ne
 800499c:	6805      	ldrne	r5, [r0, #0]
 800499e:	2500      	moveq	r5, #0
 80049a0:	68e0      	ldr	r0, [r4, #12]
 80049a2:	68e9      	ldr	r1, [r5, #12]
 80049a4:	6846      	ldr	r6, [r0, #4]
 80049a6:	684f      	ldr	r7, [r1, #4]
 80049a8:	f104 0008 	add.w	r0, r4, #8
 80049ac:	f7fd fdcc 	bl	8002548 <ai_shape_get_size>
 80049b0:	4602      	mov	r2, r0
 80049b2:	9701      	str	r7, [sp, #4]
 80049b4:	9600      	str	r6, [sp, #0]
 80049b6:	69a1      	ldr	r1, [r4, #24]
 80049b8:	69a8      	ldr	r0, [r5, #24]
 80049ba:	4633      	mov	r3, r6
 80049bc:	f7ff fb76 	bl	80040ac <nl_func_sm_array_f32>
 80049c0:	b003      	add	sp, #12
 80049c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049c4 <forward_hardmax>:
 80049c4:	b430      	push	{r4, r5}
 80049c6:	6943      	ldr	r3, [r0, #20]
 80049c8:	881a      	ldrh	r2, [r3, #0]
 80049ca:	6980      	ldr	r0, [r0, #24]
 80049cc:	2a00      	cmp	r2, #0
 80049ce:	bf1a      	itte	ne
 80049d0:	6859      	ldrne	r1, [r3, #4]
 80049d2:	1d09      	addne	r1, r1, #4
 80049d4:	2104      	moveq	r1, #4
 80049d6:	6809      	ldr	r1, [r1, #0]
 80049d8:	2900      	cmp	r1, #0
 80049da:	bf14      	ite	ne
 80049dc:	680c      	ldrne	r4, [r1, #0]
 80049de:	2400      	moveq	r4, #0
 80049e0:	2a02      	cmp	r2, #2
 80049e2:	bfa6      	itte	ge
 80049e4:	6859      	ldrge	r1, [r3, #4]
 80049e6:	3110      	addge	r1, #16
 80049e8:	2104      	movlt	r1, #4
 80049ea:	6809      	ldr	r1, [r1, #0]
 80049ec:	6883      	ldr	r3, [r0, #8]
 80049ee:	2900      	cmp	r1, #0
 80049f0:	bf19      	ittee	ne
 80049f2:	6809      	ldrne	r1, [r1, #0]
 80049f4:	f101 0518 	addne.w	r5, r1, #24
 80049f8:	2200      	moveq	r2, #0
 80049fa:	f102 0518 	addeq.w	r5, r2, #24
 80049fe:	69a1      	ldr	r1, [r4, #24]
 8004a00:	6828      	ldr	r0, [r5, #0]
 8004a02:	f104 0208 	add.w	r2, r4, #8
 8004a06:	bc30      	pop	{r4, r5}
 8004a08:	f7ff bbd4 	b.w	80041b4 <nl_func_hardmax_array_f32>

08004a0c <pool_func_mp_array_f32>:
 8004a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a10:	4688      	mov	r8, r1
 8004a12:	b08b      	sub	sp, #44	; 0x2c
 8004a14:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8004a18:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8004a1a:	f9bd e064 	ldrsh.w	lr, [sp, #100]	; 0x64
 8004a1e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8004a20:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8004a22:	1e48      	subs	r0, r1, #1
 8004a24:	fb10 fe0e 	smulbb	lr, r0, lr
 8004a28:	4615      	mov	r5, r2
 8004a2a:	ebae 0e07 	sub.w	lr, lr, r7
 8004a2e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004a30:	f8bd 0058 	ldrh.w	r0, [sp, #88]	; 0x58
 8004a34:	6892      	ldr	r2, [r2, #8]
 8004a36:	44a6      	add	lr, r4
 8004a38:	f1ae 0601 	sub.w	r6, lr, #1
 8004a3c:	469c      	mov	ip, r3
 8004a3e:	1b76      	subs	r6, r6, r5
 8004a40:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004a42:	4338      	orrs	r0, r7
 8004a44:	f040 80dd 	bne.w	8004c02 <pool_func_mp_array_f32+0x1f6>
 8004a48:	f9bd 0068 	ldrsh.w	r0, [sp, #104]	; 0x68
 8004a4c:	f1a0 0901 	sub.w	r9, r0, #1
 8004a50:	f9bd 0058 	ldrsh.w	r0, [sp, #88]	; 0x58
 8004a54:	fb19 f903 	smulbb	r9, r9, r3
 8004a58:	eba9 0900 	sub.w	r9, r9, r0
 8004a5c:	f9bd 0050 	ldrsh.w	r0, [sp, #80]	; 0x50
 8004a60:	4448      	add	r0, r9
 8004a62:	1e40      	subs	r0, r0, #1
 8004a64:	eba0 0008 	sub.w	r0, r0, r8
 8004a68:	b200      	sxth	r0, r0
 8004a6a:	2800      	cmp	r0, #0
 8004a6c:	bf44      	itt	mi
 8004a6e:	b236      	sxthmi	r6, r6
 8004a70:	2e00      	cmpmi	r6, #0
 8004a72:	f140 80c6 	bpl.w	8004c02 <pool_func_mp_array_f32+0x1f6>
 8004a76:	2000      	movs	r0, #0
 8004a78:	000d      	movs	r5, r1
 8004a7a:	9008      	str	r0, [sp, #32]
 8004a7c:	f000 8178 	beq.w	8004d70 <pool_func_mp_array_f32+0x364>
 8004a80:	b224      	sxth	r4, r4
 8004a82:	f8ad 4006 	strh.w	r4, [sp, #6]
 8004a86:	9002      	str	r0, [sp, #8]
 8004a88:	9007      	str	r0, [sp, #28]
 8004a8a:	9106      	str	r1, [sp, #24]
 8004a8c:	ea4f 040c 	mov.w	r4, ip
 8004a90:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8004d78 <.text_3>
 8004a94:	f8bd 0068 	ldrh.w	r0, [sp, #104]	; 0x68
 8004a98:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	f000 8096 	beq.w	8004bce <pool_func_mp_array_f32+0x1c2>
 8004aa2:	9907      	ldr	r1, [sp, #28]
 8004aa4:	9808      	ldr	r0, [sp, #32]
 8004aa6:	f9bd 6050 	ldrsh.w	r6, [sp, #80]	; 0x50
 8004aaa:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 8004aae:	9103      	str	r1, [sp, #12]
 8004ab0:	f04f 0a00 	mov.w	sl, #0
 8004ab4:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8004ab8:	f8ad c002 	strh.w	ip, [sp, #2]
 8004abc:	4348      	muls	r0, r1
 8004abe:	b200      	sxth	r0, r0
 8004ac0:	900a      	str	r0, [sp, #40]	; 0x28
 8004ac2:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 8004ac6:	9204      	str	r2, [sp, #16]
 8004ac8:	f8ad 6000 	strh.w	r6, [sp]
 8004acc:	f8cd 5014 	str.w	r5, [sp, #20]
 8004ad0:	f8ad 8004 	strh.w	r8, [sp, #4]
 8004ad4:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8004ad8:	f9bd e000 	ldrsh.w	lr, [sp]
 8004adc:	2100      	movs	r1, #0
 8004ade:	2800      	cmp	r0, #0
 8004ae0:	d05d      	beq.n	8004b9e <pool_func_mp_array_f32+0x192>
 8004ae2:	9a03      	ldr	r2, [sp, #12]
 8004ae4:	9804      	ldr	r0, [sp, #16]
 8004ae6:	4362      	muls	r2, r4
 8004ae8:	ab02      	add	r3, sp, #8
 8004aea:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
 8004aee:	5e58      	ldrsh	r0, [r3, r1]
 8004af0:	9009      	str	r0, [sp, #36]	; 0x24
 8004af2:	fa0f f58a 	sxth.w	r5, sl
 8004af6:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8004afa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004afc:	42b8      	cmp	r0, r7
 8004afe:	eef0 0a40 	vmov.f32	s1, s0
 8004b02:	da45      	bge.n	8004b90 <pool_func_mp_array_f32+0x184>
 8004b04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b06:	fb08 f900 	mul.w	r9, r8, r0
 8004b0a:	1aba      	subs	r2, r7, r2
 8004b0c:	4658      	mov	r0, fp
 8004b0e:	4575      	cmp	r5, lr
 8004b10:	462e      	mov	r6, r5
 8004b12:	da39      	bge.n	8004b88 <pool_func_mp_array_f32+0x17c>
 8004b14:	ebae 0305 	sub.w	r3, lr, r5
 8004b18:	ea5f 7bc3 	movs.w	fp, r3, lsl #31
 8004b1c:	d50f      	bpl.n	8004b3e <pool_func_mp_array_f32+0x132>
 8004b1e:	eb09 0b06 	add.w	fp, r9, r6
 8004b22:	fb0b 1b04 	mla	fp, fp, r4, r1
 8004b26:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 8004b2a:	ed9b 1a00 	vldr	s2, [fp]
 8004b2e:	eeb4 1a60 	vcmp.f32	s2, s1
 8004b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b36:	bf58      	it	pl
 8004b38:	eef0 0a41 	vmovpl.f32	s1, s2
 8004b3c:	1c76      	adds	r6, r6, #1
 8004b3e:	085b      	lsrs	r3, r3, #1
 8004b40:	f000 8022 	beq.w	8004b88 <pool_func_mp_array_f32+0x17c>
 8004b44:	eb09 0b06 	add.w	fp, r9, r6
 8004b48:	fb0b 1b04 	mla	fp, fp, r4, r1
 8004b4c:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 8004b50:	ed9b 1a00 	vldr	s2, [fp]
 8004b54:	eeb4 1a60 	vcmp.f32	s2, s1
 8004b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b5c:	bf58      	it	pl
 8004b5e:	eef0 0a41 	vmovpl.f32	s1, s2
 8004b62:	1c76      	adds	r6, r6, #1
 8004b64:	eb09 0b06 	add.w	fp, r9, r6
 8004b68:	fb0b 1b04 	mla	fp, fp, r4, r1
 8004b6c:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 8004b70:	ed9b 1a00 	vldr	s2, [fp]
 8004b74:	eeb4 1a60 	vcmp.f32	s2, s1
 8004b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b7c:	bf58      	it	pl
 8004b7e:	eef0 0a41 	vmovpl.f32	s1, s2
 8004b82:	1c76      	adds	r6, r6, #1
 8004b84:	1e5b      	subs	r3, r3, #1
 8004b86:	d1dd      	bne.n	8004b44 <pool_func_mp_array_f32+0x138>
 8004b88:	1e52      	subs	r2, r2, #1
 8004b8a:	44c1      	add	r9, r8
 8004b8c:	d1bf      	bne.n	8004b0e <pool_func_mp_array_f32+0x102>
 8004b8e:	4683      	mov	fp, r0
 8004b90:	1c49      	adds	r1, r1, #1
 8004b92:	edcc 0a00 	vstr	s1, [ip]
 8004b96:	42a1      	cmp	r1, r4
 8004b98:	f10c 0c04 	add.w	ip, ip, #4
 8004b9c:	dbad      	blt.n	8004afa <pool_func_mp_array_f32+0xee>
 8004b9e:	9803      	ldr	r0, [sp, #12]
 8004ba0:	f8bd 1000 	ldrh.w	r1, [sp]
 8004ba4:	1c40      	adds	r0, r0, #1
 8004ba6:	9003      	str	r0, [sp, #12]
 8004ba8:	f8bd 0060 	ldrh.w	r0, [sp, #96]	; 0x60
 8004bac:	4482      	add	sl, r0
 8004bae:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
 8004bb2:	1841      	adds	r1, r0, r1
 8004bb4:	f8ad 1000 	strh.w	r1, [sp]
 8004bb8:	9905      	ldr	r1, [sp, #20]
 8004bba:	1e49      	subs	r1, r1, #1
 8004bbc:	9105      	str	r1, [sp, #20]
 8004bbe:	d189      	bne.n	8004ad4 <pool_func_mp_array_f32+0xc8>
 8004bc0:	f8bd c002 	ldrh.w	ip, [sp, #2]
 8004bc4:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8004bc8:	9a04      	ldr	r2, [sp, #16]
 8004bca:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8004bce:	9908      	ldr	r1, [sp, #32]
 8004bd0:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 8004bd4:	f8bd 7006 	ldrh.w	r7, [sp, #6]
 8004bd8:	1c49      	adds	r1, r1, #1
 8004bda:	9108      	str	r1, [sp, #32]
 8004bdc:	9907      	ldr	r1, [sp, #28]
 8004bde:	194d      	adds	r5, r1, r5
 8004be0:	9507      	str	r5, [sp, #28]
 8004be2:	9902      	ldr	r1, [sp, #8]
 8004be4:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8004be8:	194d      	adds	r5, r1, r5
 8004bea:	9502      	str	r5, [sp, #8]
 8004bec:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8004bf0:	9d06      	ldr	r5, [sp, #24]
 8004bf2:	19cf      	adds	r7, r1, r7
 8004bf4:	1e6d      	subs	r5, r5, #1
 8004bf6:	f8ad 7006 	strh.w	r7, [sp, #6]
 8004bfa:	9506      	str	r5, [sp, #24]
 8004bfc:	f000 80b8 	beq.w	8004d70 <pool_func_mp_array_f32+0x364>
 8004c00:	e748      	b.n	8004a94 <pool_func_mp_array_f32+0x88>
 8004c02:	0008      	movs	r0, r1
 8004c04:	f000 80b4 	beq.w	8004d70 <pool_func_mp_array_f32+0x364>
 8004c08:	427f      	negs	r7, r7
 8004c0a:	19e4      	adds	r4, r4, r7
 8004c0c:	f8ad 7000 	strh.w	r7, [sp]
 8004c10:	f8ad 400a 	strh.w	r4, [sp, #10]
 8004c14:	2000      	movs	r0, #0
 8004c16:	9008      	str	r0, [sp, #32]
 8004c18:	f8cd 101c 	str.w	r1, [sp, #28]
 8004c1c:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8004d78 <.text_3>
 8004c20:	f8bd 0068 	ldrh.w	r0, [sp, #104]	; 0x68
 8004c24:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 8004c28:	2800      	cmp	r0, #0
 8004c2a:	f000 8089 	beq.w	8004d40 <pool_func_mp_array_f32+0x334>
 8004c2e:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8004c32:	f9bd 7050 	ldrsh.w	r7, [sp, #80]	; 0x50
 8004c36:	9908      	ldr	r1, [sp, #32]
 8004c38:	f8bd 4068 	ldrh.w	r4, [sp, #104]	; 0x68
 8004c3c:	9103      	str	r1, [sp, #12]
 8004c3e:	f1ce 0e00 	rsb	lr, lr, #0
 8004c42:	4477      	add	r7, lr
 8004c44:	f8ad c002 	strh.w	ip, [sp, #2]
 8004c48:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 8004c4c:	9204      	str	r2, [sp, #16]
 8004c4e:	f8ad e006 	strh.w	lr, [sp, #6]
 8004c52:	f8ad 7008 	strh.w	r7, [sp, #8]
 8004c56:	9406      	str	r4, [sp, #24]
 8004c58:	f8ad 8004 	strh.w	r8, [sp, #4]
 8004c5c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8004c60:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8004c64:	2600      	movs	r6, #0
 8004c66:	2900      	cmp	r1, #0
 8004c68:	d04e      	beq.n	8004d08 <pool_func_mp_array_f32+0x2fc>
 8004c6a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8004c6e:	9b03      	ldr	r3, [sp, #12]
 8004c70:	9904      	ldr	r1, [sp, #16]
 8004c72:	f9bd 4006 	ldrsh.w	r4, [sp, #6]
 8004c76:	435a      	muls	r2, r3
 8004c78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004c7c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8004c80:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004c84:	f8cd 1014 	str.w	r1, [sp, #20]
 8004c88:	f9bd 1000 	ldrsh.w	r1, [sp]
 8004c8c:	4551      	cmp	r1, sl
 8004c8e:	eef0 0a40 	vmov.f32	s1, s0
 8004c92:	da2a      	bge.n	8004cea <pool_func_mp_array_f32+0x2de>
 8004c94:	fb03 f901 	mul.w	r9, r3, r1
 8004c98:	f8ad 5002 	strh.w	r5, [sp, #2]
 8004c9c:	4284      	cmp	r4, r0
 8004c9e:	4625      	mov	r5, r4
 8004ca0:	da1d      	bge.n	8004cde <pool_func_mp_array_f32+0x2d2>
 8004ca2:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8004ca6:	46de      	mov	lr, fp
 8004ca8:	2900      	cmp	r1, #0
 8004caa:	bf58      	it	pl
 8004cac:	2d00      	cmppl	r5, #0
 8004cae:	d412      	bmi.n	8004cd6 <pool_func_mp_array_f32+0x2ca>
 8004cb0:	42b9      	cmp	r1, r7
 8004cb2:	bfb8      	it	lt
 8004cb4:	429d      	cmplt	r5, r3
 8004cb6:	da0e      	bge.n	8004cd6 <pool_func_mp_array_f32+0x2ca>
 8004cb8:	eb09 0b05 	add.w	fp, r9, r5
 8004cbc:	fb0b 6b02 	mla	fp, fp, r2, r6
 8004cc0:	eb0e 0b8b 	add.w	fp, lr, fp, lsl #2
 8004cc4:	ed9b 1a00 	vldr	s2, [fp]
 8004cc8:	eeb4 1a60 	vcmp.f32	s2, s1
 8004ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cd0:	bf58      	it	pl
 8004cd2:	eef0 0a41 	vmovpl.f32	s1, s2
 8004cd6:	1c6d      	adds	r5, r5, #1
 8004cd8:	4285      	cmp	r5, r0
 8004cda:	dbe5      	blt.n	8004ca8 <pool_func_mp_array_f32+0x29c>
 8004cdc:	46f3      	mov	fp, lr
 8004cde:	1c49      	adds	r1, r1, #1
 8004ce0:	4551      	cmp	r1, sl
 8004ce2:	4499      	add	r9, r3
 8004ce4:	dbda      	blt.n	8004c9c <pool_func_mp_array_f32+0x290>
 8004ce6:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 8004cea:	1c76      	adds	r6, r6, #1
 8004cec:	9905      	ldr	r1, [sp, #20]
 8004cee:	edc1 0a00 	vstr	s1, [r1]
 8004cf2:	9905      	ldr	r1, [sp, #20]
 8004cf4:	1d0f      	adds	r7, r1, #4
 8004cf6:	4296      	cmp	r6, r2
 8004cf8:	9705      	str	r7, [sp, #20]
 8004cfa:	dbc5      	blt.n	8004c88 <pool_func_mp_array_f32+0x27c>
 8004cfc:	f8ad 2002 	strh.w	r2, [sp, #2]
 8004d00:	f8ad 4006 	strh.w	r4, [sp, #6]
 8004d04:	f8ad 3004 	strh.w	r3, [sp, #4]
 8004d08:	9803      	ldr	r0, [sp, #12]
 8004d0a:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
 8004d0e:	1c40      	adds	r0, r0, #1
 8004d10:	9003      	str	r0, [sp, #12]
 8004d12:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8004d16:	1808      	adds	r0, r1, r0
 8004d18:	f8ad 0008 	strh.w	r0, [sp, #8]
 8004d1c:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
 8004d20:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8004d24:	1808      	adds	r0, r1, r0
 8004d26:	f8ad 0006 	strh.w	r0, [sp, #6]
 8004d2a:	9806      	ldr	r0, [sp, #24]
 8004d2c:	1e40      	subs	r0, r0, #1
 8004d2e:	9006      	str	r0, [sp, #24]
 8004d30:	d194      	bne.n	8004c5c <pool_func_mp_array_f32+0x250>
 8004d32:	f8bd c002 	ldrh.w	ip, [sp, #2]
 8004d36:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8004d3a:	9a04      	ldr	r2, [sp, #16]
 8004d3c:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8004d40:	9908      	ldr	r1, [sp, #32]
 8004d42:	f8bd 4068 	ldrh.w	r4, [sp, #104]	; 0x68
 8004d46:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8004d4a:	190c      	adds	r4, r1, r4
 8004d4c:	9408      	str	r4, [sp, #32]
 8004d4e:	f8bd 4000 	ldrh.w	r4, [sp]
 8004d52:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8004d56:	19cf      	adds	r7, r1, r7
 8004d58:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8004d5c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8004d60:	190c      	adds	r4, r1, r4
 8004d62:	f8ad 4000 	strh.w	r4, [sp]
 8004d66:	9c07      	ldr	r4, [sp, #28]
 8004d68:	1e64      	subs	r4, r4, #1
 8004d6a:	9407      	str	r4, [sp, #28]
 8004d6c:	f47f af58 	bne.w	8004c20 <pool_func_mp_array_f32+0x214>
 8004d70:	b00b      	add	sp, #44	; 0x2c
 8004d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004d78 <.text_3>:
 8004d78:	cf000000 	.word	0xcf000000

08004d7c <pool_func_ap_array_f32>:
 8004d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d80:	468b      	mov	fp, r1
 8004d82:	b08c      	sub	sp, #48	; 0x30
 8004d84:	4699      	mov	r9, r3
 8004d86:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004d88:	f9bd c068 	ldrsh.w	ip, [sp, #104]	; 0x68
 8004d8c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004d8e:	4692      	mov	sl, r2
 8004d90:	1e4f      	subs	r7, r1, #1
 8004d92:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004d94:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8004d96:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 8004d9a:	6880      	ldr	r0, [r0, #8]
 8004d9c:	68ad      	ldr	r5, [r5, #8]
 8004d9e:	fb17 fc0c 	smulbb	ip, r7, ip
 8004da2:	ebac 0c03 	sub.w	ip, ip, r3
 8004da6:	f8bd 705c 	ldrh.w	r7, [sp, #92]	; 0x5c
 8004daa:	4494      	add	ip, r2
 8004dac:	f1ac 0401 	sub.w	r4, ip, #1
 8004db0:	431f      	orrs	r7, r3
 8004db2:	eba4 060a 	sub.w	r6, r4, sl
 8004db6:	f040 80dc 	bne.w	8004f72 <pool_func_ap_array_f32+0x1f6>
 8004dba:	f9bd 706c 	ldrsh.w	r7, [sp, #108]	; 0x6c
 8004dbe:	1e7c      	subs	r4, r7, #1
 8004dc0:	f9bd 705c 	ldrsh.w	r7, [sp, #92]	; 0x5c
 8004dc4:	fb14 f408 	smulbb	r4, r4, r8
 8004dc8:	1be4      	subs	r4, r4, r7
 8004dca:	f9bd 7054 	ldrsh.w	r7, [sp, #84]	; 0x54
 8004dce:	193c      	adds	r4, r7, r4
 8004dd0:	1e64      	subs	r4, r4, #1
 8004dd2:	eba4 040b 	sub.w	r4, r4, fp
 8004dd6:	b224      	sxth	r4, r4
 8004dd8:	2c00      	cmp	r4, #0
 8004dda:	bf44      	itt	mi
 8004ddc:	b234      	sxthmi	r4, r6
 8004dde:	2c00      	cmpmi	r4, #0
 8004de0:	f140 80c7 	bpl.w	8004f72 <pool_func_ap_array_f32+0x1f6>
 8004de4:	2400      	movs	r4, #0
 8004de6:	000b      	movs	r3, r1
 8004de8:	9409      	str	r4, [sp, #36]	; 0x24
 8004dea:	f000 81af 	beq.w	800514c <pool_func_ap_array_f32+0x3d0>
 8004dee:	b212      	sxth	r2, r2
 8004df0:	f8ad 2004 	strh.w	r2, [sp, #4]
 8004df4:	9408      	str	r4, [sp, #32]
 8004df6:	9407      	str	r4, [sp, #28]
 8004df8:	f8cd 1018 	str.w	r1, [sp, #24]
 8004dfc:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 8004e00:	f9bd e004 	ldrsh.w	lr, [sp, #4]
 8004e04:	2900      	cmp	r1, #0
 8004e06:	f000 809a 	beq.w	8004f3e <pool_func_ap_array_f32+0x1c2>
 8004e0a:	9907      	ldr	r1, [sp, #28]
 8004e0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e0e:	f9bd 4054 	ldrsh.w	r4, [sp, #84]	; 0x54
 8004e12:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8004e16:	9102      	str	r1, [sp, #8]
 8004e18:	2700      	movs	r7, #0
 8004e1a:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 8004e1e:	434a      	muls	r2, r1
 8004e20:	b212      	sxth	r2, r2
 8004e22:	ae08      	add	r6, sp, #32
 8004e24:	920b      	str	r2, [sp, #44]	; 0x2c
 8004e26:	46ca      	mov	sl, r9
 8004e28:	5ff1      	ldrsh	r1, [r6, r7]
 8004e2a:	910a      	str	r1, [sp, #40]	; 0x28
 8004e2c:	f8ad 9002 	strh.w	r9, [sp, #2]
 8004e30:	f8ad 8064 	strh.w	r8, [sp, #100]	; 0x64
 8004e34:	9505      	str	r5, [sp, #20]
 8004e36:	f8ad 4000 	strh.w	r4, [sp]
 8004e3a:	9303      	str	r3, [sp, #12]
 8004e3c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8004e40:	f9bd c000 	ldrsh.w	ip, [sp]
 8004e44:	2200      	movs	r2, #0
 8004e46:	2900      	cmp	r1, #0
 8004e48:	d063      	beq.n	8004f12 <pool_func_ap_array_f32+0x196>
 8004e4a:	9d02      	ldr	r5, [sp, #8]
 8004e4c:	9905      	ldr	r1, [sp, #20]
 8004e4e:	f8cd e010 	str.w	lr, [sp, #16]
 8004e52:	fb05 f50a 	mul.w	r5, r5, sl
 8004e56:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 8004e5a:	f8ad b006 	strh.w	fp, [sp, #6]
 8004e5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004e60:	9b04      	ldr	r3, [sp, #16]
 8004e62:	4299      	cmp	r1, r3
 8004e64:	ed9f 0abb 	vldr	s0, [pc, #748]	; 8005154 <.text_5>
 8004e68:	eddf 0aba 	vldr	s1, [pc, #744]	; 8005154 <.text_5>
 8004e6c:	da43      	bge.n	8004ef6 <pool_func_ap_array_f32+0x17a>
 8004e6e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004e70:	f8bd b006 	ldrh.w	fp, [sp, #6]
 8004e74:	eba3 0804 	sub.w	r8, r3, r4
 8004e78:	fb01 f10b 	mul.w	r1, r1, fp
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	ee10 ea90 	vmov	lr, s1
 8004e82:	b23c      	sxth	r4, r7
 8004e84:	4564      	cmp	r4, ip
 8004e86:	46b9      	mov	r9, r7
 8004e88:	da2e      	bge.n	8004ee8 <pool_func_ap_array_f32+0x16c>
 8004e8a:	ebac 0004 	sub.w	r0, ip, r4
 8004e8e:	44e6      	add	lr, ip
 8004e90:	07c6      	lsls	r6, r0, #31
 8004e92:	ebae 0e04 	sub.w	lr, lr, r4
 8004e96:	d50a      	bpl.n	8004eae <pool_func_ap_array_f32+0x132>
 8004e98:	190c      	adds	r4, r1, r4
 8004e9a:	fb04 240a 	mla	r4, r4, sl, r2
 8004e9e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004ea2:	f109 0901 	add.w	r9, r9, #1
 8004ea6:	edd4 0a00 	vldr	s1, [r4]
 8004eaa:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004eae:	0840      	lsrs	r0, r0, #1
 8004eb0:	f000 801a 	beq.w	8004ee8 <pool_func_ap_array_f32+0x16c>
 8004eb4:	fa01 f489 	sxtah	r4, r1, r9
 8004eb8:	f109 0901 	add.w	r9, r9, #1
 8004ebc:	fb04 240a 	mla	r4, r4, sl, r2
 8004ec0:	fa01 f689 	sxtah	r6, r1, r9
 8004ec4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004ec8:	fb06 260a 	mla	r6, r6, sl, r2
 8004ecc:	edd4 0a00 	vldr	s1, [r4]
 8004ed0:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8004ed4:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004ed8:	ed94 1a00 	vldr	s2, [r4]
 8004edc:	1e40      	subs	r0, r0, #1
 8004ede:	ee30 0a01 	vadd.f32	s0, s0, s2
 8004ee2:	f109 0901 	add.w	r9, r9, #1
 8004ee6:	d1e5      	bne.n	8004eb4 <pool_func_ap_array_f32+0x138>
 8004ee8:	f1b8 0801 	subs.w	r8, r8, #1
 8004eec:	4459      	add	r1, fp
 8004eee:	d1c8      	bne.n	8004e82 <pool_func_ap_array_f32+0x106>
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	ee00 ea90 	vmov	s1, lr
 8004ef6:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8004efa:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8004efe:	ed85 0a00 	vstr	s0, [r5]
 8004f02:	1c52      	adds	r2, r2, #1
 8004f04:	1d2d      	adds	r5, r5, #4
 8004f06:	4552      	cmp	r2, sl
 8004f08:	dba9      	blt.n	8004e5e <pool_func_ap_array_f32+0xe2>
 8004f0a:	f8dd e010 	ldr.w	lr, [sp, #16]
 8004f0e:	f8bd b006 	ldrh.w	fp, [sp, #6]
 8004f12:	9902      	ldr	r1, [sp, #8]
 8004f14:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8004f18:	1c49      	adds	r1, r1, #1
 8004f1a:	9102      	str	r1, [sp, #8]
 8004f1c:	f8bd 1000 	ldrh.w	r1, [sp]
 8004f20:	1851      	adds	r1, r2, r1
 8004f22:	f8ad 1000 	strh.w	r1, [sp]
 8004f26:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8004f2a:	9a03      	ldr	r2, [sp, #12]
 8004f2c:	19cf      	adds	r7, r1, r7
 8004f2e:	1e52      	subs	r2, r2, #1
 8004f30:	9203      	str	r2, [sp, #12]
 8004f32:	d183      	bne.n	8004e3c <pool_func_ap_array_f32+0xc0>
 8004f34:	f8bd 9002 	ldrh.w	r9, [sp, #2]
 8004f38:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 8004f3c:	9d05      	ldr	r5, [sp, #20]
 8004f3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f40:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 8004f44:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004f48:	1c49      	adds	r1, r1, #1
 8004f4a:	9109      	str	r1, [sp, #36]	; 0x24
 8004f4c:	9907      	ldr	r1, [sp, #28]
 8004f4e:	188a      	adds	r2, r1, r2
 8004f50:	9207      	str	r2, [sp, #28]
 8004f52:	9908      	ldr	r1, [sp, #32]
 8004f54:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 8004f58:	188a      	adds	r2, r1, r2
 8004f5a:	9208      	str	r2, [sp, #32]
 8004f5c:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
 8004f60:	9a06      	ldr	r2, [sp, #24]
 8004f62:	18cb      	adds	r3, r1, r3
 8004f64:	1e52      	subs	r2, r2, #1
 8004f66:	f8ad 3004 	strh.w	r3, [sp, #4]
 8004f6a:	9206      	str	r2, [sp, #24]
 8004f6c:	f000 80ee 	beq.w	800514c <pool_func_ap_array_f32+0x3d0>
 8004f70:	e744      	b.n	8004dfc <pool_func_ap_array_f32+0x80>
 8004f72:	000f      	movs	r7, r1
 8004f74:	f000 80ea 	beq.w	800514c <pool_func_ap_array_f32+0x3d0>
 8004f78:	425b      	negs	r3, r3
 8004f7a:	18d2      	adds	r2, r2, r3
 8004f7c:	2700      	movs	r7, #0
 8004f7e:	f8ad 3000 	strh.w	r3, [sp]
 8004f82:	f8ad 200a 	strh.w	r2, [sp, #10]
 8004f86:	9709      	str	r7, [sp, #36]	; 0x24
 8004f88:	f8cd 1020 	str.w	r1, [sp, #32]
 8004f8c:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 8004f90:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8004f94:	2900      	cmp	r1, #0
 8004f96:	f000 80c1 	beq.w	800511c <pool_func_ap_array_f32+0x3a0>
 8004f9a:	f9bd 605c 	ldrsh.w	r6, [sp, #92]	; 0x5c
 8004f9e:	f9bd 4054 	ldrsh.w	r4, [sp, #84]	; 0x54
 8004fa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fa4:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 8004fa8:	9204      	str	r2, [sp, #16]
 8004faa:	4276      	negs	r6, r6
 8004fac:	19a4      	adds	r4, r4, r6
 8004fae:	f8ad 9002 	strh.w	r9, [sp, #2]
 8004fb2:	f8ad 8064 	strh.w	r8, [sp, #100]	; 0x64
 8004fb6:	9505      	str	r5, [sp, #20]
 8004fb8:	f8ad 6004 	strh.w	r6, [sp, #4]
 8004fbc:	f8ad 4008 	strh.w	r4, [sp, #8]
 8004fc0:	f8cd 101c 	str.w	r1, [sp, #28]
 8004fc4:	f8ad b006 	strh.w	fp, [sp, #6]
 8004fc8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8004fcc:	f9bd 8008 	ldrsh.w	r8, [sp, #8]
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	2a00      	cmp	r2, #0
 8004fd4:	f000 8085 	beq.w	80050e2 <pool_func_ap_array_f32+0x366>
 8004fd8:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 8004fdc:	9c04      	ldr	r4, [sp, #16]
 8004fde:	9a05      	ldr	r2, [sp, #20]
 8004fe0:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 8004fe4:	f8ad a00c 	strh.w	sl, [sp, #12]
 8004fe8:	4365      	muls	r5, r4
 8004fea:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8004fee:	9506      	str	r5, [sp, #24]
 8004ff0:	f9bd 5000 	ldrsh.w	r5, [sp]
 8004ff4:	f8bd a002 	ldrh.w	sl, [sp, #2]
 8004ff8:	429d      	cmp	r5, r3
 8004ffa:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8005154 <.text_5>
 8004ffe:	eddf 0a55 	vldr	s1, [pc, #340]	; 8005154 <.text_5>
 8005002:	da5d      	bge.n	80050c0 <pool_func_ap_array_f32+0x344>
 8005004:	930a      	str	r3, [sp, #40]	; 0x28
 8005006:	fb09 fe05 	mul.w	lr, r9, r5
 800500a:	462b      	mov	r3, r5
 800500c:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 8005010:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8005014:	ee10 2a90 	vmov	r2, s1
 8005018:	4545      	cmp	r5, r8
 800501a:	462f      	mov	r7, r5
 800501c:	da44      	bge.n	80050a8 <pool_func_ap_array_f32+0x32c>
 800501e:	eba8 0405 	sub.w	r4, r8, r5
 8005022:	07e6      	lsls	r6, r4, #31
 8005024:	d513      	bpl.n	800504e <pool_func_ap_array_f32+0x2d2>
 8005026:	2b00      	cmp	r3, #0
 8005028:	bf58      	it	pl
 800502a:	2f00      	cmppl	r7, #0
 800502c:	d40e      	bmi.n	800504c <pool_func_ap_array_f32+0x2d0>
 800502e:	455b      	cmp	r3, fp
 8005030:	bfb8      	it	lt
 8005032:	454f      	cmplt	r7, r9
 8005034:	da0a      	bge.n	800504c <pool_func_ap_array_f32+0x2d0>
 8005036:	eb0e 0607 	add.w	r6, lr, r7
 800503a:	fb06 160a 	mla	r6, r6, sl, r1
 800503e:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8005042:	1c52      	adds	r2, r2, #1
 8005044:	edd6 0a00 	vldr	s1, [r6]
 8005048:	ee30 0a20 	vadd.f32	s0, s0, s1
 800504c:	1c7f      	adds	r7, r7, #1
 800504e:	0864      	lsrs	r4, r4, #1
 8005050:	d02a      	beq.n	80050a8 <pool_func_ap_array_f32+0x32c>
 8005052:	2b00      	cmp	r3, #0
 8005054:	d405      	bmi.n	8005062 <pool_func_ap_array_f32+0x2e6>
 8005056:	2f00      	cmp	r7, #0
 8005058:	bf48      	it	mi
 800505a:	1c7e      	addmi	r6, r7, #1
 800505c:	d410      	bmi.n	8005080 <pool_func_ap_array_f32+0x304>
 800505e:	455b      	cmp	r3, fp
 8005060:	db01      	blt.n	8005066 <pool_func_ap_array_f32+0x2ea>
 8005062:	1c7e      	adds	r6, r7, #1
 8005064:	e01d      	b.n	80050a2 <pool_func_ap_array_f32+0x326>
 8005066:	1c7e      	adds	r6, r7, #1
 8005068:	454f      	cmp	r7, r9
 800506a:	da09      	bge.n	8005080 <pool_func_ap_array_f32+0x304>
 800506c:	4477      	add	r7, lr
 800506e:	fb07 170a 	mla	r7, r7, sl, r1
 8005072:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8005076:	1c52      	adds	r2, r2, #1
 8005078:	edd7 0a00 	vldr	s1, [r7]
 800507c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005080:	2e00      	cmp	r6, #0
 8005082:	d40e      	bmi.n	80050a2 <pool_func_ap_array_f32+0x326>
 8005084:	455b      	cmp	r3, fp
 8005086:	bfb8      	it	lt
 8005088:	454e      	cmplt	r6, r9
 800508a:	da0a      	bge.n	80050a2 <pool_func_ap_array_f32+0x326>
 800508c:	eb0e 0706 	add.w	r7, lr, r6
 8005090:	fb07 170a 	mla	r7, r7, sl, r1
 8005094:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8005098:	1c52      	adds	r2, r2, #1
 800509a:	edd7 0a00 	vldr	s1, [r7]
 800509e:	ee30 0a20 	vadd.f32	s0, s0, s1
 80050a2:	1c77      	adds	r7, r6, #1
 80050a4:	1e64      	subs	r4, r4, #1
 80050a6:	d1d4      	bne.n	8005052 <pool_func_ap_array_f32+0x2d6>
 80050a8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80050aa:	1c5b      	adds	r3, r3, #1
 80050ac:	42bb      	cmp	r3, r7
 80050ae:	44ce      	add	lr, r9
 80050b0:	dbb2      	blt.n	8005018 <pool_func_ap_array_f32+0x29c>
 80050b2:	463b      	mov	r3, r7
 80050b4:	ee00 2a90 	vmov	s1, r2
 80050b8:	f8ad 5004 	strh.w	r5, [sp, #4]
 80050bc:	f8ad b00c 	strh.w	fp, [sp, #12]
 80050c0:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80050c4:	9d06      	ldr	r5, [sp, #24]
 80050c6:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80050ca:	ed85 0a00 	vstr	s0, [r5]
 80050ce:	1c49      	adds	r1, r1, #1
 80050d0:	9a06      	ldr	r2, [sp, #24]
 80050d2:	1d15      	adds	r5, r2, #4
 80050d4:	4551      	cmp	r1, sl
 80050d6:	9506      	str	r5, [sp, #24]
 80050d8:	db8a      	blt.n	8004ff0 <pool_func_ap_array_f32+0x274>
 80050da:	f8ad 9006 	strh.w	r9, [sp, #6]
 80050de:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 80050e2:	9904      	ldr	r1, [sp, #16]
 80050e4:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80050e8:	1c49      	adds	r1, r1, #1
 80050ea:	9104      	str	r1, [sp, #16]
 80050ec:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80050f0:	1851      	adds	r1, r2, r1
 80050f2:	f8ad 1008 	strh.w	r1, [sp, #8]
 80050f6:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80050fa:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80050fe:	1851      	adds	r1, r2, r1
 8005100:	f8ad 1004 	strh.w	r1, [sp, #4]
 8005104:	9907      	ldr	r1, [sp, #28]
 8005106:	1e49      	subs	r1, r1, #1
 8005108:	9107      	str	r1, [sp, #28]
 800510a:	f47f af5d 	bne.w	8004fc8 <pool_func_ap_array_f32+0x24c>
 800510e:	f8bd 9002 	ldrh.w	r9, [sp, #2]
 8005112:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 8005116:	9d05      	ldr	r5, [sp, #20]
 8005118:	f8bd b006 	ldrh.w	fp, [sp, #6]
 800511c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800511e:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 8005122:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8005126:	188a      	adds	r2, r1, r2
 8005128:	9209      	str	r2, [sp, #36]	; 0x24
 800512a:	f8bd 2000 	ldrh.w	r2, [sp]
 800512e:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
 8005132:	18cb      	adds	r3, r1, r3
 8005134:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
 8005138:	f8ad 300a 	strh.w	r3, [sp, #10]
 800513c:	188a      	adds	r2, r1, r2
 800513e:	f8ad 2000 	strh.w	r2, [sp]
 8005142:	9a08      	ldr	r2, [sp, #32]
 8005144:	1e52      	subs	r2, r2, #1
 8005146:	9208      	str	r2, [sp, #32]
 8005148:	f47f af20 	bne.w	8004f8c <pool_func_ap_array_f32+0x210>
 800514c:	b00c      	add	sp, #48	; 0x30
 800514e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005154 <.text_5>:
 8005154:	00000000 	.word	0x00000000

08005158 <pool_func_mp_kernel_array_f32>:
 8005158:	b470      	push	{r4, r5, r6}
 800515a:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 800515e:	42a1      	cmp	r1, r4
 8005160:	d257      	bcs.n	8005212 <pool_func_mp_kernel_array_f32+0xba>
 8005162:	2b00      	cmp	r3, #0
 8005164:	d051      	beq.n	800520a <pool_func_mp_kernel_array_f32+0xb2>
 8005166:	f013 0203 	ands.w	r2, r3, #3
 800516a:	460d      	mov	r5, r1
 800516c:	4606      	mov	r6, r0
 800516e:	d011      	beq.n	8005194 <pool_func_mp_kernel_array_f32+0x3c>
 8005170:	ed96 0a00 	vldr	s0, [r6]
 8005174:	edd5 0a00 	vldr	s1, [r5]
 8005178:	eef4 0a40 	vcmp.f32	s1, s0
 800517c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005180:	bf58      	it	pl
 8005182:	eeb0 0a60 	vmovpl.f32	s0, s1
 8005186:	ed86 0a00 	vstr	s0, [r6]
 800518a:	1e52      	subs	r2, r2, #1
 800518c:	1d36      	adds	r6, r6, #4
 800518e:	1d2d      	adds	r5, r5, #4
 8005190:	2a00      	cmp	r2, #0
 8005192:	d1ed      	bne.n	8005170 <pool_func_mp_kernel_array_f32+0x18>
 8005194:	089a      	lsrs	r2, r3, #2
 8005196:	d038      	beq.n	800520a <pool_func_mp_kernel_array_f32+0xb2>
 8005198:	edd5 0a00 	vldr	s1, [r5]
 800519c:	edd6 1a00 	vldr	s3, [r6]
 80051a0:	eef4 0a61 	vcmp.f32	s1, s3
 80051a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a8:	bf48      	it	mi
 80051aa:	eef0 0a61 	vmovmi.f32	s1, s3
 80051ae:	edc6 0a00 	vstr	s1, [r6]
 80051b2:	edd5 0a01 	vldr	s1, [r5, #4]
 80051b6:	edd6 1a01 	vldr	s3, [r6, #4]
 80051ba:	ed96 0a02 	vldr	s0, [r6, #8]
 80051be:	eef4 0a61 	vcmp.f32	s1, s3
 80051c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c6:	bf48      	it	mi
 80051c8:	eef0 0a61 	vmovmi.f32	s1, s3
 80051cc:	edc6 0a01 	vstr	s1, [r6, #4]
 80051d0:	ed95 1a02 	vldr	s2, [r5, #8]
 80051d4:	edd6 1a03 	vldr	s3, [r6, #12]
 80051d8:	eeb4 1a40 	vcmp.f32	s2, s0
 80051dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e0:	bf48      	it	mi
 80051e2:	eeb0 1a40 	vmovmi.f32	s2, s0
 80051e6:	ed86 1a02 	vstr	s2, [r6, #8]
 80051ea:	edd5 0a03 	vldr	s1, [r5, #12]
 80051ee:	eef4 0a61 	vcmp.f32	s1, s3
 80051f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f6:	bf58      	it	pl
 80051f8:	eef0 1a60 	vmovpl.f32	s3, s1
 80051fc:	edc6 1a03 	vstr	s3, [r6, #12]
 8005200:	1e52      	subs	r2, r2, #1
 8005202:	3610      	adds	r6, #16
 8005204:	3510      	adds	r5, #16
 8005206:	2a00      	cmp	r2, #0
 8005208:	d1c6      	bne.n	8005198 <pool_func_mp_kernel_array_f32+0x40>
 800520a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800520e:	42a1      	cmp	r1, r4
 8005210:	d3a7      	bcc.n	8005162 <pool_func_mp_kernel_array_f32+0xa>
 8005212:	bc70      	pop	{r4, r5, r6}
 8005214:	4770      	bx	lr
	...

08005218 <pool_func_ap_kernel_array_f32>:
 8005218:	b4f0      	push	{r4, r5, r6, r7}
 800521a:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 800521e:	9c05      	ldr	r4, [sp, #20]
 8005220:	42a9      	cmp	r1, r5
 8005222:	d251      	bcs.n	80052c8 <pool_func_ap_kernel_array_f32+0xb0>
 8005224:	2b00      	cmp	r3, #0
 8005226:	d04a      	beq.n	80052be <pool_func_ap_kernel_array_f32+0xa6>
 8005228:	f013 0203 	ands.w	r2, r3, #3
 800522c:	460e      	mov	r6, r1
 800522e:	4607      	mov	r7, r0
 8005230:	f000 800f 	beq.w	8005252 <pool_func_ap_kernel_array_f32+0x3a>
 8005234:	ed96 0a00 	vldr	s0, [r6]
 8005238:	2c01      	cmp	r4, #1
 800523a:	bf1c      	itt	ne
 800523c:	edd7 0a00 	vldrne	s1, [r7]
 8005240:	ee30 0a80 	vaddne.f32	s0, s1, s0
 8005244:	ed87 0a00 	vstr	s0, [r7]
 8005248:	1e52      	subs	r2, r2, #1
 800524a:	1d3f      	adds	r7, r7, #4
 800524c:	1d36      	adds	r6, r6, #4
 800524e:	2a00      	cmp	r2, #0
 8005250:	d1f0      	bne.n	8005234 <pool_func_ap_kernel_array_f32+0x1c>
 8005252:	089a      	lsrs	r2, r3, #2
 8005254:	d033      	beq.n	80052be <pool_func_ap_kernel_array_f32+0xa6>
 8005256:	2c01      	cmp	r4, #1
 8005258:	edd6 1a00 	vldr	s3, [r6]
 800525c:	d10c      	bne.n	8005278 <pool_func_ap_kernel_array_f32+0x60>
 800525e:	edc7 1a00 	vstr	s3, [r7]
 8005262:	ed96 0a01 	vldr	s0, [r6, #4]
 8005266:	ed87 0a01 	vstr	s0, [r7, #4]
 800526a:	edd6 1a02 	vldr	s3, [r6, #8]
 800526e:	edc7 1a02 	vstr	s3, [r7, #8]
 8005272:	edd6 1a03 	vldr	s3, [r6, #12]
 8005276:	e01b      	b.n	80052b0 <pool_func_ap_kernel_array_f32+0x98>
 8005278:	edd7 0a00 	vldr	s1, [r7]
 800527c:	ee30 0aa1 	vadd.f32	s0, s1, s3
 8005280:	ed87 0a00 	vstr	s0, [r7]
 8005284:	ed97 1a01 	vldr	s2, [r7, #4]
 8005288:	ed96 0a01 	vldr	s0, [r6, #4]
 800528c:	edd7 1a02 	vldr	s3, [r7, #8]
 8005290:	ee31 0a00 	vadd.f32	s0, s2, s0
 8005294:	ed87 0a01 	vstr	s0, [r7, #4]
 8005298:	edd6 0a02 	vldr	s1, [r6, #8]
 800529c:	ee31 0aa0 	vadd.f32	s0, s3, s1
 80052a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80052a4:	ed97 0a03 	vldr	s0, [r7, #12]
 80052a8:	ed96 1a03 	vldr	s2, [r6, #12]
 80052ac:	ee70 1a01 	vadd.f32	s3, s0, s2
 80052b0:	edc7 1a03 	vstr	s3, [r7, #12]
 80052b4:	1e52      	subs	r2, r2, #1
 80052b6:	3710      	adds	r7, #16
 80052b8:	3610      	adds	r6, #16
 80052ba:	2a00      	cmp	r2, #0
 80052bc:	d1cb      	bne.n	8005256 <pool_func_ap_kernel_array_f32+0x3e>
 80052be:	2400      	movs	r4, #0
 80052c0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80052c4:	42a9      	cmp	r1, r5
 80052c6:	d3ad      	bcc.n	8005224 <pool_func_ap_kernel_array_f32+0xc>
 80052c8:	9904      	ldr	r1, [sp, #16]
 80052ca:	b399      	cbz	r1, 8005334 <pool_func_ap_kernel_array_f32+0x11c>
 80052cc:	ee00 1a10 	vmov	s0, r1
 80052d0:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80052d4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80052d8:	ee80 0a80 	vdiv.f32	s0, s1, s0
 80052dc:	b353      	cbz	r3, 8005334 <pool_func_ap_kernel_array_f32+0x11c>
 80052de:	f013 0103 	ands.w	r1, r3, #3
 80052e2:	d009      	beq.n	80052f8 <pool_func_ap_kernel_array_f32+0xe0>
 80052e4:	edd0 0a00 	vldr	s1, [r0]
 80052e8:	ee60 0a80 	vmul.f32	s1, s1, s0
 80052ec:	edc0 0a00 	vstr	s1, [r0]
 80052f0:	1e49      	subs	r1, r1, #1
 80052f2:	f100 0004 	add.w	r0, r0, #4
 80052f6:	d1f5      	bne.n	80052e4 <pool_func_ap_kernel_array_f32+0xcc>
 80052f8:	089b      	lsrs	r3, r3, #2
 80052fa:	d01b      	beq.n	8005334 <pool_func_ap_kernel_array_f32+0x11c>
 80052fc:	edd0 0a00 	vldr	s1, [r0]
 8005300:	ee60 0a80 	vmul.f32	s1, s1, s0
 8005304:	edc0 0a00 	vstr	s1, [r0]
 8005308:	1e5b      	subs	r3, r3, #1
 800530a:	ed90 1a01 	vldr	s2, [r0, #4]
 800530e:	edd0 0a02 	vldr	s1, [r0, #8]
 8005312:	ee21 1a00 	vmul.f32	s2, s2, s0
 8005316:	ed80 1a01 	vstr	s2, [r0, #4]
 800531a:	ee60 0a80 	vmul.f32	s1, s1, s0
 800531e:	ed90 1a03 	vldr	s2, [r0, #12]
 8005322:	edc0 0a02 	vstr	s1, [r0, #8]
 8005326:	ee21 1a00 	vmul.f32	s2, s2, s0
 800532a:	ed80 1a03 	vstr	s2, [r0, #12]
 800532e:	f100 0010 	add.w	r0, r0, #16
 8005332:	d1e3      	bne.n	80052fc <pool_func_ap_kernel_array_f32+0xe4>
 8005334:	bcf0      	pop	{r4, r5, r6, r7}
 8005336:	4770      	bx	lr

08005338 <forward_mp>:
 8005338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800533c:	4604      	mov	r4, r0
 800533e:	b08e      	sub	sp, #56	; 0x38
 8005340:	6962      	ldr	r2, [r4, #20]
 8005342:	8811      	ldrh	r1, [r2, #0]
 8005344:	2900      	cmp	r1, #0
 8005346:	bf1a      	itte	ne
 8005348:	6850      	ldrne	r0, [r2, #4]
 800534a:	1d00      	addne	r0, r0, #4
 800534c:	2004      	moveq	r0, #4
 800534e:	6800      	ldr	r0, [r0, #0]
 8005350:	2800      	cmp	r0, #0
 8005352:	bf14      	ite	ne
 8005354:	6805      	ldrne	r5, [r0, #0]
 8005356:	2500      	moveq	r5, #0
 8005358:	2901      	cmp	r1, #1
 800535a:	bfc6      	itte	gt
 800535c:	6850      	ldrgt	r0, [r2, #4]
 800535e:	3010      	addgt	r0, #16
 8005360:	2004      	movle	r0, #4
 8005362:	6800      	ldr	r0, [r0, #0]
 8005364:	68ea      	ldr	r2, [r5, #12]
 8005366:	2800      	cmp	r0, #0
 8005368:	bf14      	ite	ne
 800536a:	6807      	ldrne	r7, [r0, #0]
 800536c:	2700      	moveq	r7, #0
 800536e:	68f9      	ldr	r1, [r7, #12]
 8005370:	68d0      	ldr	r0, [r2, #12]
 8005372:	68cb      	ldr	r3, [r1, #12]
 8005374:	9009      	str	r0, [sp, #36]	; 0x24
 8005376:	6889      	ldr	r1, [r1, #8]
 8005378:	9108      	str	r1, [sp, #32]
 800537a:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800537e:	6851      	ldr	r1, [r2, #4]
 8005380:	69a2      	ldr	r2, [r4, #24]
 8005382:	69e0      	ldr	r0, [r4, #28]
 8005384:	9007      	str	r0, [sp, #28]
 8005386:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005388:	6a20      	ldr	r0, [r4, #32]
 800538a:	960d      	str	r6, [sp, #52]	; 0x34
 800538c:	f8d4 c02c 	ldr.w	ip, [r4, #44]	; 0x2c
 8005390:	69ac      	ldr	r4, [r5, #24]
 8005392:	69bd      	ldr	r5, [r7, #24]
 8005394:	f8dc 7000 	ldr.w	r7, [ip]
 8005398:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800539c:	68a4      	ldr	r4, [r4, #8]
 800539e:	f8d5 e008 	ldr.w	lr, [r5, #8]
 80053a2:	427f      	negs	r7, r7
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	9700      	str	r7, [sp, #0]
 80053a8:	f000 80d9 	beq.w	800555e <forward_mp+0x226>
 80053ac:	9301      	str	r3, [sp, #4]
 80053ae:	4276      	negs	r6, r6
 80053b0:	960c      	str	r6, [sp, #48]	; 0x30
 80053b2:	fb01 f508 	mul.w	r5, r1, r8
 80053b6:	950b      	str	r5, [sp, #44]	; 0x2c
 80053b8:	9d00      	ldr	r5, [sp, #0]
 80053ba:	9b00      	ldr	r3, [sp, #0]
 80053bc:	9f00      	ldr	r7, [sp, #0]
 80053be:	426d      	negs	r5, r5
 80053c0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80053c2:	bfcc      	ite	gt
 80053c4:	2600      	movgt	r6, #0
 80053c6:	9e00      	ldrle	r6, [sp, #0]
 80053c8:	1aeb      	subs	r3, r5, r3
 80053ca:	9d07      	ldr	r5, [sp, #28]
 80053cc:	42ab      	cmp	r3, r5
 80053ce:	bf88      	it	hi
 80053d0:	462b      	movhi	r3, r5
 80053d2:	19df      	adds	r7, r3, r7
 80053d4:	9b08      	ldr	r3, [sp, #32]
 80053d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 80b7 	beq.w	800554c <forward_mp+0x214>
 80053de:	fb08 fa06 	mul.w	sl, r8, r6
 80053e2:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80053e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80053ea:	9202      	str	r2, [sp, #8]
 80053ec:	9006      	str	r0, [sp, #24]
 80053ee:	9605      	str	r6, [sp, #20]
 80053f0:	9704      	str	r7, [sp, #16]
 80053f2:	4268      	negs	r0, r5
 80053f4:	9f03      	ldr	r7, [sp, #12]
 80053f6:	9a02      	ldr	r2, [sp, #8]
 80053f8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80053fc:	bfcc      	ite	gt
 80053fe:	2000      	movgt	r0, #0
 8005400:	4628      	movle	r0, r5
 8005402:	1b7f      	subs	r7, r7, r5
 8005404:	4297      	cmp	r7, r2
 8005406:	bf88      	it	hi
 8005408:	4617      	movhi	r7, r2
 800540a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800540c:	197f      	adds	r7, r7, r5
 800540e:	1a3f      	subs	r7, r7, r0
 8005410:	1880      	adds	r0, r0, r2
 8005412:	4348      	muls	r0, r1
 8005414:	434f      	muls	r7, r1
 8005416:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 800541a:	b311      	cbz	r1, 8005462 <forward_mp+0x12a>
 800541c:	f011 0003 	ands.w	r0, r1, #3
 8005420:	4672      	mov	r2, lr
 8005422:	4666      	mov	r6, ip
 8005424:	f000 8006 	beq.w	8005434 <forward_mp+0xfc>
 8005428:	f856 9b04 	ldr.w	r9, [r6], #4
 800542c:	f842 9b04 	str.w	r9, [r2], #4
 8005430:	1e40      	subs	r0, r0, #1
 8005432:	d1f9      	bne.n	8005428 <forward_mp+0xf0>
 8005434:	0888      	lsrs	r0, r1, #2
 8005436:	d014      	beq.n	8005462 <forward_mp+0x12a>
 8005438:	ed96 0a00 	vldr	s0, [r6]
 800543c:	ed82 0a00 	vstr	s0, [r2]
 8005440:	1e40      	subs	r0, r0, #1
 8005442:	edd6 0a01 	vldr	s1, [r6, #4]
 8005446:	edc2 0a01 	vstr	s1, [r2, #4]
 800544a:	ed96 0a02 	vldr	s0, [r6, #8]
 800544e:	ed82 0a02 	vstr	s0, [r2, #8]
 8005452:	edd6 0a03 	vldr	s1, [r6, #12]
 8005456:	edc2 0a03 	vstr	s1, [r2, #12]
 800545a:	3210      	adds	r2, #16
 800545c:	3610      	adds	r6, #16
 800545e:	2800      	cmp	r0, #0
 8005460:	d1ea      	bne.n	8005438 <forward_mp+0x100>
 8005462:	9805      	ldr	r0, [sp, #20]
 8005464:	9a04      	ldr	r2, [sp, #16]
 8005466:	4290      	cmp	r0, r2
 8005468:	da66      	bge.n	8005538 <forward_mp+0x200>
 800546a:	4610      	mov	r0, r2
 800546c:	9a05      	ldr	r2, [sp, #20]
 800546e:	1a82      	subs	r2, r0, r2
 8005470:	46e2      	mov	sl, ip
 8005472:	eb0a 0b87 	add.w	fp, sl, r7, lsl #2
 8005476:	45da      	cmp	sl, fp
 8005478:	d25a      	bcs.n	8005530 <forward_mp+0x1f8>
 800547a:	2900      	cmp	r1, #0
 800547c:	d054      	beq.n	8005528 <forward_mp+0x1f0>
 800547e:	f011 0003 	ands.w	r0, r1, #3
 8005482:	4656      	mov	r6, sl
 8005484:	46f1      	mov	r9, lr
 8005486:	d012      	beq.n	80054ae <forward_mp+0x176>
 8005488:	ed99 0a00 	vldr	s0, [r9]
 800548c:	edd6 0a00 	vldr	s1, [r6]
 8005490:	eef4 0a40 	vcmp.f32	s1, s0
 8005494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005498:	bf58      	it	pl
 800549a:	eeb0 0a60 	vmovpl.f32	s0, s1
 800549e:	1e40      	subs	r0, r0, #1
 80054a0:	1d36      	adds	r6, r6, #4
 80054a2:	ed89 0a00 	vstr	s0, [r9]
 80054a6:	2800      	cmp	r0, #0
 80054a8:	f109 0904 	add.w	r9, r9, #4
 80054ac:	d1ec      	bne.n	8005488 <forward_mp+0x150>
 80054ae:	0888      	lsrs	r0, r1, #2
 80054b0:	f000 803a 	beq.w	8005528 <forward_mp+0x1f0>
 80054b4:	edd6 0a00 	vldr	s1, [r6]
 80054b8:	edd9 1a00 	vldr	s3, [r9]
 80054bc:	eef4 0a61 	vcmp.f32	s1, s3
 80054c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c4:	bf48      	it	mi
 80054c6:	eef0 0a61 	vmovmi.f32	s1, s3
 80054ca:	edc9 0a00 	vstr	s1, [r9]
 80054ce:	edd6 0a01 	vldr	s1, [r6, #4]
 80054d2:	edd9 1a01 	vldr	s3, [r9, #4]
 80054d6:	ed99 0a02 	vldr	s0, [r9, #8]
 80054da:	eef4 0a61 	vcmp.f32	s1, s3
 80054de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054e2:	bf48      	it	mi
 80054e4:	eef0 0a61 	vmovmi.f32	s1, s3
 80054e8:	edc9 0a01 	vstr	s1, [r9, #4]
 80054ec:	ed96 1a02 	vldr	s2, [r6, #8]
 80054f0:	edd9 1a03 	vldr	s3, [r9, #12]
 80054f4:	eeb4 1a40 	vcmp.f32	s2, s0
 80054f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054fc:	bf48      	it	mi
 80054fe:	eeb0 1a40 	vmovmi.f32	s2, s0
 8005502:	ed89 1a02 	vstr	s2, [r9, #8]
 8005506:	edd6 0a03 	vldr	s1, [r6, #12]
 800550a:	eef4 0a61 	vcmp.f32	s1, s3
 800550e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005512:	bf58      	it	pl
 8005514:	eef0 1a60 	vmovpl.f32	s3, s1
 8005518:	1e40      	subs	r0, r0, #1
 800551a:	3610      	adds	r6, #16
 800551c:	edc9 1a03 	vstr	s3, [r9, #12]
 8005520:	2800      	cmp	r0, #0
 8005522:	f109 0910 	add.w	r9, r9, #16
 8005526:	d1c5      	bne.n	80054b4 <forward_mp+0x17c>
 8005528:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
 800552c:	45da      	cmp	sl, fp
 800552e:	d3a4      	bcc.n	800547a <forward_mp+0x142>
 8005530:	1e52      	subs	r2, r2, #1
 8005532:	eb0c 0c88 	add.w	ip, ip, r8, lsl #2
 8005536:	d19b      	bne.n	8005470 <forward_mp+0x138>
 8005538:	9806      	ldr	r0, [sp, #24]
 800553a:	1945      	adds	r5, r0, r5
 800553c:	1e5b      	subs	r3, r3, #1
 800553e:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 8005542:	f47f af56 	bne.w	80053f2 <forward_mp+0xba>
 8005546:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800554a:	9a02      	ldr	r2, [sp, #8]
 800554c:	9d00      	ldr	r5, [sp, #0]
 800554e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005550:	195d      	adds	r5, r3, r5
 8005552:	9500      	str	r5, [sp, #0]
 8005554:	9d01      	ldr	r5, [sp, #4]
 8005556:	1e6d      	subs	r5, r5, #1
 8005558:	9501      	str	r5, [sp, #4]
 800555a:	f47f af2d 	bne.w	80053b8 <forward_mp+0x80>
 800555e:	b00e      	add	sp, #56	; 0x38
 8005560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005564 <forward_ap>:
 8005564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005568:	4607      	mov	r7, r0
 800556a:	b097      	sub	sp, #92	; 0x5c
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	8811      	ldrh	r1, [r2, #0]
 8005570:	2900      	cmp	r1, #0
 8005572:	bf1a      	itte	ne
 8005574:	6850      	ldrne	r0, [r2, #4]
 8005576:	1d00      	addne	r0, r0, #4
 8005578:	2004      	moveq	r0, #4
 800557a:	6800      	ldr	r0, [r0, #0]
 800557c:	2800      	cmp	r0, #0
 800557e:	bf14      	ite	ne
 8005580:	6804      	ldrne	r4, [r0, #0]
 8005582:	2400      	moveq	r4, #0
 8005584:	2901      	cmp	r1, #1
 8005586:	bfc6      	itte	gt
 8005588:	6850      	ldrgt	r0, [r2, #4]
 800558a:	3010      	addgt	r0, #16
 800558c:	2004      	movle	r0, #4
 800558e:	6800      	ldr	r0, [r0, #0]
 8005590:	68e3      	ldr	r3, [r4, #12]
 8005592:	68dd      	ldr	r5, [r3, #12]
 8005594:	2800      	cmp	r0, #0
 8005596:	bf14      	ite	ne
 8005598:	6806      	ldrne	r6, [r0, #0]
 800559a:	2600      	moveq	r6, #0
 800559c:	68f2      	ldr	r2, [r6, #12]
 800559e:	68d0      	ldr	r0, [r2, #12]
 80055a0:	950d      	str	r5, [sp, #52]	; 0x34
 80055a2:	6892      	ldr	r2, [r2, #8]
 80055a4:	920c      	str	r2, [sp, #48]	; 0x30
 80055a6:	f8d3 c008 	ldr.w	ip, [r3, #8]
 80055aa:	6859      	ldr	r1, [r3, #4]
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	69fd      	ldr	r5, [r7, #28]
 80055b0:	9505      	str	r5, [sp, #20]
 80055b2:	f8d7 8020 	ldr.w	r8, [r7, #32]
 80055b6:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 80055b8:	9516      	str	r5, [sp, #88]	; 0x58
 80055ba:	69a4      	ldr	r4, [r4, #24]
 80055bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055be:	68a5      	ldr	r5, [r4, #8]
 80055c0:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80055c4:	69b4      	ldr	r4, [r6, #24]
 80055c6:	6812      	ldr	r2, [r2, #0]
 80055c8:	f8d4 e008 	ldr.w	lr, [r4, #8]
 80055cc:	4252      	negs	r2, r2
 80055ce:	2800      	cmp	r0, #0
 80055d0:	9201      	str	r2, [sp, #4]
 80055d2:	f000 811c 	beq.w	800580e <forward_ap+0x2aa>
 80055d6:	9c05      	ldr	r4, [sp, #20]
 80055d8:	f1c9 0900 	rsb	r9, r9, #0
 80055dc:	435c      	muls	r4, r3
 80055de:	fb01 f20c 	mul.w	r2, r1, ip
 80055e2:	9004      	str	r0, [sp, #16]
 80055e4:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
 80055e8:	9414      	str	r4, [sp, #80]	; 0x50
 80055ea:	9213      	str	r2, [sp, #76]	; 0x4c
 80055ec:	9a01      	ldr	r2, [sp, #4]
 80055ee:	9801      	ldr	r0, [sp, #4]
 80055f0:	9c01      	ldr	r4, [sp, #4]
 80055f2:	4252      	negs	r2, r2
 80055f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80055f6:	bfcc      	ite	gt
 80055f8:	2600      	movgt	r6, #0
 80055fa:	9e01      	ldrle	r6, [sp, #4]
 80055fc:	1a10      	subs	r0, r2, r0
 80055fe:	9a05      	ldr	r2, [sp, #20]
 8005600:	4290      	cmp	r0, r2
 8005602:	bf88      	it	hi
 8005604:	4610      	movhi	r0, r2
 8005606:	1904      	adds	r4, r0, r4
 8005608:	9815      	ldr	r0, [sp, #84]	; 0x54
 800560a:	9000      	str	r0, [sp, #0]
 800560c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800560e:	2800      	cmp	r0, #0
 8005610:	f000 80f4 	beq.w	80057fc <forward_ap+0x298>
 8005614:	fb0c f006 	mul.w	r0, ip, r6
 8005618:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800561a:	9012      	str	r0, [sp, #72]	; 0x48
 800561c:	9202      	str	r2, [sp, #8]
 800561e:	1b30      	subs	r0, r6, r4
 8005620:	9011      	str	r0, [sp, #68]	; 0x44
 8005622:	970e      	str	r7, [sp, #56]	; 0x38
 8005624:	f8cd c01c 	str.w	ip, [sp, #28]
 8005628:	9306      	str	r3, [sp, #24]
 800562a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800562e:	950a      	str	r5, [sp, #40]	; 0x28
 8005630:	9609      	str	r6, [sp, #36]	; 0x24
 8005632:	9408      	str	r4, [sp, #32]
 8005634:	9800      	ldr	r0, [sp, #0]
 8005636:	9a07      	ldr	r2, [sp, #28]
 8005638:	f8dd a000 	ldr.w	sl, [sp]
 800563c:	4240      	negs	r0, r0
 800563e:	9800      	ldr	r0, [sp, #0]
 8005640:	bfcc      	ite	gt
 8005642:	f04f 0900 	movgt.w	r9, #0
 8005646:	f8dd 9000 	ldrle.w	r9, [sp]
 800564a:	1a10      	subs	r0, r2, r0
 800564c:	9a06      	ldr	r2, [sp, #24]
 800564e:	4290      	cmp	r0, r2
 8005650:	bf88      	it	hi
 8005652:	4610      	movhi	r0, r2
 8005654:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005656:	9203      	str	r2, [sp, #12]
 8005658:	4482      	add	sl, r0
 800565a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800565c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800565e:	eba9 030a 	sub.w	r3, r9, sl
 8005662:	4343      	muls	r3, r0
 8005664:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005666:	444a      	add	r2, r9
 8005668:	434a      	muls	r2, r1
 800566a:	eb00 0582 	add.w	r5, r0, r2, lsl #2
 800566e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005670:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 8005674:	9a08      	ldr	r2, [sp, #32]
 8005676:	ebaa 0409 	sub.w	r4, sl, r9
 800567a:	434c      	muls	r4, r1
 800567c:	2800      	cmp	r0, #0
 800567e:	bf14      	ite	ne
 8005680:	9e14      	ldrne	r6, [sp, #80]	; 0x50
 8005682:	461e      	moveq	r6, r3
 8005684:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005686:	2701      	movs	r7, #1
 8005688:	4290      	cmp	r0, r2
 800568a:	f04f 0800 	mov.w	r8, #0
 800568e:	f280 80a4 	bge.w	80057da <forward_ap+0x276>
 8005692:	1a12      	subs	r2, r2, r0
 8005694:	ebaa 0009 	sub.w	r0, sl, r9
 8005698:	900f      	str	r0, [sp, #60]	; 0x3c
 800569a:	9310      	str	r3, [sp, #64]	; 0x40
 800569c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800569e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80056a0:	4480      	add	r8, r0
 80056a2:	4543      	cmp	r3, r8
 80056a4:	46a9      	mov	r9, r5
 80056a6:	bf0c      	ite	eq
 80056a8:	4633      	moveq	r3, r6
 80056aa:	2300      	movne	r3, #0
 80056ac:	eb09 0c84 	add.w	ip, r9, r4, lsl #2
 80056b0:	45e1      	cmp	r9, ip
 80056b2:	d254      	bcs.n	800575e <forward_ap+0x1fa>
 80056b4:	2900      	cmp	r1, #0
 80056b6:	d04d      	beq.n	8005754 <forward_ap+0x1f0>
 80056b8:	f011 0003 	ands.w	r0, r1, #3
 80056bc:	46ca      	mov	sl, r9
 80056be:	46f3      	mov	fp, lr
 80056c0:	f000 8010 	beq.w	80056e4 <forward_ap+0x180>
 80056c4:	ed9a 0a00 	vldr	s0, [sl]
 80056c8:	2f01      	cmp	r7, #1
 80056ca:	bf1c      	itt	ne
 80056cc:	eddb 0a00 	vldrne	s1, [fp]
 80056d0:	ee30 0a80 	vaddne.f32	s0, s1, s0
 80056d4:	ed8b 0a00 	vstr	s0, [fp]
 80056d8:	1e40      	subs	r0, r0, #1
 80056da:	f10b 0b04 	add.w	fp, fp, #4
 80056de:	f10a 0a04 	add.w	sl, sl, #4
 80056e2:	d1ef      	bne.n	80056c4 <forward_ap+0x160>
 80056e4:	0888      	lsrs	r0, r1, #2
 80056e6:	d035      	beq.n	8005754 <forward_ap+0x1f0>
 80056e8:	2f01      	cmp	r7, #1
 80056ea:	edda 1a00 	vldr	s3, [sl]
 80056ee:	d10d      	bne.n	800570c <forward_ap+0x1a8>
 80056f0:	edcb 1a00 	vstr	s3, [fp]
 80056f4:	ed9a 0a01 	vldr	s0, [sl, #4]
 80056f8:	ed8b 0a01 	vstr	s0, [fp, #4]
 80056fc:	edda 1a02 	vldr	s3, [sl, #8]
 8005700:	edcb 1a02 	vstr	s3, [fp, #8]
 8005704:	edda 1a03 	vldr	s3, [sl, #12]
 8005708:	e01c      	b.n	8005744 <forward_ap+0x1e0>
 800570a:	bf00      	nop
 800570c:	eddb 0a00 	vldr	s1, [fp]
 8005710:	ee30 0aa1 	vadd.f32	s0, s1, s3
 8005714:	ed8b 0a00 	vstr	s0, [fp]
 8005718:	ed9b 1a01 	vldr	s2, [fp, #4]
 800571c:	ed9a 0a01 	vldr	s0, [sl, #4]
 8005720:	eddb 1a02 	vldr	s3, [fp, #8]
 8005724:	ee31 0a00 	vadd.f32	s0, s2, s0
 8005728:	ed8b 0a01 	vstr	s0, [fp, #4]
 800572c:	edda 0a02 	vldr	s1, [sl, #8]
 8005730:	ee31 0aa0 	vadd.f32	s0, s3, s1
 8005734:	ed8b 0a02 	vstr	s0, [fp, #8]
 8005738:	ed9b 0a03 	vldr	s0, [fp, #12]
 800573c:	ed9a 1a03 	vldr	s2, [sl, #12]
 8005740:	ee70 1a01 	vadd.f32	s3, s0, s2
 8005744:	edcb 1a03 	vstr	s3, [fp, #12]
 8005748:	1e40      	subs	r0, r0, #1
 800574a:	f10b 0b10 	add.w	fp, fp, #16
 800574e:	f10a 0a10 	add.w	sl, sl, #16
 8005752:	d1c9      	bne.n	80056e8 <forward_ap+0x184>
 8005754:	2700      	movs	r7, #0
 8005756:	eb09 0981 	add.w	r9, r9, r1, lsl #2
 800575a:	45e1      	cmp	r9, ip
 800575c:	d3aa      	bcc.n	80056b4 <forward_ap+0x150>
 800575e:	b3ab      	cbz	r3, 80057cc <forward_ap+0x268>
 8005760:	ee00 3a10 	vmov	s0, r3
 8005764:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8005768:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800576c:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8005770:	b361      	cbz	r1, 80057cc <forward_ap+0x268>
 8005772:	f011 0003 	ands.w	r0, r1, #3
 8005776:	4673      	mov	r3, lr
 8005778:	f000 800a 	beq.w	8005790 <forward_ap+0x22c>
 800577c:	edd3 0a00 	vldr	s1, [r3]
 8005780:	ee60 0a80 	vmul.f32	s1, s1, s0
 8005784:	edc3 0a00 	vstr	s1, [r3]
 8005788:	1e40      	subs	r0, r0, #1
 800578a:	f103 0304 	add.w	r3, r3, #4
 800578e:	d1f5      	bne.n	800577c <forward_ap+0x218>
 8005790:	0888      	lsrs	r0, r1, #2
 8005792:	d01b      	beq.n	80057cc <forward_ap+0x268>
 8005794:	edd3 0a00 	vldr	s1, [r3]
 8005798:	ee60 0a80 	vmul.f32	s1, s1, s0
 800579c:	edc3 0a00 	vstr	s1, [r3]
 80057a0:	1e40      	subs	r0, r0, #1
 80057a2:	ed93 1a01 	vldr	s2, [r3, #4]
 80057a6:	edd3 0a02 	vldr	s1, [r3, #8]
 80057aa:	ee21 1a00 	vmul.f32	s2, s2, s0
 80057ae:	ed83 1a01 	vstr	s2, [r3, #4]
 80057b2:	ee60 0a80 	vmul.f32	s1, s1, s0
 80057b6:	ed93 1a03 	vldr	s2, [r3, #12]
 80057ba:	edc3 0a02 	vstr	s1, [r3, #8]
 80057be:	ee21 1a00 	vmul.f32	s2, s2, s0
 80057c2:	ed83 1a03 	vstr	s2, [r3, #12]
 80057c6:	f103 0310 	add.w	r3, r3, #16
 80057ca:	d1e3      	bne.n	8005794 <forward_ap+0x230>
 80057cc:	9803      	ldr	r0, [sp, #12]
 80057ce:	2700      	movs	r7, #0
 80057d0:	1e52      	subs	r2, r2, #1
 80057d2:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 80057d6:	f47f af61 	bne.w	800569c <forward_ap+0x138>
 80057da:	9800      	ldr	r0, [sp, #0]
 80057dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80057de:	1810      	adds	r0, r2, r0
 80057e0:	9000      	str	r0, [sp, #0]
 80057e2:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 80057e6:	9802      	ldr	r0, [sp, #8]
 80057e8:	1e40      	subs	r0, r0, #1
 80057ea:	9002      	str	r0, [sp, #8]
 80057ec:	f47f af22 	bne.w	8005634 <forward_ap+0xd0>
 80057f0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80057f2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80057f6:	9b06      	ldr	r3, [sp, #24]
 80057f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80057fa:	4690      	mov	r8, r2
 80057fc:	9c01      	ldr	r4, [sp, #4]
 80057fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005800:	1914      	adds	r4, r2, r4
 8005802:	9401      	str	r4, [sp, #4]
 8005804:	9c04      	ldr	r4, [sp, #16]
 8005806:	1e64      	subs	r4, r4, #1
 8005808:	9404      	str	r4, [sp, #16]
 800580a:	f47f aeef 	bne.w	80055ec <forward_ap+0x88>
 800580e:	b017      	add	sp, #92	; 0x5c
 8005810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005814 <ai_array_fmt_name>:
 8005814:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8005818:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 800581c:	d062      	beq.n	80058e4 <ai_array_fmt_name+0xd0>
 800581e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005822:	1a89      	subs	r1, r1, r2
 8005824:	f000 8094 	beq.w	8005950 <ai_array_fmt_name+0x13c>
 8005828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800582c:	1a89      	subs	r1, r1, r2
 800582e:	d071      	beq.n	8005914 <ai_array_fmt_name+0x100>
 8005830:	1a89      	subs	r1, r1, r2
 8005832:	d063      	beq.n	80058fc <ai_array_fmt_name+0xe8>
 8005834:	1fc9      	subs	r1, r1, #7
 8005836:	f000 808e 	beq.w	8005956 <ai_array_fmt_name+0x142>
 800583a:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800583e:	1a89      	subs	r1, r1, r2
 8005840:	d05f      	beq.n	8005902 <ai_array_fmt_name+0xee>
 8005842:	390f      	subs	r1, #15
 8005844:	f000 808a 	beq.w	800595c <ai_array_fmt_name+0x148>
 8005848:	f240 72f1 	movw	r2, #2033	; 0x7f1
 800584c:	1a89      	subs	r1, r1, r2
 800584e:	d05b      	beq.n	8005908 <ai_array_fmt_name+0xf4>
 8005850:	391f      	subs	r1, #31
 8005852:	f000 8086 	beq.w	8005962 <ai_array_fmt_name+0x14e>
 8005856:	f640 72e1 	movw	r2, #4065	; 0xfe1
 800585a:	1a89      	subs	r1, r1, r2
 800585c:	d057      	beq.n	800590e <ai_array_fmt_name+0xfa>
 800585e:	f8df 25d4 	ldr.w	r2, [pc, #1492]	; 8005e34 <.text_15>
 8005862:	1a89      	subs	r1, r1, r2
 8005864:	f000 808f 	beq.w	8005986 <ai_array_fmt_name+0x172>
 8005868:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 800586c:	1a89      	subs	r1, r1, r2
 800586e:	f000 8087 	beq.w	8005980 <ai_array_fmt_name+0x16c>
 8005872:	f8df 25c4 	ldr.w	r2, [pc, #1476]	; 8005e38 <.text_16>
 8005876:	1a89      	subs	r1, r1, r2
 8005878:	d05e      	beq.n	8005938 <ai_array_fmt_name+0x124>
 800587a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800587e:	1a89      	subs	r1, r1, r2
 8005880:	d057      	beq.n	8005932 <ai_array_fmt_name+0x11e>
 8005882:	1a89      	subs	r1, r1, r2
 8005884:	d049      	beq.n	800591a <ai_array_fmt_name+0x106>
 8005886:	1fc9      	subs	r1, r1, #7
 8005888:	d059      	beq.n	800593e <ai_array_fmt_name+0x12a>
 800588a:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800588e:	1a89      	subs	r1, r1, r2
 8005890:	d046      	beq.n	8005920 <ai_array_fmt_name+0x10c>
 8005892:	390f      	subs	r1, #15
 8005894:	d056      	beq.n	8005944 <ai_array_fmt_name+0x130>
 8005896:	f240 72f1 	movw	r2, #2033	; 0x7f1
 800589a:	1a89      	subs	r1, r1, r2
 800589c:	d043      	beq.n	8005926 <ai_array_fmt_name+0x112>
 800589e:	391f      	subs	r1, #31
 80058a0:	d053      	beq.n	800594a <ai_array_fmt_name+0x136>
 80058a2:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80058a6:	1a89      	subs	r1, r1, r2
 80058a8:	d040      	beq.n	800592c <ai_array_fmt_name+0x118>
 80058aa:	f8df 2588 	ldr.w	r2, [pc, #1416]	; 8005e34 <.text_15>
 80058ae:	1a89      	subs	r1, r1, r2
 80058b0:	d063      	beq.n	800597a <ai_array_fmt_name+0x166>
 80058b2:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80058b6:	1a89      	subs	r1, r1, r2
 80058b8:	d05c      	beq.n	8005974 <ai_array_fmt_name+0x160>
 80058ba:	f8df 2580 	ldr.w	r2, [pc, #1408]	; 8005e3c <.text_17>
 80058be:	1a89      	subs	r1, r1, r2
 80058c0:	d019      	beq.n	80058f6 <ai_array_fmt_name+0xe2>
 80058c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058c6:	1a89      	subs	r1, r1, r2
 80058c8:	d00f      	beq.n	80058ea <ai_array_fmt_name+0xd6>
 80058ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80058ce:	1a89      	subs	r1, r1, r2
 80058d0:	d00e      	beq.n	80058f0 <ai_array_fmt_name+0xdc>
 80058d2:	f8df 256c 	ldr.w	r2, [pc, #1388]	; 8005e40 <.text_18>
 80058d6:	1a89      	subs	r1, r1, r2
 80058d8:	d049      	beq.n	800596e <ai_array_fmt_name+0x15a>
 80058da:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80058de:	1a89      	subs	r1, r1, r2
 80058e0:	d042      	beq.n	8005968 <ai_array_fmt_name+0x154>
 80058e2:	e053      	b.n	800598c <ai_array_fmt_name+0x178>
 80058e4:	f20f 6074 	addw	r0, pc, #1652	; 0x674
 80058e8:	4770      	bx	lr
 80058ea:	f20f 607c 	addw	r0, pc, #1660	; 0x67c
 80058ee:	4770      	bx	lr
 80058f0:	f20f 6080 	addw	r0, pc, #1664	; 0x680
 80058f4:	4770      	bx	lr
 80058f6:	f20f 6088 	addw	r0, pc, #1672	; 0x688
 80058fa:	4770      	bx	lr
 80058fc:	f20f 608c 	addw	r0, pc, #1676	; 0x68c
 8005900:	4770      	bx	lr
 8005902:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 8005906:	4770      	bx	lr
 8005908:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 800590c:	4770      	bx	lr
 800590e:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 8005912:	4770      	bx	lr
 8005914:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 8005918:	4770      	bx	lr
 800591a:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 800591e:	4770      	bx	lr
 8005920:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 8005924:	4770      	bx	lr
 8005926:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 800592a:	4770      	bx	lr
 800592c:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 8005930:	4770      	bx	lr
 8005932:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 8005936:	4770      	bx	lr
 8005938:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 800593c:	4770      	bx	lr
 800593e:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 8005942:	4770      	bx	lr
 8005944:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 8005948:	4770      	bx	lr
 800594a:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 800594e:	4770      	bx	lr
 8005950:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 8005954:	4770      	bx	lr
 8005956:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 800595a:	4770      	bx	lr
 800595c:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 8005960:	4770      	bx	lr
 8005962:	f20f 60b4 	addw	r0, pc, #1716	; 0x6b4
 8005966:	4770      	bx	lr
 8005968:	f20f 60b8 	addw	r0, pc, #1720	; 0x6b8
 800596c:	4770      	bx	lr
 800596e:	f20f 60c4 	addw	r0, pc, #1732	; 0x6c4
 8005972:	4770      	bx	lr
 8005974:	f20f 60cc 	addw	r0, pc, #1740	; 0x6cc
 8005978:	4770      	bx	lr
 800597a:	f20f 60d8 	addw	r0, pc, #1752	; 0x6d8
 800597e:	4770      	bx	lr
 8005980:	f20f 60e0 	addw	r0, pc, #1760	; 0x6e0
 8005984:	4770      	bx	lr
 8005986:	f20f 60ec 	addw	r0, pc, #1772	; 0x6ec
 800598a:	4770      	bx	lr
 800598c:	f36f 000d 	bfc	r0, #0, #14
 8005990:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8005994:	2840      	cmp	r0, #64	; 0x40
 8005996:	d009      	beq.n	80059ac <ai_array_fmt_name+0x198>
 8005998:	f8df 14a8 	ldr.w	r1, [pc, #1192]	; 8005e44 <.text_19>
 800599c:	4288      	cmp	r0, r1
 800599e:	d00b      	beq.n	80059b8 <ai_array_fmt_name+0x1a4>
 80059a0:	f8df 14a4 	ldr.w	r1, [pc, #1188]	; 8005e48 <.text_20>
 80059a4:	4288      	cmp	r0, r1
 80059a6:	d004      	beq.n	80059b2 <ai_array_fmt_name+0x19e>
 80059a8:	a07a      	add	r0, pc, #488	; (adr r0, 8005b94 <.text_8>)
 80059aa:	4770      	bx	lr
 80059ac:	f20f 60d4 	addw	r0, pc, #1748	; 0x6d4
 80059b0:	4770      	bx	lr
 80059b2:	f20f 60e8 	addw	r0, pc, #1768	; 0x6e8
 80059b6:	4770      	bx	lr
 80059b8:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 80059bc:	4770      	bx	lr

080059be <ai_array_fmt_exported>:
 80059be:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 80059c2:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 80059c6:	d068      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 80059c8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80059cc:	1a89      	subs	r1, r1, r2
 80059ce:	d064      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 80059d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059d4:	1a89      	subs	r1, r1, r2
 80059d6:	d062      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 80059d8:	1a89      	subs	r1, r1, r2
 80059da:	d05e      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 80059dc:	1fc9      	subs	r1, r1, #7
 80059de:	d05c      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 80059e0:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80059e4:	1a89      	subs	r1, r1, r2
 80059e6:	d058      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 80059e8:	390f      	subs	r1, #15
 80059ea:	d056      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 80059ec:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80059f0:	1a89      	subs	r1, r1, r2
 80059f2:	d054      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 80059f4:	391f      	subs	r1, #31
 80059f6:	d052      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 80059f8:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80059fc:	1a89      	subs	r1, r1, r2
 80059fe:	d04e      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a00:	f8df 2430 	ldr.w	r2, [pc, #1072]	; 8005e34 <.text_15>
 8005a04:	1a89      	subs	r1, r1, r2
 8005a06:	d04a      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a08:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005a0c:	1a89      	subs	r1, r1, r2
 8005a0e:	d046      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a10:	f8df 2424 	ldr.w	r2, [pc, #1060]	; 8005e38 <.text_16>
 8005a14:	1a89      	subs	r1, r1, r2
 8005a16:	d040      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 8005a18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a1c:	1a89      	subs	r1, r1, r2
 8005a1e:	d03e      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a20:	1a89      	subs	r1, r1, r2
 8005a22:	d03a      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 8005a24:	1fc9      	subs	r1, r1, #7
 8005a26:	d038      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 8005a28:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005a2c:	1a89      	subs	r1, r1, r2
 8005a2e:	d034      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 8005a30:	390f      	subs	r1, #15
 8005a32:	d032      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 8005a34:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8005a38:	1a89      	subs	r1, r1, r2
 8005a3a:	d030      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a3c:	391f      	subs	r1, #31
 8005a3e:	d02e      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a40:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8005a44:	1a89      	subs	r1, r1, r2
 8005a46:	d02a      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a48:	f8df 23e8 	ldr.w	r2, [pc, #1000]	; 8005e34 <.text_15>
 8005a4c:	1a89      	subs	r1, r1, r2
 8005a4e:	d026      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a50:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005a54:	1a89      	subs	r1, r1, r2
 8005a56:	d022      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a58:	f8df 23e0 	ldr.w	r2, [pc, #992]	; 8005e3c <.text_17>
 8005a5c:	1a89      	subs	r1, r1, r2
 8005a5e:	d01e      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a64:	1a89      	subs	r1, r1, r2
 8005a66:	d018      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 8005a68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005a6c:	1a89      	subs	r1, r1, r2
 8005a6e:	d016      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a70:	f8df 23cc 	ldr.w	r2, [pc, #972]	; 8005e40 <.text_18>
 8005a74:	1a89      	subs	r1, r1, r2
 8005a76:	d012      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a78:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005a7c:	1a89      	subs	r1, r1, r2
 8005a7e:	d00e      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a80:	f36f 000d 	bfc	r0, #0, #14
 8005a84:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8005a88:	2840      	cmp	r0, #64	; 0x40
 8005a8a:	bf1f      	itttt	ne
 8005a8c:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 8005e44 <.text_19>
 8005a90:	4298      	cmpne	r0, r3
 8005a92:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 8005e48 <.text_20>
 8005a96:	4298      	cmpne	r0, r3
 8005a98:	d101      	bne.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a9a:	2001      	movs	r0, #1
 8005a9c:	4770      	bx	lr
 8005a9e:	2000      	movs	r0, #0
 8005aa0:	4770      	bx	lr

08005aa2 <ai_array_fmt_valid>:
 8005aa2:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8005aa6:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8005aaa:	d069      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005aac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005ab0:	1a89      	subs	r1, r1, r2
 8005ab2:	d065      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ab8:	1a89      	subs	r1, r1, r2
 8005aba:	d061      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005abc:	1a89      	subs	r1, r1, r2
 8005abe:	d05f      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005ac0:	1fc9      	subs	r1, r1, #7
 8005ac2:	d05d      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005ac4:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005ac8:	1a89      	subs	r1, r1, r2
 8005aca:	d059      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005acc:	390f      	subs	r1, #15
 8005ace:	d057      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005ad0:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8005ad4:	1a89      	subs	r1, r1, r2
 8005ad6:	d053      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005ad8:	391f      	subs	r1, #31
 8005ada:	d051      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005adc:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8005ae0:	1a89      	subs	r1, r1, r2
 8005ae2:	d04d      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005ae4:	f8df 234c 	ldr.w	r2, [pc, #844]	; 8005e34 <.text_15>
 8005ae8:	1a89      	subs	r1, r1, r2
 8005aea:	d049      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005aec:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005af0:	1a89      	subs	r1, r1, r2
 8005af2:	d045      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005af4:	f8df 2340 	ldr.w	r2, [pc, #832]	; 8005e38 <.text_16>
 8005af8:	1a89      	subs	r1, r1, r2
 8005afa:	d041      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b00:	1a89      	subs	r1, r1, r2
 8005b02:	d03d      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b04:	1a89      	subs	r1, r1, r2
 8005b06:	d03b      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b08:	1fc9      	subs	r1, r1, #7
 8005b0a:	d039      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b0c:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005b10:	1a89      	subs	r1, r1, r2
 8005b12:	d035      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b14:	390f      	subs	r1, #15
 8005b16:	d033      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b18:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8005b1c:	1a89      	subs	r1, r1, r2
 8005b1e:	d02f      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b20:	391f      	subs	r1, #31
 8005b22:	d02d      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b24:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8005b28:	1a89      	subs	r1, r1, r2
 8005b2a:	d029      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b2c:	f8df 2304 	ldr.w	r2, [pc, #772]	; 8005e34 <.text_15>
 8005b30:	1a89      	subs	r1, r1, r2
 8005b32:	d025      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b34:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005b38:	1a89      	subs	r1, r1, r2
 8005b3a:	d021      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b3c:	f8df 22fc 	ldr.w	r2, [pc, #764]	; 8005e3c <.text_17>
 8005b40:	1a89      	subs	r1, r1, r2
 8005b42:	d01d      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b48:	1a89      	subs	r1, r1, r2
 8005b4a:	d019      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005b50:	1a89      	subs	r1, r1, r2
 8005b52:	d015      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b54:	f8df 22e8 	ldr.w	r2, [pc, #744]	; 8005e40 <.text_18>
 8005b58:	1a89      	subs	r1, r1, r2
 8005b5a:	d011      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b5c:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005b60:	1a89      	subs	r1, r1, r2
 8005b62:	bf1e      	ittt	ne
 8005b64:	f36f 000d 	bfcne	r0, #0, #14
 8005b68:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8005b6c:	2840      	cmpne	r0, #64	; 0x40
 8005b6e:	d007      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b70:	f8df 32d0 	ldr.w	r3, [pc, #720]	; 8005e44 <.text_19>
 8005b74:	4298      	cmp	r0, r3
 8005b76:	bf1c      	itt	ne
 8005b78:	f8df 32cc 	ldrne.w	r3, [pc, #716]	; 8005e48 <.text_20>
 8005b7c:	4298      	cmpne	r0, r3
 8005b7e:	d101      	bne.n	8005b84 <ai_array_fmt_valid+0xe2>
 8005b80:	2001      	movs	r0, #1
 8005b82:	4770      	bx	lr
 8005b84:	2000      	movs	r0, #0
 8005b86:	4770      	bx	lr

08005b88 <ai_array_fmt_get_formats>:
 8005b88:	f8df 12c0 	ldr.w	r1, [pc, #704]	; 8005e4c <.text_21>
 8005b8c:	6001      	str	r1, [r0, #0]
 8005b8e:	201c      	movs	r0, #28
 8005b90:	4770      	bx	lr
	...

08005b94 <.text_8>:
 8005b94:	00000000 	.word	0x00000000

08005b98 <ai_buffer_fmt_name>:
 8005b98:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8005b9c:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8005ba0:	d022      	beq.n	8005be8 <ai_buffer_fmt_name+0x50>
 8005ba2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005ba6:	1a89      	subs	r1, r1, r2
 8005ba8:	d039      	beq.n	8005c1e <ai_buffer_fmt_name+0x86>
 8005baa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005bae:	1a89      	subs	r1, r1, r2
 8005bb0:	d020      	beq.n	8005bf4 <ai_buffer_fmt_name+0x5c>
 8005bb2:	1fc9      	subs	r1, r1, #7
 8005bb4:	d036      	beq.n	8005c24 <ai_buffer_fmt_name+0x8c>
 8005bb6:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005bba:	1a89      	subs	r1, r1, r2
 8005bbc:	d01d      	beq.n	8005bfa <ai_buffer_fmt_name+0x62>
 8005bbe:	390f      	subs	r1, #15
 8005bc0:	d033      	beq.n	8005c2a <ai_buffer_fmt_name+0x92>
 8005bc2:	4aa3      	ldr	r2, [pc, #652]	; (8005e50 <.text_22>)
 8005bc4:	1a89      	subs	r1, r1, r2
 8005bc6:	d021      	beq.n	8005c0c <ai_buffer_fmt_name+0x74>
 8005bc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005bcc:	1a89      	subs	r1, r1, r2
 8005bce:	d017      	beq.n	8005c00 <ai_buffer_fmt_name+0x68>
 8005bd0:	1fc9      	subs	r1, r1, #7
 8005bd2:	d01e      	beq.n	8005c12 <ai_buffer_fmt_name+0x7a>
 8005bd4:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005bd8:	1a89      	subs	r1, r1, r2
 8005bda:	d014      	beq.n	8005c06 <ai_buffer_fmt_name+0x6e>
 8005bdc:	390f      	subs	r1, #15
 8005bde:	d01b      	beq.n	8005c18 <ai_buffer_fmt_name+0x80>
 8005be0:	4a9c      	ldr	r2, [pc, #624]	; (8005e54 <.text_23>)
 8005be2:	1a89      	subs	r1, r1, r2
 8005be4:	d003      	beq.n	8005bee <ai_buffer_fmt_name+0x56>
 8005be6:	e023      	b.n	8005c30 <ai_buffer_fmt_name+0x98>
 8005be8:	f20f 3070 	addw	r0, pc, #880	; 0x370
 8005bec:	4770      	bx	lr
 8005bee:	f20f 3078 	addw	r0, pc, #888	; 0x378
 8005bf2:	4770      	bx	lr
 8005bf4:	f20f 3094 	addw	r0, pc, #916	; 0x394
 8005bf8:	4770      	bx	lr
 8005bfa:	f20f 3098 	addw	r0, pc, #920	; 0x398
 8005bfe:	4770      	bx	lr
 8005c00:	f20f 30b0 	addw	r0, pc, #944	; 0x3b0
 8005c04:	4770      	bx	lr
 8005c06:	f20f 30b4 	addw	r0, pc, #948	; 0x3b4
 8005c0a:	4770      	bx	lr
 8005c0c:	f20f 30cc 	addw	r0, pc, #972	; 0x3cc
 8005c10:	4770      	bx	lr
 8005c12:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 8005c16:	4770      	bx	lr
 8005c18:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 8005c1c:	4770      	bx	lr
 8005c1e:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 8005c22:	4770      	bx	lr
 8005c24:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 8005c28:	4770      	bx	lr
 8005c2a:	f20f 30e0 	addw	r0, pc, #992	; 0x3e0
 8005c2e:	4770      	bx	lr
 8005c30:	0b80      	lsrs	r0, r0, #14
 8005c32:	0380      	lsls	r0, r0, #14
 8005c34:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8005c38:	2840      	cmp	r0, #64	; 0x40
 8005c3a:	d007      	beq.n	8005c4c <ai_buffer_fmt_name+0xb4>
 8005c3c:	4981      	ldr	r1, [pc, #516]	; (8005e44 <.text_19>)
 8005c3e:	4288      	cmp	r0, r1
 8005c40:	d00a      	beq.n	8005c58 <ai_buffer_fmt_name+0xc0>
 8005c42:	4981      	ldr	r1, [pc, #516]	; (8005e48 <.text_20>)
 8005c44:	4288      	cmp	r0, r1
 8005c46:	d004      	beq.n	8005c52 <ai_buffer_fmt_name+0xba>
 8005c48:	a079      	add	r0, pc, #484	; (adr r0, 8005e30 <.text_14>)
 8005c4a:	4770      	bx	lr
 8005c4c:	f20f 4074 	addw	r0, pc, #1140	; 0x474
 8005c50:	4770      	bx	lr
 8005c52:	f20f 4088 	addw	r0, pc, #1160	; 0x488
 8005c56:	4770      	bx	lr
 8005c58:	f20f 4094 	addw	r0, pc, #1172	; 0x494
 8005c5c:	4770      	bx	lr

08005c5e <ai_buffer_fmt_valid>:
 8005c5e:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8005c62:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8005c66:	d02d      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c68:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005c6c:	1a89      	subs	r1, r1, r2
 8005c6e:	d029      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c74:	1a89      	subs	r1, r1, r2
 8005c76:	d025      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c78:	1fc9      	subs	r1, r1, #7
 8005c7a:	d023      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c7c:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005c80:	1a89      	subs	r1, r1, r2
 8005c82:	d01f      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c84:	390f      	subs	r1, #15
 8005c86:	d01d      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c88:	4a71      	ldr	r2, [pc, #452]	; (8005e50 <.text_22>)
 8005c8a:	1a89      	subs	r1, r1, r2
 8005c8c:	d01a      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c92:	1a89      	subs	r1, r1, r2
 8005c94:	d016      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c96:	1fc9      	subs	r1, r1, #7
 8005c98:	d014      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c9a:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005c9e:	1a89      	subs	r1, r1, r2
 8005ca0:	d010      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005ca2:	390f      	subs	r1, #15
 8005ca4:	d00e      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005ca6:	4a6b      	ldr	r2, [pc, #428]	; (8005e54 <.text_23>)
 8005ca8:	1a89      	subs	r1, r1, r2
 8005caa:	bf1f      	itttt	ne
 8005cac:	0b80      	lsrne	r0, r0, #14
 8005cae:	0380      	lslne	r0, r0, #14
 8005cb0:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8005cb4:	2840      	cmpne	r0, #64	; 0x40
 8005cb6:	d005      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005cb8:	4b62      	ldr	r3, [pc, #392]	; (8005e44 <.text_19>)
 8005cba:	4298      	cmp	r0, r3
 8005cbc:	bf1c      	itt	ne
 8005cbe:	4b62      	ldrne	r3, [pc, #392]	; (8005e48 <.text_20>)
 8005cc0:	4298      	cmpne	r0, r3
 8005cc2:	d101      	bne.n	8005cc8 <ai_buffer_fmt_valid+0x6a>
 8005cc4:	2001      	movs	r0, #1
 8005cc6:	4770      	bx	lr
 8005cc8:	2000      	movs	r0, #0
 8005cca:	4770      	bx	lr

08005ccc <ai_buffer_fmt_get_formats>:
 8005ccc:	4962      	ldr	r1, [pc, #392]	; (8005e58 <.text_24>)
 8005cce:	6001      	str	r1, [r0, #0]
 8005cd0:	200c      	movs	r0, #12
 8005cd2:	4770      	bx	lr

08005cd4 <ai_array_to_buffer_fmt>:
 8005cd4:	4601      	mov	r1, r0
 8005cd6:	2040      	movs	r0, #64	; 0x40
 8005cd8:	f3c1 4243 	ubfx	r2, r1, #17, #4
 8005cdc:	2a02      	cmp	r2, #2
 8005cde:	d104      	bne.n	8005cea <ai_array_to_buffer_fmt+0x16>
 8005ce0:	485e      	ldr	r0, [pc, #376]	; (8005e5c <.text_25>)
 8005ce2:	4008      	ands	r0, r1
 8005ce4:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 8005ce8:	e037      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005cea:	f021 427e 	bic.w	r2, r1, #4261412864	; 0xfe000000
 8005cee:	4b55      	ldr	r3, [pc, #340]	; (8005e44 <.text_19>)
 8005cf0:	1ad2      	subs	r2, r2, r3
 8005cf2:	d02d      	beq.n	8005d50 <ai_array_to_buffer_fmt+0x7c>
 8005cf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cf8:	1ad2      	subs	r2, r2, r3
 8005cfa:	d01b      	beq.n	8005d34 <ai_array_to_buffer_fmt+0x60>
 8005cfc:	1fd2      	subs	r2, r2, #7
 8005cfe:	d029      	beq.n	8005d54 <ai_array_to_buffer_fmt+0x80>
 8005d00:	f240 33f9 	movw	r3, #1017	; 0x3f9
 8005d04:	1ad2      	subs	r2, r2, r3
 8005d06:	d017      	beq.n	8005d38 <ai_array_to_buffer_fmt+0x64>
 8005d08:	3a0f      	subs	r2, #15
 8005d0a:	d025      	beq.n	8005d58 <ai_array_to_buffer_fmt+0x84>
 8005d0c:	4b50      	ldr	r3, [pc, #320]	; (8005e50 <.text_22>)
 8005d0e:	1ad2      	subs	r2, r2, r3
 8005d10:	d018      	beq.n	8005d44 <ai_array_to_buffer_fmt+0x70>
 8005d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d16:	1ad2      	subs	r2, r2, r3
 8005d18:	d010      	beq.n	8005d3c <ai_array_to_buffer_fmt+0x68>
 8005d1a:	1fd2      	subs	r2, r2, #7
 8005d1c:	d014      	beq.n	8005d48 <ai_array_to_buffer_fmt+0x74>
 8005d1e:	f240 33f9 	movw	r3, #1017	; 0x3f9
 8005d22:	1ad2      	subs	r2, r2, r3
 8005d24:	d00c      	beq.n	8005d40 <ai_array_to_buffer_fmt+0x6c>
 8005d26:	3a0f      	subs	r2, #15
 8005d28:	d010      	beq.n	8005d4c <ai_array_to_buffer_fmt+0x78>
 8005d2a:	4b4a      	ldr	r3, [pc, #296]	; (8005e54 <.text_23>)
 8005d2c:	1ad2      	subs	r2, r2, r3
 8005d2e:	d114      	bne.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d30:	484b      	ldr	r0, [pc, #300]	; (8005e60 <.text_26>)
 8005d32:	e012      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d34:	484b      	ldr	r0, [pc, #300]	; (8005e64 <.text_27>)
 8005d36:	e010      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d38:	484b      	ldr	r0, [pc, #300]	; (8005e68 <.text_28>)
 8005d3a:	e00e      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d3c:	484b      	ldr	r0, [pc, #300]	; (8005e6c <.text_29>)
 8005d3e:	e00c      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d40:	484b      	ldr	r0, [pc, #300]	; (8005e70 <.text_30>)
 8005d42:	e00a      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d44:	4840      	ldr	r0, [pc, #256]	; (8005e48 <.text_20>)
 8005d46:	e008      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d48:	484a      	ldr	r0, [pc, #296]	; (8005e74 <.text_31>)
 8005d4a:	e006      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d4c:	484a      	ldr	r0, [pc, #296]	; (8005e78 <.text_32>)
 8005d4e:	e004      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d50:	4618      	mov	r0, r3
 8005d52:	e002      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d54:	4849      	ldr	r0, [pc, #292]	; (8005e7c <.text_33>)
 8005d56:	e000      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d58:	4849      	ldr	r0, [pc, #292]	; (8005e80 <.text_34>)
 8005d5a:	004a      	lsls	r2, r1, #1
 8005d5c:	bf4c      	ite	mi
 8005d5e:	f04f 4280 	movmi.w	r2, #1073741824	; 0x40000000
 8005d62:	2200      	movpl	r2, #0
 8005d64:	4310      	orrs	r0, r2
 8005d66:	008a      	lsls	r2, r1, #2
 8005d68:	bf4c      	ite	mi
 8005d6a:	f04f 5200 	movmi.w	r2, #536870912	; 0x20000000
 8005d6e:	2200      	movpl	r2, #0
 8005d70:	4310      	orrs	r0, r2
 8005d72:	0109      	lsls	r1, r1, #4
 8005d74:	bf4c      	ite	mi
 8005d76:	f04f 6100 	movmi.w	r1, #134217728	; 0x8000000
 8005d7a:	2100      	movpl	r1, #0
 8005d7c:	4308      	orrs	r0, r1
 8005d7e:	4770      	bx	lr

08005d80 <ai_buffer_to_array_fmt>:
 8005d80:	4602      	mov	r2, r0
 8005d82:	f022 407e 	bic.w	r0, r2, #4261412864	; 0xfe000000
 8005d86:	3840      	subs	r0, #64	; 0x40
 8005d88:	d022      	beq.n	8005dd0 <ai_buffer_to_array_fmt+0x50>
 8005d8a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8005d8e:	1a40      	subs	r0, r0, r1
 8005d90:	d030      	beq.n	8005df4 <ai_buffer_to_array_fmt+0x74>
 8005d92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005d96:	1a40      	subs	r0, r0, r1
 8005d98:	d01e      	beq.n	8005dd8 <ai_buffer_to_array_fmt+0x58>
 8005d9a:	1fc0      	subs	r0, r0, #7
 8005d9c:	d02c      	beq.n	8005df8 <ai_buffer_to_array_fmt+0x78>
 8005d9e:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8005da2:	1a40      	subs	r0, r0, r1
 8005da4:	d01a      	beq.n	8005ddc <ai_buffer_to_array_fmt+0x5c>
 8005da6:	380f      	subs	r0, #15
 8005da8:	d028      	beq.n	8005dfc <ai_buffer_to_array_fmt+0x7c>
 8005daa:	4929      	ldr	r1, [pc, #164]	; (8005e50 <.text_22>)
 8005dac:	1a40      	subs	r0, r0, r1
 8005dae:	d01b      	beq.n	8005de8 <ai_buffer_to_array_fmt+0x68>
 8005db0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005db4:	1a40      	subs	r0, r0, r1
 8005db6:	d013      	beq.n	8005de0 <ai_buffer_to_array_fmt+0x60>
 8005db8:	1fc0      	subs	r0, r0, #7
 8005dba:	d017      	beq.n	8005dec <ai_buffer_to_array_fmt+0x6c>
 8005dbc:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8005dc0:	1a40      	subs	r0, r0, r1
 8005dc2:	d00f      	beq.n	8005de4 <ai_buffer_to_array_fmt+0x64>
 8005dc4:	380f      	subs	r0, #15
 8005dc6:	d013      	beq.n	8005df0 <ai_buffer_to_array_fmt+0x70>
 8005dc8:	4922      	ldr	r1, [pc, #136]	; (8005e54 <.text_23>)
 8005dca:	1a40      	subs	r0, r0, r1
 8005dcc:	d002      	beq.n	8005dd4 <ai_buffer_to_array_fmt+0x54>
 8005dce:	e017      	b.n	8005e00 <ai_buffer_to_array_fmt+0x80>
 8005dd0:	2040      	movs	r0, #64	; 0x40
 8005dd2:	e01f      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005dd4:	4822      	ldr	r0, [pc, #136]	; (8005e60 <.text_26>)
 8005dd6:	e01d      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005dd8:	4822      	ldr	r0, [pc, #136]	; (8005e64 <.text_27>)
 8005dda:	e01b      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005ddc:	4822      	ldr	r0, [pc, #136]	; (8005e68 <.text_28>)
 8005dde:	e019      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005de0:	4822      	ldr	r0, [pc, #136]	; (8005e6c <.text_29>)
 8005de2:	e017      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005de4:	4822      	ldr	r0, [pc, #136]	; (8005e70 <.text_30>)
 8005de6:	e015      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005de8:	4817      	ldr	r0, [pc, #92]	; (8005e48 <.text_20>)
 8005dea:	e013      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005dec:	4821      	ldr	r0, [pc, #132]	; (8005e74 <.text_31>)
 8005dee:	e011      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005df0:	4821      	ldr	r0, [pc, #132]	; (8005e78 <.text_32>)
 8005df2:	e00f      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005df4:	4813      	ldr	r0, [pc, #76]	; (8005e44 <.text_19>)
 8005df6:	e00d      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005df8:	4820      	ldr	r0, [pc, #128]	; (8005e7c <.text_33>)
 8005dfa:	e00b      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005dfc:	4820      	ldr	r0, [pc, #128]	; (8005e80 <.text_34>)
 8005dfe:	e009      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005e00:	f3c2 51c0 	ubfx	r1, r2, #23, #1
 8005e04:	f3c2 000d 	ubfx	r0, r2, #0, #14
 8005e08:	2900      	cmp	r1, #0
 8005e0a:	bf14      	ite	ne
 8005e0c:	f440 0004 	orrne.w	r0, r0, #8650752	; 0x840000
 8005e10:	f440 2080 	orreq.w	r0, r0, #262144	; 0x40000
 8005e14:	0051      	lsls	r1, r2, #1
 8005e16:	bf48      	it	mi
 8005e18:	f040 4080 	orrmi.w	r0, r0, #1073741824	; 0x40000000
 8005e1c:	0091      	lsls	r1, r2, #2
 8005e1e:	bf48      	it	mi
 8005e20:	f040 5000 	orrmi.w	r0, r0, #536870912	; 0x20000000
 8005e24:	0111      	lsls	r1, r2, #4
 8005e26:	bf48      	it	mi
 8005e28:	f040 6000 	orrmi.w	r0, r0, #134217728	; 0x8000000
 8005e2c:	4770      	bx	lr
	...

08005e30 <.text_14>:
 8005e30:	00000000 	.word	0x00000000

08005e34 <.text_15>:
 8005e34:	002be80f 	.word	0x002be80f

08005e38 <.text_16>:
 8005e38:	003bf7f1 	.word	0x003bf7f1

08005e3c <.text_17>:
 8005e3c:	00b9fff1 	.word	0x00b9fff1

08005e40 <.text_18>:
 8005e40:	004df000 	.word	0x004df000

08005e44 <.text_19>:
 8005e44:	00040040 	.word	0x00040040

08005e48 <.text_20>:
 8005e48:	00840040 	.word	0x00840040

08005e4c <.text_21>:
 8005e4c:	08018124 	.word	0x08018124

08005e50 <.text_22>:
 8005e50:	007ff7f1 	.word	0x007ff7f1

08005e54 <.text_23>:
 8005e54:	00fe07f1 	.word	0x00fe07f1

08005e58 <.text_24>:
 8005e58:	08018194 	.word	0x08018194

08005e5c <.text_25>:
 8005e5c:	00803fff 	.word	0x00803fff

08005e60 <.text_26>:
 8005e60:	01821040 	.word	0x01821040

08005e64 <.text_27>:
 8005e64:	00040440 	.word	0x00040440

08005e68 <.text_28>:
 8005e68:	00040840 	.word	0x00040840

08005e6c <.text_29>:
 8005e6c:	00840440 	.word	0x00840440

08005e70 <.text_30>:
 8005e70:	00840840 	.word	0x00840840

08005e74 <.text_31>:
 8005e74:	00840447 	.word	0x00840447

08005e78 <.text_32>:
 8005e78:	0084084f 	.word	0x0084084f

08005e7c <.text_33>:
 8005e7c:	00040447 	.word	0x00040447

08005e80 <.text_34>:
 8005e80:	0004084f 	.word	0x0004084f

08005e84 <ai_array_get_byte_size>:
 8005e84:	b909      	cbnz	r1, 8005e8a <ai_array_get_byte_size+0x6>
 8005e86:	2000      	movs	r0, #0
 8005e88:	4770      	bx	lr
 8005e8a:	11c2      	asrs	r2, r0, #7
 8005e8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e90:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8005e94:	189b      	adds	r3, r3, r2
 8005e96:	4359      	muls	r1, r3
 8005e98:	1dc9      	adds	r1, r1, #7
 8005e9a:	08c9      	lsrs	r1, r1, #3
 8005e9c:	1543      	asrs	r3, r0, #21
 8005e9e:	00c9      	lsls	r1, r1, #3
 8005ea0:	f003 0303 	and.w	r3, r3, #3
 8005ea4:	ea4f 4c60 	mov.w	ip, r0, asr #17
 8005ea8:	40d9      	lsrs	r1, r3
 8005eaa:	f00c 0c0f 	and.w	ip, ip, #15
 8005eae:	f1bc 0f04 	cmp.w	ip, #4
 8005eb2:	d00a      	beq.n	8005eca <ai_array_get_byte_size+0x46>
 8005eb4:	f1bc 0f08 	cmp.w	ip, #8
 8005eb8:	bf02      	ittt	eq
 8005eba:	f3c0 3082 	ubfxeq	r0, r0, #14, #3
 8005ebe:	1882      	addeq	r2, r0, r2
 8005ec0:	eb01 2102 	addeq.w	r1, r1, r2, lsl #8
 8005ec4:	1dc9      	adds	r1, r1, #7
 8005ec6:	08c8      	lsrs	r0, r1, #3
 8005ec8:	4770      	bx	lr
 8005eca:	f3c0 3082 	ubfx	r0, r0, #14, #3
 8005ece:	1882      	adds	r2, r0, r2
 8005ed0:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8005ed4:	1dc9      	adds	r1, r1, #7
 8005ed6:	08c8      	lsrs	r0, r1, #3
 8005ed8:	4770      	bx	lr

08005eda <ai_array_get_data_byte_size>:
 8005eda:	b909      	cbnz	r1, 8005ee0 <ai_array_get_data_byte_size+0x6>
 8005edc:	2000      	movs	r0, #0
 8005ede:	4770      	bx	lr
 8005ee0:	11c2      	asrs	r2, r0, #7
 8005ee2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ee6:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8005eea:	189a      	adds	r2, r3, r2
 8005eec:	4351      	muls	r1, r2
 8005eee:	1dc9      	adds	r1, r1, #7
 8005ef0:	08c9      	lsrs	r1, r1, #3
 8005ef2:	1540      	asrs	r0, r0, #21
 8005ef4:	00c9      	lsls	r1, r1, #3
 8005ef6:	f000 0003 	and.w	r0, r0, #3
 8005efa:	40c1      	lsrs	r1, r0
 8005efc:	1dc9      	adds	r1, r1, #7
 8005efe:	08c8      	lsrs	r0, r1, #3
 8005f00:	4770      	bx	lr

08005f02 <ai_array_get_elems_from_size>:
 8005f02:	b909      	cbnz	r1, 8005f08 <ai_array_get_elems_from_size+0x6>
 8005f04:	2000      	movs	r0, #0
 8005f06:	4770      	bx	lr
 8005f08:	1442      	asrs	r2, r0, #17
 8005f0a:	00c9      	lsls	r1, r1, #3
 8005f0c:	f002 020f 	and.w	r2, r2, #15
 8005f10:	2a04      	cmp	r2, #4
 8005f12:	d002      	beq.n	8005f1a <ai_array_get_elems_from_size+0x18>
 8005f14:	2a08      	cmp	r2, #8
 8005f16:	d009      	beq.n	8005f2c <ai_array_get_elems_from_size+0x2a>
 8005f18:	e010      	b.n	8005f3c <ai_array_get_elems_from_size+0x3a>
 8005f1a:	11c3      	asrs	r3, r0, #7
 8005f1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f20:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8005f24:	18d2      	adds	r2, r2, r3
 8005f26:	eba1 1102 	sub.w	r1, r1, r2, lsl #4
 8005f2a:	e007      	b.n	8005f3c <ai_array_get_elems_from_size+0x3a>
 8005f2c:	11c2      	asrs	r2, r0, #7
 8005f2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f32:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8005f36:	189a      	adds	r2, r3, r2
 8005f38:	eba1 2102 	sub.w	r1, r1, r2, lsl #8
 8005f3c:	1542      	asrs	r2, r0, #21
 8005f3e:	f002 0203 	and.w	r2, r2, #3
 8005f42:	4091      	lsls	r1, r2
 8005f44:	1dc9      	adds	r1, r1, #7
 8005f46:	11c2      	asrs	r2, r0, #7
 8005f48:	08c9      	lsrs	r1, r1, #3
 8005f4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f4e:	f3c0 3082 	ubfx	r0, r0, #14, #3
 8005f52:	00c9      	lsls	r1, r1, #3
 8005f54:	1880      	adds	r0, r0, r2
 8005f56:	fbb1 f0f0 	udiv	r0, r1, r0
 8005f5a:	4770      	bx	lr

08005f5c <.text_38>:
 8005f5c:	5f544d46 	.word	0x5f544d46
 8005f60:	454e4f4e 	.word	0x454e4f4e
 8005f64:	00          	.byte	0x00
 8005f65:	00          	.byte	0x00
	...

08005f68 <.text_39>:
 8005f68:	5f544d46 	.word	0x5f544d46
 8005f6c:	414f4c46 	.word	0x414f4c46
 8005f70:	0054      	.short	0x0054
	...

08005f74 <.text_40>:
 8005f74:	5f544d46 	.word	0x5f544d46
 8005f78:	414f4c46 	.word	0x414f4c46
 8005f7c:	00343654 	.word	0x00343654

08005f80 <.text_41>:
 8005f80:	5f544d46 	.word	0x5f544d46
 8005f84:	414f4c46 	.word	0x414f4c46
 8005f88:	00363154 	.word	0x00363154

08005f8c <.text_42>:
 8005f8c:	5f544d46 	.word	0x5f544d46
 8005f90:	00003855 	.word	0x00003855

08005f94 <.text_43>:
 8005f94:	5f544d46 	.word	0x5f544d46
 8005f98:	00363155 	.word	0x00363155

08005f9c <.text_44>:
 8005f9c:	5f544d46 	.word	0x5f544d46
 8005fa0:	00323355 	.word	0x00323355

08005fa4 <.text_45>:
 8005fa4:	5f544d46 	.word	0x5f544d46
 8005fa8:	00343655 	.word	0x00343655

08005fac <.text_46>:
 8005fac:	5f544d46 	.word	0x5f544d46
 8005fb0:	00003455 	.word	0x00003455

08005fb4 <.text_47>:
 8005fb4:	5f544d46 	.word	0x5f544d46
 8005fb8:	00003853 	.word	0x00003853

08005fbc <.text_48>:
 8005fbc:	5f544d46 	.word	0x5f544d46
 8005fc0:	00363153 	.word	0x00363153

08005fc4 <.text_49>:
 8005fc4:	5f544d46 	.word	0x5f544d46
 8005fc8:	00323353 	.word	0x00323353

08005fcc <.text_50>:
 8005fcc:	5f544d46 	.word	0x5f544d46
 8005fd0:	00343653 	.word	0x00343653

08005fd4 <.text_51>:
 8005fd4:	5f544d46 	.word	0x5f544d46
 8005fd8:	00003453 	.word	0x00003453

08005fdc <.text_52>:
 8005fdc:	5f544d46 	.word	0x5f544d46
 8005fe0:	0051      	.short	0x0051
	...

08005fe4 <.text_53>:
 8005fe4:	5f544d46 	.word	0x5f544d46
 8005fe8:	00003751 	.word	0x00003751

08005fec <.text_54>:
 8005fec:	5f544d46 	.word	0x5f544d46
 8005ff0:	00353151 	.word	0x00353151

08005ff4 <.text_55>:
 8005ff4:	5f544d46 	.word	0x5f544d46
 8005ff8:	00313351 	.word	0x00313351

08005ffc <.text_56>:
 8005ffc:	5f544d46 	.word	0x5f544d46
 8006000:	00005155 	.word	0x00005155

08006004 <.text_57>:
 8006004:	5f544d46 	.word	0x5f544d46
 8006008:	00375155 	.word	0x00375155

0800600c <.text_58>:
 800600c:	5f544d46 	.word	0x5f544d46
 8006010:	35315155 	.word	0x35315155
 8006014:	00          	.byte	0x00
 8006015:	00          	.byte	0x00
	...

08006018 <.text_59>:
 8006018:	5f544d46 	.word	0x5f544d46
 800601c:	31335155 	.word	0x31335155
 8006020:	00          	.byte	0x00
 8006021:	00          	.byte	0x00
	...

08006024 <.text_60>:
 8006024:	5f544d46 	.word	0x5f544d46
 8006028:	3454554c 	.word	0x3454554c
 800602c:	4f4c465f 	.word	0x4f4c465f
 8006030:	00005441 	.word	0x00005441

08006034 <.text_61>:
 8006034:	5f544d46 	.word	0x5f544d46
 8006038:	3854554c 	.word	0x3854554c
 800603c:	4f4c465f 	.word	0x4f4c465f
 8006040:	00005441 	.word	0x00005441

08006044 <.text_62>:
 8006044:	5f544d46 	.word	0x5f544d46
 8006048:	3454554c 	.word	0x3454554c
 800604c:	3531515f 	.word	0x3531515f
 8006050:	00          	.byte	0x00
 8006051:	00          	.byte	0x00
	...

08006054 <.text_63>:
 8006054:	5f544d46 	.word	0x5f544d46
 8006058:	3854554c 	.word	0x3854554c
 800605c:	3531515f 	.word	0x3531515f
 8006060:	00          	.byte	0x00
 8006061:	00          	.byte	0x00
	...

08006064 <.text_64>:
 8006064:	5f544d46 	.word	0x5f544d46
 8006068:	3454554c 	.word	0x3454554c
 800606c:	3151555f 	.word	0x3151555f
 8006070:	0035      	.short	0x0035
	...

08006074 <.text_65>:
 8006074:	5f544d46 	.word	0x5f544d46
 8006078:	3854554c 	.word	0x3854554c
 800607c:	3151555f 	.word	0x3151555f
 8006080:	0035      	.short	0x0035
	...

08006084 <.text_66>:
 8006084:	415f4941 	.word	0x415f4941
 8006088:	59415252 	.word	0x59415252
 800608c:	524f465f 	.word	0x524f465f
 8006090:	5f54414d 	.word	0x5f54414d
 8006094:	454e4f4e 	.word	0x454e4f4e
 8006098:	00          	.byte	0x00
 8006099:	00          	.byte	0x00
	...

0800609c <.text_67>:
 800609c:	415f4941 	.word	0x415f4941
 80060a0:	59415252 	.word	0x59415252
 80060a4:	524f465f 	.word	0x524f465f
 80060a8:	5f54414d 	.word	0x5f54414d
 80060ac:	0051      	.short	0x0051
	...

080060b0 <.text_68>:
 80060b0:	415f4941 	.word	0x415f4941
 80060b4:	59415252 	.word	0x59415252
 80060b8:	524f465f 	.word	0x524f465f
 80060bc:	5f54414d 	.word	0x5f54414d
 80060c0:	00005155 	.word	0x00005155

080060c4 <.text_69>:
 80060c4:	425f4941 	.word	0x425f4941
 80060c8:	45464655 	.word	0x45464655
 80060cc:	4f465f52 	.word	0x4f465f52
 80060d0:	54414d52 	.word	0x54414d52
 80060d4:	4e4f4e5f 	.word	0x4e4f4e5f
 80060d8:	0045      	.short	0x0045
	...

080060dc <.text_70>:
 80060dc:	425f4941 	.word	0x425f4941
 80060e0:	45464655 	.word	0x45464655
 80060e4:	4f465f52 	.word	0x4f465f52
 80060e8:	54414d52 	.word	0x54414d52
 80060ec:	0000515f 	.word	0x0000515f

080060f0 <.text_71>:
 80060f0:	425f4941 	.word	0x425f4941
 80060f4:	45464655 	.word	0x45464655
 80060f8:	4f465f52 	.word	0x4f465f52
 80060fc:	54414d52 	.word	0x54414d52
 8006100:	0051555f 	.word	0x0051555f

08006104 <ai_math_sqrt>:
 8006104:	eef0 0a40 	vmov.f32	s1, s0
 8006108:	eef5 0a40 	vcmp.f32	s1, #0.0
 800610c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006110:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80061b8 <.text_12>
 8006114:	db01      	blt.n	800611a <ai_math_sqrt+0x16>
 8006116:	eeb1 0ae0 	vsqrt.f32	s0, s1
 800611a:	4770      	bx	lr

0800611c <ai_math_exp>:
 800611c:	f00f bf26 	b.w	8015f6c <expf>

08006120 <ai_math_pow>:
 8006120:	f00f bfa8 	b.w	8016074 <powf>

08006124 <ai_math_tanh>:
 8006124:	f00f be00 	b.w	8015d28 <tanhf>

08006128 <ai_math_cosh>:
 8006128:	f00f bef8 	b.w	8015f1c <coshf>

0800612c <ai_math_relu>:
 800612c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006134:	bf48      	it	mi
 8006136:	ed9f 0a20 	vldrmi	s0, [pc, #128]	; 80061b8 <.text_12>
 800613a:	4770      	bx	lr

0800613c <ai_math_prelu>:
 800613c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006144:	bf48      	it	mi
 8006146:	ee20 0a20 	vmulmi.f32	s0, s0, s1
 800614a:	4770      	bx	lr

0800614c <ai_math_sigmoid>:
 800614c:	b500      	push	{lr}
 800614e:	b081      	sub	sp, #4
 8006150:	eeb1 0a40 	vneg.f32	s0, s0
 8006154:	f00f ff0a 	bl	8015f6c <expf>
 8006158:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800615c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8006160:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8006164:	ee81 0a00 	vdiv.f32	s0, s2, s0
 8006168:	b001      	add	sp, #4
 800616a:	bd00      	pop	{pc}

0800616c <ai_math_hard_sigmoid>:
 800616c:	eef0 0a40 	vmov.f32	s1, s0
 8006170:	ed9f 1a12 	vldr	s2, [pc, #72]	; 80061bc <.text_13>
 8006174:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8006178:	ee00 0a81 	vmla.f32	s0, s1, s2
 800617c:	eddf 0a10 	vldr	s1, [pc, #64]	; 80061c0 <.text_14>
 8006180:	eeb4 0a60 	vcmp.f32	s0, s1
 8006184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006188:	da07      	bge.n	800619a <ai_math_hard_sigmoid+0x2e>
 800618a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800618e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006192:	d504      	bpl.n	800619e <ai_math_hard_sigmoid+0x32>
 8006194:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80061b8 <.text_12>
 8006198:	4770      	bx	lr
 800619a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800619e:	4770      	bx	lr

080061a0 <ai_math_sign>:
 80061a0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80061a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061a8:	bfcc      	ite	gt
 80061aa:	ed9f 0a06 	vldrgt	s0, [pc, #24]	; 80061c4 <.text_15>
 80061ae:	ed9f 0a06 	vldrle	s0, [pc, #24]	; 80061c8 <.text_16>
 80061b2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80061b6:	4770      	bx	lr

080061b8 <.text_12>:
 80061b8:	00000000 	.word	0x00000000

080061bc <.text_13>:
 80061bc:	3e4ccccd 	.word	0x3e4ccccd

080061c0 <.text_14>:
 80061c0:	3f800001 	.word	0x3f800001

080061c4 <.text_15>:
 80061c4:	00000001 	.word	0x00000001

080061c8 <.text_16>:
 80061c8:	ffffffff 	.word	0xffffffff

080061cc <ai_div>:
 80061cc:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80061d0:	4770      	bx	lr

080061d2 <ai_floor_div>:
 80061d2:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80061d6:	f00f bbd1 	b.w	801597c <floorf>

080061da <ai_floor_mod>:
 80061da:	f00f befd 	b.w	8015fd8 <fmodf>

080061de <ai_max>:
 80061de:	eef4 0a40 	vcmp.f32	s1, s0
 80061e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061e6:	bf58      	it	pl
 80061e8:	eeb0 0a60 	vmovpl.f32	s0, s1
 80061ec:	4770      	bx	lr

080061ee <ai_min>:
 80061ee:	eeb4 0a60 	vcmp.f32	s0, s1
 80061f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f6:	bf58      	it	pl
 80061f8:	eeb0 0a60 	vmovpl.f32	s0, s1
 80061fc:	4770      	bx	lr

080061fe <ai_mul>:
 80061fe:	ee20 0a20 	vmul.f32	s0, s0, s1
 8006202:	4770      	bx	lr

08006204 <ai_sub>:
 8006204:	ee30 0a60 	vsub.f32	s0, s0, s1
 8006208:	4770      	bx	lr

0800620a <ai_sum>:
 800620a:	ee30 0a20 	vadd.f32	s0, s0, s1
 800620e:	4770      	bx	lr

08006210 <arm_mat_init_f32>:
 8006210:	8001      	strh	r1, [r0, #0]
 8006212:	8042      	strh	r2, [r0, #2]
 8006214:	6043      	str	r3, [r0, #4]
 8006216:	4770      	bx	lr

08006218 <__aeabi_memset>:
 8006218:	b470      	push	{r4, r5, r6}
 800621a:	0784      	lsls	r4, r0, #30
 800621c:	d046      	beq.n	80062ac <__aeabi_memset+0x94>
 800621e:	1e4c      	subs	r4, r1, #1
 8006220:	2900      	cmp	r1, #0
 8006222:	d041      	beq.n	80062a8 <__aeabi_memset+0x90>
 8006224:	b2d5      	uxtb	r5, r2
 8006226:	4603      	mov	r3, r0
 8006228:	e002      	b.n	8006230 <__aeabi_memset+0x18>
 800622a:	1e61      	subs	r1, r4, #1
 800622c:	b3e4      	cbz	r4, 80062a8 <__aeabi_memset+0x90>
 800622e:	460c      	mov	r4, r1
 8006230:	f803 5b01 	strb.w	r5, [r3], #1
 8006234:	0799      	lsls	r1, r3, #30
 8006236:	d1f8      	bne.n	800622a <__aeabi_memset+0x12>
 8006238:	2c03      	cmp	r4, #3
 800623a:	d92e      	bls.n	800629a <__aeabi_memset+0x82>
 800623c:	b2d5      	uxtb	r5, r2
 800623e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8006242:	2c0f      	cmp	r4, #15
 8006244:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8006248:	d919      	bls.n	800627e <__aeabi_memset+0x66>
 800624a:	4626      	mov	r6, r4
 800624c:	f103 0110 	add.w	r1, r3, #16
 8006250:	3e10      	subs	r6, #16
 8006252:	2e0f      	cmp	r6, #15
 8006254:	f841 5c10 	str.w	r5, [r1, #-16]
 8006258:	f841 5c0c 	str.w	r5, [r1, #-12]
 800625c:	f841 5c08 	str.w	r5, [r1, #-8]
 8006260:	f841 5c04 	str.w	r5, [r1, #-4]
 8006264:	f101 0110 	add.w	r1, r1, #16
 8006268:	d8f2      	bhi.n	8006250 <__aeabi_memset+0x38>
 800626a:	f1a4 0110 	sub.w	r1, r4, #16
 800626e:	f021 010f 	bic.w	r1, r1, #15
 8006272:	f004 040f 	and.w	r4, r4, #15
 8006276:	3110      	adds	r1, #16
 8006278:	2c03      	cmp	r4, #3
 800627a:	440b      	add	r3, r1
 800627c:	d90d      	bls.n	800629a <__aeabi_memset+0x82>
 800627e:	461e      	mov	r6, r3
 8006280:	4621      	mov	r1, r4
 8006282:	3904      	subs	r1, #4
 8006284:	2903      	cmp	r1, #3
 8006286:	f846 5b04 	str.w	r5, [r6], #4
 800628a:	d8fa      	bhi.n	8006282 <__aeabi_memset+0x6a>
 800628c:	1f21      	subs	r1, r4, #4
 800628e:	f021 0103 	bic.w	r1, r1, #3
 8006292:	3104      	adds	r1, #4
 8006294:	440b      	add	r3, r1
 8006296:	f004 0403 	and.w	r4, r4, #3
 800629a:	b12c      	cbz	r4, 80062a8 <__aeabi_memset+0x90>
 800629c:	b2d2      	uxtb	r2, r2
 800629e:	441c      	add	r4, r3
 80062a0:	f803 2b01 	strb.w	r2, [r3], #1
 80062a4:	42a3      	cmp	r3, r4
 80062a6:	d1fb      	bne.n	80062a0 <__aeabi_memset+0x88>
 80062a8:	bc70      	pop	{r4, r5, r6}
 80062aa:	4770      	bx	lr
 80062ac:	460c      	mov	r4, r1
 80062ae:	4603      	mov	r3, r0
 80062b0:	e7c2      	b.n	8006238 <__aeabi_memset+0x20>

080062b2 <strlen>:
 80062b2:	4603      	mov	r3, r0
 80062b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062b8:	2a00      	cmp	r2, #0
 80062ba:	d1fb      	bne.n	80062b4 <strlen+0x2>
 80062bc:	1a18      	subs	r0, r3, r0
 80062be:	3801      	subs	r0, #1
 80062c0:	4770      	bx	lr
	...

080062d0 <memchr>:
 80062d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80062d4:	2a10      	cmp	r2, #16
 80062d6:	db2b      	blt.n	8006330 <memchr+0x60>
 80062d8:	f010 0f07 	tst.w	r0, #7
 80062dc:	d008      	beq.n	80062f0 <memchr+0x20>
 80062de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80062e2:	3a01      	subs	r2, #1
 80062e4:	428b      	cmp	r3, r1
 80062e6:	d02d      	beq.n	8006344 <memchr+0x74>
 80062e8:	f010 0f07 	tst.w	r0, #7
 80062ec:	b342      	cbz	r2, 8006340 <memchr+0x70>
 80062ee:	d1f6      	bne.n	80062de <memchr+0xe>
 80062f0:	b4f0      	push	{r4, r5, r6, r7}
 80062f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80062f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80062fa:	f022 0407 	bic.w	r4, r2, #7
 80062fe:	f07f 0700 	mvns.w	r7, #0
 8006302:	2300      	movs	r3, #0
 8006304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8006308:	3c08      	subs	r4, #8
 800630a:	ea85 0501 	eor.w	r5, r5, r1
 800630e:	ea86 0601 	eor.w	r6, r6, r1
 8006312:	fa85 f547 	uadd8	r5, r5, r7
 8006316:	faa3 f587 	sel	r5, r3, r7
 800631a:	fa86 f647 	uadd8	r6, r6, r7
 800631e:	faa5 f687 	sel	r6, r5, r7
 8006322:	b98e      	cbnz	r6, 8006348 <memchr+0x78>
 8006324:	d1ee      	bne.n	8006304 <memchr+0x34>
 8006326:	bcf0      	pop	{r4, r5, r6, r7}
 8006328:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800632c:	f002 0207 	and.w	r2, r2, #7
 8006330:	b132      	cbz	r2, 8006340 <memchr+0x70>
 8006332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006336:	3a01      	subs	r2, #1
 8006338:	ea83 0301 	eor.w	r3, r3, r1
 800633c:	b113      	cbz	r3, 8006344 <memchr+0x74>
 800633e:	d1f8      	bne.n	8006332 <memchr+0x62>
 8006340:	2000      	movs	r0, #0
 8006342:	4770      	bx	lr
 8006344:	3801      	subs	r0, #1
 8006346:	4770      	bx	lr
 8006348:	2d00      	cmp	r5, #0
 800634a:	bf06      	itte	eq
 800634c:	4635      	moveq	r5, r6
 800634e:	3803      	subeq	r0, #3
 8006350:	3807      	subne	r0, #7
 8006352:	f015 0f01 	tst.w	r5, #1
 8006356:	d107      	bne.n	8006368 <memchr+0x98>
 8006358:	3001      	adds	r0, #1
 800635a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800635e:	bf02      	ittt	eq
 8006360:	3001      	addeq	r0, #1
 8006362:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8006366:	3001      	addeq	r0, #1
 8006368:	bcf0      	pop	{r4, r5, r6, r7}
 800636a:	3801      	subs	r0, #1
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop

08006370 <__aeabi_drsub>:
 8006370:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006374:	e002      	b.n	800637c <__adddf3>
 8006376:	bf00      	nop

08006378 <__aeabi_dsub>:
 8006378:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800637c <__adddf3>:
 800637c:	b530      	push	{r4, r5, lr}
 800637e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006382:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8006386:	ea94 0f05 	teq	r4, r5
 800638a:	bf08      	it	eq
 800638c:	ea90 0f02 	teqeq	r0, r2
 8006390:	bf1f      	itttt	ne
 8006392:	ea54 0c00 	orrsne.w	ip, r4, r0
 8006396:	ea55 0c02 	orrsne.w	ip, r5, r2
 800639a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800639e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80063a2:	f000 80e2 	beq.w	800656a <__adddf3+0x1ee>
 80063a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80063aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80063ae:	bfb8      	it	lt
 80063b0:	426d      	neglt	r5, r5
 80063b2:	dd0c      	ble.n	80063ce <__adddf3+0x52>
 80063b4:	442c      	add	r4, r5
 80063b6:	ea80 0202 	eor.w	r2, r0, r2
 80063ba:	ea81 0303 	eor.w	r3, r1, r3
 80063be:	ea82 0000 	eor.w	r0, r2, r0
 80063c2:	ea83 0101 	eor.w	r1, r3, r1
 80063c6:	ea80 0202 	eor.w	r2, r0, r2
 80063ca:	ea81 0303 	eor.w	r3, r1, r3
 80063ce:	2d36      	cmp	r5, #54	; 0x36
 80063d0:	bf88      	it	hi
 80063d2:	bd30      	pophi	{r4, r5, pc}
 80063d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80063d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80063dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80063e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80063e4:	d002      	beq.n	80063ec <__adddf3+0x70>
 80063e6:	4240      	negs	r0, r0
 80063e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80063ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80063f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80063f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80063f8:	d002      	beq.n	8006400 <__adddf3+0x84>
 80063fa:	4252      	negs	r2, r2
 80063fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006400:	ea94 0f05 	teq	r4, r5
 8006404:	f000 80a7 	beq.w	8006556 <__adddf3+0x1da>
 8006408:	f1a4 0401 	sub.w	r4, r4, #1
 800640c:	f1d5 0e20 	rsbs	lr, r5, #32
 8006410:	db0d      	blt.n	800642e <__adddf3+0xb2>
 8006412:	fa02 fc0e 	lsl.w	ip, r2, lr
 8006416:	fa22 f205 	lsr.w	r2, r2, r5
 800641a:	1880      	adds	r0, r0, r2
 800641c:	f141 0100 	adc.w	r1, r1, #0
 8006420:	fa03 f20e 	lsl.w	r2, r3, lr
 8006424:	1880      	adds	r0, r0, r2
 8006426:	fa43 f305 	asr.w	r3, r3, r5
 800642a:	4159      	adcs	r1, r3
 800642c:	e00e      	b.n	800644c <__adddf3+0xd0>
 800642e:	f1a5 0520 	sub.w	r5, r5, #32
 8006432:	f10e 0e20 	add.w	lr, lr, #32
 8006436:	2a01      	cmp	r2, #1
 8006438:	fa03 fc0e 	lsl.w	ip, r3, lr
 800643c:	bf28      	it	cs
 800643e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006442:	fa43 f305 	asr.w	r3, r3, r5
 8006446:	18c0      	adds	r0, r0, r3
 8006448:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800644c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006450:	d507      	bpl.n	8006462 <__adddf3+0xe6>
 8006452:	f04f 0e00 	mov.w	lr, #0
 8006456:	f1dc 0c00 	rsbs	ip, ip, #0
 800645a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800645e:	eb6e 0101 	sbc.w	r1, lr, r1
 8006462:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006466:	d31b      	bcc.n	80064a0 <__adddf3+0x124>
 8006468:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800646c:	d30c      	bcc.n	8006488 <__adddf3+0x10c>
 800646e:	0849      	lsrs	r1, r1, #1
 8006470:	ea5f 0030 	movs.w	r0, r0, rrx
 8006474:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006478:	f104 0401 	add.w	r4, r4, #1
 800647c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006480:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006484:	f080 809a 	bcs.w	80065bc <__adddf3+0x240>
 8006488:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800648c:	bf08      	it	eq
 800648e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006492:	f150 0000 	adcs.w	r0, r0, #0
 8006496:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800649a:	ea41 0105 	orr.w	r1, r1, r5
 800649e:	bd30      	pop	{r4, r5, pc}
 80064a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80064a4:	4140      	adcs	r0, r0
 80064a6:	eb41 0101 	adc.w	r1, r1, r1
 80064aa:	3c01      	subs	r4, #1
 80064ac:	bf28      	it	cs
 80064ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80064b2:	d2e9      	bcs.n	8006488 <__adddf3+0x10c>
 80064b4:	f091 0f00 	teq	r1, #0
 80064b8:	bf04      	itt	eq
 80064ba:	4601      	moveq	r1, r0
 80064bc:	2000      	moveq	r0, #0
 80064be:	fab1 f381 	clz	r3, r1
 80064c2:	bf08      	it	eq
 80064c4:	3320      	addeq	r3, #32
 80064c6:	f1a3 030b 	sub.w	r3, r3, #11
 80064ca:	f1b3 0220 	subs.w	r2, r3, #32
 80064ce:	da0c      	bge.n	80064ea <__adddf3+0x16e>
 80064d0:	320c      	adds	r2, #12
 80064d2:	dd08      	ble.n	80064e6 <__adddf3+0x16a>
 80064d4:	f102 0c14 	add.w	ip, r2, #20
 80064d8:	f1c2 020c 	rsb	r2, r2, #12
 80064dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80064e0:	fa21 f102 	lsr.w	r1, r1, r2
 80064e4:	e00c      	b.n	8006500 <__adddf3+0x184>
 80064e6:	f102 0214 	add.w	r2, r2, #20
 80064ea:	bfd8      	it	le
 80064ec:	f1c2 0c20 	rsble	ip, r2, #32
 80064f0:	fa01 f102 	lsl.w	r1, r1, r2
 80064f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80064f8:	bfdc      	itt	le
 80064fa:	ea41 010c 	orrle.w	r1, r1, ip
 80064fe:	4090      	lslle	r0, r2
 8006500:	1ae4      	subs	r4, r4, r3
 8006502:	bfa2      	ittt	ge
 8006504:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006508:	4329      	orrge	r1, r5
 800650a:	bd30      	popge	{r4, r5, pc}
 800650c:	ea6f 0404 	mvn.w	r4, r4
 8006510:	3c1f      	subs	r4, #31
 8006512:	da1c      	bge.n	800654e <__adddf3+0x1d2>
 8006514:	340c      	adds	r4, #12
 8006516:	dc0e      	bgt.n	8006536 <__adddf3+0x1ba>
 8006518:	f104 0414 	add.w	r4, r4, #20
 800651c:	f1c4 0220 	rsb	r2, r4, #32
 8006520:	fa20 f004 	lsr.w	r0, r0, r4
 8006524:	fa01 f302 	lsl.w	r3, r1, r2
 8006528:	ea40 0003 	orr.w	r0, r0, r3
 800652c:	fa21 f304 	lsr.w	r3, r1, r4
 8006530:	ea45 0103 	orr.w	r1, r5, r3
 8006534:	bd30      	pop	{r4, r5, pc}
 8006536:	f1c4 040c 	rsb	r4, r4, #12
 800653a:	f1c4 0220 	rsb	r2, r4, #32
 800653e:	fa20 f002 	lsr.w	r0, r0, r2
 8006542:	fa01 f304 	lsl.w	r3, r1, r4
 8006546:	ea40 0003 	orr.w	r0, r0, r3
 800654a:	4629      	mov	r1, r5
 800654c:	bd30      	pop	{r4, r5, pc}
 800654e:	fa21 f004 	lsr.w	r0, r1, r4
 8006552:	4629      	mov	r1, r5
 8006554:	bd30      	pop	{r4, r5, pc}
 8006556:	f094 0f00 	teq	r4, #0
 800655a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800655e:	bf06      	itte	eq
 8006560:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006564:	3401      	addeq	r4, #1
 8006566:	3d01      	subne	r5, #1
 8006568:	e74e      	b.n	8006408 <__adddf3+0x8c>
 800656a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800656e:	bf18      	it	ne
 8006570:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006574:	d029      	beq.n	80065ca <__adddf3+0x24e>
 8006576:	ea94 0f05 	teq	r4, r5
 800657a:	bf08      	it	eq
 800657c:	ea90 0f02 	teqeq	r0, r2
 8006580:	d005      	beq.n	800658e <__adddf3+0x212>
 8006582:	ea54 0c00 	orrs.w	ip, r4, r0
 8006586:	bf04      	itt	eq
 8006588:	4619      	moveq	r1, r3
 800658a:	4610      	moveq	r0, r2
 800658c:	bd30      	pop	{r4, r5, pc}
 800658e:	ea91 0f03 	teq	r1, r3
 8006592:	bf1e      	ittt	ne
 8006594:	2100      	movne	r1, #0
 8006596:	2000      	movne	r0, #0
 8006598:	bd30      	popne	{r4, r5, pc}
 800659a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800659e:	d105      	bne.n	80065ac <__adddf3+0x230>
 80065a0:	0040      	lsls	r0, r0, #1
 80065a2:	4149      	adcs	r1, r1
 80065a4:	bf28      	it	cs
 80065a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80065aa:	bd30      	pop	{r4, r5, pc}
 80065ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80065b0:	bf3c      	itt	cc
 80065b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80065b6:	bd30      	popcc	{r4, r5, pc}
 80065b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80065bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80065c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80065c4:	f04f 0000 	mov.w	r0, #0
 80065c8:	bd30      	pop	{r4, r5, pc}
 80065ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80065ce:	bf1a      	itte	ne
 80065d0:	4619      	movne	r1, r3
 80065d2:	4610      	movne	r0, r2
 80065d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80065d8:	bf1c      	itt	ne
 80065da:	460b      	movne	r3, r1
 80065dc:	4602      	movne	r2, r0
 80065de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80065e2:	bf06      	itte	eq
 80065e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80065e8:	ea91 0f03 	teqeq	r1, r3
 80065ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80065f0:	bd30      	pop	{r4, r5, pc}
 80065f2:	bf00      	nop

080065f4 <__aeabi_ui2d>:
 80065f4:	f090 0f00 	teq	r0, #0
 80065f8:	bf04      	itt	eq
 80065fa:	2100      	moveq	r1, #0
 80065fc:	4770      	bxeq	lr
 80065fe:	b530      	push	{r4, r5, lr}
 8006600:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006604:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006608:	f04f 0500 	mov.w	r5, #0
 800660c:	f04f 0100 	mov.w	r1, #0
 8006610:	e750      	b.n	80064b4 <__adddf3+0x138>
 8006612:	bf00      	nop

08006614 <__aeabi_i2d>:
 8006614:	f090 0f00 	teq	r0, #0
 8006618:	bf04      	itt	eq
 800661a:	2100      	moveq	r1, #0
 800661c:	4770      	bxeq	lr
 800661e:	b530      	push	{r4, r5, lr}
 8006620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006628:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800662c:	bf48      	it	mi
 800662e:	4240      	negmi	r0, r0
 8006630:	f04f 0100 	mov.w	r1, #0
 8006634:	e73e      	b.n	80064b4 <__adddf3+0x138>
 8006636:	bf00      	nop

08006638 <__aeabi_f2d>:
 8006638:	0042      	lsls	r2, r0, #1
 800663a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800663e:	ea4f 0131 	mov.w	r1, r1, rrx
 8006642:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8006646:	bf1f      	itttt	ne
 8006648:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800664c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006650:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8006654:	4770      	bxne	lr
 8006656:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800665a:	bf08      	it	eq
 800665c:	4770      	bxeq	lr
 800665e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8006662:	bf04      	itt	eq
 8006664:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8006668:	4770      	bxeq	lr
 800666a:	b530      	push	{r4, r5, lr}
 800666c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8006670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006678:	e71c      	b.n	80064b4 <__adddf3+0x138>
 800667a:	bf00      	nop

0800667c <__aeabi_ul2d>:
 800667c:	ea50 0201 	orrs.w	r2, r0, r1
 8006680:	bf08      	it	eq
 8006682:	4770      	bxeq	lr
 8006684:	b530      	push	{r4, r5, lr}
 8006686:	f04f 0500 	mov.w	r5, #0
 800668a:	e00a      	b.n	80066a2 <__aeabi_l2d+0x16>

0800668c <__aeabi_l2d>:
 800668c:	ea50 0201 	orrs.w	r2, r0, r1
 8006690:	bf08      	it	eq
 8006692:	4770      	bxeq	lr
 8006694:	b530      	push	{r4, r5, lr}
 8006696:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800669a:	d502      	bpl.n	80066a2 <__aeabi_l2d+0x16>
 800669c:	4240      	negs	r0, r0
 800669e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80066a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80066a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80066aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80066ae:	f43f aed8 	beq.w	8006462 <__adddf3+0xe6>
 80066b2:	f04f 0203 	mov.w	r2, #3
 80066b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80066ba:	bf18      	it	ne
 80066bc:	3203      	addne	r2, #3
 80066be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80066c2:	bf18      	it	ne
 80066c4:	3203      	addne	r2, #3
 80066c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80066ca:	f1c2 0320 	rsb	r3, r2, #32
 80066ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80066d2:	fa20 f002 	lsr.w	r0, r0, r2
 80066d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80066da:	ea40 000e 	orr.w	r0, r0, lr
 80066de:	fa21 f102 	lsr.w	r1, r1, r2
 80066e2:	4414      	add	r4, r2
 80066e4:	e6bd      	b.n	8006462 <__adddf3+0xe6>
 80066e6:	bf00      	nop

080066e8 <__aeabi_dmul>:
 80066e8:	b570      	push	{r4, r5, r6, lr}
 80066ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80066ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80066f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80066f6:	bf1d      	ittte	ne
 80066f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80066fc:	ea94 0f0c 	teqne	r4, ip
 8006700:	ea95 0f0c 	teqne	r5, ip
 8006704:	f000 f8de 	bleq	80068c4 <__aeabi_dmul+0x1dc>
 8006708:	442c      	add	r4, r5
 800670a:	ea81 0603 	eor.w	r6, r1, r3
 800670e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8006712:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8006716:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800671a:	bf18      	it	ne
 800671c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8006720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006728:	d038      	beq.n	800679c <__aeabi_dmul+0xb4>
 800672a:	fba0 ce02 	umull	ip, lr, r0, r2
 800672e:	f04f 0500 	mov.w	r5, #0
 8006732:	fbe1 e502 	umlal	lr, r5, r1, r2
 8006736:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800673a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800673e:	f04f 0600 	mov.w	r6, #0
 8006742:	fbe1 5603 	umlal	r5, r6, r1, r3
 8006746:	f09c 0f00 	teq	ip, #0
 800674a:	bf18      	it	ne
 800674c:	f04e 0e01 	orrne.w	lr, lr, #1
 8006750:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8006754:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006758:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800675c:	d204      	bcs.n	8006768 <__aeabi_dmul+0x80>
 800675e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8006762:	416d      	adcs	r5, r5
 8006764:	eb46 0606 	adc.w	r6, r6, r6
 8006768:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800676c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8006770:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8006774:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8006778:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800677c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006780:	bf88      	it	hi
 8006782:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006786:	d81e      	bhi.n	80067c6 <__aeabi_dmul+0xde>
 8006788:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800678c:	bf08      	it	eq
 800678e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8006792:	f150 0000 	adcs.w	r0, r0, #0
 8006796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800679a:	bd70      	pop	{r4, r5, r6, pc}
 800679c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80067a0:	ea46 0101 	orr.w	r1, r6, r1
 80067a4:	ea40 0002 	orr.w	r0, r0, r2
 80067a8:	ea81 0103 	eor.w	r1, r1, r3
 80067ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80067b0:	bfc2      	ittt	gt
 80067b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80067b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80067ba:	bd70      	popgt	{r4, r5, r6, pc}
 80067bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80067c0:	f04f 0e00 	mov.w	lr, #0
 80067c4:	3c01      	subs	r4, #1
 80067c6:	f300 80ab 	bgt.w	8006920 <__aeabi_dmul+0x238>
 80067ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80067ce:	bfde      	ittt	le
 80067d0:	2000      	movle	r0, #0
 80067d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80067d6:	bd70      	pople	{r4, r5, r6, pc}
 80067d8:	f1c4 0400 	rsb	r4, r4, #0
 80067dc:	3c20      	subs	r4, #32
 80067de:	da35      	bge.n	800684c <__aeabi_dmul+0x164>
 80067e0:	340c      	adds	r4, #12
 80067e2:	dc1b      	bgt.n	800681c <__aeabi_dmul+0x134>
 80067e4:	f104 0414 	add.w	r4, r4, #20
 80067e8:	f1c4 0520 	rsb	r5, r4, #32
 80067ec:	fa00 f305 	lsl.w	r3, r0, r5
 80067f0:	fa20 f004 	lsr.w	r0, r0, r4
 80067f4:	fa01 f205 	lsl.w	r2, r1, r5
 80067f8:	ea40 0002 	orr.w	r0, r0, r2
 80067fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8006800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006804:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006808:	fa21 f604 	lsr.w	r6, r1, r4
 800680c:	eb42 0106 	adc.w	r1, r2, r6
 8006810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006814:	bf08      	it	eq
 8006816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800681a:	bd70      	pop	{r4, r5, r6, pc}
 800681c:	f1c4 040c 	rsb	r4, r4, #12
 8006820:	f1c4 0520 	rsb	r5, r4, #32
 8006824:	fa00 f304 	lsl.w	r3, r0, r4
 8006828:	fa20 f005 	lsr.w	r0, r0, r5
 800682c:	fa01 f204 	lsl.w	r2, r1, r4
 8006830:	ea40 0002 	orr.w	r0, r0, r2
 8006834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800683c:	f141 0100 	adc.w	r1, r1, #0
 8006840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006844:	bf08      	it	eq
 8006846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800684a:	bd70      	pop	{r4, r5, r6, pc}
 800684c:	f1c4 0520 	rsb	r5, r4, #32
 8006850:	fa00 f205 	lsl.w	r2, r0, r5
 8006854:	ea4e 0e02 	orr.w	lr, lr, r2
 8006858:	fa20 f304 	lsr.w	r3, r0, r4
 800685c:	fa01 f205 	lsl.w	r2, r1, r5
 8006860:	ea43 0302 	orr.w	r3, r3, r2
 8006864:	fa21 f004 	lsr.w	r0, r1, r4
 8006868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800686c:	fa21 f204 	lsr.w	r2, r1, r4
 8006870:	ea20 0002 	bic.w	r0, r0, r2
 8006874:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8006878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800687c:	bf08      	it	eq
 800687e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006882:	bd70      	pop	{r4, r5, r6, pc}
 8006884:	f094 0f00 	teq	r4, #0
 8006888:	d10f      	bne.n	80068aa <__aeabi_dmul+0x1c2>
 800688a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800688e:	0040      	lsls	r0, r0, #1
 8006890:	eb41 0101 	adc.w	r1, r1, r1
 8006894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006898:	bf08      	it	eq
 800689a:	3c01      	subeq	r4, #1
 800689c:	d0f7      	beq.n	800688e <__aeabi_dmul+0x1a6>
 800689e:	ea41 0106 	orr.w	r1, r1, r6
 80068a2:	f095 0f00 	teq	r5, #0
 80068a6:	bf18      	it	ne
 80068a8:	4770      	bxne	lr
 80068aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80068ae:	0052      	lsls	r2, r2, #1
 80068b0:	eb43 0303 	adc.w	r3, r3, r3
 80068b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80068b8:	bf08      	it	eq
 80068ba:	3d01      	subeq	r5, #1
 80068bc:	d0f7      	beq.n	80068ae <__aeabi_dmul+0x1c6>
 80068be:	ea43 0306 	orr.w	r3, r3, r6
 80068c2:	4770      	bx	lr
 80068c4:	ea94 0f0c 	teq	r4, ip
 80068c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80068cc:	bf18      	it	ne
 80068ce:	ea95 0f0c 	teqne	r5, ip
 80068d2:	d00c      	beq.n	80068ee <__aeabi_dmul+0x206>
 80068d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80068d8:	bf18      	it	ne
 80068da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80068de:	d1d1      	bne.n	8006884 <__aeabi_dmul+0x19c>
 80068e0:	ea81 0103 	eor.w	r1, r1, r3
 80068e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80068e8:	f04f 0000 	mov.w	r0, #0
 80068ec:	bd70      	pop	{r4, r5, r6, pc}
 80068ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80068f2:	bf06      	itte	eq
 80068f4:	4610      	moveq	r0, r2
 80068f6:	4619      	moveq	r1, r3
 80068f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80068fc:	d019      	beq.n	8006932 <__aeabi_dmul+0x24a>
 80068fe:	ea94 0f0c 	teq	r4, ip
 8006902:	d102      	bne.n	800690a <__aeabi_dmul+0x222>
 8006904:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8006908:	d113      	bne.n	8006932 <__aeabi_dmul+0x24a>
 800690a:	ea95 0f0c 	teq	r5, ip
 800690e:	d105      	bne.n	800691c <__aeabi_dmul+0x234>
 8006910:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8006914:	bf1c      	itt	ne
 8006916:	4610      	movne	r0, r2
 8006918:	4619      	movne	r1, r3
 800691a:	d10a      	bne.n	8006932 <__aeabi_dmul+0x24a>
 800691c:	ea81 0103 	eor.w	r1, r1, r3
 8006920:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006924:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006928:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800692c:	f04f 0000 	mov.w	r0, #0
 8006930:	bd70      	pop	{r4, r5, r6, pc}
 8006932:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006936:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800693a:	bd70      	pop	{r4, r5, r6, pc}

0800693c <__aeabi_ddiv>:
 800693c:	b570      	push	{r4, r5, r6, lr}
 800693e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006942:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006946:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800694a:	bf1d      	ittte	ne
 800694c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006950:	ea94 0f0c 	teqne	r4, ip
 8006954:	ea95 0f0c 	teqne	r5, ip
 8006958:	f000 f8a7 	bleq	8006aaa <__aeabi_ddiv+0x16e>
 800695c:	eba4 0405 	sub.w	r4, r4, r5
 8006960:	ea81 0e03 	eor.w	lr, r1, r3
 8006964:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800696c:	f000 8088 	beq.w	8006a80 <__aeabi_ddiv+0x144>
 8006970:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006974:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8006978:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800697c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8006980:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8006984:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8006988:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800698c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8006990:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8006994:	429d      	cmp	r5, r3
 8006996:	bf08      	it	eq
 8006998:	4296      	cmpeq	r6, r2
 800699a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800699e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80069a2:	d202      	bcs.n	80069aa <__aeabi_ddiv+0x6e>
 80069a4:	085b      	lsrs	r3, r3, #1
 80069a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80069aa:	1ab6      	subs	r6, r6, r2
 80069ac:	eb65 0503 	sbc.w	r5, r5, r3
 80069b0:	085b      	lsrs	r3, r3, #1
 80069b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80069b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80069ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80069be:	ebb6 0e02 	subs.w	lr, r6, r2
 80069c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80069c6:	bf22      	ittt	cs
 80069c8:	1ab6      	subcs	r6, r6, r2
 80069ca:	4675      	movcs	r5, lr
 80069cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80069d0:	085b      	lsrs	r3, r3, #1
 80069d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80069d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80069da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80069de:	bf22      	ittt	cs
 80069e0:	1ab6      	subcs	r6, r6, r2
 80069e2:	4675      	movcs	r5, lr
 80069e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80069e8:	085b      	lsrs	r3, r3, #1
 80069ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80069ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80069f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80069f6:	bf22      	ittt	cs
 80069f8:	1ab6      	subcs	r6, r6, r2
 80069fa:	4675      	movcs	r5, lr
 80069fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006a00:	085b      	lsrs	r3, r3, #1
 8006a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8006a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8006a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006a0e:	bf22      	ittt	cs
 8006a10:	1ab6      	subcs	r6, r6, r2
 8006a12:	4675      	movcs	r5, lr
 8006a14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006a18:	ea55 0e06 	orrs.w	lr, r5, r6
 8006a1c:	d018      	beq.n	8006a50 <__aeabi_ddiv+0x114>
 8006a1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8006a22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8006a26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8006a2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8006a2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8006a32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006a36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8006a3a:	d1c0      	bne.n	80069be <__aeabi_ddiv+0x82>
 8006a3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006a40:	d10b      	bne.n	8006a5a <__aeabi_ddiv+0x11e>
 8006a42:	ea41 0100 	orr.w	r1, r1, r0
 8006a46:	f04f 0000 	mov.w	r0, #0
 8006a4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8006a4e:	e7b6      	b.n	80069be <__aeabi_ddiv+0x82>
 8006a50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006a54:	bf04      	itt	eq
 8006a56:	4301      	orreq	r1, r0
 8006a58:	2000      	moveq	r0, #0
 8006a5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006a5e:	bf88      	it	hi
 8006a60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006a64:	f63f aeaf 	bhi.w	80067c6 <__aeabi_dmul+0xde>
 8006a68:	ebb5 0c03 	subs.w	ip, r5, r3
 8006a6c:	bf04      	itt	eq
 8006a6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8006a72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006a76:	f150 0000 	adcs.w	r0, r0, #0
 8006a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006a7e:	bd70      	pop	{r4, r5, r6, pc}
 8006a80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8006a84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8006a88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8006a8c:	bfc2      	ittt	gt
 8006a8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006a92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006a96:	bd70      	popgt	{r4, r5, r6, pc}
 8006a98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006a9c:	f04f 0e00 	mov.w	lr, #0
 8006aa0:	3c01      	subs	r4, #1
 8006aa2:	e690      	b.n	80067c6 <__aeabi_dmul+0xde>
 8006aa4:	ea45 0e06 	orr.w	lr, r5, r6
 8006aa8:	e68d      	b.n	80067c6 <__aeabi_dmul+0xde>
 8006aaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006aae:	ea94 0f0c 	teq	r4, ip
 8006ab2:	bf08      	it	eq
 8006ab4:	ea95 0f0c 	teqeq	r5, ip
 8006ab8:	f43f af3b 	beq.w	8006932 <__aeabi_dmul+0x24a>
 8006abc:	ea94 0f0c 	teq	r4, ip
 8006ac0:	d10a      	bne.n	8006ad8 <__aeabi_ddiv+0x19c>
 8006ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006ac6:	f47f af34 	bne.w	8006932 <__aeabi_dmul+0x24a>
 8006aca:	ea95 0f0c 	teq	r5, ip
 8006ace:	f47f af25 	bne.w	800691c <__aeabi_dmul+0x234>
 8006ad2:	4610      	mov	r0, r2
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	e72c      	b.n	8006932 <__aeabi_dmul+0x24a>
 8006ad8:	ea95 0f0c 	teq	r5, ip
 8006adc:	d106      	bne.n	8006aec <__aeabi_ddiv+0x1b0>
 8006ade:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006ae2:	f43f aefd 	beq.w	80068e0 <__aeabi_dmul+0x1f8>
 8006ae6:	4610      	mov	r0, r2
 8006ae8:	4619      	mov	r1, r3
 8006aea:	e722      	b.n	8006932 <__aeabi_dmul+0x24a>
 8006aec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006af0:	bf18      	it	ne
 8006af2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006af6:	f47f aec5 	bne.w	8006884 <__aeabi_dmul+0x19c>
 8006afa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8006afe:	f47f af0d 	bne.w	800691c <__aeabi_dmul+0x234>
 8006b02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8006b06:	f47f aeeb 	bne.w	80068e0 <__aeabi_dmul+0x1f8>
 8006b0a:	e712      	b.n	8006932 <__aeabi_dmul+0x24a>

08006b0c <__gedf2>:
 8006b0c:	f04f 3cff 	mov.w	ip, #4294967295
 8006b10:	e006      	b.n	8006b20 <__cmpdf2+0x4>
 8006b12:	bf00      	nop

08006b14 <__ledf2>:
 8006b14:	f04f 0c01 	mov.w	ip, #1
 8006b18:	e002      	b.n	8006b20 <__cmpdf2+0x4>
 8006b1a:	bf00      	nop

08006b1c <__cmpdf2>:
 8006b1c:	f04f 0c01 	mov.w	ip, #1
 8006b20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8006b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006b30:	bf18      	it	ne
 8006b32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8006b36:	d01b      	beq.n	8006b70 <__cmpdf2+0x54>
 8006b38:	b001      	add	sp, #4
 8006b3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8006b3e:	bf0c      	ite	eq
 8006b40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8006b44:	ea91 0f03 	teqne	r1, r3
 8006b48:	bf02      	ittt	eq
 8006b4a:	ea90 0f02 	teqeq	r0, r2
 8006b4e:	2000      	moveq	r0, #0
 8006b50:	4770      	bxeq	lr
 8006b52:	f110 0f00 	cmn.w	r0, #0
 8006b56:	ea91 0f03 	teq	r1, r3
 8006b5a:	bf58      	it	pl
 8006b5c:	4299      	cmppl	r1, r3
 8006b5e:	bf08      	it	eq
 8006b60:	4290      	cmpeq	r0, r2
 8006b62:	bf2c      	ite	cs
 8006b64:	17d8      	asrcs	r0, r3, #31
 8006b66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8006b6a:	f040 0001 	orr.w	r0, r0, #1
 8006b6e:	4770      	bx	lr
 8006b70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006b78:	d102      	bne.n	8006b80 <__cmpdf2+0x64>
 8006b7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006b7e:	d107      	bne.n	8006b90 <__cmpdf2+0x74>
 8006b80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006b88:	d1d6      	bne.n	8006b38 <__cmpdf2+0x1c>
 8006b8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006b8e:	d0d3      	beq.n	8006b38 <__cmpdf2+0x1c>
 8006b90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop

08006b98 <__aeabi_cdrcmple>:
 8006b98:	4684      	mov	ip, r0
 8006b9a:	4610      	mov	r0, r2
 8006b9c:	4662      	mov	r2, ip
 8006b9e:	468c      	mov	ip, r1
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	4663      	mov	r3, ip
 8006ba4:	e000      	b.n	8006ba8 <__aeabi_cdcmpeq>
 8006ba6:	bf00      	nop

08006ba8 <__aeabi_cdcmpeq>:
 8006ba8:	b501      	push	{r0, lr}
 8006baa:	f7ff ffb7 	bl	8006b1c <__cmpdf2>
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	bf48      	it	mi
 8006bb2:	f110 0f00 	cmnmi.w	r0, #0
 8006bb6:	bd01      	pop	{r0, pc}

08006bb8 <__aeabi_dcmpeq>:
 8006bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006bbc:	f7ff fff4 	bl	8006ba8 <__aeabi_cdcmpeq>
 8006bc0:	bf0c      	ite	eq
 8006bc2:	2001      	moveq	r0, #1
 8006bc4:	2000      	movne	r0, #0
 8006bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8006bca:	bf00      	nop

08006bcc <__aeabi_dcmplt>:
 8006bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006bd0:	f7ff ffea 	bl	8006ba8 <__aeabi_cdcmpeq>
 8006bd4:	bf34      	ite	cc
 8006bd6:	2001      	movcc	r0, #1
 8006bd8:	2000      	movcs	r0, #0
 8006bda:	f85d fb08 	ldr.w	pc, [sp], #8
 8006bde:	bf00      	nop

08006be0 <__aeabi_dcmple>:
 8006be0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006be4:	f7ff ffe0 	bl	8006ba8 <__aeabi_cdcmpeq>
 8006be8:	bf94      	ite	ls
 8006bea:	2001      	movls	r0, #1
 8006bec:	2000      	movhi	r0, #0
 8006bee:	f85d fb08 	ldr.w	pc, [sp], #8
 8006bf2:	bf00      	nop

08006bf4 <__aeabi_dcmpge>:
 8006bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006bf8:	f7ff ffce 	bl	8006b98 <__aeabi_cdrcmple>
 8006bfc:	bf94      	ite	ls
 8006bfe:	2001      	movls	r0, #1
 8006c00:	2000      	movhi	r0, #0
 8006c02:	f85d fb08 	ldr.w	pc, [sp], #8
 8006c06:	bf00      	nop

08006c08 <__aeabi_dcmpgt>:
 8006c08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006c0c:	f7ff ffc4 	bl	8006b98 <__aeabi_cdrcmple>
 8006c10:	bf34      	ite	cc
 8006c12:	2001      	movcc	r0, #1
 8006c14:	2000      	movcs	r0, #0
 8006c16:	f85d fb08 	ldr.w	pc, [sp], #8
 8006c1a:	bf00      	nop

08006c1c <__aeabi_dcmpun>:
 8006c1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006c24:	d102      	bne.n	8006c2c <__aeabi_dcmpun+0x10>
 8006c26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006c2a:	d10a      	bne.n	8006c42 <__aeabi_dcmpun+0x26>
 8006c2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006c34:	d102      	bne.n	8006c3c <__aeabi_dcmpun+0x20>
 8006c36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006c3a:	d102      	bne.n	8006c42 <__aeabi_dcmpun+0x26>
 8006c3c:	f04f 0000 	mov.w	r0, #0
 8006c40:	4770      	bx	lr
 8006c42:	f04f 0001 	mov.w	r0, #1
 8006c46:	4770      	bx	lr

08006c48 <__aeabi_d2iz>:
 8006c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006c4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006c50:	d215      	bcs.n	8006c7e <__aeabi_d2iz+0x36>
 8006c52:	d511      	bpl.n	8006c78 <__aeabi_d2iz+0x30>
 8006c54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006c58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006c5c:	d912      	bls.n	8006c84 <__aeabi_d2iz+0x3c>
 8006c5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006c62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006c6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006c6e:	fa23 f002 	lsr.w	r0, r3, r2
 8006c72:	bf18      	it	ne
 8006c74:	4240      	negne	r0, r0
 8006c76:	4770      	bx	lr
 8006c78:	f04f 0000 	mov.w	r0, #0
 8006c7c:	4770      	bx	lr
 8006c7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006c82:	d105      	bne.n	8006c90 <__aeabi_d2iz+0x48>
 8006c84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8006c88:	bf08      	it	eq
 8006c8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8006c8e:	4770      	bx	lr
 8006c90:	f04f 0000 	mov.w	r0, #0
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop

08006c98 <__aeabi_d2uiz>:
 8006c98:	004a      	lsls	r2, r1, #1
 8006c9a:	d211      	bcs.n	8006cc0 <__aeabi_d2uiz+0x28>
 8006c9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006ca0:	d211      	bcs.n	8006cc6 <__aeabi_d2uiz+0x2e>
 8006ca2:	d50d      	bpl.n	8006cc0 <__aeabi_d2uiz+0x28>
 8006ca4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006ca8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006cac:	d40e      	bmi.n	8006ccc <__aeabi_d2uiz+0x34>
 8006cae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006cb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006cba:	fa23 f002 	lsr.w	r0, r3, r2
 8006cbe:	4770      	bx	lr
 8006cc0:	f04f 0000 	mov.w	r0, #0
 8006cc4:	4770      	bx	lr
 8006cc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006cca:	d102      	bne.n	8006cd2 <__aeabi_d2uiz+0x3a>
 8006ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd0:	4770      	bx	lr
 8006cd2:	f04f 0000 	mov.w	r0, #0
 8006cd6:	4770      	bx	lr

08006cd8 <__aeabi_d2f>:
 8006cd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006cdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8006ce0:	bf24      	itt	cs
 8006ce2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8006ce6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8006cea:	d90d      	bls.n	8006d08 <__aeabi_d2f+0x30>
 8006cec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8006cf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8006cf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8006cf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8006cfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8006d00:	bf08      	it	eq
 8006d02:	f020 0001 	biceq.w	r0, r0, #1
 8006d06:	4770      	bx	lr
 8006d08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8006d0c:	d121      	bne.n	8006d52 <__aeabi_d2f+0x7a>
 8006d0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8006d12:	bfbc      	itt	lt
 8006d14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8006d18:	4770      	bxlt	lr
 8006d1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006d1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8006d22:	f1c2 0218 	rsb	r2, r2, #24
 8006d26:	f1c2 0c20 	rsb	ip, r2, #32
 8006d2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8006d2e:	fa20 f002 	lsr.w	r0, r0, r2
 8006d32:	bf18      	it	ne
 8006d34:	f040 0001 	orrne.w	r0, r0, #1
 8006d38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006d3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8006d40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8006d44:	ea40 000c 	orr.w	r0, r0, ip
 8006d48:	fa23 f302 	lsr.w	r3, r3, r2
 8006d4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006d50:	e7cc      	b.n	8006cec <__aeabi_d2f+0x14>
 8006d52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8006d56:	d107      	bne.n	8006d68 <__aeabi_d2f+0x90>
 8006d58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8006d5c:	bf1e      	ittt	ne
 8006d5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8006d62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8006d66:	4770      	bxne	lr
 8006d68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8006d6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8006d70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop

08006d78 <__aeabi_uldivmod>:
 8006d78:	b953      	cbnz	r3, 8006d90 <__aeabi_uldivmod+0x18>
 8006d7a:	b94a      	cbnz	r2, 8006d90 <__aeabi_uldivmod+0x18>
 8006d7c:	2900      	cmp	r1, #0
 8006d7e:	bf08      	it	eq
 8006d80:	2800      	cmpeq	r0, #0
 8006d82:	bf1c      	itt	ne
 8006d84:	f04f 31ff 	movne.w	r1, #4294967295
 8006d88:	f04f 30ff 	movne.w	r0, #4294967295
 8006d8c:	f000 b9aa 	b.w	80070e4 <__aeabi_idiv0>
 8006d90:	f1ad 0c08 	sub.w	ip, sp, #8
 8006d94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8006d98:	f000 f83c 	bl	8006e14 <__udivmoddi4>
 8006d9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006da0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006da4:	b004      	add	sp, #16
 8006da6:	4770      	bx	lr

08006da8 <__aeabi_d2lz>:
 8006da8:	b538      	push	{r3, r4, r5, lr}
 8006daa:	2200      	movs	r2, #0
 8006dac:	2300      	movs	r3, #0
 8006dae:	4604      	mov	r4, r0
 8006db0:	460d      	mov	r5, r1
 8006db2:	f7ff ff0b 	bl	8006bcc <__aeabi_dcmplt>
 8006db6:	b928      	cbnz	r0, 8006dc4 <__aeabi_d2lz+0x1c>
 8006db8:	4620      	mov	r0, r4
 8006dba:	4629      	mov	r1, r5
 8006dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dc0:	f000 b80a 	b.w	8006dd8 <__aeabi_d2ulz>
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8006dca:	f000 f805 	bl	8006dd8 <__aeabi_d2ulz>
 8006dce:	4240      	negs	r0, r0
 8006dd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006dd4:	bd38      	pop	{r3, r4, r5, pc}
 8006dd6:	bf00      	nop

08006dd8 <__aeabi_d2ulz>:
 8006dd8:	b5d0      	push	{r4, r6, r7, lr}
 8006dda:	4b0c      	ldr	r3, [pc, #48]	; (8006e0c <__aeabi_d2ulz+0x34>)
 8006ddc:	2200      	movs	r2, #0
 8006dde:	4606      	mov	r6, r0
 8006de0:	460f      	mov	r7, r1
 8006de2:	f7ff fc81 	bl	80066e8 <__aeabi_dmul>
 8006de6:	f7ff ff57 	bl	8006c98 <__aeabi_d2uiz>
 8006dea:	4604      	mov	r4, r0
 8006dec:	f7ff fc02 	bl	80065f4 <__aeabi_ui2d>
 8006df0:	4b07      	ldr	r3, [pc, #28]	; (8006e10 <__aeabi_d2ulz+0x38>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	f7ff fc78 	bl	80066e8 <__aeabi_dmul>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	4630      	mov	r0, r6
 8006dfe:	4639      	mov	r1, r7
 8006e00:	f7ff faba 	bl	8006378 <__aeabi_dsub>
 8006e04:	f7ff ff48 	bl	8006c98 <__aeabi_d2uiz>
 8006e08:	4621      	mov	r1, r4
 8006e0a:	bdd0      	pop	{r4, r6, r7, pc}
 8006e0c:	3df00000 	.word	0x3df00000
 8006e10:	41f00000 	.word	0x41f00000

08006e14 <__udivmoddi4>:
 8006e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e18:	9d08      	ldr	r5, [sp, #32]
 8006e1a:	4604      	mov	r4, r0
 8006e1c:	468e      	mov	lr, r1
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d14d      	bne.n	8006ebe <__udivmoddi4+0xaa>
 8006e22:	428a      	cmp	r2, r1
 8006e24:	4694      	mov	ip, r2
 8006e26:	d969      	bls.n	8006efc <__udivmoddi4+0xe8>
 8006e28:	fab2 f282 	clz	r2, r2
 8006e2c:	b152      	cbz	r2, 8006e44 <__udivmoddi4+0x30>
 8006e2e:	fa01 f302 	lsl.w	r3, r1, r2
 8006e32:	f1c2 0120 	rsb	r1, r2, #32
 8006e36:	fa20 f101 	lsr.w	r1, r0, r1
 8006e3a:	fa0c fc02 	lsl.w	ip, ip, r2
 8006e3e:	ea41 0e03 	orr.w	lr, r1, r3
 8006e42:	4094      	lsls	r4, r2
 8006e44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8006e48:	0c21      	lsrs	r1, r4, #16
 8006e4a:	fbbe f6f8 	udiv	r6, lr, r8
 8006e4e:	fa1f f78c 	uxth.w	r7, ip
 8006e52:	fb08 e316 	mls	r3, r8, r6, lr
 8006e56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006e5a:	fb06 f107 	mul.w	r1, r6, r7
 8006e5e:	4299      	cmp	r1, r3
 8006e60:	d90a      	bls.n	8006e78 <__udivmoddi4+0x64>
 8006e62:	eb1c 0303 	adds.w	r3, ip, r3
 8006e66:	f106 30ff 	add.w	r0, r6, #4294967295
 8006e6a:	f080 811f 	bcs.w	80070ac <__udivmoddi4+0x298>
 8006e6e:	4299      	cmp	r1, r3
 8006e70:	f240 811c 	bls.w	80070ac <__udivmoddi4+0x298>
 8006e74:	3e02      	subs	r6, #2
 8006e76:	4463      	add	r3, ip
 8006e78:	1a5b      	subs	r3, r3, r1
 8006e7a:	b2a4      	uxth	r4, r4
 8006e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8006e80:	fb08 3310 	mls	r3, r8, r0, r3
 8006e84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8006e88:	fb00 f707 	mul.w	r7, r0, r7
 8006e8c:	42a7      	cmp	r7, r4
 8006e8e:	d90a      	bls.n	8006ea6 <__udivmoddi4+0x92>
 8006e90:	eb1c 0404 	adds.w	r4, ip, r4
 8006e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e98:	f080 810a 	bcs.w	80070b0 <__udivmoddi4+0x29c>
 8006e9c:	42a7      	cmp	r7, r4
 8006e9e:	f240 8107 	bls.w	80070b0 <__udivmoddi4+0x29c>
 8006ea2:	4464      	add	r4, ip
 8006ea4:	3802      	subs	r0, #2
 8006ea6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8006eaa:	1be4      	subs	r4, r4, r7
 8006eac:	2600      	movs	r6, #0
 8006eae:	b11d      	cbz	r5, 8006eb8 <__udivmoddi4+0xa4>
 8006eb0:	40d4      	lsrs	r4, r2
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	e9c5 4300 	strd	r4, r3, [r5]
 8006eb8:	4631      	mov	r1, r6
 8006eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ebe:	428b      	cmp	r3, r1
 8006ec0:	d909      	bls.n	8006ed6 <__udivmoddi4+0xc2>
 8006ec2:	2d00      	cmp	r5, #0
 8006ec4:	f000 80ef 	beq.w	80070a6 <__udivmoddi4+0x292>
 8006ec8:	2600      	movs	r6, #0
 8006eca:	e9c5 0100 	strd	r0, r1, [r5]
 8006ece:	4630      	mov	r0, r6
 8006ed0:	4631      	mov	r1, r6
 8006ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ed6:	fab3 f683 	clz	r6, r3
 8006eda:	2e00      	cmp	r6, #0
 8006edc:	d14a      	bne.n	8006f74 <__udivmoddi4+0x160>
 8006ede:	428b      	cmp	r3, r1
 8006ee0:	d302      	bcc.n	8006ee8 <__udivmoddi4+0xd4>
 8006ee2:	4282      	cmp	r2, r0
 8006ee4:	f200 80f9 	bhi.w	80070da <__udivmoddi4+0x2c6>
 8006ee8:	1a84      	subs	r4, r0, r2
 8006eea:	eb61 0303 	sbc.w	r3, r1, r3
 8006eee:	2001      	movs	r0, #1
 8006ef0:	469e      	mov	lr, r3
 8006ef2:	2d00      	cmp	r5, #0
 8006ef4:	d0e0      	beq.n	8006eb8 <__udivmoddi4+0xa4>
 8006ef6:	e9c5 4e00 	strd	r4, lr, [r5]
 8006efa:	e7dd      	b.n	8006eb8 <__udivmoddi4+0xa4>
 8006efc:	b902      	cbnz	r2, 8006f00 <__udivmoddi4+0xec>
 8006efe:	deff      	udf	#255	; 0xff
 8006f00:	fab2 f282 	clz	r2, r2
 8006f04:	2a00      	cmp	r2, #0
 8006f06:	f040 8092 	bne.w	800702e <__udivmoddi4+0x21a>
 8006f0a:	eba1 010c 	sub.w	r1, r1, ip
 8006f0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8006f12:	fa1f fe8c 	uxth.w	lr, ip
 8006f16:	2601      	movs	r6, #1
 8006f18:	0c20      	lsrs	r0, r4, #16
 8006f1a:	fbb1 f3f7 	udiv	r3, r1, r7
 8006f1e:	fb07 1113 	mls	r1, r7, r3, r1
 8006f22:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8006f26:	fb0e f003 	mul.w	r0, lr, r3
 8006f2a:	4288      	cmp	r0, r1
 8006f2c:	d908      	bls.n	8006f40 <__udivmoddi4+0x12c>
 8006f2e:	eb1c 0101 	adds.w	r1, ip, r1
 8006f32:	f103 38ff 	add.w	r8, r3, #4294967295
 8006f36:	d202      	bcs.n	8006f3e <__udivmoddi4+0x12a>
 8006f38:	4288      	cmp	r0, r1
 8006f3a:	f200 80cb 	bhi.w	80070d4 <__udivmoddi4+0x2c0>
 8006f3e:	4643      	mov	r3, r8
 8006f40:	1a09      	subs	r1, r1, r0
 8006f42:	b2a4      	uxth	r4, r4
 8006f44:	fbb1 f0f7 	udiv	r0, r1, r7
 8006f48:	fb07 1110 	mls	r1, r7, r0, r1
 8006f4c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8006f50:	fb0e fe00 	mul.w	lr, lr, r0
 8006f54:	45a6      	cmp	lr, r4
 8006f56:	d908      	bls.n	8006f6a <__udivmoddi4+0x156>
 8006f58:	eb1c 0404 	adds.w	r4, ip, r4
 8006f5c:	f100 31ff 	add.w	r1, r0, #4294967295
 8006f60:	d202      	bcs.n	8006f68 <__udivmoddi4+0x154>
 8006f62:	45a6      	cmp	lr, r4
 8006f64:	f200 80bb 	bhi.w	80070de <__udivmoddi4+0x2ca>
 8006f68:	4608      	mov	r0, r1
 8006f6a:	eba4 040e 	sub.w	r4, r4, lr
 8006f6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8006f72:	e79c      	b.n	8006eae <__udivmoddi4+0x9a>
 8006f74:	f1c6 0720 	rsb	r7, r6, #32
 8006f78:	40b3      	lsls	r3, r6
 8006f7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8006f7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8006f82:	fa20 f407 	lsr.w	r4, r0, r7
 8006f86:	fa01 f306 	lsl.w	r3, r1, r6
 8006f8a:	431c      	orrs	r4, r3
 8006f8c:	40f9      	lsrs	r1, r7
 8006f8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8006f92:	fa00 f306 	lsl.w	r3, r0, r6
 8006f96:	fbb1 f8f9 	udiv	r8, r1, r9
 8006f9a:	0c20      	lsrs	r0, r4, #16
 8006f9c:	fa1f fe8c 	uxth.w	lr, ip
 8006fa0:	fb09 1118 	mls	r1, r9, r8, r1
 8006fa4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8006fa8:	fb08 f00e 	mul.w	r0, r8, lr
 8006fac:	4288      	cmp	r0, r1
 8006fae:	fa02 f206 	lsl.w	r2, r2, r6
 8006fb2:	d90b      	bls.n	8006fcc <__udivmoddi4+0x1b8>
 8006fb4:	eb1c 0101 	adds.w	r1, ip, r1
 8006fb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8006fbc:	f080 8088 	bcs.w	80070d0 <__udivmoddi4+0x2bc>
 8006fc0:	4288      	cmp	r0, r1
 8006fc2:	f240 8085 	bls.w	80070d0 <__udivmoddi4+0x2bc>
 8006fc6:	f1a8 0802 	sub.w	r8, r8, #2
 8006fca:	4461      	add	r1, ip
 8006fcc:	1a09      	subs	r1, r1, r0
 8006fce:	b2a4      	uxth	r4, r4
 8006fd0:	fbb1 f0f9 	udiv	r0, r1, r9
 8006fd4:	fb09 1110 	mls	r1, r9, r0, r1
 8006fd8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8006fdc:	fb00 fe0e 	mul.w	lr, r0, lr
 8006fe0:	458e      	cmp	lr, r1
 8006fe2:	d908      	bls.n	8006ff6 <__udivmoddi4+0x1e2>
 8006fe4:	eb1c 0101 	adds.w	r1, ip, r1
 8006fe8:	f100 34ff 	add.w	r4, r0, #4294967295
 8006fec:	d26c      	bcs.n	80070c8 <__udivmoddi4+0x2b4>
 8006fee:	458e      	cmp	lr, r1
 8006ff0:	d96a      	bls.n	80070c8 <__udivmoddi4+0x2b4>
 8006ff2:	3802      	subs	r0, #2
 8006ff4:	4461      	add	r1, ip
 8006ff6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8006ffa:	fba0 9402 	umull	r9, r4, r0, r2
 8006ffe:	eba1 010e 	sub.w	r1, r1, lr
 8007002:	42a1      	cmp	r1, r4
 8007004:	46c8      	mov	r8, r9
 8007006:	46a6      	mov	lr, r4
 8007008:	d356      	bcc.n	80070b8 <__udivmoddi4+0x2a4>
 800700a:	d053      	beq.n	80070b4 <__udivmoddi4+0x2a0>
 800700c:	b15d      	cbz	r5, 8007026 <__udivmoddi4+0x212>
 800700e:	ebb3 0208 	subs.w	r2, r3, r8
 8007012:	eb61 010e 	sbc.w	r1, r1, lr
 8007016:	fa01 f707 	lsl.w	r7, r1, r7
 800701a:	fa22 f306 	lsr.w	r3, r2, r6
 800701e:	40f1      	lsrs	r1, r6
 8007020:	431f      	orrs	r7, r3
 8007022:	e9c5 7100 	strd	r7, r1, [r5]
 8007026:	2600      	movs	r6, #0
 8007028:	4631      	mov	r1, r6
 800702a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800702e:	f1c2 0320 	rsb	r3, r2, #32
 8007032:	40d8      	lsrs	r0, r3
 8007034:	fa0c fc02 	lsl.w	ip, ip, r2
 8007038:	fa21 f303 	lsr.w	r3, r1, r3
 800703c:	4091      	lsls	r1, r2
 800703e:	4301      	orrs	r1, r0
 8007040:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8007044:	fa1f fe8c 	uxth.w	lr, ip
 8007048:	fbb3 f0f7 	udiv	r0, r3, r7
 800704c:	fb07 3610 	mls	r6, r7, r0, r3
 8007050:	0c0b      	lsrs	r3, r1, #16
 8007052:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8007056:	fb00 f60e 	mul.w	r6, r0, lr
 800705a:	429e      	cmp	r6, r3
 800705c:	fa04 f402 	lsl.w	r4, r4, r2
 8007060:	d908      	bls.n	8007074 <__udivmoddi4+0x260>
 8007062:	eb1c 0303 	adds.w	r3, ip, r3
 8007066:	f100 38ff 	add.w	r8, r0, #4294967295
 800706a:	d22f      	bcs.n	80070cc <__udivmoddi4+0x2b8>
 800706c:	429e      	cmp	r6, r3
 800706e:	d92d      	bls.n	80070cc <__udivmoddi4+0x2b8>
 8007070:	3802      	subs	r0, #2
 8007072:	4463      	add	r3, ip
 8007074:	1b9b      	subs	r3, r3, r6
 8007076:	b289      	uxth	r1, r1
 8007078:	fbb3 f6f7 	udiv	r6, r3, r7
 800707c:	fb07 3316 	mls	r3, r7, r6, r3
 8007080:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007084:	fb06 f30e 	mul.w	r3, r6, lr
 8007088:	428b      	cmp	r3, r1
 800708a:	d908      	bls.n	800709e <__udivmoddi4+0x28a>
 800708c:	eb1c 0101 	adds.w	r1, ip, r1
 8007090:	f106 38ff 	add.w	r8, r6, #4294967295
 8007094:	d216      	bcs.n	80070c4 <__udivmoddi4+0x2b0>
 8007096:	428b      	cmp	r3, r1
 8007098:	d914      	bls.n	80070c4 <__udivmoddi4+0x2b0>
 800709a:	3e02      	subs	r6, #2
 800709c:	4461      	add	r1, ip
 800709e:	1ac9      	subs	r1, r1, r3
 80070a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80070a4:	e738      	b.n	8006f18 <__udivmoddi4+0x104>
 80070a6:	462e      	mov	r6, r5
 80070a8:	4628      	mov	r0, r5
 80070aa:	e705      	b.n	8006eb8 <__udivmoddi4+0xa4>
 80070ac:	4606      	mov	r6, r0
 80070ae:	e6e3      	b.n	8006e78 <__udivmoddi4+0x64>
 80070b0:	4618      	mov	r0, r3
 80070b2:	e6f8      	b.n	8006ea6 <__udivmoddi4+0x92>
 80070b4:	454b      	cmp	r3, r9
 80070b6:	d2a9      	bcs.n	800700c <__udivmoddi4+0x1f8>
 80070b8:	ebb9 0802 	subs.w	r8, r9, r2
 80070bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80070c0:	3801      	subs	r0, #1
 80070c2:	e7a3      	b.n	800700c <__udivmoddi4+0x1f8>
 80070c4:	4646      	mov	r6, r8
 80070c6:	e7ea      	b.n	800709e <__udivmoddi4+0x28a>
 80070c8:	4620      	mov	r0, r4
 80070ca:	e794      	b.n	8006ff6 <__udivmoddi4+0x1e2>
 80070cc:	4640      	mov	r0, r8
 80070ce:	e7d1      	b.n	8007074 <__udivmoddi4+0x260>
 80070d0:	46d0      	mov	r8, sl
 80070d2:	e77b      	b.n	8006fcc <__udivmoddi4+0x1b8>
 80070d4:	3b02      	subs	r3, #2
 80070d6:	4461      	add	r1, ip
 80070d8:	e732      	b.n	8006f40 <__udivmoddi4+0x12c>
 80070da:	4630      	mov	r0, r6
 80070dc:	e709      	b.n	8006ef2 <__udivmoddi4+0xde>
 80070de:	4464      	add	r4, ip
 80070e0:	3802      	subs	r0, #2
 80070e2:	e742      	b.n	8006f6a <__udivmoddi4+0x156>

080070e4 <__aeabi_idiv0>:
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop

080070e8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80070ec:	4b06      	ldr	r3, [pc, #24]	; (8007108 <MX_CRC_Init+0x20>)
 80070ee:	4a07      	ldr	r2, [pc, #28]	; (800710c <MX_CRC_Init+0x24>)
 80070f0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80070f2:	4805      	ldr	r0, [pc, #20]	; (8007108 <MX_CRC_Init+0x20>)
 80070f4:	f003 ff9a 	bl	800b02c <HAL_CRC_Init>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d001      	beq.n	8007102 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80070fe:	f001 f8f9 	bl	80082f4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8007102:	bf00      	nop
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	20000ab8 	.word	0x20000ab8
 800710c:	40023000 	.word	0x40023000

08007110 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8007110:	b480      	push	{r7}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a0b      	ldr	r2, [pc, #44]	; (800714c <HAL_CRC_MspInit+0x3c>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d10d      	bne.n	800713e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8007122:	2300      	movs	r3, #0
 8007124:	60fb      	str	r3, [r7, #12]
 8007126:	4b0a      	ldr	r3, [pc, #40]	; (8007150 <HAL_CRC_MspInit+0x40>)
 8007128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712a:	4a09      	ldr	r2, [pc, #36]	; (8007150 <HAL_CRC_MspInit+0x40>)
 800712c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007130:	6313      	str	r3, [r2, #48]	; 0x30
 8007132:	4b07      	ldr	r3, [pc, #28]	; (8007150 <HAL_CRC_MspInit+0x40>)
 8007134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007136:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800713a:	60fb      	str	r3, [r7, #12]
 800713c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800713e:	bf00      	nop
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	40023000 	.word	0x40023000
 8007150:	40023800 	.word	0x40023800

08007154 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8007158:	4b15      	ldr	r3, [pc, #84]	; (80071b0 <MX_DMA2D_Init+0x5c>)
 800715a:	4a16      	ldr	r2, [pc, #88]	; (80071b4 <MX_DMA2D_Init+0x60>)
 800715c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800715e:	4b14      	ldr	r3, [pc, #80]	; (80071b0 <MX_DMA2D_Init+0x5c>)
 8007160:	2200      	movs	r2, #0
 8007162:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8007164:	4b12      	ldr	r3, [pc, #72]	; (80071b0 <MX_DMA2D_Init+0x5c>)
 8007166:	2200      	movs	r2, #0
 8007168:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800716a:	4b11      	ldr	r3, [pc, #68]	; (80071b0 <MX_DMA2D_Init+0x5c>)
 800716c:	2200      	movs	r2, #0
 800716e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8007170:	4b0f      	ldr	r3, [pc, #60]	; (80071b0 <MX_DMA2D_Init+0x5c>)
 8007172:	2200      	movs	r2, #0
 8007174:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8007176:	4b0e      	ldr	r3, [pc, #56]	; (80071b0 <MX_DMA2D_Init+0x5c>)
 8007178:	2200      	movs	r2, #0
 800717a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800717c:	4b0c      	ldr	r3, [pc, #48]	; (80071b0 <MX_DMA2D_Init+0x5c>)
 800717e:	2200      	movs	r2, #0
 8007180:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8007182:	4b0b      	ldr	r3, [pc, #44]	; (80071b0 <MX_DMA2D_Init+0x5c>)
 8007184:	2200      	movs	r2, #0
 8007186:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8007188:	4809      	ldr	r0, [pc, #36]	; (80071b0 <MX_DMA2D_Init+0x5c>)
 800718a:	f004 f929 	bl	800b3e0 <HAL_DMA2D_Init>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d001      	beq.n	8007198 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8007194:	f001 f8ae 	bl	80082f4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8007198:	2101      	movs	r1, #1
 800719a:	4805      	ldr	r0, [pc, #20]	; (80071b0 <MX_DMA2D_Init+0x5c>)
 800719c:	f004 fa7e 	bl	800b69c <HAL_DMA2D_ConfigLayer>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d001      	beq.n	80071aa <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80071a6:	f001 f8a5 	bl	80082f4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80071aa:	bf00      	nop
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	20000ac0 	.word	0x20000ac0
 80071b4:	4002b000 	.word	0x4002b000

080071b8 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b085      	sub	sp, #20
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a0b      	ldr	r2, [pc, #44]	; (80071f4 <HAL_DMA2D_MspInit+0x3c>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d10d      	bne.n	80071e6 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80071ca:	2300      	movs	r3, #0
 80071cc:	60fb      	str	r3, [r7, #12]
 80071ce:	4b0a      	ldr	r3, [pc, #40]	; (80071f8 <HAL_DMA2D_MspInit+0x40>)
 80071d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d2:	4a09      	ldr	r2, [pc, #36]	; (80071f8 <HAL_DMA2D_MspInit+0x40>)
 80071d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80071d8:	6313      	str	r3, [r2, #48]	; 0x30
 80071da:	4b07      	ldr	r3, [pc, #28]	; (80071f8 <HAL_DMA2D_MspInit+0x40>)
 80071dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80071e6:	bf00      	nop
 80071e8:	3714      	adds	r7, #20
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	4002b000 	.word	0x4002b000
 80071f8:	40023800 	.word	0x40023800

080071fc <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b088      	sub	sp, #32
 8007200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8007202:	1d3b      	adds	r3, r7, #4
 8007204:	2200      	movs	r2, #0
 8007206:	601a      	str	r2, [r3, #0]
 8007208:	605a      	str	r2, [r3, #4]
 800720a:	609a      	str	r2, [r3, #8]
 800720c:	60da      	str	r2, [r3, #12]
 800720e:	611a      	str	r2, [r3, #16]
 8007210:	615a      	str	r2, [r3, #20]
 8007212:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8007214:	4b1f      	ldr	r3, [pc, #124]	; (8007294 <MX_FMC_Init+0x98>)
 8007216:	4a20      	ldr	r2, [pc, #128]	; (8007298 <MX_FMC_Init+0x9c>)
 8007218:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800721a:	4b1e      	ldr	r3, [pc, #120]	; (8007294 <MX_FMC_Init+0x98>)
 800721c:	2201      	movs	r2, #1
 800721e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8007220:	4b1c      	ldr	r3, [pc, #112]	; (8007294 <MX_FMC_Init+0x98>)
 8007222:	2200      	movs	r2, #0
 8007224:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8007226:	4b1b      	ldr	r3, [pc, #108]	; (8007294 <MX_FMC_Init+0x98>)
 8007228:	2204      	movs	r2, #4
 800722a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800722c:	4b19      	ldr	r3, [pc, #100]	; (8007294 <MX_FMC_Init+0x98>)
 800722e:	2210      	movs	r2, #16
 8007230:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8007232:	4b18      	ldr	r3, [pc, #96]	; (8007294 <MX_FMC_Init+0x98>)
 8007234:	2240      	movs	r2, #64	; 0x40
 8007236:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8007238:	4b16      	ldr	r3, [pc, #88]	; (8007294 <MX_FMC_Init+0x98>)
 800723a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800723e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8007240:	4b14      	ldr	r3, [pc, #80]	; (8007294 <MX_FMC_Init+0x98>)
 8007242:	2200      	movs	r2, #0
 8007244:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8007246:	4b13      	ldr	r3, [pc, #76]	; (8007294 <MX_FMC_Init+0x98>)
 8007248:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800724c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800724e:	4b11      	ldr	r3, [pc, #68]	; (8007294 <MX_FMC_Init+0x98>)
 8007250:	2200      	movs	r2, #0
 8007252:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8007254:	4b0f      	ldr	r3, [pc, #60]	; (8007294 <MX_FMC_Init+0x98>)
 8007256:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800725a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800725c:	2302      	movs	r3, #2
 800725e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8007260:	2307      	movs	r3, #7
 8007262:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8007264:	2304      	movs	r3, #4
 8007266:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8007268:	2307      	movs	r3, #7
 800726a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800726c:	2303      	movs	r3, #3
 800726e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8007270:	2302      	movs	r3, #2
 8007272:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8007274:	2302      	movs	r3, #2
 8007276:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8007278:	1d3b      	adds	r3, r7, #4
 800727a:	4619      	mov	r1, r3
 800727c:	4805      	ldr	r0, [pc, #20]	; (8007294 <MX_FMC_Init+0x98>)
 800727e:	f007 f875 	bl	800e36c <HAL_SDRAM_Init>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d001      	beq.n	800728c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8007288:	f001 f834 	bl	80082f4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800728c:	bf00      	nop
 800728e:	3720      	adds	r7, #32
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	20000b00 	.word	0x20000b00
 8007298:	a0000140 	.word	0xa0000140

0800729c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072a2:	1d3b      	adds	r3, r7, #4
 80072a4:	2200      	movs	r2, #0
 80072a6:	601a      	str	r2, [r3, #0]
 80072a8:	605a      	str	r2, [r3, #4]
 80072aa:	609a      	str	r2, [r3, #8]
 80072ac:	60da      	str	r2, [r3, #12]
 80072ae:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80072b0:	4b3b      	ldr	r3, [pc, #236]	; (80073a0 <HAL_FMC_MspInit+0x104>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d16f      	bne.n	8007398 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80072b8:	4b39      	ldr	r3, [pc, #228]	; (80073a0 <HAL_FMC_MspInit+0x104>)
 80072ba:	2201      	movs	r2, #1
 80072bc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80072be:	2300      	movs	r3, #0
 80072c0:	603b      	str	r3, [r7, #0]
 80072c2:	4b38      	ldr	r3, [pc, #224]	; (80073a4 <HAL_FMC_MspInit+0x108>)
 80072c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c6:	4a37      	ldr	r2, [pc, #220]	; (80073a4 <HAL_FMC_MspInit+0x108>)
 80072c8:	f043 0301 	orr.w	r3, r3, #1
 80072cc:	6393      	str	r3, [r2, #56]	; 0x38
 80072ce:	4b35      	ldr	r3, [pc, #212]	; (80073a4 <HAL_FMC_MspInit+0x108>)
 80072d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	603b      	str	r3, [r7, #0]
 80072d8:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80072da:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80072de:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072e0:	2302      	movs	r3, #2
 80072e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072e4:	2300      	movs	r3, #0
 80072e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072e8:	2303      	movs	r3, #3
 80072ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80072ec:	230c      	movs	r3, #12
 80072ee:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80072f0:	1d3b      	adds	r3, r7, #4
 80072f2:	4619      	mov	r1, r3
 80072f4:	482c      	ldr	r0, [pc, #176]	; (80073a8 <HAL_FMC_MspInit+0x10c>)
 80072f6:	f004 faff 	bl	800b8f8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80072fa:	2301      	movs	r3, #1
 80072fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072fe:	2302      	movs	r3, #2
 8007300:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007302:	2300      	movs	r3, #0
 8007304:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007306:	2303      	movs	r3, #3
 8007308:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800730a:	230c      	movs	r3, #12
 800730c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800730e:	1d3b      	adds	r3, r7, #4
 8007310:	4619      	mov	r1, r3
 8007312:	4826      	ldr	r0, [pc, #152]	; (80073ac <HAL_FMC_MspInit+0x110>)
 8007314:	f004 faf0 	bl	800b8f8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8007318:	f248 1333 	movw	r3, #33075	; 0x8133
 800731c:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800731e:	2302      	movs	r3, #2
 8007320:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007322:	2300      	movs	r3, #0
 8007324:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007326:	2303      	movs	r3, #3
 8007328:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800732a:	230c      	movs	r3, #12
 800732c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800732e:	1d3b      	adds	r3, r7, #4
 8007330:	4619      	mov	r1, r3
 8007332:	481f      	ldr	r0, [pc, #124]	; (80073b0 <HAL_FMC_MspInit+0x114>)
 8007334:	f004 fae0 	bl	800b8f8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8007338:	f64f 7383 	movw	r3, #65411	; 0xff83
 800733c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800733e:	2302      	movs	r3, #2
 8007340:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007342:	2300      	movs	r3, #0
 8007344:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007346:	2303      	movs	r3, #3
 8007348:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800734a:	230c      	movs	r3, #12
 800734c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800734e:	1d3b      	adds	r3, r7, #4
 8007350:	4619      	mov	r1, r3
 8007352:	4818      	ldr	r0, [pc, #96]	; (80073b4 <HAL_FMC_MspInit+0x118>)
 8007354:	f004 fad0 	bl	800b8f8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8007358:	f24c 7303 	movw	r3, #50947	; 0xc703
 800735c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800735e:	2302      	movs	r3, #2
 8007360:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007362:	2300      	movs	r3, #0
 8007364:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007366:	2303      	movs	r3, #3
 8007368:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800736a:	230c      	movs	r3, #12
 800736c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800736e:	1d3b      	adds	r3, r7, #4
 8007370:	4619      	mov	r1, r3
 8007372:	4811      	ldr	r0, [pc, #68]	; (80073b8 <HAL_FMC_MspInit+0x11c>)
 8007374:	f004 fac0 	bl	800b8f8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8007378:	2360      	movs	r3, #96	; 0x60
 800737a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800737c:	2302      	movs	r3, #2
 800737e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007380:	2300      	movs	r3, #0
 8007382:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007384:	2303      	movs	r3, #3
 8007386:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007388:	230c      	movs	r3, #12
 800738a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800738c:	1d3b      	adds	r3, r7, #4
 800738e:	4619      	mov	r1, r3
 8007390:	480a      	ldr	r0, [pc, #40]	; (80073bc <HAL_FMC_MspInit+0x120>)
 8007392:	f004 fab1 	bl	800b8f8 <HAL_GPIO_Init>
 8007396:	e000      	b.n	800739a <HAL_FMC_MspInit+0xfe>
    return;
 8007398:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800739a:	3718      	adds	r7, #24
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	20000b34 	.word	0x20000b34
 80073a4:	40023800 	.word	0x40023800
 80073a8:	40021400 	.word	0x40021400
 80073ac:	40020800 	.word	0x40020800
 80073b0:	40021800 	.word	0x40021800
 80073b4:	40021000 	.word	0x40021000
 80073b8:	40020c00 	.word	0x40020c00
 80073bc:	40020400 	.word	0x40020400

080073c0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80073c8:	f7ff ff68 	bl	800729c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80073cc:	bf00      	nop
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b08e      	sub	sp, #56	; 0x38
 80073d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073de:	2200      	movs	r2, #0
 80073e0:	601a      	str	r2, [r3, #0]
 80073e2:	605a      	str	r2, [r3, #4]
 80073e4:	609a      	str	r2, [r3, #8]
 80073e6:	60da      	str	r2, [r3, #12]
 80073e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80073ea:	2300      	movs	r3, #0
 80073ec:	623b      	str	r3, [r7, #32]
 80073ee:	4b7b      	ldr	r3, [pc, #492]	; (80075dc <MX_GPIO_Init+0x208>)
 80073f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f2:	4a7a      	ldr	r2, [pc, #488]	; (80075dc <MX_GPIO_Init+0x208>)
 80073f4:	f043 0320 	orr.w	r3, r3, #32
 80073f8:	6313      	str	r3, [r2, #48]	; 0x30
 80073fa:	4b78      	ldr	r3, [pc, #480]	; (80075dc <MX_GPIO_Init+0x208>)
 80073fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073fe:	f003 0320 	and.w	r3, r3, #32
 8007402:	623b      	str	r3, [r7, #32]
 8007404:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007406:	2300      	movs	r3, #0
 8007408:	61fb      	str	r3, [r7, #28]
 800740a:	4b74      	ldr	r3, [pc, #464]	; (80075dc <MX_GPIO_Init+0x208>)
 800740c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740e:	4a73      	ldr	r2, [pc, #460]	; (80075dc <MX_GPIO_Init+0x208>)
 8007410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007414:	6313      	str	r3, [r2, #48]	; 0x30
 8007416:	4b71      	ldr	r3, [pc, #452]	; (80075dc <MX_GPIO_Init+0x208>)
 8007418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800741e:	61fb      	str	r3, [r7, #28]
 8007420:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007422:	2300      	movs	r3, #0
 8007424:	61bb      	str	r3, [r7, #24]
 8007426:	4b6d      	ldr	r3, [pc, #436]	; (80075dc <MX_GPIO_Init+0x208>)
 8007428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742a:	4a6c      	ldr	r2, [pc, #432]	; (80075dc <MX_GPIO_Init+0x208>)
 800742c:	f043 0304 	orr.w	r3, r3, #4
 8007430:	6313      	str	r3, [r2, #48]	; 0x30
 8007432:	4b6a      	ldr	r3, [pc, #424]	; (80075dc <MX_GPIO_Init+0x208>)
 8007434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007436:	f003 0304 	and.w	r3, r3, #4
 800743a:	61bb      	str	r3, [r7, #24]
 800743c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800743e:	2300      	movs	r3, #0
 8007440:	617b      	str	r3, [r7, #20]
 8007442:	4b66      	ldr	r3, [pc, #408]	; (80075dc <MX_GPIO_Init+0x208>)
 8007444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007446:	4a65      	ldr	r2, [pc, #404]	; (80075dc <MX_GPIO_Init+0x208>)
 8007448:	f043 0301 	orr.w	r3, r3, #1
 800744c:	6313      	str	r3, [r2, #48]	; 0x30
 800744e:	4b63      	ldr	r3, [pc, #396]	; (80075dc <MX_GPIO_Init+0x208>)
 8007450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007452:	f003 0301 	and.w	r3, r3, #1
 8007456:	617b      	str	r3, [r7, #20]
 8007458:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800745a:	2300      	movs	r3, #0
 800745c:	613b      	str	r3, [r7, #16]
 800745e:	4b5f      	ldr	r3, [pc, #380]	; (80075dc <MX_GPIO_Init+0x208>)
 8007460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007462:	4a5e      	ldr	r2, [pc, #376]	; (80075dc <MX_GPIO_Init+0x208>)
 8007464:	f043 0302 	orr.w	r3, r3, #2
 8007468:	6313      	str	r3, [r2, #48]	; 0x30
 800746a:	4b5c      	ldr	r3, [pc, #368]	; (80075dc <MX_GPIO_Init+0x208>)
 800746c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800746e:	f003 0302 	and.w	r3, r3, #2
 8007472:	613b      	str	r3, [r7, #16]
 8007474:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007476:	2300      	movs	r3, #0
 8007478:	60fb      	str	r3, [r7, #12]
 800747a:	4b58      	ldr	r3, [pc, #352]	; (80075dc <MX_GPIO_Init+0x208>)
 800747c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747e:	4a57      	ldr	r2, [pc, #348]	; (80075dc <MX_GPIO_Init+0x208>)
 8007480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007484:	6313      	str	r3, [r2, #48]	; 0x30
 8007486:	4b55      	ldr	r3, [pc, #340]	; (80075dc <MX_GPIO_Init+0x208>)
 8007488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800748e:	60fb      	str	r3, [r7, #12]
 8007490:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007492:	2300      	movs	r3, #0
 8007494:	60bb      	str	r3, [r7, #8]
 8007496:	4b51      	ldr	r3, [pc, #324]	; (80075dc <MX_GPIO_Init+0x208>)
 8007498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749a:	4a50      	ldr	r2, [pc, #320]	; (80075dc <MX_GPIO_Init+0x208>)
 800749c:	f043 0310 	orr.w	r3, r3, #16
 80074a0:	6313      	str	r3, [r2, #48]	; 0x30
 80074a2:	4b4e      	ldr	r3, [pc, #312]	; (80075dc <MX_GPIO_Init+0x208>)
 80074a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a6:	f003 0310 	and.w	r3, r3, #16
 80074aa:	60bb      	str	r3, [r7, #8]
 80074ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80074ae:	2300      	movs	r3, #0
 80074b0:	607b      	str	r3, [r7, #4]
 80074b2:	4b4a      	ldr	r3, [pc, #296]	; (80075dc <MX_GPIO_Init+0x208>)
 80074b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b6:	4a49      	ldr	r2, [pc, #292]	; (80075dc <MX_GPIO_Init+0x208>)
 80074b8:	f043 0308 	orr.w	r3, r3, #8
 80074bc:	6313      	str	r3, [r2, #48]	; 0x30
 80074be:	4b47      	ldr	r3, [pc, #284]	; (80075dc <MX_GPIO_Init+0x208>)
 80074c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c2:	f003 0308 	and.w	r3, r3, #8
 80074c6:	607b      	str	r3, [r7, #4]
 80074c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80074ca:	2200      	movs	r2, #0
 80074cc:	2116      	movs	r1, #22
 80074ce:	4844      	ldr	r0, [pc, #272]	; (80075e0 <MX_GPIO_Init+0x20c>)
 80074d0:	f004 fce2 	bl	800be98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80074d4:	2200      	movs	r2, #0
 80074d6:	2180      	movs	r1, #128	; 0x80
 80074d8:	4842      	ldr	r0, [pc, #264]	; (80075e4 <MX_GPIO_Init+0x210>)
 80074da:	f004 fcdd 	bl	800be98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80074de:	2200      	movs	r2, #0
 80074e0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80074e4:	4840      	ldr	r0, [pc, #256]	; (80075e8 <MX_GPIO_Init+0x214>)
 80074e6:	f004 fcd7 	bl	800be98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80074ea:	2200      	movs	r2, #0
 80074ec:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80074f0:	483e      	ldr	r0, [pc, #248]	; (80075ec <MX_GPIO_Init+0x218>)
 80074f2:	f004 fcd1 	bl	800be98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80074f6:	2316      	movs	r3, #22
 80074f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074fa:	2301      	movs	r3, #1
 80074fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074fe:	2300      	movs	r3, #0
 8007500:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007502:	2300      	movs	r3, #0
 8007504:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800750a:	4619      	mov	r1, r3
 800750c:	4834      	ldr	r0, [pc, #208]	; (80075e0 <MX_GPIO_Init+0x20c>)
 800750e:	f004 f9f3 	bl	800b8f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8007512:	f248 0307 	movw	r3, #32775	; 0x8007
 8007516:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8007518:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800751c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800751e:	2300      	movs	r3, #0
 8007520:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007526:	4619      	mov	r1, r3
 8007528:	482e      	ldr	r0, [pc, #184]	; (80075e4 <MX_GPIO_Init+0x210>)
 800752a:	f004 f9e5 	bl	800b8f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800752e:	2380      	movs	r3, #128	; 0x80
 8007530:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007532:	2301      	movs	r3, #1
 8007534:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007536:	2300      	movs	r3, #0
 8007538:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800753a:	2300      	movs	r3, #0
 800753c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800753e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007542:	4619      	mov	r1, r3
 8007544:	4827      	ldr	r0, [pc, #156]	; (80075e4 <MX_GPIO_Init+0x210>)
 8007546:	f004 f9d7 	bl	800b8f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800754a:	2320      	movs	r3, #32
 800754c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800754e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8007552:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007554:	2300      	movs	r3, #0
 8007556:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8007558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800755c:	4619      	mov	r1, r3
 800755e:	4820      	ldr	r0, [pc, #128]	; (80075e0 <MX_GPIO_Init+0x20c>)
 8007560:	f004 f9ca 	bl	800b8f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8007564:	2304      	movs	r3, #4
 8007566:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007568:	2300      	movs	r3, #0
 800756a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800756c:	2300      	movs	r3, #0
 800756e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8007570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007574:	4619      	mov	r1, r3
 8007576:	481e      	ldr	r0, [pc, #120]	; (80075f0 <MX_GPIO_Init+0x21c>)
 8007578:	f004 f9be 	bl	800b8f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 800757c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007580:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007582:	2300      	movs	r3, #0
 8007584:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007586:	2300      	movs	r3, #0
 8007588:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800758a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800758e:	4619      	mov	r1, r3
 8007590:	4815      	ldr	r0, [pc, #84]	; (80075e8 <MX_GPIO_Init+0x214>)
 8007592:	f004 f9b1 	bl	800b8f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8007596:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800759a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800759c:	2301      	movs	r3, #1
 800759e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075a0:	2300      	movs	r3, #0
 80075a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075a4:	2300      	movs	r3, #0
 80075a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80075a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075ac:	4619      	mov	r1, r3
 80075ae:	480e      	ldr	r0, [pc, #56]	; (80075e8 <MX_GPIO_Init+0x214>)
 80075b0:	f004 f9a2 	bl	800b8f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80075b4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80075b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075ba:	2301      	movs	r3, #1
 80075bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075be:	2300      	movs	r3, #0
 80075c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075c2:	2300      	movs	r3, #0
 80075c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80075c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075ca:	4619      	mov	r1, r3
 80075cc:	4807      	ldr	r0, [pc, #28]	; (80075ec <MX_GPIO_Init+0x218>)
 80075ce:	f004 f993 	bl	800b8f8 <HAL_GPIO_Init>

}
 80075d2:	bf00      	nop
 80075d4:	3738      	adds	r7, #56	; 0x38
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	40023800 	.word	0x40023800
 80075e0:	40020800 	.word	0x40020800
 80075e4:	40020000 	.word	0x40020000
 80075e8:	40020c00 	.word	0x40020c00
 80075ec:	40021800 	.word	0x40021800
 80075f0:	40020400 	.word	0x40020400

080075f4 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80075f8:	4b1b      	ldr	r3, [pc, #108]	; (8007668 <MX_I2C3_Init+0x74>)
 80075fa:	4a1c      	ldr	r2, [pc, #112]	; (800766c <MX_I2C3_Init+0x78>)
 80075fc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80075fe:	4b1a      	ldr	r3, [pc, #104]	; (8007668 <MX_I2C3_Init+0x74>)
 8007600:	4a1b      	ldr	r2, [pc, #108]	; (8007670 <MX_I2C3_Init+0x7c>)
 8007602:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007604:	4b18      	ldr	r3, [pc, #96]	; (8007668 <MX_I2C3_Init+0x74>)
 8007606:	2200      	movs	r2, #0
 8007608:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800760a:	4b17      	ldr	r3, [pc, #92]	; (8007668 <MX_I2C3_Init+0x74>)
 800760c:	2200      	movs	r2, #0
 800760e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007610:	4b15      	ldr	r3, [pc, #84]	; (8007668 <MX_I2C3_Init+0x74>)
 8007612:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007616:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007618:	4b13      	ldr	r3, [pc, #76]	; (8007668 <MX_I2C3_Init+0x74>)
 800761a:	2200      	movs	r2, #0
 800761c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800761e:	4b12      	ldr	r3, [pc, #72]	; (8007668 <MX_I2C3_Init+0x74>)
 8007620:	2200      	movs	r2, #0
 8007622:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007624:	4b10      	ldr	r3, [pc, #64]	; (8007668 <MX_I2C3_Init+0x74>)
 8007626:	2200      	movs	r2, #0
 8007628:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800762a:	4b0f      	ldr	r3, [pc, #60]	; (8007668 <MX_I2C3_Init+0x74>)
 800762c:	2200      	movs	r2, #0
 800762e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8007630:	480d      	ldr	r0, [pc, #52]	; (8007668 <MX_I2C3_Init+0x74>)
 8007632:	f004 fc4b 	bl	800becc <HAL_I2C_Init>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d001      	beq.n	8007640 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800763c:	f000 fe5a 	bl	80082f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007640:	2100      	movs	r1, #0
 8007642:	4809      	ldr	r0, [pc, #36]	; (8007668 <MX_I2C3_Init+0x74>)
 8007644:	f005 fc3f 	bl	800cec6 <HAL_I2CEx_ConfigAnalogFilter>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d001      	beq.n	8007652 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800764e:	f000 fe51 	bl	80082f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8007652:	2100      	movs	r1, #0
 8007654:	4804      	ldr	r0, [pc, #16]	; (8007668 <MX_I2C3_Init+0x74>)
 8007656:	f005 fc72 	bl	800cf3e <HAL_I2CEx_ConfigDigitalFilter>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d001      	beq.n	8007664 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8007660:	f000 fe48 	bl	80082f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8007664:	bf00      	nop
 8007666:	bd80      	pop	{r7, pc}
 8007668:	20000b38 	.word	0x20000b38
 800766c:	40005c00 	.word	0x40005c00
 8007670:	000186a0 	.word	0x000186a0

08007674 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b08a      	sub	sp, #40	; 0x28
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800767c:	f107 0314 	add.w	r3, r7, #20
 8007680:	2200      	movs	r2, #0
 8007682:	601a      	str	r2, [r3, #0]
 8007684:	605a      	str	r2, [r3, #4]
 8007686:	609a      	str	r2, [r3, #8]
 8007688:	60da      	str	r2, [r3, #12]
 800768a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a29      	ldr	r2, [pc, #164]	; (8007738 <HAL_I2C_MspInit+0xc4>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d14b      	bne.n	800772e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007696:	2300      	movs	r3, #0
 8007698:	613b      	str	r3, [r7, #16]
 800769a:	4b28      	ldr	r3, [pc, #160]	; (800773c <HAL_I2C_MspInit+0xc8>)
 800769c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769e:	4a27      	ldr	r2, [pc, #156]	; (800773c <HAL_I2C_MspInit+0xc8>)
 80076a0:	f043 0304 	orr.w	r3, r3, #4
 80076a4:	6313      	str	r3, [r2, #48]	; 0x30
 80076a6:	4b25      	ldr	r3, [pc, #148]	; (800773c <HAL_I2C_MspInit+0xc8>)
 80076a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076aa:	f003 0304 	and.w	r3, r3, #4
 80076ae:	613b      	str	r3, [r7, #16]
 80076b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076b2:	2300      	movs	r3, #0
 80076b4:	60fb      	str	r3, [r7, #12]
 80076b6:	4b21      	ldr	r3, [pc, #132]	; (800773c <HAL_I2C_MspInit+0xc8>)
 80076b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ba:	4a20      	ldr	r2, [pc, #128]	; (800773c <HAL_I2C_MspInit+0xc8>)
 80076bc:	f043 0301 	orr.w	r3, r3, #1
 80076c0:	6313      	str	r3, [r2, #48]	; 0x30
 80076c2:	4b1e      	ldr	r3, [pc, #120]	; (800773c <HAL_I2C_MspInit+0xc8>)
 80076c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c6:	f003 0301 	and.w	r3, r3, #1
 80076ca:	60fb      	str	r3, [r7, #12]
 80076cc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80076ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80076d4:	2312      	movs	r3, #18
 80076d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80076d8:	2301      	movs	r3, #1
 80076da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076dc:	2300      	movs	r3, #0
 80076de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80076e0:	2304      	movs	r3, #4
 80076e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80076e4:	f107 0314 	add.w	r3, r7, #20
 80076e8:	4619      	mov	r1, r3
 80076ea:	4815      	ldr	r0, [pc, #84]	; (8007740 <HAL_I2C_MspInit+0xcc>)
 80076ec:	f004 f904 	bl	800b8f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80076f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80076f6:	2312      	movs	r3, #18
 80076f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80076fa:	2301      	movs	r3, #1
 80076fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076fe:	2300      	movs	r3, #0
 8007700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007702:	2304      	movs	r3, #4
 8007704:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8007706:	f107 0314 	add.w	r3, r7, #20
 800770a:	4619      	mov	r1, r3
 800770c:	480d      	ldr	r0, [pc, #52]	; (8007744 <HAL_I2C_MspInit+0xd0>)
 800770e:	f004 f8f3 	bl	800b8f8 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8007712:	2300      	movs	r3, #0
 8007714:	60bb      	str	r3, [r7, #8]
 8007716:	4b09      	ldr	r3, [pc, #36]	; (800773c <HAL_I2C_MspInit+0xc8>)
 8007718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771a:	4a08      	ldr	r2, [pc, #32]	; (800773c <HAL_I2C_MspInit+0xc8>)
 800771c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007720:	6413      	str	r3, [r2, #64]	; 0x40
 8007722:	4b06      	ldr	r3, [pc, #24]	; (800773c <HAL_I2C_MspInit+0xc8>)
 8007724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007726:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800772a:	60bb      	str	r3, [r7, #8]
 800772c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800772e:	bf00      	nop
 8007730:	3728      	adds	r7, #40	; 0x28
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	40005c00 	.word	0x40005c00
 800773c:	40023800 	.word	0x40023800
 8007740:	40020800 	.word	0x40020800
 8007744:	40020000 	.word	0x40020000

08007748 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a0b      	ldr	r2, [pc, #44]	; (8007784 <HAL_I2C_MspDeInit+0x3c>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d10f      	bne.n	800777a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800775a:	4b0b      	ldr	r3, [pc, #44]	; (8007788 <HAL_I2C_MspDeInit+0x40>)
 800775c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775e:	4a0a      	ldr	r2, [pc, #40]	; (8007788 <HAL_I2C_MspDeInit+0x40>)
 8007760:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007764:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8007766:	f44f 7100 	mov.w	r1, #512	; 0x200
 800776a:	4808      	ldr	r0, [pc, #32]	; (800778c <HAL_I2C_MspDeInit+0x44>)
 800776c:	f004 fa70 	bl	800bc50 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8007770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007774:	4806      	ldr	r0, [pc, #24]	; (8007790 <HAL_I2C_MspDeInit+0x48>)
 8007776:	f004 fa6b 	bl	800bc50 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 800777a:	bf00      	nop
 800777c:	3708      	adds	r7, #8
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	40005c00 	.word	0x40005c00
 8007788:	40023800 	.word	0x40023800
 800778c:	40020800 	.word	0x40020800
 8007790:	40020000 	.word	0x40020000

08007794 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b08e      	sub	sp, #56	; 0x38
 8007798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800779a:	1d3b      	adds	r3, r7, #4
 800779c:	2234      	movs	r2, #52	; 0x34
 800779e:	2100      	movs	r1, #0
 80077a0:	4618      	mov	r0, r3
 80077a2:	f009 f853 	bl	801084c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80077a6:	4b39      	ldr	r3, [pc, #228]	; (800788c <MX_LTDC_Init+0xf8>)
 80077a8:	4a39      	ldr	r2, [pc, #228]	; (8007890 <MX_LTDC_Init+0xfc>)
 80077aa:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80077ac:	4b37      	ldr	r3, [pc, #220]	; (800788c <MX_LTDC_Init+0xf8>)
 80077ae:	2200      	movs	r2, #0
 80077b0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80077b2:	4b36      	ldr	r3, [pc, #216]	; (800788c <MX_LTDC_Init+0xf8>)
 80077b4:	2200      	movs	r2, #0
 80077b6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80077b8:	4b34      	ldr	r3, [pc, #208]	; (800788c <MX_LTDC_Init+0xf8>)
 80077ba:	2200      	movs	r2, #0
 80077bc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80077be:	4b33      	ldr	r3, [pc, #204]	; (800788c <MX_LTDC_Init+0xf8>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80077c4:	4b31      	ldr	r3, [pc, #196]	; (800788c <MX_LTDC_Init+0xf8>)
 80077c6:	2209      	movs	r2, #9
 80077c8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80077ca:	4b30      	ldr	r3, [pc, #192]	; (800788c <MX_LTDC_Init+0xf8>)
 80077cc:	2201      	movs	r2, #1
 80077ce:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80077d0:	4b2e      	ldr	r3, [pc, #184]	; (800788c <MX_LTDC_Init+0xf8>)
 80077d2:	221d      	movs	r2, #29
 80077d4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80077d6:	4b2d      	ldr	r3, [pc, #180]	; (800788c <MX_LTDC_Init+0xf8>)
 80077d8:	2203      	movs	r2, #3
 80077da:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80077dc:	4b2b      	ldr	r3, [pc, #172]	; (800788c <MX_LTDC_Init+0xf8>)
 80077de:	f240 120d 	movw	r2, #269	; 0x10d
 80077e2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80077e4:	4b29      	ldr	r3, [pc, #164]	; (800788c <MX_LTDC_Init+0xf8>)
 80077e6:	f240 1243 	movw	r2, #323	; 0x143
 80077ea:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80077ec:	4b27      	ldr	r3, [pc, #156]	; (800788c <MX_LTDC_Init+0xf8>)
 80077ee:	f240 1217 	movw	r2, #279	; 0x117
 80077f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80077f4:	4b25      	ldr	r3, [pc, #148]	; (800788c <MX_LTDC_Init+0xf8>)
 80077f6:	f240 1247 	movw	r2, #327	; 0x147
 80077fa:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80077fc:	4b23      	ldr	r3, [pc, #140]	; (800788c <MX_LTDC_Init+0xf8>)
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8007804:	4b21      	ldr	r3, [pc, #132]	; (800788c <MX_LTDC_Init+0xf8>)
 8007806:	2200      	movs	r2, #0
 8007808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800780c:	4b1f      	ldr	r3, [pc, #124]	; (800788c <MX_LTDC_Init+0xf8>)
 800780e:	2200      	movs	r2, #0
 8007810:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8007814:	481d      	ldr	r0, [pc, #116]	; (800788c <MX_LTDC_Init+0xf8>)
 8007816:	f005 fbd1 	bl	800cfbc <HAL_LTDC_Init>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d001      	beq.n	8007824 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8007820:	f000 fd68 	bl	80082f4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8007824:	2300      	movs	r3, #0
 8007826:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8007828:	23f0      	movs	r3, #240	; 0xf0
 800782a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800782c:	2300      	movs	r3, #0
 800782e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8007830:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8007834:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8007836:	2302      	movs	r3, #2
 8007838:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800783a:	23ff      	movs	r3, #255	; 0xff
 800783c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800783e:	2300      	movs	r3, #0
 8007840:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8007842:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007846:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8007848:	2307      	movs	r3, #7
 800784a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800784c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8007850:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8007852:	23f0      	movs	r3, #240	; 0xf0
 8007854:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8007856:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800785a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800785c:	2300      	movs	r3, #0
 800785e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8007862:	2300      	movs	r3, #0
 8007864:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8007868:	2300      	movs	r3, #0
 800786a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800786e:	1d3b      	adds	r3, r7, #4
 8007870:	2200      	movs	r2, #0
 8007872:	4619      	mov	r1, r3
 8007874:	4805      	ldr	r0, [pc, #20]	; (800788c <MX_LTDC_Init+0xf8>)
 8007876:	f005 fc71 	bl	800d15c <HAL_LTDC_ConfigLayer>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d001      	beq.n	8007884 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8007880:	f000 fd38 	bl	80082f4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8007884:	bf00      	nop
 8007886:	3738      	adds	r7, #56	; 0x38
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	20000b8c 	.word	0x20000b8c
 8007890:	40016800 	.word	0x40016800

08007894 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b09a      	sub	sp, #104	; 0x68
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800789c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80078a0:	2200      	movs	r2, #0
 80078a2:	601a      	str	r2, [r3, #0]
 80078a4:	605a      	str	r2, [r3, #4]
 80078a6:	609a      	str	r2, [r3, #8]
 80078a8:	60da      	str	r2, [r3, #12]
 80078aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80078ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078b0:	2230      	movs	r2, #48	; 0x30
 80078b2:	2100      	movs	r1, #0
 80078b4:	4618      	mov	r0, r3
 80078b6:	f008 ffc9 	bl	801084c <memset>
  if(ltdcHandle->Instance==LTDC)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a81      	ldr	r2, [pc, #516]	; (8007ac4 <HAL_LTDC_MspInit+0x230>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	f040 80fa 	bne.w	8007aba <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80078c6:	2308      	movs	r3, #8
 80078c8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80078ca:	2332      	movs	r3, #50	; 0x32
 80078cc:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80078ce:	2302      	movs	r3, #2
 80078d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80078d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80078d6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80078d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078dc:	4618      	mov	r0, r3
 80078de:	f006 fb85 	bl	800dfec <HAL_RCCEx_PeriphCLKConfig>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d001      	beq.n	80078ec <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 80078e8:	f000 fd04 	bl	80082f4 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80078ec:	2300      	movs	r3, #0
 80078ee:	623b      	str	r3, [r7, #32]
 80078f0:	4b75      	ldr	r3, [pc, #468]	; (8007ac8 <HAL_LTDC_MspInit+0x234>)
 80078f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f4:	4a74      	ldr	r2, [pc, #464]	; (8007ac8 <HAL_LTDC_MspInit+0x234>)
 80078f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80078fa:	6453      	str	r3, [r2, #68]	; 0x44
 80078fc:	4b72      	ldr	r3, [pc, #456]	; (8007ac8 <HAL_LTDC_MspInit+0x234>)
 80078fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007900:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007904:	623b      	str	r3, [r7, #32]
 8007906:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007908:	2300      	movs	r3, #0
 800790a:	61fb      	str	r3, [r7, #28]
 800790c:	4b6e      	ldr	r3, [pc, #440]	; (8007ac8 <HAL_LTDC_MspInit+0x234>)
 800790e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007910:	4a6d      	ldr	r2, [pc, #436]	; (8007ac8 <HAL_LTDC_MspInit+0x234>)
 8007912:	f043 0320 	orr.w	r3, r3, #32
 8007916:	6313      	str	r3, [r2, #48]	; 0x30
 8007918:	4b6b      	ldr	r3, [pc, #428]	; (8007ac8 <HAL_LTDC_MspInit+0x234>)
 800791a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791c:	f003 0320 	and.w	r3, r3, #32
 8007920:	61fb      	str	r3, [r7, #28]
 8007922:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007924:	2300      	movs	r3, #0
 8007926:	61bb      	str	r3, [r7, #24]
 8007928:	4b67      	ldr	r3, [pc, #412]	; (8007ac8 <HAL_LTDC_MspInit+0x234>)
 800792a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792c:	4a66      	ldr	r2, [pc, #408]	; (8007ac8 <HAL_LTDC_MspInit+0x234>)
 800792e:	f043 0301 	orr.w	r3, r3, #1
 8007932:	6313      	str	r3, [r2, #48]	; 0x30
 8007934:	4b64      	ldr	r3, [pc, #400]	; (8007ac8 <HAL_LTDC_MspInit+0x234>)
 8007936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007938:	f003 0301 	and.w	r3, r3, #1
 800793c:	61bb      	str	r3, [r7, #24]
 800793e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007940:	2300      	movs	r3, #0
 8007942:	617b      	str	r3, [r7, #20]
 8007944:	4b60      	ldr	r3, [pc, #384]	; (8007ac8 <HAL_LTDC_MspInit+0x234>)
 8007946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007948:	4a5f      	ldr	r2, [pc, #380]	; (8007ac8 <HAL_LTDC_MspInit+0x234>)
 800794a:	f043 0302 	orr.w	r3, r3, #2
 800794e:	6313      	str	r3, [r2, #48]	; 0x30
 8007950:	4b5d      	ldr	r3, [pc, #372]	; (8007ac8 <HAL_LTDC_MspInit+0x234>)
 8007952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007954:	f003 0302 	and.w	r3, r3, #2
 8007958:	617b      	str	r3, [r7, #20]
 800795a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800795c:	2300      	movs	r3, #0
 800795e:	613b      	str	r3, [r7, #16]
 8007960:	4b59      	ldr	r3, [pc, #356]	; (8007ac8 <HAL_LTDC_MspInit+0x234>)
 8007962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007964:	4a58      	ldr	r2, [pc, #352]	; (8007ac8 <HAL_LTDC_MspInit+0x234>)
 8007966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800796a:	6313      	str	r3, [r2, #48]	; 0x30
 800796c:	4b56      	ldr	r3, [pc, #344]	; (8007ac8 <HAL_LTDC_MspInit+0x234>)
 800796e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007974:	613b      	str	r3, [r7, #16]
 8007976:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007978:	2300      	movs	r3, #0
 800797a:	60fb      	str	r3, [r7, #12]
 800797c:	4b52      	ldr	r3, [pc, #328]	; (8007ac8 <HAL_LTDC_MspInit+0x234>)
 800797e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007980:	4a51      	ldr	r2, [pc, #324]	; (8007ac8 <HAL_LTDC_MspInit+0x234>)
 8007982:	f043 0304 	orr.w	r3, r3, #4
 8007986:	6313      	str	r3, [r2, #48]	; 0x30
 8007988:	4b4f      	ldr	r3, [pc, #316]	; (8007ac8 <HAL_LTDC_MspInit+0x234>)
 800798a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798c:	f003 0304 	and.w	r3, r3, #4
 8007990:	60fb      	str	r3, [r7, #12]
 8007992:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007994:	2300      	movs	r3, #0
 8007996:	60bb      	str	r3, [r7, #8]
 8007998:	4b4b      	ldr	r3, [pc, #300]	; (8007ac8 <HAL_LTDC_MspInit+0x234>)
 800799a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800799c:	4a4a      	ldr	r2, [pc, #296]	; (8007ac8 <HAL_LTDC_MspInit+0x234>)
 800799e:	f043 0308 	orr.w	r3, r3, #8
 80079a2:	6313      	str	r3, [r2, #48]	; 0x30
 80079a4:	4b48      	ldr	r3, [pc, #288]	; (8007ac8 <HAL_LTDC_MspInit+0x234>)
 80079a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a8:	f003 0308 	and.w	r3, r3, #8
 80079ac:	60bb      	str	r3, [r7, #8]
 80079ae:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80079b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079b4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079b6:	2302      	movs	r3, #2
 80079b8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079ba:	2300      	movs	r3, #0
 80079bc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079be:	2300      	movs	r3, #0
 80079c0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80079c2:	230e      	movs	r3, #14
 80079c4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80079c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80079ca:	4619      	mov	r1, r3
 80079cc:	483f      	ldr	r0, [pc, #252]	; (8007acc <HAL_LTDC_MspInit+0x238>)
 80079ce:	f003 ff93 	bl	800b8f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80079d2:	f641 0358 	movw	r3, #6232	; 0x1858
 80079d6:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079d8:	2302      	movs	r3, #2
 80079da:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079dc:	2300      	movs	r3, #0
 80079de:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079e0:	2300      	movs	r3, #0
 80079e2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80079e4:	230e      	movs	r3, #14
 80079e6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80079ec:	4619      	mov	r1, r3
 80079ee:	4838      	ldr	r0, [pc, #224]	; (8007ad0 <HAL_LTDC_MspInit+0x23c>)
 80079f0:	f003 ff82 	bl	800b8f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80079f4:	2303      	movs	r3, #3
 80079f6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079f8:	2302      	movs	r3, #2
 80079fa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079fc:	2300      	movs	r3, #0
 80079fe:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a00:	2300      	movs	r3, #0
 8007a02:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8007a04:	2309      	movs	r3, #9
 8007a06:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	4831      	ldr	r0, [pc, #196]	; (8007ad4 <HAL_LTDC_MspInit+0x240>)
 8007a10:	f003 ff72 	bl	800b8f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8007a14:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8007a18:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a1a:	2302      	movs	r3, #2
 8007a1c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a22:	2300      	movs	r3, #0
 8007a24:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007a26:	230e      	movs	r3, #14
 8007a28:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007a2e:	4619      	mov	r1, r3
 8007a30:	4828      	ldr	r0, [pc, #160]	; (8007ad4 <HAL_LTDC_MspInit+0x240>)
 8007a32:	f003 ff61 	bl	800b8f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8007a36:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8007a3a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a40:	2300      	movs	r3, #0
 8007a42:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a44:	2300      	movs	r3, #0
 8007a46:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007a48:	230e      	movs	r3, #14
 8007a4a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007a4c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007a50:	4619      	mov	r1, r3
 8007a52:	4821      	ldr	r0, [pc, #132]	; (8007ad8 <HAL_LTDC_MspInit+0x244>)
 8007a54:	f003 ff50 	bl	800b8f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin;
 8007a58:	23c0      	movs	r3, #192	; 0xc0
 8007a5a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a60:	2300      	movs	r3, #0
 8007a62:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a64:	2300      	movs	r3, #0
 8007a66:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007a68:	230e      	movs	r3, #14
 8007a6a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007a6c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007a70:	4619      	mov	r1, r3
 8007a72:	481a      	ldr	r0, [pc, #104]	; (8007adc <HAL_LTDC_MspInit+0x248>)
 8007a74:	f003 ff40 	bl	800b8f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin;
 8007a78:	2308      	movs	r3, #8
 8007a7a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a7c:	2302      	movs	r3, #2
 8007a7e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a80:	2300      	movs	r3, #0
 8007a82:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a84:	2300      	movs	r3, #0
 8007a86:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007a88:	230e      	movs	r3, #14
 8007a8a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 8007a8c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007a90:	4619      	mov	r1, r3
 8007a92:	4813      	ldr	r0, [pc, #76]	; (8007ae0 <HAL_LTDC_MspInit+0x24c>)
 8007a94:	f003 ff30 	bl	800b8f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8007a98:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007a9c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a9e:	2302      	movs	r3, #2
 8007aa0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8007aaa:	2309      	movs	r3, #9
 8007aac:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007aae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	4808      	ldr	r0, [pc, #32]	; (8007ad8 <HAL_LTDC_MspInit+0x244>)
 8007ab6:	f003 ff1f 	bl	800b8f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8007aba:	bf00      	nop
 8007abc:	3768      	adds	r7, #104	; 0x68
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	40016800 	.word	0x40016800
 8007ac8:	40023800 	.word	0x40023800
 8007acc:	40021400 	.word	0x40021400
 8007ad0:	40020000 	.word	0x40020000
 8007ad4:	40020400 	.word	0x40020400
 8007ad8:	40021800 	.word	0x40021800
 8007adc:	40020800 	.word	0x40020800
 8007ae0:	40020c00 	.word	0x40020c00

08007ae4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8007ae4:	b590      	push	{r4, r7, lr}
 8007ae6:	f6ad 4d94 	subw	sp, sp, #3220	; 0xc94
 8007aea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007aec:	f003 f956 	bl	800ad9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007af0:	f000 faa8 	bl	8008044 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007af4:	f7ff fc6e 	bl	80073d4 <MX_GPIO_Init>
  MX_CRC_Init();
 8007af8:	f7ff faf6 	bl	80070e8 <MX_CRC_Init>
  MX_DMA2D_Init();
 8007afc:	f7ff fb2a 	bl	8007154 <MX_DMA2D_Init>
  MX_FMC_Init();
 8007b00:	f7ff fb7c 	bl	80071fc <MX_FMC_Init>
  MX_I2C3_Init();
 8007b04:	f7ff fd76 	bl	80075f4 <MX_I2C3_Init>
  MX_LTDC_Init();
 8007b08:	f7ff fe44 	bl	8007794 <MX_LTDC_Init>
  MX_SPI5_Init();
 8007b0c:	f000 fbf8 	bl	8008300 <MX_SPI5_Init>
  MX_TIM1_Init();
 8007b10:	f000 fe28 	bl	8008764 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007b14:	f000 fe98 	bl	8008848 <MX_USART1_UART_Init>
  MX_X_CUBE_AI_Init();
 8007b18:	f008 fc9a 	bl	8010450 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
  //printf("Hello World!");
  user_interface_init();
 8007b1c:	f000 fb44 	bl	80081a8 <user_interface_init>
  user_interface_reset();
 8007b20:	f000 fb74 	bl	800820c <user_interface_reset>
  touch_sensor_init();
 8007b24:	f000 fbc0 	bl	80082a8 <touch_sensor_init>
  BSP_PB_Init(BUTTON_KEY, 0);
 8007b28:	2100      	movs	r1, #0
 8007b2a:	2000      	movs	r0, #0
 8007b2c:	f001 fb4e 	bl	80091cc <BSP_PB_Init>
  ai_float nn_input_data[NN_INPUT_IMAGE_HEIGHT][NN_INPUT_IMAGE_WIDTH];
  ai_float nn_output_data[NUM_CLASSES];

  pred_probType _1st_pred, _2nd_pred;
  _1st_pred.prob = _2nd_pred.prob = 0.0;
 8007b30:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007b34:	f6a3 4384 	subw	r3, r3, #3204	; 0xc84
 8007b38:	f04f 0200 	mov.w	r2, #0
 8007b3c:	601a      	str	r2, [r3, #0]
 8007b3e:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007b42:	f6a3 4384 	subw	r3, r3, #3204	; 0xc84
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007b4c:	f6a3 437c 	subw	r3, r3, #3196	; 0xc7c
 8007b50:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    BSP_TS_GetState(&ui_state);
 8007b52:	48b8      	ldr	r0, [pc, #736]	; (8007e34 <main+0x350>)
 8007b54:	f003 f870 	bl	800ac38 <BSP_TS_GetState>

    if (ui_state.TouchDetected)
 8007b58:	4bb6      	ldr	r3, [pc, #728]	; (8007e34 <main+0x350>)
 8007b5a:	881b      	ldrh	r3, [r3, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f000 818e 	beq.w	8007e7e <main+0x39a>
    {

      if ((ui_state.X > DRAW_IMG_X1 && ui_state.X < DRAW_IMG_X2)
 8007b62:	4bb4      	ldr	r3, [pc, #720]	; (8007e34 <main+0x350>)
 8007b64:	885b      	ldrh	r3, [r3, #2]
 8007b66:	2b0a      	cmp	r3, #10
 8007b68:	f240 816c 	bls.w	8007e44 <main+0x360>
 8007b6c:	4bb1      	ldr	r3, [pc, #708]	; (8007e34 <main+0x350>)
 8007b6e:	885b      	ldrh	r3, [r3, #2]
 8007b70:	2be5      	cmp	r3, #229	; 0xe5
 8007b72:	f200 8167 	bhi.w	8007e44 <main+0x360>
          && (ui_state.Y > DRAW_IMG_Y1 && ui_state.Y < DRAW_IMG_Y2))
 8007b76:	4baf      	ldr	r3, [pc, #700]	; (8007e34 <main+0x350>)
 8007b78:	889b      	ldrh	r3, [r3, #4]
 8007b7a:	2b0a      	cmp	r3, #10
 8007b7c:	f240 8162 	bls.w	8007e44 <main+0x360>
 8007b80:	4bac      	ldr	r3, [pc, #688]	; (8007e34 <main+0x350>)
 8007b82:	889b      	ldrh	r3, [r3, #4]
 8007b84:	2be5      	cmp	r3, #229	; 0xe5
 8007b86:	f200 815d 	bhi.w	8007e44 <main+0x360>
      {
        BSP_LCD_FillCircle(ui_state.X, ui_state.Y, 5);
 8007b8a:	4baa      	ldr	r3, [pc, #680]	; (8007e34 <main+0x350>)
 8007b8c:	885b      	ldrh	r3, [r3, #2]
 8007b8e:	4aa9      	ldr	r2, [pc, #676]	; (8007e34 <main+0x350>)
 8007b90:	8891      	ldrh	r1, [r2, #4]
 8007b92:	2205      	movs	r2, #5
 8007b94:	4618      	mov	r0, r3
 8007b96:	f002 fbad 	bl	800a2f4 <BSP_LCD_FillCircle>

        int x = ui_state.Y * ((float) 28 / 240);
 8007b9a:	4ba6      	ldr	r3, [pc, #664]	; (8007e34 <main+0x350>)
 8007b9c:	889b      	ldrh	r3, [r3, #4]
 8007b9e:	ee07 3a90 	vmov	s15, r3
 8007ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ba6:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8007e38 <main+0x354>
 8007baa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007bae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007bb2:	ee17 3a90 	vmov	r3, s15
 8007bb6:	f8c7 3c88 	str.w	r3, [r7, #3208]	; 0xc88
        int y = ui_state.X * ((float) 28 / 240);
 8007bba:	4b9e      	ldr	r3, [pc, #632]	; (8007e34 <main+0x350>)
 8007bbc:	885b      	ldrh	r3, [r3, #2]
 8007bbe:	ee07 3a90 	vmov	s15, r3
 8007bc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007bc6:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8007e38 <main+0x354>
 8007bca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007bce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007bd2:	ee17 3a90 	vmov	r3, s15
 8007bd6:	f8c7 3c84 	str.w	r3, [r7, #3204]	; 0xc84

        BSP_LCD_DrawPixel(y + 1 + IMG_SCALED_X_SHIFT,
 8007bda:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	33c9      	adds	r3, #201	; 0xc9
 8007be2:	b298      	uxth	r0, r3
 8007be4:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	33fb      	adds	r3, #251	; 0xfb
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	22ff      	movs	r2, #255	; 0xff
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	f002 fd05 	bl	800a600 <BSP_LCD_DrawPixel>
        IMG_SCALED_Y_SHIFT + x + 1, 255);
        BSP_LCD_DrawPixel(y - 1 + IMG_SCALED_X_SHIFT,
 8007bf6:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	33c7      	adds	r3, #199	; 0xc7
 8007bfe:	b298      	uxth	r0, r3
 8007c00:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	33f9      	adds	r3, #249	; 0xf9
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	22ff      	movs	r2, #255	; 0xff
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	f002 fcf7 	bl	800a600 <BSP_LCD_DrawPixel>
        IMG_SCALED_Y_SHIFT + x - 1, 255);
        BSP_LCD_DrawPixel(y + 1 + IMG_SCALED_X_SHIFT,
 8007c12:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	33c9      	adds	r3, #201	; 0xc9
 8007c1a:	b298      	uxth	r0, r3
 8007c1c:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	33fa      	adds	r3, #250	; 0xfa
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	22ff      	movs	r2, #255	; 0xff
 8007c28:	4619      	mov	r1, r3
 8007c2a:	f002 fce9 	bl	800a600 <BSP_LCD_DrawPixel>
        IMG_SCALED_Y_SHIFT + x, 255);
        BSP_LCD_DrawPixel(y - 1 + IMG_SCALED_X_SHIFT,
 8007c2e:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	33c7      	adds	r3, #199	; 0xc7
 8007c36:	b298      	uxth	r0, r3
 8007c38:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	33fa      	adds	r3, #250	; 0xfa
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	22ff      	movs	r2, #255	; 0xff
 8007c44:	4619      	mov	r1, r3
 8007c46:	f002 fcdb 	bl	800a600 <BSP_LCD_DrawPixel>
        IMG_SCALED_Y_SHIFT + x, 255);

        BSP_LCD_DrawPixel(y + IMG_SCALED_X_SHIFT,
 8007c4a:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	33c8      	adds	r3, #200	; 0xc8
 8007c52:	b298      	uxth	r0, r3
 8007c54:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	33fa      	adds	r3, #250	; 0xfa
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	22ff      	movs	r2, #255	; 0xff
 8007c60:	4619      	mov	r1, r3
 8007c62:	f002 fccd 	bl	800a600 <BSP_LCD_DrawPixel>
        IMG_SCALED_Y_SHIFT + x, 255);
        BSP_LCD_DrawPixel(y + IMG_SCALED_X_SHIFT,
 8007c66:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	33c8      	adds	r3, #200	; 0xc8
 8007c6e:	b298      	uxth	r0, r3
 8007c70:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	33fb      	adds	r3, #251	; 0xfb
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	22ff      	movs	r2, #255	; 0xff
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	f002 fcbf 	bl	800a600 <BSP_LCD_DrawPixel>
        IMG_SCALED_Y_SHIFT + x + 1, 255);
        BSP_LCD_DrawPixel(y + IMG_SCALED_X_SHIFT,
 8007c82:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	33c8      	adds	r3, #200	; 0xc8
 8007c8a:	b298      	uxth	r0, r3
 8007c8c:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	33f9      	adds	r3, #249	; 0xf9
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	22ff      	movs	r2, #255	; 0xff
 8007c98:	4619      	mov	r1, r3
 8007c9a:	f002 fcb1 	bl	800a600 <BSP_LCD_DrawPixel>
        IMG_SCALED_Y_SHIFT + x - 1, 255);
        BSP_LCD_DrawPixel(y + 1 + IMG_SCALED_X_SHIFT,
 8007c9e:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	33c9      	adds	r3, #201	; 0xc9
 8007ca6:	b298      	uxth	r0, r3
 8007ca8:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	33f9      	adds	r3, #249	; 0xf9
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	22ff      	movs	r2, #255	; 0xff
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	f002 fca3 	bl	800a600 <BSP_LCD_DrawPixel>
        IMG_SCALED_Y_SHIFT + x - 1, 255);
        BSP_LCD_DrawPixel(y - 1 + IMG_SCALED_X_SHIFT,
 8007cba:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	33c7      	adds	r3, #199	; 0xc7
 8007cc2:	b298      	uxth	r0, r3
 8007cc4:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	33fb      	adds	r3, #251	; 0xfb
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	22ff      	movs	r2, #255	; 0xff
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	f002 fc95 	bl	800a600 <BSP_LCD_DrawPixel>
        IMG_SCALED_Y_SHIFT + x + 1, 255);

        nn_input_data[x + 1][y + 1] = PXL_SET;
 8007cd6:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007cda:	1c5a      	adds	r2, r3, #1
 8007cdc:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007ce0:	1c58      	adds	r0, r3, #1
 8007ce2:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007ce6:	f6a3 414c 	subw	r1, r3, #3148	; 0xc4c
 8007cea:	4613      	mov	r3, r2
 8007cec:	00db      	lsls	r3, r3, #3
 8007cee:	1a9b      	subs	r3, r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	4403      	add	r3, r0
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	440b      	add	r3, r1
 8007cf8:	4a50      	ldr	r2, [pc, #320]	; (8007e3c <main+0x358>)
 8007cfa:	601a      	str	r2, [r3, #0]
        nn_input_data[x - 1][y - 1] = PXL_SET;
 8007cfc:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007d00:	1e5a      	subs	r2, r3, #1
 8007d02:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007d06:	1e58      	subs	r0, r3, #1
 8007d08:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007d0c:	f6a3 414c 	subw	r1, r3, #3148	; 0xc4c
 8007d10:	4613      	mov	r3, r2
 8007d12:	00db      	lsls	r3, r3, #3
 8007d14:	1a9b      	subs	r3, r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4403      	add	r3, r0
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	440b      	add	r3, r1
 8007d1e:	4a47      	ldr	r2, [pc, #284]	; (8007e3c <main+0x358>)
 8007d20:	601a      	str	r2, [r3, #0]
        nn_input_data[x + 1][y] = PXL_SET;
 8007d22:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007d26:	1c5a      	adds	r2, r3, #1
 8007d28:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007d2c:	f6a3 414c 	subw	r1, r3, #3148	; 0xc4c
 8007d30:	4613      	mov	r3, r2
 8007d32:	00db      	lsls	r3, r3, #3
 8007d34:	1a9b      	subs	r3, r3, r2
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	f8d7 2c84 	ldr.w	r2, [r7, #3204]	; 0xc84
 8007d3c:	4413      	add	r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	440b      	add	r3, r1
 8007d42:	4a3e      	ldr	r2, [pc, #248]	; (8007e3c <main+0x358>)
 8007d44:	601a      	str	r2, [r3, #0]
        nn_input_data[x - 1][y] = PXL_SET;
 8007d46:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007d4a:	1e5a      	subs	r2, r3, #1
 8007d4c:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007d50:	f6a3 414c 	subw	r1, r3, #3148	; 0xc4c
 8007d54:	4613      	mov	r3, r2
 8007d56:	00db      	lsls	r3, r3, #3
 8007d58:	1a9b      	subs	r3, r3, r2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	f8d7 2c84 	ldr.w	r2, [r7, #3204]	; 0xc84
 8007d60:	4413      	add	r3, r2
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	440b      	add	r3, r1
 8007d66:	4a35      	ldr	r2, [pc, #212]	; (8007e3c <main+0x358>)
 8007d68:	601a      	str	r2, [r3, #0]
        nn_input_data[x][y + 1] = PXL_SET;
 8007d6a:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007d6e:	1c58      	adds	r0, r3, #1
 8007d70:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007d74:	f6a3 414c 	subw	r1, r3, #3148	; 0xc4c
 8007d78:	f8d7 2c88 	ldr.w	r2, [r7, #3208]	; 0xc88
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	00db      	lsls	r3, r3, #3
 8007d80:	1a9b      	subs	r3, r3, r2
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	4403      	add	r3, r0
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	440b      	add	r3, r1
 8007d8a:	4a2c      	ldr	r2, [pc, #176]	; (8007e3c <main+0x358>)
 8007d8c:	601a      	str	r2, [r3, #0]
        nn_input_data[x][y - 1] = PXL_SET;
 8007d8e:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007d92:	1e58      	subs	r0, r3, #1
 8007d94:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007d98:	f6a3 414c 	subw	r1, r3, #3148	; 0xc4c
 8007d9c:	f8d7 2c88 	ldr.w	r2, [r7, #3208]	; 0xc88
 8007da0:	4613      	mov	r3, r2
 8007da2:	00db      	lsls	r3, r3, #3
 8007da4:	1a9b      	subs	r3, r3, r2
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	4403      	add	r3, r0
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	440b      	add	r3, r1
 8007dae:	4a23      	ldr	r2, [pc, #140]	; (8007e3c <main+0x358>)
 8007db0:	601a      	str	r2, [r3, #0]
        nn_input_data[x + 1][y - 1] = PXL_SET;
 8007db2:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007db6:	1c5a      	adds	r2, r3, #1
 8007db8:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007dbc:	1e58      	subs	r0, r3, #1
 8007dbe:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007dc2:	f6a3 414c 	subw	r1, r3, #3148	; 0xc4c
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	00db      	lsls	r3, r3, #3
 8007dca:	1a9b      	subs	r3, r3, r2
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	4403      	add	r3, r0
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	440b      	add	r3, r1
 8007dd4:	4a19      	ldr	r2, [pc, #100]	; (8007e3c <main+0x358>)
 8007dd6:	601a      	str	r2, [r3, #0]
        nn_input_data[x - 1][y + 1] = PXL_SET;
 8007dd8:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007ddc:	1e5a      	subs	r2, r3, #1
 8007dde:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007de2:	1c58      	adds	r0, r3, #1
 8007de4:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007de8:	f6a3 414c 	subw	r1, r3, #3148	; 0xc4c
 8007dec:	4613      	mov	r3, r2
 8007dee:	00db      	lsls	r3, r3, #3
 8007df0:	1a9b      	subs	r3, r3, r2
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	4403      	add	r3, r0
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	440b      	add	r3, r1
 8007dfa:	4a10      	ldr	r2, [pc, #64]	; (8007e3c <main+0x358>)
 8007dfc:	601a      	str	r2, [r3, #0]
        nn_input_data[x][y] = PXL_SET;
 8007dfe:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007e02:	f6a3 414c 	subw	r1, r3, #3148	; 0xc4c
 8007e06:	f8d7 2c88 	ldr.w	r2, [r7, #3208]	; 0xc88
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	00db      	lsls	r3, r3, #3
 8007e0e:	1a9b      	subs	r3, r3, r2
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	f8d7 2c84 	ldr.w	r2, [r7, #3204]	; 0xc84
 8007e16:	4413      	add	r3, r2
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	440b      	add	r3, r1
 8007e1c:	4a07      	ldr	r2, [pc, #28]	; (8007e3c <main+0x358>)
 8007e1e:	601a      	str	r2, [r3, #0]

        printf("X =%d Y=%d\r\n", ui_state.X, ui_state.Y);
 8007e20:	4b04      	ldr	r3, [pc, #16]	; (8007e34 <main+0x350>)
 8007e22:	885b      	ldrh	r3, [r3, #2]
 8007e24:	4619      	mov	r1, r3
 8007e26:	4b03      	ldr	r3, [pc, #12]	; (8007e34 <main+0x350>)
 8007e28:	889b      	ldrh	r3, [r3, #4]
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	4804      	ldr	r0, [pc, #16]	; (8007e40 <main+0x35c>)
 8007e2e:	f009 fb8f 	bl	8011550 <iprintf>
      {
 8007e32:	e024      	b.n	8007e7e <main+0x39a>
 8007e34:	20000c34 	.word	0x20000c34
 8007e38:	3deeeeef 	.word	0x3deeeeef
 8007e3c:	3f7d70a4 	.word	0x3f7d70a4
 8007e40:	08018078 	.word	0x08018078

      }

      else if ((ui_state.X > ERASE_BUTTON_X1 && ui_state.X < ERASE_BUTTON_X2)
 8007e44:	4b79      	ldr	r3, [pc, #484]	; (800802c <main+0x548>)
 8007e46:	885b      	ldrh	r3, [r3, #2]
 8007e48:	2b05      	cmp	r3, #5
 8007e4a:	d918      	bls.n	8007e7e <main+0x39a>
 8007e4c:	4b77      	ldr	r3, [pc, #476]	; (800802c <main+0x548>)
 8007e4e:	885b      	ldrh	r3, [r3, #2]
 8007e50:	2bea      	cmp	r3, #234	; 0xea
 8007e52:	d814      	bhi.n	8007e7e <main+0x39a>
          && (ui_state.Y > ERASE_BUTTON_Y1 && ui_state.Y < ERASE_BUTTON_Y2))
 8007e54:	4b75      	ldr	r3, [pc, #468]	; (800802c <main+0x548>)
 8007e56:	889b      	ldrh	r3, [r3, #4]
 8007e58:	f5b3 7f8f 	cmp.w	r3, #286	; 0x11e
 8007e5c:	d30f      	bcc.n	8007e7e <main+0x39a>
 8007e5e:	4b73      	ldr	r3, [pc, #460]	; (800802c <main+0x548>)
 8007e60:	889b      	ldrh	r3, [r3, #4]
 8007e62:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8007e66:	d80a      	bhi.n	8007e7e <main+0x39a>
      {
        user_interface_reset();
 8007e68:	f000 f9d0 	bl	800820c <user_interface_reset>
        mnist_game_reset((ai_float**)&nn_input_data, &_1st_pred, &_2nd_pred);
 8007e6c:	f107 020c 	add.w	r2, r7, #12
 8007e70:	f107 0114 	add.w	r1, r7, #20
 8007e74:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f000 f94d 	bl	8008118 <mnist_game_reset>

      }
    }
    HAL_Delay(1);
 8007e7e:	2001      	movs	r0, #1
 8007e80:	f002 ffce 	bl	800ae20 <HAL_Delay>

    if (BSP_PB_GetState(BUTTON_KEY))
 8007e84:	2000      	movs	r0, #0
 8007e86:	f001 f9f7 	bl	8009278 <BSP_PB_GetState>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f43f ae60 	beq.w	8007b52 <main+0x6e>
    {
      MX_X_CUBE_AI_Process(&nn_input_data[0][0], nn_output_data);
 8007e92:	f107 021c 	add.w	r2, r7, #28
 8007e96:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007e9a:	4611      	mov	r1, r2
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f008 fae1 	bl	8010464 <MX_X_CUBE_AI_Process>

      for (int i = 0; i < NUM_CLASSES; i++)
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	f8c7 3c8c 	str.w	r3, [r7, #3212]	; 0xc8c
 8007ea8:	e06f      	b.n	8007f8a <main+0x4a6>
      {

        if (_1st_pred.prob < nn_output_data[i])
 8007eaa:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007eae:	f6a3 437c 	subw	r3, r3, #3196	; 0xc7c
 8007eb2:	ed93 7a00 	vldr	s14, [r3]
 8007eb6:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007eba:	f6a3 4274 	subw	r2, r3, #3188	; 0xc74
 8007ebe:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	4413      	add	r3, r2
 8007ec6:	edd3 7a00 	vldr	s15, [r3]
 8007eca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ed2:	d52a      	bpl.n	8007f2a <main+0x446>
        {
          _2nd_pred.label = _1st_pred.label;
 8007ed4:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007ed8:	f6a3 437c 	subw	r3, r3, #3196	; 0xc7c
 8007edc:	791a      	ldrb	r2, [r3, #4]
 8007ede:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007ee2:	f6a3 4384 	subw	r3, r3, #3204	; 0xc84
 8007ee6:	711a      	strb	r2, [r3, #4]
          _2nd_pred.prob = _1st_pred.prob;
 8007ee8:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007eec:	f6a3 437c 	subw	r3, r3, #3196	; 0xc7c
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007ef6:	f6a3 4384 	subw	r3, r3, #3204	; 0xc84
 8007efa:	601a      	str	r2, [r3, #0]
          _1st_pred.prob = nn_output_data[i];
 8007efc:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007f00:	f6a3 4274 	subw	r2, r3, #3188	; 0xc74
 8007f04:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	4413      	add	r3, r2
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007f12:	f6a3 437c 	subw	r3, r3, #3196	; 0xc7c
 8007f16:	601a      	str	r2, [r3, #0]
          _1st_pred.label = i;
 8007f18:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007f22:	f6a3 437c 	subw	r3, r3, #3196	; 0xc7c
 8007f26:	711a      	strb	r2, [r3, #4]
 8007f28:	e02a      	b.n	8007f80 <main+0x49c>

        }
        else if (_2nd_pred.prob < nn_output_data[i])
 8007f2a:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007f2e:	f6a3 4384 	subw	r3, r3, #3204	; 0xc84
 8007f32:	ed93 7a00 	vldr	s14, [r3]
 8007f36:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007f3a:	f6a3 4274 	subw	r2, r3, #3188	; 0xc74
 8007f3e:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	4413      	add	r3, r2
 8007f46:	edd3 7a00 	vldr	s15, [r3]
 8007f4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f52:	d515      	bpl.n	8007f80 <main+0x49c>
        {
          _2nd_pred.label = i;
 8007f54:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 8007f58:	b2da      	uxtb	r2, r3
 8007f5a:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007f5e:	f6a3 4384 	subw	r3, r3, #3204	; 0xc84
 8007f62:	711a      	strb	r2, [r3, #4]
          _2nd_pred.prob = nn_output_data[i];
 8007f64:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007f68:	f6a3 4274 	subw	r2, r3, #3188	; 0xc74
 8007f6c:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	4413      	add	r3, r2
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007f7a:	f6a3 4384 	subw	r3, r3, #3204	; 0xc84
 8007f7e:	601a      	str	r2, [r3, #0]
      for (int i = 0; i < NUM_CLASSES; i++)
 8007f80:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 8007f84:	3301      	adds	r3, #1
 8007f86:	f8c7 3c8c 	str.w	r3, [r7, #3212]	; 0xc8c
 8007f8a:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 8007f8e:	2b09      	cmp	r3, #9
 8007f90:	dd8b      	ble.n	8007eaa <main+0x3c6>
        }
      }

      printf("  AI First Guess %d  %f \n\r", _1st_pred.label, _1st_pred.prob);
 8007f92:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007f96:	f6a3 437c 	subw	r3, r3, #3196	; 0xc7c
 8007f9a:	791b      	ldrb	r3, [r3, #4]
 8007f9c:	461c      	mov	r4, r3
 8007f9e:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007fa2:	f6a3 437c 	subw	r3, r3, #3196	; 0xc7c
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7fe fb45 	bl	8006638 <__aeabi_f2d>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	4621      	mov	r1, r4
 8007fb4:	481e      	ldr	r0, [pc, #120]	; (8008030 <main+0x54c>)
 8007fb6:	f009 facb 	bl	8011550 <iprintf>
      printf("  AI Second Guess %d  %f \n\r", _2nd_pred.label, _2nd_pred.prob);
 8007fba:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007fbe:	f6a3 4384 	subw	r3, r3, #3204	; 0xc84
 8007fc2:	791b      	ldrb	r3, [r3, #4]
 8007fc4:	461c      	mov	r4, r3
 8007fc6:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007fca:	f6a3 4384 	subw	r3, r3, #3204	; 0xc84
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7fe fb31 	bl	8006638 <__aeabi_f2d>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	460b      	mov	r3, r1
 8007fda:	4621      	mov	r1, r4
 8007fdc:	4815      	ldr	r0, [pc, #84]	; (8008034 <main+0x550>)
 8007fde:	f009 fab7 	bl	8011550 <iprintf>

      sprintf(_1st_pred_str, "%d", _1st_pred.label);
 8007fe2:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007fe6:	f6a3 437c 	subw	r3, r3, #3196	; 0xc7c
 8007fea:	791b      	ldrb	r3, [r3, #4]
 8007fec:	461a      	mov	r2, r3
 8007fee:	463b      	mov	r3, r7
 8007ff0:	4911      	ldr	r1, [pc, #68]	; (8008038 <main+0x554>)
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f009 fb40 	bl	8011678 <siprintf>

      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007ff8:	4810      	ldr	r0, [pc, #64]	; (800803c <main+0x558>)
 8007ffa:	f001 fe0f 	bl	8009c1c <BSP_LCD_SetTextColor>
      BSP_LCD_SetFont(&Font20);
 8007ffe:	4810      	ldr	r0, [pc, #64]	; (8008040 <main+0x55c>)
 8008000:	f001 fe3e 	bl	8009c80 <BSP_LCD_SetFont>
      BSP_LCD_SetBackColor(LCD_COLOR_LIGHTCYAN);
 8008004:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8008008:	f001 fe20 	bl	8009c4c <BSP_LCD_SetBackColor>
      BSP_LCD_DisplayStringAt(130, 255, (uint8_t*) _1st_pred_str, LEFT_MODE);
 800800c:	463a      	mov	r2, r7
 800800e:	2303      	movs	r3, #3
 8008010:	21ff      	movs	r1, #255	; 0xff
 8008012:	2082      	movs	r0, #130	; 0x82
 8008014:	f001 feba 	bl	8009d8c <BSP_LCD_DisplayStringAt>

      mnist_game_reset((ai_float**)&nn_input_data, &_1st_pred, &_2nd_pred);
 8008018:	f107 020c 	add.w	r2, r7, #12
 800801c:	f107 0114 	add.w	r1, r7, #20
 8008020:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008024:	4618      	mov	r0, r3
 8008026:	f000 f877 	bl	8008118 <mnist_game_reset>
    BSP_TS_GetState(&ui_state);
 800802a:	e592      	b.n	8007b52 <main+0x6e>
 800802c:	20000c34 	.word	0x20000c34
 8008030:	08018088 	.word	0x08018088
 8008034:	080180a4 	.word	0x080180a4
 8008038:	080180c0 	.word	0x080180c0
 800803c:	ffff0000 	.word	0xffff0000
 8008040:	20000078 	.word	0x20000078

08008044 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b094      	sub	sp, #80	; 0x50
 8008048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800804a:	f107 0320 	add.w	r3, r7, #32
 800804e:	2230      	movs	r2, #48	; 0x30
 8008050:	2100      	movs	r1, #0
 8008052:	4618      	mov	r0, r3
 8008054:	f008 fbfa 	bl	801084c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8008058:	f107 030c 	add.w	r3, r7, #12
 800805c:	2200      	movs	r2, #0
 800805e:	601a      	str	r2, [r3, #0]
 8008060:	605a      	str	r2, [r3, #4]
 8008062:	609a      	str	r2, [r3, #8]
 8008064:	60da      	str	r2, [r3, #12]
 8008066:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008068:	2300      	movs	r3, #0
 800806a:	60bb      	str	r3, [r7, #8]
 800806c:	4b28      	ldr	r3, [pc, #160]	; (8008110 <SystemClock_Config+0xcc>)
 800806e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008070:	4a27      	ldr	r2, [pc, #156]	; (8008110 <SystemClock_Config+0xcc>)
 8008072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008076:	6413      	str	r3, [r2, #64]	; 0x40
 8008078:	4b25      	ldr	r3, [pc, #148]	; (8008110 <SystemClock_Config+0xcc>)
 800807a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008080:	60bb      	str	r3, [r7, #8]
 8008082:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008084:	2300      	movs	r3, #0
 8008086:	607b      	str	r3, [r7, #4]
 8008088:	4b22      	ldr	r3, [pc, #136]	; (8008114 <SystemClock_Config+0xd0>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a21      	ldr	r2, [pc, #132]	; (8008114 <SystemClock_Config+0xd0>)
 800808e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008092:	6013      	str	r3, [r2, #0]
 8008094:	4b1f      	ldr	r3, [pc, #124]	; (8008114 <SystemClock_Config+0xd0>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800809c:	607b      	str	r3, [r7, #4]
 800809e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80080a0:	2301      	movs	r3, #1
 80080a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80080a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80080a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80080aa:	2302      	movs	r3, #2
 80080ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80080ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80080b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80080b4:	2304      	movs	r3, #4
 80080b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80080b8:	23a8      	movs	r3, #168	; 0xa8
 80080ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80080bc:	2302      	movs	r3, #2
 80080be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80080c0:	2303      	movs	r3, #3
 80080c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80080c4:	f107 0320 	add.w	r3, r7, #32
 80080c8:	4618      	mov	r0, r3
 80080ca:	f005 fac5 	bl	800d658 <HAL_RCC_OscConfig>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d001      	beq.n	80080d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80080d4:	f000 f90e 	bl	80082f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80080d8:	230f      	movs	r3, #15
 80080da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80080dc:	2302      	movs	r3, #2
 80080de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80080e0:	2300      	movs	r3, #0
 80080e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80080e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80080e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80080ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80080f0:	f107 030c 	add.w	r3, r7, #12
 80080f4:	2105      	movs	r1, #5
 80080f6:	4618      	mov	r0, r3
 80080f8:	f005 fd26 	bl	800db48 <HAL_RCC_ClockConfig>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d001      	beq.n	8008106 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8008102:	f000 f8f7 	bl	80082f4 <Error_Handler>
  }
}
 8008106:	bf00      	nop
 8008108:	3750      	adds	r7, #80	; 0x50
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	40023800 	.word	0x40023800
 8008114:	40007000 	.word	0x40007000

08008118 <mnist_game_reset>:

/* USER CODE BEGIN 4 */
void mnist_game_reset(ai_float **in_data, pred_probType *_1st_pred, pred_probType *_2nd_pred)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]

  memset(in_data, 0.0, sizeof(in_data[0][0]) * NN_INPUT_IMAGE_WIDTH * NN_INPUT_IMAGE_HEIGHT);
 8008124:	f44f 6244 	mov.w	r2, #3136	; 0xc40
 8008128:	2100      	movs	r1, #0
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f008 fb8e 	bl	801084c <memset>
  _2nd_pred->label = _2nd_pred->prob = _1st_pred->label = _1st_pred->prob = 0.0;
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	f04f 0200 	mov.w	r2, #0
 8008136:	601a      	str	r2, [r3, #0]
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	2200      	movs	r2, #0
 800813c:	711a      	strb	r2, [r3, #4]
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	791b      	ldrb	r3, [r3, #4]
 8008142:	ee07 3a90 	vmov	s15, r3
 8008146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	edc3 7a00 	vstr	s15, [r3]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	edd3 7a00 	vldr	s15, [r3]
 8008156:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800815a:	edc7 7a00 	vstr	s15, [r7]
 800815e:	783b      	ldrb	r3, [r7, #0]
 8008160:	b2da      	uxtb	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	711a      	strb	r2, [r3, #4]
}
 8008166:	bf00      	nop
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
	...

08008170 <_write>:

int _write(int fd, const void *buff, int c)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]

  HAL_StatusTypeDef st;

  st = HAL_UART_Transmit(&huart1, (uint8_t*) buff, c, HAL_MAX_DELAY);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	b29a      	uxth	r2, r3
 8008180:	f04f 33ff 	mov.w	r3, #4294967295
 8008184:	68b9      	ldr	r1, [r7, #8]
 8008186:	4807      	ldr	r0, [pc, #28]	; (80081a4 <_write+0x34>)
 8008188:	f007 fc2f 	bl	800f9ea <HAL_UART_Transmit>
 800818c:	4603      	mov	r3, r0
 800818e:	75fb      	strb	r3, [r7, #23]
  return (st == HAL_OK ? c : 0);
 8008190:	7dfb      	ldrb	r3, [r7, #23]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d101      	bne.n	800819a <_write+0x2a>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	e000      	b.n	800819c <_write+0x2c>
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	3718      	adds	r7, #24
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	20000d28 	.word	0x20000d28

080081a8 <user_interface_init>:

void user_interface_init(void)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	af00      	add	r7, sp, #0
  BSP_LCD_Init();
 80081ac:	f001 fbee 	bl	800998c <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 80081b0:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80081b4:	2001      	movs	r0, #1
 80081b6:	f001 fc6b 	bl	8009a90 <BSP_LCD_LayerDefaultInit>

  BSP_LCD_SelectLayer(1);
 80081ba:	2001      	movs	r0, #1
 80081bc:	f001 fccc 	bl	8009b58 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_RED);
 80081c0:	480f      	ldr	r0, [pc, #60]	; (8008200 <user_interface_init+0x58>)
 80081c2:	f001 fd77 	bl	8009cb4 <BSP_LCD_Clear>
  BSP_LCD_SetColorKeying(1, LCD_COLOR_DARKCYAN);
 80081c6:	490f      	ldr	r1, [pc, #60]	; (8008204 <user_interface_init+0x5c>)
 80081c8:	2001      	movs	r0, #1
 80081ca:	f001 fd13 	bl	8009bf4 <BSP_LCD_SetColorKeying>
  BSP_LCD_SetLayerVisible(1, DISABLE);
 80081ce:	2100      	movs	r1, #0
 80081d0:	2001      	movs	r0, #1
 80081d2:	f001 fcd1 	bl	8009b78 <BSP_LCD_SetLayerVisible>

  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 80081d6:	490c      	ldr	r1, [pc, #48]	; (8008208 <user_interface_init+0x60>)
 80081d8:	2000      	movs	r0, #0
 80081da:	f001 fc59 	bl	8009a90 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 80081de:	2000      	movs	r0, #0
 80081e0:	f001 fcba 	bl	8009b58 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 80081e4:	f002 f926 	bl	800a434 <BSP_LCD_DisplayOn>
  HAL_Delay(150);
 80081e8:	2096      	movs	r0, #150	; 0x96
 80081ea:	f002 fe19 	bl	800ae20 <HAL_Delay>
  BSP_LCD_Clear(LCD_COLOR_LIGHTCYAN);
 80081ee:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 80081f2:	f001 fd5f 	bl	8009cb4 <BSP_LCD_Clear>
  HAL_Delay(100);
 80081f6:	2064      	movs	r0, #100	; 0x64
 80081f8:	f002 fe12 	bl	800ae20 <HAL_Delay>
}
 80081fc:	bf00      	nop
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	ffff0000 	.word	0xffff0000
 8008204:	ff008080 	.word	0xff008080
 8008208:	d0130000 	.word	0xd0130000

0800820c <user_interface_reset>:

void user_interface_reset(void)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	af00      	add	r7, sp, #0
  BSP_LCD_Clear(LCD_COLOR_LIGHTCYAN);
 8008210:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8008214:	f001 fd4e 	bl	8009cb4 <BSP_LCD_Clear>
  //NOTE COLOR CHANGED FROM DARKYELLOW TO BLACK
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8008218:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800821c:	f001 fcfe 	bl	8009c1c <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font16);
 8008220:	481d      	ldr	r0, [pc, #116]	; (8008298 <user_interface_reset+0x8c>)
 8008222:	f001 fd2d 	bl	8009c80 <BSP_LCD_SetFont>
  BSP_LCD_SetBackColor(LCD_COLOR_LIGHTCYAN);
 8008226:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 800822a:	f001 fd0f 	bl	8009c4c <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(5, 255, (uint8_t*) "AI  Guess:", LEFT_MODE);
 800822e:	2303      	movs	r3, #3
 8008230:	4a1a      	ldr	r2, [pc, #104]	; (800829c <user_interface_reset+0x90>)
 8008232:	21ff      	movs	r1, #255	; 0xff
 8008234:	2005      	movs	r0, #5
 8008236:	f001 fda9 	bl	8009d8c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DrawRect(200, 250, 28, 28);
 800823a:	231c      	movs	r3, #28
 800823c:	221c      	movs	r2, #28
 800823e:	21fa      	movs	r1, #250	; 0xfa
 8008240:	20c8      	movs	r0, #200	; 0xc8
 8008242:	f001 fee1 	bl	800a008 <BSP_LCD_DrawRect>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8008246:	4816      	ldr	r0, [pc, #88]	; (80082a0 <user_interface_reset+0x94>)
 8008248:	f001 fce8 	bl	8009c1c <BSP_LCD_SetTextColor>

  BSP_LCD_FillRect(5, 285, 230, 30);
 800824c:	231e      	movs	r3, #30
 800824e:	22e6      	movs	r2, #230	; 0xe6
 8008250:	f240 111d 	movw	r1, #285	; 0x11d
 8008254:	2005      	movs	r0, #5
 8008256:	f001 fff3 	bl	800a240 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800825a:	f04f 30ff 	mov.w	r0, #4294967295
 800825e:	f001 fcdd 	bl	8009c1c <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font16);
 8008262:	480d      	ldr	r0, [pc, #52]	; (8008298 <user_interface_reset+0x8c>)
 8008264:	f001 fd0c 	bl	8009c80 <BSP_LCD_SetFont>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8008268:	480d      	ldr	r0, [pc, #52]	; (80082a0 <user_interface_reset+0x94>)
 800826a:	f001 fcef 	bl	8009c4c <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(330, 291, (uint8_t*) "ERASE", LEFT_MODE);
 800826e:	2303      	movs	r3, #3
 8008270:	4a0c      	ldr	r2, [pc, #48]	; (80082a4 <user_interface_reset+0x98>)
 8008272:	f240 1123 	movw	r1, #291	; 0x123
 8008276:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 800827a:	f001 fd87 	bl	8009d8c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DrawRect(2, 2, 237, 237);
 800827e:	23ed      	movs	r3, #237	; 0xed
 8008280:	22ed      	movs	r2, #237	; 0xed
 8008282:	2102      	movs	r1, #2
 8008284:	2002      	movs	r0, #2
 8008286:	f001 febf 	bl	800a008 <BSP_LCD_DrawRect>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800828a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800828e:	f001 fcc5 	bl	8009c1c <BSP_LCD_SetTextColor>
}
 8008292:	bf00      	nop
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	20000080 	.word	0x20000080
 800829c:	080180c4 	.word	0x080180c4
 80082a0:	ff0000ff 	.word	0xff0000ff
 80082a4:	080180d0 	.word	0x080180d0

080082a8 <touch_sensor_init>:

void touch_sensor_init(void)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	af00      	add	r7, sp, #0
  if (BSP_TS_Init(240, 320) == TS_ERROR)
 80082ac:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80082b0:	20f0      	movs	r0, #240	; 0xf0
 80082b2:	f002 fc87 	bl	800abc4 <BSP_TS_Init>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d102      	bne.n	80082c2 <touch_sensor_init+0x1a>
  {
    printf("Touch sensor failure\r\n");
 80082bc:	4803      	ldr	r0, [pc, #12]	; (80082cc <touch_sensor_init+0x24>)
 80082be:	f009 f9cd 	bl	801165c <puts>
  }
  HAL_Delay(100);
 80082c2:	2064      	movs	r0, #100	; 0x64
 80082c4:	f002 fdac 	bl	800ae20 <HAL_Delay>
}
 80082c8:	bf00      	nop
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	080180d8 	.word	0x080180d8

080082d0 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a04      	ldr	r2, [pc, #16]	; (80082f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d101      	bne.n	80082e6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80082e2:	f002 fd7d 	bl	800ade0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80082e6:	bf00      	nop
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	40001000 	.word	0x40001000

080082f4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80082f4:	b480      	push	{r7}
 80082f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80082f8:	b672      	cpsid	i
}
 80082fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80082fc:	e7fe      	b.n	80082fc <Error_Handler+0x8>
	...

08008300 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8008304:	4b17      	ldr	r3, [pc, #92]	; (8008364 <MX_SPI5_Init+0x64>)
 8008306:	4a18      	ldr	r2, [pc, #96]	; (8008368 <MX_SPI5_Init+0x68>)
 8008308:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800830a:	4b16      	ldr	r3, [pc, #88]	; (8008364 <MX_SPI5_Init+0x64>)
 800830c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008310:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8008312:	4b14      	ldr	r3, [pc, #80]	; (8008364 <MX_SPI5_Init+0x64>)
 8008314:	2200      	movs	r2, #0
 8008316:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8008318:	4b12      	ldr	r3, [pc, #72]	; (8008364 <MX_SPI5_Init+0x64>)
 800831a:	2200      	movs	r2, #0
 800831c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800831e:	4b11      	ldr	r3, [pc, #68]	; (8008364 <MX_SPI5_Init+0x64>)
 8008320:	2200      	movs	r2, #0
 8008322:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008324:	4b0f      	ldr	r3, [pc, #60]	; (8008364 <MX_SPI5_Init+0x64>)
 8008326:	2200      	movs	r2, #0
 8008328:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800832a:	4b0e      	ldr	r3, [pc, #56]	; (8008364 <MX_SPI5_Init+0x64>)
 800832c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008330:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008332:	4b0c      	ldr	r3, [pc, #48]	; (8008364 <MX_SPI5_Init+0x64>)
 8008334:	2200      	movs	r2, #0
 8008336:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008338:	4b0a      	ldr	r3, [pc, #40]	; (8008364 <MX_SPI5_Init+0x64>)
 800833a:	2200      	movs	r2, #0
 800833c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800833e:	4b09      	ldr	r3, [pc, #36]	; (8008364 <MX_SPI5_Init+0x64>)
 8008340:	2200      	movs	r2, #0
 8008342:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008344:	4b07      	ldr	r3, [pc, #28]	; (8008364 <MX_SPI5_Init+0x64>)
 8008346:	2200      	movs	r2, #0
 8008348:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800834a:	4b06      	ldr	r3, [pc, #24]	; (8008364 <MX_SPI5_Init+0x64>)
 800834c:	220a      	movs	r2, #10
 800834e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8008350:	4804      	ldr	r0, [pc, #16]	; (8008364 <MX_SPI5_Init+0x64>)
 8008352:	f006 f89c 	bl	800e48e <HAL_SPI_Init>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d001      	beq.n	8008360 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800835c:	f7ff ffca 	bl	80082f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8008360:	bf00      	nop
 8008362:	bd80      	pop	{r7, pc}
 8008364:	20000c3c 	.word	0x20000c3c
 8008368:	40015000 	.word	0x40015000

0800836c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b08a      	sub	sp, #40	; 0x28
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008374:	f107 0314 	add.w	r3, r7, #20
 8008378:	2200      	movs	r2, #0
 800837a:	601a      	str	r2, [r3, #0]
 800837c:	605a      	str	r2, [r3, #4]
 800837e:	609a      	str	r2, [r3, #8]
 8008380:	60da      	str	r2, [r3, #12]
 8008382:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a19      	ldr	r2, [pc, #100]	; (80083f0 <HAL_SPI_MspInit+0x84>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d12c      	bne.n	80083e8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800838e:	2300      	movs	r3, #0
 8008390:	613b      	str	r3, [r7, #16]
 8008392:	4b18      	ldr	r3, [pc, #96]	; (80083f4 <HAL_SPI_MspInit+0x88>)
 8008394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008396:	4a17      	ldr	r2, [pc, #92]	; (80083f4 <HAL_SPI_MspInit+0x88>)
 8008398:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800839c:	6453      	str	r3, [r2, #68]	; 0x44
 800839e:	4b15      	ldr	r3, [pc, #84]	; (80083f4 <HAL_SPI_MspInit+0x88>)
 80083a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083a6:	613b      	str	r3, [r7, #16]
 80083a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80083aa:	2300      	movs	r3, #0
 80083ac:	60fb      	str	r3, [r7, #12]
 80083ae:	4b11      	ldr	r3, [pc, #68]	; (80083f4 <HAL_SPI_MspInit+0x88>)
 80083b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b2:	4a10      	ldr	r2, [pc, #64]	; (80083f4 <HAL_SPI_MspInit+0x88>)
 80083b4:	f043 0320 	orr.w	r3, r3, #32
 80083b8:	6313      	str	r3, [r2, #48]	; 0x30
 80083ba:	4b0e      	ldr	r3, [pc, #56]	; (80083f4 <HAL_SPI_MspInit+0x88>)
 80083bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083be:	f003 0320 	and.w	r3, r3, #32
 80083c2:	60fb      	str	r3, [r7, #12]
 80083c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80083c6:	f44f 7360 	mov.w	r3, #896	; 0x380
 80083ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083cc:	2302      	movs	r3, #2
 80083ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083d0:	2300      	movs	r3, #0
 80083d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083d4:	2300      	movs	r3, #0
 80083d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80083d8:	2305      	movs	r3, #5
 80083da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80083dc:	f107 0314 	add.w	r3, r7, #20
 80083e0:	4619      	mov	r1, r3
 80083e2:	4805      	ldr	r0, [pc, #20]	; (80083f8 <HAL_SPI_MspInit+0x8c>)
 80083e4:	f003 fa88 	bl	800b8f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80083e8:	bf00      	nop
 80083ea:	3728      	adds	r7, #40	; 0x28
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	40015000 	.word	0x40015000
 80083f4:	40023800 	.word	0x40023800
 80083f8:	40021400 	.word	0x40021400

080083fc <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a08      	ldr	r2, [pc, #32]	; (800842c <HAL_SPI_MspDeInit+0x30>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d10a      	bne.n	8008424 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800840e:	4b08      	ldr	r3, [pc, #32]	; (8008430 <HAL_SPI_MspDeInit+0x34>)
 8008410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008412:	4a07      	ldr	r2, [pc, #28]	; (8008430 <HAL_SPI_MspDeInit+0x34>)
 8008414:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008418:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800841a:	f44f 7160 	mov.w	r1, #896	; 0x380
 800841e:	4805      	ldr	r0, [pc, #20]	; (8008434 <HAL_SPI_MspDeInit+0x38>)
 8008420:	f003 fc16 	bl	800bc50 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8008424:	bf00      	nop
 8008426:	3708      	adds	r7, #8
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	40015000 	.word	0x40015000
 8008430:	40023800 	.word	0x40023800
 8008434:	40021400 	.word	0x40021400

08008438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800843e:	2300      	movs	r3, #0
 8008440:	607b      	str	r3, [r7, #4]
 8008442:	4b10      	ldr	r3, [pc, #64]	; (8008484 <HAL_MspInit+0x4c>)
 8008444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008446:	4a0f      	ldr	r2, [pc, #60]	; (8008484 <HAL_MspInit+0x4c>)
 8008448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800844c:	6453      	str	r3, [r2, #68]	; 0x44
 800844e:	4b0d      	ldr	r3, [pc, #52]	; (8008484 <HAL_MspInit+0x4c>)
 8008450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008456:	607b      	str	r3, [r7, #4]
 8008458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800845a:	2300      	movs	r3, #0
 800845c:	603b      	str	r3, [r7, #0]
 800845e:	4b09      	ldr	r3, [pc, #36]	; (8008484 <HAL_MspInit+0x4c>)
 8008460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008462:	4a08      	ldr	r2, [pc, #32]	; (8008484 <HAL_MspInit+0x4c>)
 8008464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008468:	6413      	str	r3, [r2, #64]	; 0x40
 800846a:	4b06      	ldr	r3, [pc, #24]	; (8008484 <HAL_MspInit+0x4c>)
 800846c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800846e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008472:	603b      	str	r3, [r7, #0]
 8008474:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008476:	bf00      	nop
 8008478:	370c      	adds	r7, #12
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	40023800 	.word	0x40023800

08008488 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b08e      	sub	sp, #56	; 0x38
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8008490:	2300      	movs	r3, #0
 8008492:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8008494:	2300      	movs	r3, #0
 8008496:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8008498:	2300      	movs	r3, #0
 800849a:	60fb      	str	r3, [r7, #12]
 800849c:	4b33      	ldr	r3, [pc, #204]	; (800856c <HAL_InitTick+0xe4>)
 800849e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a0:	4a32      	ldr	r2, [pc, #200]	; (800856c <HAL_InitTick+0xe4>)
 80084a2:	f043 0310 	orr.w	r3, r3, #16
 80084a6:	6413      	str	r3, [r2, #64]	; 0x40
 80084a8:	4b30      	ldr	r3, [pc, #192]	; (800856c <HAL_InitTick+0xe4>)
 80084aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ac:	f003 0310 	and.w	r3, r3, #16
 80084b0:	60fb      	str	r3, [r7, #12]
 80084b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80084b4:	f107 0210 	add.w	r2, r7, #16
 80084b8:	f107 0314 	add.w	r3, r7, #20
 80084bc:	4611      	mov	r1, r2
 80084be:	4618      	mov	r0, r3
 80084c0:	f005 fd62 	bl	800df88 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80084c4:	6a3b      	ldr	r3, [r7, #32]
 80084c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80084c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d103      	bne.n	80084d6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80084ce:	f005 fd33 	bl	800df38 <HAL_RCC_GetPCLK1Freq>
 80084d2:	6378      	str	r0, [r7, #52]	; 0x34
 80084d4:	e004      	b.n	80084e0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80084d6:	f005 fd2f 	bl	800df38 <HAL_RCC_GetPCLK1Freq>
 80084da:	4603      	mov	r3, r0
 80084dc:	005b      	lsls	r3, r3, #1
 80084de:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80084e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e2:	4a23      	ldr	r2, [pc, #140]	; (8008570 <HAL_InitTick+0xe8>)
 80084e4:	fba2 2303 	umull	r2, r3, r2, r3
 80084e8:	0c9b      	lsrs	r3, r3, #18
 80084ea:	3b01      	subs	r3, #1
 80084ec:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80084ee:	4b21      	ldr	r3, [pc, #132]	; (8008574 <HAL_InitTick+0xec>)
 80084f0:	4a21      	ldr	r2, [pc, #132]	; (8008578 <HAL_InitTick+0xf0>)
 80084f2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80084f4:	4b1f      	ldr	r3, [pc, #124]	; (8008574 <HAL_InitTick+0xec>)
 80084f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80084fa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80084fc:	4a1d      	ldr	r2, [pc, #116]	; (8008574 <HAL_InitTick+0xec>)
 80084fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008500:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8008502:	4b1c      	ldr	r3, [pc, #112]	; (8008574 <HAL_InitTick+0xec>)
 8008504:	2200      	movs	r2, #0
 8008506:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008508:	4b1a      	ldr	r3, [pc, #104]	; (8008574 <HAL_InitTick+0xec>)
 800850a:	2200      	movs	r2, #0
 800850c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800850e:	4b19      	ldr	r3, [pc, #100]	; (8008574 <HAL_InitTick+0xec>)
 8008510:	2200      	movs	r2, #0
 8008512:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8008514:	4817      	ldr	r0, [pc, #92]	; (8008574 <HAL_InitTick+0xec>)
 8008516:	f006 fd99 	bl	800f04c <HAL_TIM_Base_Init>
 800851a:	4603      	mov	r3, r0
 800851c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8008520:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008524:	2b00      	cmp	r3, #0
 8008526:	d11b      	bne.n	8008560 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8008528:	4812      	ldr	r0, [pc, #72]	; (8008574 <HAL_InitTick+0xec>)
 800852a:	f006 fddf 	bl	800f0ec <HAL_TIM_Base_Start_IT>
 800852e:	4603      	mov	r3, r0
 8008530:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8008534:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008538:	2b00      	cmp	r3, #0
 800853a:	d111      	bne.n	8008560 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800853c:	2036      	movs	r0, #54	; 0x36
 800853e:	f002 fd67 	bl	800b010 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2b0f      	cmp	r3, #15
 8008546:	d808      	bhi.n	800855a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8008548:	2200      	movs	r2, #0
 800854a:	6879      	ldr	r1, [r7, #4]
 800854c:	2036      	movs	r0, #54	; 0x36
 800854e:	f002 fd43 	bl	800afd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008552:	4a0a      	ldr	r2, [pc, #40]	; (800857c <HAL_InitTick+0xf4>)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6013      	str	r3, [r2, #0]
 8008558:	e002      	b.n	8008560 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8008560:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8008564:	4618      	mov	r0, r3
 8008566:	3738      	adds	r7, #56	; 0x38
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	40023800 	.word	0x40023800
 8008570:	431bde83 	.word	0x431bde83
 8008574:	20000c94 	.word	0x20000c94
 8008578:	40001000 	.word	0x40001000
 800857c:	2000008c 	.word	0x2000008c

08008580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008580:	b480      	push	{r7}
 8008582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008584:	e7fe      	b.n	8008584 <NMI_Handler+0x4>

08008586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008586:	b480      	push	{r7}
 8008588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800858a:	e7fe      	b.n	800858a <HardFault_Handler+0x4>

0800858c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800858c:	b480      	push	{r7}
 800858e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008590:	e7fe      	b.n	8008590 <MemManage_Handler+0x4>

08008592 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008592:	b480      	push	{r7}
 8008594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008596:	e7fe      	b.n	8008596 <BusFault_Handler+0x4>

08008598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008598:	b480      	push	{r7}
 800859a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800859c:	e7fe      	b.n	800859c <UsageFault_Handler+0x4>

0800859e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800859e:	b480      	push	{r7}
 80085a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80085a2:	bf00      	nop
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80085ac:	b480      	push	{r7}
 80085ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80085b0:	bf00      	nop
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80085ba:	b480      	push	{r7}
 80085bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80085be:	bf00      	nop
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80085c8:	b480      	push	{r7}
 80085ca:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80085cc:	bf00      	nop
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr
	...

080085d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80085dc:	4802      	ldr	r0, [pc, #8]	; (80085e8 <TIM6_DAC_IRQHandler+0x10>)
 80085de:	f006 fdf5 	bl	800f1cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80085e2:	bf00      	nop
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	20000c94 	.word	0x20000c94

080085ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80085ec:	b480      	push	{r7}
 80085ee:	af00      	add	r7, sp, #0
  return 1;
 80085f0:	2301      	movs	r3, #1
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <_kill>:

int _kill(int pid, int sig)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008606:	f008 f8d9 	bl	80107bc <__errno>
 800860a:	4603      	mov	r3, r0
 800860c:	2216      	movs	r2, #22
 800860e:	601a      	str	r2, [r3, #0]
  return -1;
 8008610:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008614:	4618      	mov	r0, r3
 8008616:	3708      	adds	r7, #8
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <_exit>:

void _exit (int status)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008624:	f04f 31ff 	mov.w	r1, #4294967295
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f7ff ffe7 	bl	80085fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800862e:	e7fe      	b.n	800862e <_exit+0x12>

08008630 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800863c:	2300      	movs	r3, #0
 800863e:	617b      	str	r3, [r7, #20]
 8008640:	e00a      	b.n	8008658 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008642:	f3af 8000 	nop.w
 8008646:	4601      	mov	r1, r0
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	1c5a      	adds	r2, r3, #1
 800864c:	60ba      	str	r2, [r7, #8]
 800864e:	b2ca      	uxtb	r2, r1
 8008650:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	3301      	adds	r3, #1
 8008656:	617b      	str	r3, [r7, #20]
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	429a      	cmp	r2, r3
 800865e:	dbf0      	blt.n	8008642 <_read+0x12>
  }

  return len;
 8008660:	687b      	ldr	r3, [r7, #4]
}
 8008662:	4618      	mov	r0, r3
 8008664:	3718      	adds	r7, #24
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}

0800866a <_close>:
  }
  return len;
}

int _close(int file)
{
 800866a:	b480      	push	{r7}
 800866c:	b083      	sub	sp, #12
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008672:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008676:	4618      	mov	r0, r3
 8008678:	370c      	adds	r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr

08008682 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008682:	b480      	push	{r7}
 8008684:	b083      	sub	sp, #12
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
 800868a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008692:	605a      	str	r2, [r3, #4]
  return 0;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	370c      	adds	r7, #12
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr

080086a2 <_isatty>:

int _isatty(int file)
{
 80086a2:	b480      	push	{r7}
 80086a4:	b083      	sub	sp, #12
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80086aa:	2301      	movs	r3, #1
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	370c      	adds	r7, #12
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr

080086b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3714      	adds	r7, #20
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr
	...

080086d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b086      	sub	sp, #24
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80086dc:	4a14      	ldr	r2, [pc, #80]	; (8008730 <_sbrk+0x5c>)
 80086de:	4b15      	ldr	r3, [pc, #84]	; (8008734 <_sbrk+0x60>)
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80086e8:	4b13      	ldr	r3, [pc, #76]	; (8008738 <_sbrk+0x64>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d102      	bne.n	80086f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80086f0:	4b11      	ldr	r3, [pc, #68]	; (8008738 <_sbrk+0x64>)
 80086f2:	4a12      	ldr	r2, [pc, #72]	; (800873c <_sbrk+0x68>)
 80086f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80086f6:	4b10      	ldr	r3, [pc, #64]	; (8008738 <_sbrk+0x64>)
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4413      	add	r3, r2
 80086fe:	693a      	ldr	r2, [r7, #16]
 8008700:	429a      	cmp	r2, r3
 8008702:	d207      	bcs.n	8008714 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008704:	f008 f85a 	bl	80107bc <__errno>
 8008708:	4603      	mov	r3, r0
 800870a:	220c      	movs	r2, #12
 800870c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800870e:	f04f 33ff 	mov.w	r3, #4294967295
 8008712:	e009      	b.n	8008728 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008714:	4b08      	ldr	r3, [pc, #32]	; (8008738 <_sbrk+0x64>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800871a:	4b07      	ldr	r3, [pc, #28]	; (8008738 <_sbrk+0x64>)
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4413      	add	r3, r2
 8008722:	4a05      	ldr	r2, [pc, #20]	; (8008738 <_sbrk+0x64>)
 8008724:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008726:	68fb      	ldr	r3, [r7, #12]
}
 8008728:	4618      	mov	r0, r3
 800872a:	3718      	adds	r7, #24
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	20030000 	.word	0x20030000
 8008734:	00004000 	.word	0x00004000
 8008738:	20000cdc 	.word	0x20000cdc
 800873c:	20019ff0 	.word	0x20019ff0

08008740 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008740:	b480      	push	{r7}
 8008742:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008744:	4b06      	ldr	r3, [pc, #24]	; (8008760 <SystemInit+0x20>)
 8008746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800874a:	4a05      	ldr	r2, [pc, #20]	; (8008760 <SystemInit+0x20>)
 800874c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008750:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008754:	bf00      	nop
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	e000ed00 	.word	0xe000ed00

08008764 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b086      	sub	sp, #24
 8008768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800876a:	f107 0308 	add.w	r3, r7, #8
 800876e:	2200      	movs	r2, #0
 8008770:	601a      	str	r2, [r3, #0]
 8008772:	605a      	str	r2, [r3, #4]
 8008774:	609a      	str	r2, [r3, #8]
 8008776:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008778:	463b      	mov	r3, r7
 800877a:	2200      	movs	r2, #0
 800877c:	601a      	str	r2, [r3, #0]
 800877e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008780:	4b1e      	ldr	r3, [pc, #120]	; (80087fc <MX_TIM1_Init+0x98>)
 8008782:	4a1f      	ldr	r2, [pc, #124]	; (8008800 <MX_TIM1_Init+0x9c>)
 8008784:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8008786:	4b1d      	ldr	r3, [pc, #116]	; (80087fc <MX_TIM1_Init+0x98>)
 8008788:	2200      	movs	r2, #0
 800878a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800878c:	4b1b      	ldr	r3, [pc, #108]	; (80087fc <MX_TIM1_Init+0x98>)
 800878e:	2200      	movs	r2, #0
 8008790:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8008792:	4b1a      	ldr	r3, [pc, #104]	; (80087fc <MX_TIM1_Init+0x98>)
 8008794:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008798:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800879a:	4b18      	ldr	r3, [pc, #96]	; (80087fc <MX_TIM1_Init+0x98>)
 800879c:	2200      	movs	r2, #0
 800879e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80087a0:	4b16      	ldr	r3, [pc, #88]	; (80087fc <MX_TIM1_Init+0x98>)
 80087a2:	2200      	movs	r2, #0
 80087a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80087a6:	4b15      	ldr	r3, [pc, #84]	; (80087fc <MX_TIM1_Init+0x98>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80087ac:	4813      	ldr	r0, [pc, #76]	; (80087fc <MX_TIM1_Init+0x98>)
 80087ae:	f006 fc4d 	bl	800f04c <HAL_TIM_Base_Init>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d001      	beq.n	80087bc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80087b8:	f7ff fd9c 	bl	80082f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80087bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80087c2:	f107 0308 	add.w	r3, r7, #8
 80087c6:	4619      	mov	r1, r3
 80087c8:	480c      	ldr	r0, [pc, #48]	; (80087fc <MX_TIM1_Init+0x98>)
 80087ca:	f006 fe07 	bl	800f3dc <HAL_TIM_ConfigClockSource>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d001      	beq.n	80087d8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80087d4:	f7ff fd8e 	bl	80082f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80087d8:	2300      	movs	r3, #0
 80087da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80087dc:	2300      	movs	r3, #0
 80087de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80087e0:	463b      	mov	r3, r7
 80087e2:	4619      	mov	r1, r3
 80087e4:	4805      	ldr	r0, [pc, #20]	; (80087fc <MX_TIM1_Init+0x98>)
 80087e6:	f007 f823 	bl	800f830 <HAL_TIMEx_MasterConfigSynchronization>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d001      	beq.n	80087f4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80087f0:	f7ff fd80 	bl	80082f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80087f4:	bf00      	nop
 80087f6:	3718      	adds	r7, #24
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	20000ce0 	.word	0x20000ce0
 8008800:	40010000 	.word	0x40010000

08008804 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008804:	b480      	push	{r7}
 8008806:	b085      	sub	sp, #20
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a0b      	ldr	r2, [pc, #44]	; (8008840 <HAL_TIM_Base_MspInit+0x3c>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d10d      	bne.n	8008832 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008816:	2300      	movs	r3, #0
 8008818:	60fb      	str	r3, [r7, #12]
 800881a:	4b0a      	ldr	r3, [pc, #40]	; (8008844 <HAL_TIM_Base_MspInit+0x40>)
 800881c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800881e:	4a09      	ldr	r2, [pc, #36]	; (8008844 <HAL_TIM_Base_MspInit+0x40>)
 8008820:	f043 0301 	orr.w	r3, r3, #1
 8008824:	6453      	str	r3, [r2, #68]	; 0x44
 8008826:	4b07      	ldr	r3, [pc, #28]	; (8008844 <HAL_TIM_Base_MspInit+0x40>)
 8008828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800882a:	f003 0301 	and.w	r3, r3, #1
 800882e:	60fb      	str	r3, [r7, #12]
 8008830:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8008832:	bf00      	nop
 8008834:	3714      	adds	r7, #20
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	40010000 	.word	0x40010000
 8008844:	40023800 	.word	0x40023800

08008848 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800884c:	4b11      	ldr	r3, [pc, #68]	; (8008894 <MX_USART1_UART_Init+0x4c>)
 800884e:	4a12      	ldr	r2, [pc, #72]	; (8008898 <MX_USART1_UART_Init+0x50>)
 8008850:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008852:	4b10      	ldr	r3, [pc, #64]	; (8008894 <MX_USART1_UART_Init+0x4c>)
 8008854:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008858:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800885a:	4b0e      	ldr	r3, [pc, #56]	; (8008894 <MX_USART1_UART_Init+0x4c>)
 800885c:	2200      	movs	r2, #0
 800885e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008860:	4b0c      	ldr	r3, [pc, #48]	; (8008894 <MX_USART1_UART_Init+0x4c>)
 8008862:	2200      	movs	r2, #0
 8008864:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008866:	4b0b      	ldr	r3, [pc, #44]	; (8008894 <MX_USART1_UART_Init+0x4c>)
 8008868:	2200      	movs	r2, #0
 800886a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800886c:	4b09      	ldr	r3, [pc, #36]	; (8008894 <MX_USART1_UART_Init+0x4c>)
 800886e:	220c      	movs	r2, #12
 8008870:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008872:	4b08      	ldr	r3, [pc, #32]	; (8008894 <MX_USART1_UART_Init+0x4c>)
 8008874:	2200      	movs	r2, #0
 8008876:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008878:	4b06      	ldr	r3, [pc, #24]	; (8008894 <MX_USART1_UART_Init+0x4c>)
 800887a:	2200      	movs	r2, #0
 800887c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800887e:	4805      	ldr	r0, [pc, #20]	; (8008894 <MX_USART1_UART_Init+0x4c>)
 8008880:	f007 f866 	bl	800f950 <HAL_UART_Init>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d001      	beq.n	800888e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800888a:	f7ff fd33 	bl	80082f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800888e:	bf00      	nop
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	20000d28 	.word	0x20000d28
 8008898:	40011000 	.word	0x40011000

0800889c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b08a      	sub	sp, #40	; 0x28
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088a4:	f107 0314 	add.w	r3, r7, #20
 80088a8:	2200      	movs	r2, #0
 80088aa:	601a      	str	r2, [r3, #0]
 80088ac:	605a      	str	r2, [r3, #4]
 80088ae:	609a      	str	r2, [r3, #8]
 80088b0:	60da      	str	r2, [r3, #12]
 80088b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a19      	ldr	r2, [pc, #100]	; (8008920 <HAL_UART_MspInit+0x84>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d12c      	bne.n	8008918 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80088be:	2300      	movs	r3, #0
 80088c0:	613b      	str	r3, [r7, #16]
 80088c2:	4b18      	ldr	r3, [pc, #96]	; (8008924 <HAL_UART_MspInit+0x88>)
 80088c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088c6:	4a17      	ldr	r2, [pc, #92]	; (8008924 <HAL_UART_MspInit+0x88>)
 80088c8:	f043 0310 	orr.w	r3, r3, #16
 80088cc:	6453      	str	r3, [r2, #68]	; 0x44
 80088ce:	4b15      	ldr	r3, [pc, #84]	; (8008924 <HAL_UART_MspInit+0x88>)
 80088d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d2:	f003 0310 	and.w	r3, r3, #16
 80088d6:	613b      	str	r3, [r7, #16]
 80088d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088da:	2300      	movs	r3, #0
 80088dc:	60fb      	str	r3, [r7, #12]
 80088de:	4b11      	ldr	r3, [pc, #68]	; (8008924 <HAL_UART_MspInit+0x88>)
 80088e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e2:	4a10      	ldr	r2, [pc, #64]	; (8008924 <HAL_UART_MspInit+0x88>)
 80088e4:	f043 0301 	orr.w	r3, r3, #1
 80088e8:	6313      	str	r3, [r2, #48]	; 0x30
 80088ea:	4b0e      	ldr	r3, [pc, #56]	; (8008924 <HAL_UART_MspInit+0x88>)
 80088ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ee:	f003 0301 	and.w	r3, r3, #1
 80088f2:	60fb      	str	r3, [r7, #12]
 80088f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80088f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80088fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088fc:	2302      	movs	r3, #2
 80088fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008900:	2300      	movs	r3, #0
 8008902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008904:	2303      	movs	r3, #3
 8008906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008908:	2307      	movs	r3, #7
 800890a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800890c:	f107 0314 	add.w	r3, r7, #20
 8008910:	4619      	mov	r1, r3
 8008912:	4805      	ldr	r0, [pc, #20]	; (8008928 <HAL_UART_MspInit+0x8c>)
 8008914:	f002 fff0 	bl	800b8f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8008918:	bf00      	nop
 800891a:	3728      	adds	r7, #40	; 0x28
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	40011000 	.word	0x40011000
 8008924:	40023800 	.word	0x40023800
 8008928:	40020000 	.word	0x40020000

0800892c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800892c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008964 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008930:	480d      	ldr	r0, [pc, #52]	; (8008968 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8008932:	490e      	ldr	r1, [pc, #56]	; (800896c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008934:	4a0e      	ldr	r2, [pc, #56]	; (8008970 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008938:	e002      	b.n	8008940 <LoopCopyDataInit>

0800893a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800893a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800893c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800893e:	3304      	adds	r3, #4

08008940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008944:	d3f9      	bcc.n	800893a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008946:	4a0b      	ldr	r2, [pc, #44]	; (8008974 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008948:	4c0b      	ldr	r4, [pc, #44]	; (8008978 <LoopFillZerobss+0x26>)
  movs r3, #0
 800894a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800894c:	e001      	b.n	8008952 <LoopFillZerobss>

0800894e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800894e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008950:	3204      	adds	r2, #4

08008952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008954:	d3fb      	bcc.n	800894e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008956:	f7ff fef3 	bl	8008740 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800895a:	f007 ff35 	bl	80107c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800895e:	f7ff f8c1 	bl	8007ae4 <main>
  bx  lr    
 8008962:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8008964:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8008968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800896c:	20000a9c 	.word	0x20000a9c
  ldr r2, =_sidata
 8008970:	08150094 	.word	0x08150094
  ldr r2, =_sbss
 8008974:	20000a9c 	.word	0x20000a9c
  ldr r4, =_ebss
 8008978:	20019fec 	.word	0x20019fec

0800897c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800897c:	e7fe      	b.n	800897c <ADC_IRQHandler>

0800897e <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8008982:	f000 feb5 	bl	80096f0 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8008986:	20ca      	movs	r0, #202	; 0xca
 8008988:	f000 f95d 	bl	8008c46 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 800898c:	20c3      	movs	r0, #195	; 0xc3
 800898e:	f000 f967 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8008992:	2008      	movs	r0, #8
 8008994:	f000 f964 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8008998:	2050      	movs	r0, #80	; 0x50
 800899a:	f000 f961 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800899e:	20cf      	movs	r0, #207	; 0xcf
 80089a0:	f000 f951 	bl	8008c46 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80089a4:	2000      	movs	r0, #0
 80089a6:	f000 f95b 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80089aa:	20c1      	movs	r0, #193	; 0xc1
 80089ac:	f000 f958 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80089b0:	2030      	movs	r0, #48	; 0x30
 80089b2:	f000 f955 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80089b6:	20ed      	movs	r0, #237	; 0xed
 80089b8:	f000 f945 	bl	8008c46 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80089bc:	2064      	movs	r0, #100	; 0x64
 80089be:	f000 f94f 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80089c2:	2003      	movs	r0, #3
 80089c4:	f000 f94c 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80089c8:	2012      	movs	r0, #18
 80089ca:	f000 f949 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80089ce:	2081      	movs	r0, #129	; 0x81
 80089d0:	f000 f946 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80089d4:	20e8      	movs	r0, #232	; 0xe8
 80089d6:	f000 f936 	bl	8008c46 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80089da:	2085      	movs	r0, #133	; 0x85
 80089dc:	f000 f940 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80089e0:	2000      	movs	r0, #0
 80089e2:	f000 f93d 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80089e6:	2078      	movs	r0, #120	; 0x78
 80089e8:	f000 f93a 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80089ec:	20cb      	movs	r0, #203	; 0xcb
 80089ee:	f000 f92a 	bl	8008c46 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80089f2:	2039      	movs	r0, #57	; 0x39
 80089f4:	f000 f934 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80089f8:	202c      	movs	r0, #44	; 0x2c
 80089fa:	f000 f931 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80089fe:	2000      	movs	r0, #0
 8008a00:	f000 f92e 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8008a04:	2034      	movs	r0, #52	; 0x34
 8008a06:	f000 f92b 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8008a0a:	2002      	movs	r0, #2
 8008a0c:	f000 f928 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8008a10:	20f7      	movs	r0, #247	; 0xf7
 8008a12:	f000 f918 	bl	8008c46 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8008a16:	2020      	movs	r0, #32
 8008a18:	f000 f922 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8008a1c:	20ea      	movs	r0, #234	; 0xea
 8008a1e:	f000 f912 	bl	8008c46 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8008a22:	2000      	movs	r0, #0
 8008a24:	f000 f91c 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8008a28:	2000      	movs	r0, #0
 8008a2a:	f000 f919 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8008a2e:	20b1      	movs	r0, #177	; 0xb1
 8008a30:	f000 f909 	bl	8008c46 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8008a34:	2000      	movs	r0, #0
 8008a36:	f000 f913 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8008a3a:	201b      	movs	r0, #27
 8008a3c:	f000 f910 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8008a40:	20b6      	movs	r0, #182	; 0xb6
 8008a42:	f000 f900 	bl	8008c46 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8008a46:	200a      	movs	r0, #10
 8008a48:	f000 f90a 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8008a4c:	20a2      	movs	r0, #162	; 0xa2
 8008a4e:	f000 f907 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8008a52:	20c0      	movs	r0, #192	; 0xc0
 8008a54:	f000 f8f7 	bl	8008c46 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8008a58:	2010      	movs	r0, #16
 8008a5a:	f000 f901 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8008a5e:	20c1      	movs	r0, #193	; 0xc1
 8008a60:	f000 f8f1 	bl	8008c46 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8008a64:	2010      	movs	r0, #16
 8008a66:	f000 f8fb 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8008a6a:	20c5      	movs	r0, #197	; 0xc5
 8008a6c:	f000 f8eb 	bl	8008c46 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8008a70:	2045      	movs	r0, #69	; 0x45
 8008a72:	f000 f8f5 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8008a76:	2015      	movs	r0, #21
 8008a78:	f000 f8f2 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8008a7c:	20c7      	movs	r0, #199	; 0xc7
 8008a7e:	f000 f8e2 	bl	8008c46 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8008a82:	2090      	movs	r0, #144	; 0x90
 8008a84:	f000 f8ec 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8008a88:	2036      	movs	r0, #54	; 0x36
 8008a8a:	f000 f8dc 	bl	8008c46 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8008a8e:	20c8      	movs	r0, #200	; 0xc8
 8008a90:	f000 f8e6 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8008a94:	20f2      	movs	r0, #242	; 0xf2
 8008a96:	f000 f8d6 	bl	8008c46 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8008a9a:	2000      	movs	r0, #0
 8008a9c:	f000 f8e0 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8008aa0:	20b0      	movs	r0, #176	; 0xb0
 8008aa2:	f000 f8d0 	bl	8008c46 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8008aa6:	20c2      	movs	r0, #194	; 0xc2
 8008aa8:	f000 f8da 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8008aac:	20b6      	movs	r0, #182	; 0xb6
 8008aae:	f000 f8ca 	bl	8008c46 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8008ab2:	200a      	movs	r0, #10
 8008ab4:	f000 f8d4 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8008ab8:	20a7      	movs	r0, #167	; 0xa7
 8008aba:	f000 f8d1 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8008abe:	2027      	movs	r0, #39	; 0x27
 8008ac0:	f000 f8ce 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8008ac4:	2004      	movs	r0, #4
 8008ac6:	f000 f8cb 	bl	8008c60 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8008aca:	202a      	movs	r0, #42	; 0x2a
 8008acc:	f000 f8bb 	bl	8008c46 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	f000 f8c5 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8008ad6:	2000      	movs	r0, #0
 8008ad8:	f000 f8c2 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8008adc:	2000      	movs	r0, #0
 8008ade:	f000 f8bf 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8008ae2:	20ef      	movs	r0, #239	; 0xef
 8008ae4:	f000 f8bc 	bl	8008c60 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8008ae8:	202b      	movs	r0, #43	; 0x2b
 8008aea:	f000 f8ac 	bl	8008c46 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8008aee:	2000      	movs	r0, #0
 8008af0:	f000 f8b6 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8008af4:	2000      	movs	r0, #0
 8008af6:	f000 f8b3 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8008afa:	2001      	movs	r0, #1
 8008afc:	f000 f8b0 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8008b00:	203f      	movs	r0, #63	; 0x3f
 8008b02:	f000 f8ad 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8008b06:	20f6      	movs	r0, #246	; 0xf6
 8008b08:	f000 f89d 	bl	8008c46 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8008b0c:	2001      	movs	r0, #1
 8008b0e:	f000 f8a7 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8008b12:	2000      	movs	r0, #0
 8008b14:	f000 f8a4 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8008b18:	2006      	movs	r0, #6
 8008b1a:	f000 f8a1 	bl	8008c60 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8008b1e:	202c      	movs	r0, #44	; 0x2c
 8008b20:	f000 f891 	bl	8008c46 <ili9341_WriteReg>
  LCD_Delay(200);
 8008b24:	20c8      	movs	r0, #200	; 0xc8
 8008b26:	f000 fed1 	bl	80098cc <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8008b2a:	2026      	movs	r0, #38	; 0x26
 8008b2c:	f000 f88b 	bl	8008c46 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8008b30:	2001      	movs	r0, #1
 8008b32:	f000 f895 	bl	8008c60 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8008b36:	20e0      	movs	r0, #224	; 0xe0
 8008b38:	f000 f885 	bl	8008c46 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8008b3c:	200f      	movs	r0, #15
 8008b3e:	f000 f88f 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8008b42:	2029      	movs	r0, #41	; 0x29
 8008b44:	f000 f88c 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8008b48:	2024      	movs	r0, #36	; 0x24
 8008b4a:	f000 f889 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8008b4e:	200c      	movs	r0, #12
 8008b50:	f000 f886 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8008b54:	200e      	movs	r0, #14
 8008b56:	f000 f883 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8008b5a:	2009      	movs	r0, #9
 8008b5c:	f000 f880 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8008b60:	204e      	movs	r0, #78	; 0x4e
 8008b62:	f000 f87d 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8008b66:	2078      	movs	r0, #120	; 0x78
 8008b68:	f000 f87a 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8008b6c:	203c      	movs	r0, #60	; 0x3c
 8008b6e:	f000 f877 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8008b72:	2009      	movs	r0, #9
 8008b74:	f000 f874 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8008b78:	2013      	movs	r0, #19
 8008b7a:	f000 f871 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8008b7e:	2005      	movs	r0, #5
 8008b80:	f000 f86e 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8008b84:	2017      	movs	r0, #23
 8008b86:	f000 f86b 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8008b8a:	2011      	movs	r0, #17
 8008b8c:	f000 f868 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8008b90:	2000      	movs	r0, #0
 8008b92:	f000 f865 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8008b96:	20e1      	movs	r0, #225	; 0xe1
 8008b98:	f000 f855 	bl	8008c46 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8008b9c:	2000      	movs	r0, #0
 8008b9e:	f000 f85f 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8008ba2:	2016      	movs	r0, #22
 8008ba4:	f000 f85c 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8008ba8:	201b      	movs	r0, #27
 8008baa:	f000 f859 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8008bae:	2004      	movs	r0, #4
 8008bb0:	f000 f856 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8008bb4:	2011      	movs	r0, #17
 8008bb6:	f000 f853 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8008bba:	2007      	movs	r0, #7
 8008bbc:	f000 f850 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8008bc0:	2031      	movs	r0, #49	; 0x31
 8008bc2:	f000 f84d 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8008bc6:	2033      	movs	r0, #51	; 0x33
 8008bc8:	f000 f84a 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8008bcc:	2042      	movs	r0, #66	; 0x42
 8008bce:	f000 f847 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8008bd2:	2005      	movs	r0, #5
 8008bd4:	f000 f844 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8008bd8:	200c      	movs	r0, #12
 8008bda:	f000 f841 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8008bde:	200a      	movs	r0, #10
 8008be0:	f000 f83e 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8008be4:	2028      	movs	r0, #40	; 0x28
 8008be6:	f000 f83b 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8008bea:	202f      	movs	r0, #47	; 0x2f
 8008bec:	f000 f838 	bl	8008c60 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8008bf0:	200f      	movs	r0, #15
 8008bf2:	f000 f835 	bl	8008c60 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8008bf6:	2011      	movs	r0, #17
 8008bf8:	f000 f825 	bl	8008c46 <ili9341_WriteReg>
  LCD_Delay(200);
 8008bfc:	20c8      	movs	r0, #200	; 0xc8
 8008bfe:	f000 fe65 	bl	80098cc <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8008c02:	2029      	movs	r0, #41	; 0x29
 8008c04:	f000 f81f 	bl	8008c46 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8008c08:	202c      	movs	r0, #44	; 0x2c
 8008c0a:	f000 f81c 	bl	8008c46 <ili9341_WriteReg>
}
 8008c0e:	bf00      	nop
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8008c16:	f000 fd6b 	bl	80096f0 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8008c1a:	2103      	movs	r1, #3
 8008c1c:	20d3      	movs	r0, #211	; 0xd3
 8008c1e:	f000 f82c 	bl	8008c7a <ili9341_ReadData>
 8008c22:	4603      	mov	r3, r0
 8008c24:	b29b      	uxth	r3, r3
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8008c2e:	2029      	movs	r0, #41	; 0x29
 8008c30:	f000 f809 	bl	8008c46 <ili9341_WriteReg>
}
 8008c34:	bf00      	nop
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8008c3c:	2028      	movs	r0, #40	; 0x28
 8008c3e:	f000 f802 	bl	8008c46 <ili9341_WriteReg>
}
 8008c42:	bf00      	nop
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b082      	sub	sp, #8
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8008c50:	79fb      	ldrb	r3, [r7, #7]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f000 fde6 	bl	8009824 <LCD_IO_WriteReg>
}
 8008c58:	bf00      	nop
 8008c5a:	3708      	adds	r7, #8
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	4603      	mov	r3, r0
 8008c68:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8008c6a:	88fb      	ldrh	r3, [r7, #6]
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f000 fdb7 	bl	80097e0 <LCD_IO_WriteData>
}
 8008c72:	bf00      	nop
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b082      	sub	sp, #8
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	4603      	mov	r3, r0
 8008c82:	460a      	mov	r2, r1
 8008c84:	80fb      	strh	r3, [r7, #6]
 8008c86:	4613      	mov	r3, r2
 8008c88:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8008c8a:	797a      	ldrb	r2, [r7, #5]
 8008c8c:	88fb      	ldrh	r3, [r7, #6]
 8008c8e:	4611      	mov	r1, r2
 8008c90:	4618      	mov	r0, r3
 8008c92:	f000 fde9 	bl	8009868 <LCD_IO_ReadData>
 8008c96:	4603      	mov	r3, r0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3708      	adds	r7, #8
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8008ca4:	23f0      	movs	r3, #240	; 0xf0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8008cb4:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
	...

08008cc4 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	4603      	mov	r3, r0
 8008ccc:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8008cce:	88fb      	ldrh	r3, [r7, #6]
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f000 fa59 	bl	8009188 <stmpe811_GetInstance>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8008cda:	7bfb      	ldrb	r3, [r7, #15]
 8008cdc:	2bff      	cmp	r3, #255	; 0xff
 8008cde:	d112      	bne.n	8008d06 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	f000 fa51 	bl	8009188 <stmpe811_GetInstance>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8008cea:	7bbb      	ldrb	r3, [r7, #14]
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d80a      	bhi.n	8008d06 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8008cf0:	7bbb      	ldrb	r3, [r7, #14]
 8008cf2:	88fa      	ldrh	r2, [r7, #6]
 8008cf4:	b2d1      	uxtb	r1, r2
 8008cf6:	4a06      	ldr	r2, [pc, #24]	; (8008d10 <stmpe811_Init+0x4c>)
 8008cf8:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8008cfa:	f000 fdf2 	bl	80098e2 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8008cfe:	88fb      	ldrh	r3, [r7, #6]
 8008d00:	4618      	mov	r0, r3
 8008d02:	f000 f807 	bl	8008d14 <stmpe811_Reset>
    }
  }
}
 8008d06:	bf00      	nop
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	20000d6c 	.word	0x20000d6c

08008d14 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8008d1e:	88fb      	ldrh	r3, [r7, #6]
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	2202      	movs	r2, #2
 8008d24:	2103      	movs	r1, #3
 8008d26:	4618      	mov	r0, r3
 8008d28:	f000 fde7 	bl	80098fa <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8008d2c:	200a      	movs	r0, #10
 8008d2e:	f000 fe21 	bl	8009974 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8008d32:	88fb      	ldrh	r3, [r7, #6]
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	2200      	movs	r2, #0
 8008d38:	2103      	movs	r1, #3
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f000 fddd 	bl	80098fa <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8008d40:	2002      	movs	r0, #2
 8008d42:	f000 fe17 	bl	8009974 <IOE_Delay>
}
 8008d46:	bf00      	nop
 8008d48:	3708      	adds	r7, #8
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8008d4e:	b590      	push	{r4, r7, lr}
 8008d50:	b083      	sub	sp, #12
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	4603      	mov	r3, r0
 8008d56:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8008d58:	f000 fdc3 	bl	80098e2 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8008d5c:	88fb      	ldrh	r3, [r7, #6]
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	2100      	movs	r1, #0
 8008d62:	4618      	mov	r0, r3
 8008d64:	f000 fddc 	bl	8009920 <IOE_Read>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	021b      	lsls	r3, r3, #8
 8008d6c:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8008d6e:	88fb      	ldrh	r3, [r7, #6]
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	2101      	movs	r1, #1
 8008d74:	4618      	mov	r0, r3
 8008d76:	f000 fdd3 	bl	8009920 <IOE_Read>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8008d7e:	4323      	orrs	r3, r4
 8008d80:	b21b      	sxth	r3, r3
 8008d82:	b29b      	uxth	r3, r3
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd90      	pop	{r4, r7, pc}

08008d8c <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	4603      	mov	r3, r0
 8008d94:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8008d96:	2300      	movs	r3, #0
 8008d98:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8008d9a:	88fb      	ldrh	r3, [r7, #6]
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	2109      	movs	r1, #9
 8008da0:	4618      	mov	r0, r3
 8008da2:	f000 fdbd 	bl	8009920 <IOE_Read>
 8008da6:	4603      	mov	r3, r0
 8008da8:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8008daa:	7bfb      	ldrb	r3, [r7, #15]
 8008dac:	f043 0301 	orr.w	r3, r3, #1
 8008db0:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8008db2:	88fb      	ldrh	r3, [r7, #6]
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	7bfa      	ldrb	r2, [r7, #15]
 8008db8:	2109      	movs	r1, #9
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f000 fd9d 	bl	80098fa <IOE_Write>
}
 8008dc0:	bf00      	nop
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	4603      	mov	r3, r0
 8008dd0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8008dd6:	88fb      	ldrh	r3, [r7, #6]
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	2109      	movs	r1, #9
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f000 fd9f 	bl	8009920 <IOE_Read>
 8008de2:	4603      	mov	r3, r0
 8008de4:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8008de6:	7bfb      	ldrb	r3, [r7, #15]
 8008de8:	f023 0301 	bic.w	r3, r3, #1
 8008dec:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8008dee:	88fb      	ldrh	r3, [r7, #6]
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	7bfa      	ldrb	r2, [r7, #15]
 8008df4:	2109      	movs	r1, #9
 8008df6:	4618      	mov	r0, r3
 8008df8:	f000 fd7f 	bl	80098fa <IOE_Write>
    
}
 8008dfc:	bf00      	nop
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	460a      	mov	r2, r1
 8008e0e:	80fb      	strh	r3, [r7, #6]
 8008e10:	4613      	mov	r3, r2
 8008e12:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8008e14:	2300      	movs	r3, #0
 8008e16:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8008e18:	88fb      	ldrh	r3, [r7, #6]
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	210a      	movs	r1, #10
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f000 fd7e 	bl	8009920 <IOE_Read>
 8008e24:	4603      	mov	r3, r0
 8008e26:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8008e28:	7bfa      	ldrb	r2, [r7, #15]
 8008e2a:	797b      	ldrb	r3, [r7, #5]
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8008e30:	88fb      	ldrh	r3, [r7, #6]
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	7bfa      	ldrb	r2, [r7, #15]
 8008e36:	210a      	movs	r1, #10
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f000 fd5e 	bl	80098fa <IOE_Write>
}
 8008e3e:	bf00      	nop
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b084      	sub	sp, #16
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	460a      	mov	r2, r1
 8008e50:	80fb      	strh	r3, [r7, #6]
 8008e52:	4613      	mov	r3, r2
 8008e54:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8008e56:	2300      	movs	r3, #0
 8008e58:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8008e5a:	88fb      	ldrh	r3, [r7, #6]
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	210a      	movs	r1, #10
 8008e60:	4618      	mov	r0, r3
 8008e62:	f000 fd5d 	bl	8009920 <IOE_Read>
 8008e66:	4603      	mov	r3, r0
 8008e68:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8008e6a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8008e6e:	43db      	mvns	r3, r3
 8008e70:	b25a      	sxtb	r2, r3
 8008e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e76:	4013      	ands	r3, r2
 8008e78:	b25b      	sxtb	r3, r3
 8008e7a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8008e7c:	88fb      	ldrh	r3, [r7, #6]
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	7bfa      	ldrb	r2, [r7, #15]
 8008e82:	210a      	movs	r1, #10
 8008e84:	4618      	mov	r0, r3
 8008e86:	f000 fd38 	bl	80098fa <IOE_Write>
}
 8008e8a:	bf00      	nop
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b082      	sub	sp, #8
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	4603      	mov	r3, r0
 8008e9a:	460a      	mov	r2, r1
 8008e9c:	80fb      	strh	r3, [r7, #6]
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8008ea2:	88fb      	ldrh	r3, [r7, #6]
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	210b      	movs	r1, #11
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f000 fd39 	bl	8009920 <IOE_Read>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	797b      	ldrb	r3, [r7, #5]
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	b2db      	uxtb	r3, r3
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3708      	adds	r7, #8
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	460a      	mov	r2, r1
 8008eca:	80fb      	strh	r3, [r7, #6]
 8008ecc:	4613      	mov	r3, r2
 8008ece:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8008ed0:	88fb      	ldrh	r3, [r7, #6]
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	797a      	ldrb	r2, [r7, #5]
 8008ed6:	210b      	movs	r1, #11
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f000 fd0e 	bl	80098fa <IOE_Write>
}
 8008ede:	bf00      	nop
 8008ee0:	3708      	adds	r7, #8
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b084      	sub	sp, #16
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	4603      	mov	r3, r0
 8008eee:	6039      	str	r1, [r7, #0]
 8008ef0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8008ef6:	88fb      	ldrh	r3, [r7, #6]
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	2117      	movs	r1, #23
 8008efc:	4618      	mov	r0, r3
 8008efe:	f000 fd0f 	bl	8009920 <IOE_Read>
 8008f02:	4603      	mov	r3, r0
 8008f04:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	b25b      	sxtb	r3, r3
 8008f0a:	43db      	mvns	r3, r3
 8008f0c:	b25a      	sxtb	r2, r3
 8008f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f12:	4013      	ands	r3, r2
 8008f14:	b25b      	sxtb	r3, r3
 8008f16:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8008f18:	88fb      	ldrh	r3, [r7, #6]
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	7bfa      	ldrb	r2, [r7, #15]
 8008f1e:	2117      	movs	r1, #23
 8008f20:	4618      	mov	r0, r3
 8008f22:	f000 fcea 	bl	80098fa <IOE_Write>
}
 8008f26:	bf00      	nop
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b084      	sub	sp, #16
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	4603      	mov	r3, r0
 8008f36:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8008f38:	88fb      	ldrh	r3, [r7, #6]
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	2104      	movs	r1, #4
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f000 fcee 	bl	8009920 <IOE_Read>
 8008f44:	4603      	mov	r3, r0
 8008f46:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8008f48:	7bfb      	ldrb	r3, [r7, #15]
 8008f4a:	f023 0304 	bic.w	r3, r3, #4
 8008f4e:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8008f50:	88fb      	ldrh	r3, [r7, #6]
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	7bfa      	ldrb	r2, [r7, #15]
 8008f56:	2104      	movs	r1, #4
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f000 fcce 	bl	80098fa <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8008f5e:	88fb      	ldrh	r3, [r7, #6]
 8008f60:	21f0      	movs	r1, #240	; 0xf0
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7ff ffbf 	bl	8008ee6 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8008f68:	7bfb      	ldrb	r3, [r7, #15]
 8008f6a:	f023 0303 	bic.w	r3, r3, #3
 8008f6e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8008f70:	88fb      	ldrh	r3, [r7, #6]
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	7bfa      	ldrb	r2, [r7, #15]
 8008f76:	2104      	movs	r1, #4
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f000 fcbe 	bl	80098fa <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8008f7e:	88fb      	ldrh	r3, [r7, #6]
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	2249      	movs	r2, #73	; 0x49
 8008f84:	2120      	movs	r1, #32
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 fcb7 	bl	80098fa <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8008f8c:	2002      	movs	r0, #2
 8008f8e:	f000 fcf1 	bl	8009974 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8008f92:	88fb      	ldrh	r3, [r7, #6]
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	2201      	movs	r2, #1
 8008f98:	2121      	movs	r1, #33	; 0x21
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f000 fcad 	bl	80098fa <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8008fa0:	88fb      	ldrh	r3, [r7, #6]
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	229a      	movs	r2, #154	; 0x9a
 8008fa6:	2141      	movs	r1, #65	; 0x41
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f000 fca6 	bl	80098fa <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8008fae:	88fb      	ldrh	r3, [r7, #6]
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	214a      	movs	r1, #74	; 0x4a
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f000 fc9f 	bl	80098fa <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8008fbc:	88fb      	ldrh	r3, [r7, #6]
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	214b      	movs	r1, #75	; 0x4b
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f000 fc98 	bl	80098fa <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8008fca:	88fb      	ldrh	r3, [r7, #6]
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	2200      	movs	r2, #0
 8008fd0:	214b      	movs	r1, #75	; 0x4b
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f000 fc91 	bl	80098fa <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8008fd8:	88fb      	ldrh	r3, [r7, #6]
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	2201      	movs	r2, #1
 8008fde:	2156      	movs	r1, #86	; 0x56
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f000 fc8a 	bl	80098fa <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8008fe6:	88fb      	ldrh	r3, [r7, #6]
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	2201      	movs	r2, #1
 8008fec:	2158      	movs	r1, #88	; 0x58
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 fc83 	bl	80098fa <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8008ff4:	88fb      	ldrh	r3, [r7, #6]
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	2140      	movs	r1, #64	; 0x40
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f000 fc7c 	bl	80098fa <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8009002:	88fb      	ldrh	r3, [r7, #6]
 8009004:	b2db      	uxtb	r3, r3
 8009006:	22ff      	movs	r2, #255	; 0xff
 8009008:	210b      	movs	r1, #11
 800900a:	4618      	mov	r0, r3
 800900c:	f000 fc75 	bl	80098fa <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8009010:	2002      	movs	r0, #2
 8009012:	f000 fcaf 	bl	8009974 <IOE_Delay>
}
 8009016:	bf00      	nop
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b084      	sub	sp, #16
 8009022:	af00      	add	r7, sp, #0
 8009024:	4603      	mov	r3, r0
 8009026:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8009028:	2300      	movs	r3, #0
 800902a:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 800902c:	88fb      	ldrh	r3, [r7, #6]
 800902e:	b2db      	uxtb	r3, r3
 8009030:	2140      	movs	r1, #64	; 0x40
 8009032:	4618      	mov	r0, r3
 8009034:	f000 fc74 	bl	8009920 <IOE_Read>
 8009038:	4603      	mov	r3, r0
 800903a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800903e:	2b80      	cmp	r3, #128	; 0x80
 8009040:	bf0c      	ite	eq
 8009042:	2301      	moveq	r3, #1
 8009044:	2300      	movne	r3, #0
 8009046:	b2db      	uxtb	r3, r3
 8009048:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 800904a:	7bbb      	ldrb	r3, [r7, #14]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d00b      	beq.n	8009068 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8009050:	88fb      	ldrh	r3, [r7, #6]
 8009052:	b2db      	uxtb	r3, r3
 8009054:	214c      	movs	r1, #76	; 0x4c
 8009056:	4618      	mov	r0, r3
 8009058:	f000 fc62 	bl	8009920 <IOE_Read>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d010      	beq.n	8009084 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8009062:	2301      	movs	r3, #1
 8009064:	73fb      	strb	r3, [r7, #15]
 8009066:	e00d      	b.n	8009084 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8009068:	88fb      	ldrh	r3, [r7, #6]
 800906a:	b2db      	uxtb	r3, r3
 800906c:	2201      	movs	r2, #1
 800906e:	214b      	movs	r1, #75	; 0x4b
 8009070:	4618      	mov	r0, r3
 8009072:	f000 fc42 	bl	80098fa <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8009076:	88fb      	ldrh	r3, [r7, #6]
 8009078:	b2db      	uxtb	r3, r3
 800907a:	2200      	movs	r2, #0
 800907c:	214b      	movs	r1, #75	; 0x4b
 800907e:	4618      	mov	r0, r3
 8009080:	f000 fc3b 	bl	80098fa <IOE_Write>
  }
  
  return ret;
 8009084:	7bfb      	ldrb	r3, [r7, #15]
}
 8009086:	4618      	mov	r0, r3
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b086      	sub	sp, #24
 8009092:	af00      	add	r7, sp, #0
 8009094:	4603      	mov	r3, r0
 8009096:	60b9      	str	r1, [r7, #8]
 8009098:	607a      	str	r2, [r7, #4]
 800909a:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 800909c:	89fb      	ldrh	r3, [r7, #14]
 800909e:	b2d8      	uxtb	r0, r3
 80090a0:	f107 0210 	add.w	r2, r7, #16
 80090a4:	2304      	movs	r3, #4
 80090a6:	21d7      	movs	r1, #215	; 0xd7
 80090a8:	f000 fc4d 	bl	8009946 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 80090ac:	7c3b      	ldrb	r3, [r7, #16]
 80090ae:	061a      	lsls	r2, r3, #24
 80090b0:	7c7b      	ldrb	r3, [r7, #17]
 80090b2:	041b      	lsls	r3, r3, #16
 80090b4:	431a      	orrs	r2, r3
 80090b6:	7cbb      	ldrb	r3, [r7, #18]
 80090b8:	021b      	lsls	r3, r3, #8
 80090ba:	4313      	orrs	r3, r2
 80090bc:	7cfa      	ldrb	r2, [r7, #19]
 80090be:	4313      	orrs	r3, r2
 80090c0:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	0d1b      	lsrs	r3, r3, #20
 80090c6:	b29a      	uxth	r2, r3
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	0a1b      	lsrs	r3, r3, #8
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090d6:	b29a      	uxth	r2, r3
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80090dc:	89fb      	ldrh	r3, [r7, #14]
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	2201      	movs	r2, #1
 80090e2:	214b      	movs	r1, #75	; 0x4b
 80090e4:	4618      	mov	r0, r3
 80090e6:	f000 fc08 	bl	80098fa <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80090ea:	89fb      	ldrh	r3, [r7, #14]
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	2200      	movs	r2, #0
 80090f0:	214b      	movs	r1, #75	; 0x4b
 80090f2:	4618      	mov	r0, r3
 80090f4:	f000 fc01 	bl	80098fa <IOE_Write>
}
 80090f8:	bf00      	nop
 80090fa:	3718      	adds	r7, #24
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	4603      	mov	r3, r0
 8009108:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 800910a:	f000 fbf0 	bl	80098ee <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 800910e:	88fb      	ldrh	r3, [r7, #6]
 8009110:	211f      	movs	r1, #31
 8009112:	4618      	mov	r0, r3
 8009114:	f7ff fe76 	bl	8008e04 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8009118:	88fb      	ldrh	r3, [r7, #6]
 800911a:	4618      	mov	r0, r3
 800911c:	f7ff fe36 	bl	8008d8c <stmpe811_EnableGlobalIT>
}
 8009120:	bf00      	nop
 8009122:	3708      	adds	r7, #8
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	4603      	mov	r3, r0
 8009130:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8009132:	88fb      	ldrh	r3, [r7, #6]
 8009134:	4618      	mov	r0, r3
 8009136:	f7ff fe47 	bl	8008dc8 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 800913a:	88fb      	ldrh	r3, [r7, #6]
 800913c:	211f      	movs	r1, #31
 800913e:	4618      	mov	r0, r3
 8009140:	f7ff fe81 	bl	8008e46 <stmpe811_DisableITSource>
}
 8009144:	bf00      	nop
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	4603      	mov	r3, r0
 8009154:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8009156:	88fb      	ldrh	r3, [r7, #6]
 8009158:	211f      	movs	r1, #31
 800915a:	4618      	mov	r0, r3
 800915c:	f7ff fe99 	bl	8008e92 <stmpe811_ReadGITStatus>
 8009160:	4603      	mov	r3, r0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3708      	adds	r7, #8
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b082      	sub	sp, #8
 800916e:	af00      	add	r7, sp, #0
 8009170:	4603      	mov	r3, r0
 8009172:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8009174:	88fb      	ldrh	r3, [r7, #6]
 8009176:	211f      	movs	r1, #31
 8009178:	4618      	mov	r0, r3
 800917a:	f7ff fea1 	bl	8008ec0 <stmpe811_ClearGlobalIT>
}
 800917e:	bf00      	nop
 8009180:	3708      	adds	r7, #8
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
	...

08009188 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	4603      	mov	r3, r0
 8009190:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8009192:	2300      	movs	r3, #0
 8009194:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8009196:	2300      	movs	r3, #0
 8009198:	73fb      	strb	r3, [r7, #15]
 800919a:	e00b      	b.n	80091b4 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 800919c:	7bfb      	ldrb	r3, [r7, #15]
 800919e:	4a0a      	ldr	r2, [pc, #40]	; (80091c8 <stmpe811_GetInstance+0x40>)
 80091a0:	5cd3      	ldrb	r3, [r2, r3]
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	88fa      	ldrh	r2, [r7, #6]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d101      	bne.n	80091ae <stmpe811_GetInstance+0x26>
    {
      return idx; 
 80091aa:	7bfb      	ldrb	r3, [r7, #15]
 80091ac:	e006      	b.n	80091bc <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80091ae:	7bfb      	ldrb	r3, [r7, #15]
 80091b0:	3301      	adds	r3, #1
 80091b2:	73fb      	strb	r3, [r7, #15]
 80091b4:	7bfb      	ldrb	r3, [r7, #15]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d9f0      	bls.n	800919c <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 80091ba:	23ff      	movs	r3, #255	; 0xff
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3714      	adds	r7, #20
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr
 80091c8:	20000d6c 	.word	0x20000d6c

080091cc <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b088      	sub	sp, #32
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	4603      	mov	r3, r0
 80091d4:	460a      	mov	r2, r1
 80091d6:	71fb      	strb	r3, [r7, #7]
 80091d8:	4613      	mov	r3, r2
 80091da:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80091dc:	79fb      	ldrb	r3, [r7, #7]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d10d      	bne.n	80091fe <BSP_PB_Init+0x32>
 80091e2:	2300      	movs	r3, #0
 80091e4:	60bb      	str	r3, [r7, #8]
 80091e6:	4b22      	ldr	r3, [pc, #136]	; (8009270 <BSP_PB_Init+0xa4>)
 80091e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ea:	4a21      	ldr	r2, [pc, #132]	; (8009270 <BSP_PB_Init+0xa4>)
 80091ec:	f043 0301 	orr.w	r3, r3, #1
 80091f0:	6313      	str	r3, [r2, #48]	; 0x30
 80091f2:	4b1f      	ldr	r3, [pc, #124]	; (8009270 <BSP_PB_Init+0xa4>)
 80091f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f6:	f003 0301 	and.w	r3, r3, #1
 80091fa:	60bb      	str	r3, [r7, #8]
 80091fc:	68bb      	ldr	r3, [r7, #8]
  
  if (ButtonMode == BUTTON_MODE_GPIO)
 80091fe:	79bb      	ldrb	r3, [r7, #6]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d111      	bne.n	8009228 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8009204:	2301      	movs	r3, #1
 8009206:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009208:	2300      	movs	r3, #0
 800920a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800920c:	2302      	movs	r3, #2
 800920e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8009210:	2302      	movs	r3, #2
 8009212:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8009214:	79fb      	ldrb	r3, [r7, #7]
 8009216:	4a17      	ldr	r2, [pc, #92]	; (8009274 <BSP_PB_Init+0xa8>)
 8009218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800921c:	f107 020c 	add.w	r2, r7, #12
 8009220:	4611      	mov	r1, r2
 8009222:	4618      	mov	r0, r3
 8009224:	f002 fb68 	bl	800b8f8 <HAL_GPIO_Init>
  }
  
  if (ButtonMode == BUTTON_MODE_EXTI)
 8009228:	79bb      	ldrb	r3, [r7, #6]
 800922a:	2b01      	cmp	r3, #1
 800922c:	d11c      	bne.n	8009268 <BSP_PB_Init+0x9c>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800922e:	2301      	movs	r3, #1
 8009230:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009232:	2300      	movs	r3, #0
 8009234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8009236:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800923a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800923c:	79fb      	ldrb	r3, [r7, #7]
 800923e:	4a0d      	ldr	r2, [pc, #52]	; (8009274 <BSP_PB_Init+0xa8>)
 8009240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009244:	f107 020c 	add.w	r2, r7, #12
 8009248:	4611      	mov	r1, r2
 800924a:	4618      	mov	r0, r3
 800924c:	f002 fb54 	bl	800b8f8 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8009250:	2306      	movs	r3, #6
 8009252:	b25b      	sxtb	r3, r3
 8009254:	2200      	movs	r2, #0
 8009256:	210f      	movs	r1, #15
 8009258:	4618      	mov	r0, r3
 800925a:	f001 febd 	bl	800afd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800925e:	2306      	movs	r3, #6
 8009260:	b25b      	sxtb	r3, r3
 8009262:	4618      	mov	r0, r3
 8009264:	f001 fed4 	bl	800b010 <HAL_NVIC_EnableIRQ>
  }
}
 8009268:	bf00      	nop
 800926a:	3720      	adds	r7, #32
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}
 8009270:	40023800 	.word	0x40023800
 8009274:	20000064 	.word	0x20000064

08009278 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_KEY  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	4603      	mov	r3, r0
 8009280:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8009282:	79fb      	ldrb	r3, [r7, #7]
 8009284:	4a06      	ldr	r2, [pc, #24]	; (80092a0 <BSP_PB_GetState+0x28>)
 8009286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800928a:	2201      	movs	r2, #1
 800928c:	4611      	mov	r1, r2
 800928e:	4618      	mov	r0, r3
 8009290:	f002 fdea 	bl	800be68 <HAL_GPIO_ReadPin>
 8009294:	4603      	mov	r3, r0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3708      	adds	r7, #8
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	20000064 	.word	0x20000064

080092a4 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b08a      	sub	sp, #40	; 0x28
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a33      	ldr	r2, [pc, #204]	; (8009380 <I2Cx_MspInit+0xdc>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d15f      	bne.n	8009376 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 80092b6:	2300      	movs	r3, #0
 80092b8:	613b      	str	r3, [r7, #16]
 80092ba:	4b32      	ldr	r3, [pc, #200]	; (8009384 <I2Cx_MspInit+0xe0>)
 80092bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092be:	4a31      	ldr	r2, [pc, #196]	; (8009384 <I2Cx_MspInit+0xe0>)
 80092c0:	f043 0304 	orr.w	r3, r3, #4
 80092c4:	6313      	str	r3, [r2, #48]	; 0x30
 80092c6:	4b2f      	ldr	r3, [pc, #188]	; (8009384 <I2Cx_MspInit+0xe0>)
 80092c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ca:	f003 0304 	and.w	r3, r3, #4
 80092ce:	613b      	str	r3, [r7, #16]
 80092d0:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 80092d2:	2300      	movs	r3, #0
 80092d4:	60fb      	str	r3, [r7, #12]
 80092d6:	4b2b      	ldr	r3, [pc, #172]	; (8009384 <I2Cx_MspInit+0xe0>)
 80092d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092da:	4a2a      	ldr	r2, [pc, #168]	; (8009384 <I2Cx_MspInit+0xe0>)
 80092dc:	f043 0301 	orr.w	r3, r3, #1
 80092e0:	6313      	str	r3, [r2, #48]	; 0x30
 80092e2:	4b28      	ldr	r3, [pc, #160]	; (8009384 <I2Cx_MspInit+0xe0>)
 80092e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092e6:	f003 0301 	and.w	r3, r3, #1
 80092ea:	60fb      	str	r3, [r7, #12]
 80092ec:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 80092ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 80092f4:	2312      	movs	r3, #18
 80092f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80092f8:	2300      	movs	r3, #0
 80092fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80092fc:	2302      	movs	r3, #2
 80092fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8009300:	2304      	movs	r3, #4
 8009302:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8009304:	f107 0314 	add.w	r3, r7, #20
 8009308:	4619      	mov	r1, r3
 800930a:	481f      	ldr	r0, [pc, #124]	; (8009388 <I2Cx_MspInit+0xe4>)
 800930c:	f002 faf4 	bl	800b8f8 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8009310:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009314:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8009316:	f107 0314 	add.w	r3, r7, #20
 800931a:	4619      	mov	r1, r3
 800931c:	481b      	ldr	r0, [pc, #108]	; (800938c <I2Cx_MspInit+0xe8>)
 800931e:	f002 faeb 	bl	800b8f8 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8009322:	2300      	movs	r3, #0
 8009324:	60bb      	str	r3, [r7, #8]
 8009326:	4b17      	ldr	r3, [pc, #92]	; (8009384 <I2Cx_MspInit+0xe0>)
 8009328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800932a:	4a16      	ldr	r2, [pc, #88]	; (8009384 <I2Cx_MspInit+0xe0>)
 800932c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009330:	6413      	str	r3, [r2, #64]	; 0x40
 8009332:	4b14      	ldr	r3, [pc, #80]	; (8009384 <I2Cx_MspInit+0xe0>)
 8009334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009336:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800933a:	60bb      	str	r3, [r7, #8]
 800933c:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 800933e:	4b11      	ldr	r3, [pc, #68]	; (8009384 <I2Cx_MspInit+0xe0>)
 8009340:	6a1b      	ldr	r3, [r3, #32]
 8009342:	4a10      	ldr	r2, [pc, #64]	; (8009384 <I2Cx_MspInit+0xe0>)
 8009344:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009348:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 800934a:	4b0e      	ldr	r3, [pc, #56]	; (8009384 <I2Cx_MspInit+0xe0>)
 800934c:	6a1b      	ldr	r3, [r3, #32]
 800934e:	4a0d      	ldr	r2, [pc, #52]	; (8009384 <I2Cx_MspInit+0xe0>)
 8009350:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009354:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8009356:	2200      	movs	r2, #0
 8009358:	210f      	movs	r1, #15
 800935a:	2048      	movs	r0, #72	; 0x48
 800935c:	f001 fe3c 	bl	800afd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8009360:	2048      	movs	r0, #72	; 0x48
 8009362:	f001 fe55 	bl	800b010 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8009366:	2200      	movs	r2, #0
 8009368:	210f      	movs	r1, #15
 800936a:	2049      	movs	r0, #73	; 0x49
 800936c:	f001 fe34 	bl	800afd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8009370:	2049      	movs	r0, #73	; 0x49
 8009372:	f001 fe4d 	bl	800b010 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8009376:	bf00      	nop
 8009378:	3728      	adds	r7, #40	; 0x28
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	40005c00 	.word	0x40005c00
 8009384:	40023800 	.word	0x40023800
 8009388:	40020000 	.word	0x40020000
 800938c:	40020800 	.word	0x40020800

08009390 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8009394:	4814      	ldr	r0, [pc, #80]	; (80093e8 <I2Cx_Init+0x58>)
 8009396:	f003 fa2d 	bl	800c7f4 <HAL_I2C_GetState>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d121      	bne.n	80093e4 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 80093a0:	4b11      	ldr	r3, [pc, #68]	; (80093e8 <I2Cx_Init+0x58>)
 80093a2:	4a12      	ldr	r2, [pc, #72]	; (80093ec <I2Cx_Init+0x5c>)
 80093a4:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 80093a6:	4b10      	ldr	r3, [pc, #64]	; (80093e8 <I2Cx_Init+0x58>)
 80093a8:	4a11      	ldr	r2, [pc, #68]	; (80093f0 <I2Cx_Init+0x60>)
 80093aa:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 80093ac:	4b0e      	ldr	r3, [pc, #56]	; (80093e8 <I2Cx_Init+0x58>)
 80093ae:	2200      	movs	r2, #0
 80093b0:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 80093b2:	4b0d      	ldr	r3, [pc, #52]	; (80093e8 <I2Cx_Init+0x58>)
 80093b4:	2200      	movs	r2, #0
 80093b6:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80093b8:	4b0b      	ldr	r3, [pc, #44]	; (80093e8 <I2Cx_Init+0x58>)
 80093ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80093be:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 80093c0:	4b09      	ldr	r3, [pc, #36]	; (80093e8 <I2Cx_Init+0x58>)
 80093c2:	2200      	movs	r2, #0
 80093c4:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 80093c6:	4b08      	ldr	r3, [pc, #32]	; (80093e8 <I2Cx_Init+0x58>)
 80093c8:	2200      	movs	r2, #0
 80093ca:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 80093cc:	4b06      	ldr	r3, [pc, #24]	; (80093e8 <I2Cx_Init+0x58>)
 80093ce:	2200      	movs	r2, #0
 80093d0:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 80093d2:	4b05      	ldr	r3, [pc, #20]	; (80093e8 <I2Cx_Init+0x58>)
 80093d4:	2200      	movs	r2, #0
 80093d6:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80093d8:	4803      	ldr	r0, [pc, #12]	; (80093e8 <I2Cx_Init+0x58>)
 80093da:	f7ff ff63 	bl	80092a4 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80093de:	4802      	ldr	r0, [pc, #8]	; (80093e8 <I2Cx_Init+0x58>)
 80093e0:	f002 fd74 	bl	800becc <HAL_I2C_Init>
  }
}
 80093e4:	bf00      	nop
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	20000d70 	.word	0x20000d70
 80093ec:	40005c00 	.word	0x40005c00
 80093f0:	000186a0 	.word	0x000186a0

080093f4 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b086      	sub	sp, #24
 80093f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 80093fa:	2300      	movs	r3, #0
 80093fc:	603b      	str	r3, [r7, #0]
 80093fe:	4b13      	ldr	r3, [pc, #76]	; (800944c <I2Cx_ITConfig+0x58>)
 8009400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009402:	4a12      	ldr	r2, [pc, #72]	; (800944c <I2Cx_ITConfig+0x58>)
 8009404:	f043 0301 	orr.w	r3, r3, #1
 8009408:	6313      	str	r3, [r2, #48]	; 0x30
 800940a:	4b10      	ldr	r3, [pc, #64]	; (800944c <I2Cx_ITConfig+0x58>)
 800940c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800940e:	f003 0301 	and.w	r3, r3, #1
 8009412:	603b      	str	r3, [r7, #0]
 8009414:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8009416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800941a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 800941c:	2301      	movs	r3, #1
 800941e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8009420:	2300      	movs	r3, #0
 8009422:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8009424:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8009428:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 800942a:	1d3b      	adds	r3, r7, #4
 800942c:	4619      	mov	r1, r3
 800942e:	4808      	ldr	r0, [pc, #32]	; (8009450 <I2Cx_ITConfig+0x5c>)
 8009430:	f002 fa62 	bl	800b8f8 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8009434:	2200      	movs	r2, #0
 8009436:	210f      	movs	r1, #15
 8009438:	2028      	movs	r0, #40	; 0x28
 800943a:	f001 fdcd 	bl	800afd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 800943e:	2028      	movs	r0, #40	; 0x28
 8009440:	f001 fde6 	bl	800b010 <HAL_NVIC_EnableIRQ>
}
 8009444:	bf00      	nop
 8009446:	3718      	adds	r7, #24
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}
 800944c:	40023800 	.word	0x40023800
 8009450:	40020000 	.word	0x40020000

08009454 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8009454:	b580      	push	{r7, lr}
 8009456:	b088      	sub	sp, #32
 8009458:	af04      	add	r7, sp, #16
 800945a:	4603      	mov	r3, r0
 800945c:	71fb      	strb	r3, [r7, #7]
 800945e:	460b      	mov	r3, r1
 8009460:	71bb      	strb	r3, [r7, #6]
 8009462:	4613      	mov	r3, r2
 8009464:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8009466:	2300      	movs	r3, #0
 8009468:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 800946a:	79fb      	ldrb	r3, [r7, #7]
 800946c:	b299      	uxth	r1, r3
 800946e:	79bb      	ldrb	r3, [r7, #6]
 8009470:	b29a      	uxth	r2, r3
 8009472:	4b0b      	ldr	r3, [pc, #44]	; (80094a0 <I2Cx_WriteData+0x4c>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	9302      	str	r3, [sp, #8]
 8009478:	2301      	movs	r3, #1
 800947a:	9301      	str	r3, [sp, #4]
 800947c:	1d7b      	adds	r3, r7, #5
 800947e:	9300      	str	r3, [sp, #0]
 8009480:	2301      	movs	r3, #1
 8009482:	4808      	ldr	r0, [pc, #32]	; (80094a4 <I2Cx_WriteData+0x50>)
 8009484:	f002 fe96 	bl	800c1b4 <HAL_I2C_Mem_Write>
 8009488:	4603      	mov	r3, r0
 800948a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800948c:	7bfb      	ldrb	r3, [r7, #15]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d001      	beq.n	8009496 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8009492:	f000 f863 	bl	800955c <I2Cx_Error>
  }        
}
 8009496:	bf00      	nop
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	20000068 	.word	0x20000068
 80094a4:	20000d70 	.word	0x20000d70

080094a8 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b088      	sub	sp, #32
 80094ac:	af04      	add	r7, sp, #16
 80094ae:	4603      	mov	r3, r0
 80094b0:	460a      	mov	r2, r1
 80094b2:	71fb      	strb	r3, [r7, #7]
 80094b4:	4613      	mov	r3, r2
 80094b6:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80094b8:	2300      	movs	r3, #0
 80094ba:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80094bc:	2300      	movs	r3, #0
 80094be:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80094c0:	79fb      	ldrb	r3, [r7, #7]
 80094c2:	b299      	uxth	r1, r3
 80094c4:	79bb      	ldrb	r3, [r7, #6]
 80094c6:	b29a      	uxth	r2, r3
 80094c8:	4b0b      	ldr	r3, [pc, #44]	; (80094f8 <I2Cx_ReadData+0x50>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	9302      	str	r3, [sp, #8]
 80094ce:	2301      	movs	r3, #1
 80094d0:	9301      	str	r3, [sp, #4]
 80094d2:	f107 030e 	add.w	r3, r7, #14
 80094d6:	9300      	str	r3, [sp, #0]
 80094d8:	2301      	movs	r3, #1
 80094da:	4808      	ldr	r0, [pc, #32]	; (80094fc <I2Cx_ReadData+0x54>)
 80094dc:	f002 ff64 	bl	800c3a8 <HAL_I2C_Mem_Read>
 80094e0:	4603      	mov	r3, r0
 80094e2:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 80094e4:	7bfb      	ldrb	r3, [r7, #15]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d001      	beq.n	80094ee <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80094ea:	f000 f837 	bl	800955c <I2Cx_Error>
  
  }
  return value;
 80094ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	20000068 	.word	0x20000068
 80094fc:	20000d70 	.word	0x20000d70

08009500 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b088      	sub	sp, #32
 8009504:	af04      	add	r7, sp, #16
 8009506:	603a      	str	r2, [r7, #0]
 8009508:	461a      	mov	r2, r3
 800950a:	4603      	mov	r3, r0
 800950c:	71fb      	strb	r3, [r7, #7]
 800950e:	460b      	mov	r3, r1
 8009510:	71bb      	strb	r3, [r7, #6]
 8009512:	4613      	mov	r3, r2
 8009514:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009516:	2300      	movs	r3, #0
 8009518:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 800951a:	79fb      	ldrb	r3, [r7, #7]
 800951c:	b299      	uxth	r1, r3
 800951e:	79bb      	ldrb	r3, [r7, #6]
 8009520:	b29a      	uxth	r2, r3
 8009522:	4b0c      	ldr	r3, [pc, #48]	; (8009554 <I2Cx_ReadBuffer+0x54>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	9302      	str	r3, [sp, #8]
 8009528:	88bb      	ldrh	r3, [r7, #4]
 800952a:	9301      	str	r3, [sp, #4]
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	9300      	str	r3, [sp, #0]
 8009530:	2301      	movs	r3, #1
 8009532:	4809      	ldr	r0, [pc, #36]	; (8009558 <I2Cx_ReadBuffer+0x58>)
 8009534:	f002 ff38 	bl	800c3a8 <HAL_I2C_Mem_Read>
 8009538:	4603      	mov	r3, r0
 800953a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 800953c:	7bfb      	ldrb	r3, [r7, #15]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d101      	bne.n	8009546 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8009542:	2300      	movs	r3, #0
 8009544:	e002      	b.n	800954c <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8009546:	f000 f809 	bl	800955c <I2Cx_Error>

    return 1;
 800954a:	2301      	movs	r3, #1
  }
}
 800954c:	4618      	mov	r0, r3
 800954e:	3710      	adds	r7, #16
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}
 8009554:	20000068 	.word	0x20000068
 8009558:	20000d70 	.word	0x20000d70

0800955c <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8009560:	4803      	ldr	r0, [pc, #12]	; (8009570 <I2Cx_Error+0x14>)
 8009562:	f002 fdf7 	bl	800c154 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8009566:	f7ff ff13 	bl	8009390 <I2Cx_Init>
}
 800956a:	bf00      	nop
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	20000d70 	.word	0x20000d70

08009574 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8009578:	4819      	ldr	r0, [pc, #100]	; (80095e0 <SPIx_Init+0x6c>)
 800957a:	f005 fc28 	bl	800edce <HAL_SPI_GetState>
 800957e:	4603      	mov	r3, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	d12b      	bne.n	80095dc <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8009584:	4b16      	ldr	r3, [pc, #88]	; (80095e0 <SPIx_Init+0x6c>)
 8009586:	4a17      	ldr	r2, [pc, #92]	; (80095e4 <SPIx_Init+0x70>)
 8009588:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800958a:	4b15      	ldr	r3, [pc, #84]	; (80095e0 <SPIx_Init+0x6c>)
 800958c:	2218      	movs	r2, #24
 800958e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8009590:	4b13      	ldr	r3, [pc, #76]	; (80095e0 <SPIx_Init+0x6c>)
 8009592:	2200      	movs	r2, #0
 8009594:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8009596:	4b12      	ldr	r3, [pc, #72]	; (80095e0 <SPIx_Init+0x6c>)
 8009598:	2200      	movs	r2, #0
 800959a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800959c:	4b10      	ldr	r3, [pc, #64]	; (80095e0 <SPIx_Init+0x6c>)
 800959e:	2200      	movs	r2, #0
 80095a0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80095a2:	4b0f      	ldr	r3, [pc, #60]	; (80095e0 <SPIx_Init+0x6c>)
 80095a4:	2200      	movs	r2, #0
 80095a6:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80095a8:	4b0d      	ldr	r3, [pc, #52]	; (80095e0 <SPIx_Init+0x6c>)
 80095aa:	2207      	movs	r2, #7
 80095ac:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80095ae:	4b0c      	ldr	r3, [pc, #48]	; (80095e0 <SPIx_Init+0x6c>)
 80095b0:	2200      	movs	r2, #0
 80095b2:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80095b4:	4b0a      	ldr	r3, [pc, #40]	; (80095e0 <SPIx_Init+0x6c>)
 80095b6:	2200      	movs	r2, #0
 80095b8:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80095ba:	4b09      	ldr	r3, [pc, #36]	; (80095e0 <SPIx_Init+0x6c>)
 80095bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095c0:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80095c2:	4b07      	ldr	r3, [pc, #28]	; (80095e0 <SPIx_Init+0x6c>)
 80095c4:	2200      	movs	r2, #0
 80095c6:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80095c8:	4b05      	ldr	r3, [pc, #20]	; (80095e0 <SPIx_Init+0x6c>)
 80095ca:	f44f 7282 	mov.w	r2, #260	; 0x104
 80095ce:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 80095d0:	4803      	ldr	r0, [pc, #12]	; (80095e0 <SPIx_Init+0x6c>)
 80095d2:	f000 f853 	bl	800967c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80095d6:	4802      	ldr	r0, [pc, #8]	; (80095e0 <SPIx_Init+0x6c>)
 80095d8:	f004 ff59 	bl	800e48e <HAL_SPI_Init>
  } 
}
 80095dc:	bf00      	nop
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	20000dc4 	.word	0x20000dc4
 80095e4:	40015000 	.word	0x40015000

080095e8 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	4603      	mov	r3, r0
 80095f0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80095f2:	2300      	movs	r3, #0
 80095f4:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80095f6:	79fb      	ldrb	r3, [r7, #7]
 80095f8:	b29a      	uxth	r2, r3
 80095fa:	4b09      	ldr	r3, [pc, #36]	; (8009620 <SPIx_Read+0x38>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f107 0108 	add.w	r1, r7, #8
 8009602:	4808      	ldr	r0, [pc, #32]	; (8009624 <SPIx_Read+0x3c>)
 8009604:	f005 f930 	bl	800e868 <HAL_SPI_Receive>
 8009608:	4603      	mov	r3, r0
 800960a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800960c:	7bfb      	ldrb	r3, [r7, #15]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d001      	beq.n	8009616 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8009612:	f000 f827 	bl	8009664 <SPIx_Error>
  }
  
  return readvalue;
 8009616:	68bb      	ldr	r3, [r7, #8]
}
 8009618:	4618      	mov	r0, r3
 800961a:	3710      	adds	r7, #16
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	2000006c 	.word	0x2000006c
 8009624:	20000dc4 	.word	0x20000dc4

08009628 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	4603      	mov	r3, r0
 8009630:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009632:	2300      	movs	r3, #0
 8009634:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8009636:	4b09      	ldr	r3, [pc, #36]	; (800965c <SPIx_Write+0x34>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	1db9      	adds	r1, r7, #6
 800963c:	2201      	movs	r2, #1
 800963e:	4808      	ldr	r0, [pc, #32]	; (8009660 <SPIx_Write+0x38>)
 8009640:	f004 ffd6 	bl	800e5f0 <HAL_SPI_Transmit>
 8009644:	4603      	mov	r3, r0
 8009646:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8009648:	7bfb      	ldrb	r3, [r7, #15]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d001      	beq.n	8009652 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800964e:	f000 f809 	bl	8009664 <SPIx_Error>
  }
}
 8009652:	bf00      	nop
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	2000006c 	.word	0x2000006c
 8009660:	20000dc4 	.word	0x20000dc4

08009664 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8009668:	4803      	ldr	r0, [pc, #12]	; (8009678 <SPIx_Error+0x14>)
 800966a:	f004 ff99 	bl	800e5a0 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 800966e:	f7ff ff81 	bl	8009574 <SPIx_Init>
}
 8009672:	bf00      	nop
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	20000dc4 	.word	0x20000dc4

0800967c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b08a      	sub	sp, #40	; 0x28
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8009684:	2300      	movs	r3, #0
 8009686:	613b      	str	r3, [r7, #16]
 8009688:	4b17      	ldr	r3, [pc, #92]	; (80096e8 <SPIx_MspInit+0x6c>)
 800968a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800968c:	4a16      	ldr	r2, [pc, #88]	; (80096e8 <SPIx_MspInit+0x6c>)
 800968e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009692:	6453      	str	r3, [r2, #68]	; 0x44
 8009694:	4b14      	ldr	r3, [pc, #80]	; (80096e8 <SPIx_MspInit+0x6c>)
 8009696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009698:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800969c:	613b      	str	r3, [r7, #16]
 800969e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80096a0:	2300      	movs	r3, #0
 80096a2:	60fb      	str	r3, [r7, #12]
 80096a4:	4b10      	ldr	r3, [pc, #64]	; (80096e8 <SPIx_MspInit+0x6c>)
 80096a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096a8:	4a0f      	ldr	r2, [pc, #60]	; (80096e8 <SPIx_MspInit+0x6c>)
 80096aa:	f043 0320 	orr.w	r3, r3, #32
 80096ae:	6313      	str	r3, [r2, #48]	; 0x30
 80096b0:	4b0d      	ldr	r3, [pc, #52]	; (80096e8 <SPIx_MspInit+0x6c>)
 80096b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b4:	f003 0320 	and.w	r3, r3, #32
 80096b8:	60fb      	str	r3, [r7, #12]
 80096ba:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80096bc:	f44f 7360 	mov.w	r3, #896	; 0x380
 80096c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80096c2:	2302      	movs	r3, #2
 80096c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80096c6:	2302      	movs	r3, #2
 80096c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80096ca:	2301      	movs	r3, #1
 80096cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80096ce:	2305      	movs	r3, #5
 80096d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80096d2:	f107 0314 	add.w	r3, r7, #20
 80096d6:	4619      	mov	r1, r3
 80096d8:	4804      	ldr	r0, [pc, #16]	; (80096ec <SPIx_MspInit+0x70>)
 80096da:	f002 f90d 	bl	800b8f8 <HAL_GPIO_Init>
}
 80096de:	bf00      	nop
 80096e0:	3728      	adds	r7, #40	; 0x28
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	40023800 	.word	0x40023800
 80096ec:	40021400 	.word	0x40021400

080096f0 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b088      	sub	sp, #32
 80096f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80096f6:	4b36      	ldr	r3, [pc, #216]	; (80097d0 <LCD_IO_Init+0xe0>)
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d164      	bne.n	80097c8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80096fe:	4b34      	ldr	r3, [pc, #208]	; (80097d0 <LCD_IO_Init+0xe0>)
 8009700:	2201      	movs	r2, #1
 8009702:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8009704:	2300      	movs	r3, #0
 8009706:	60bb      	str	r3, [r7, #8]
 8009708:	4b32      	ldr	r3, [pc, #200]	; (80097d4 <LCD_IO_Init+0xe4>)
 800970a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800970c:	4a31      	ldr	r2, [pc, #196]	; (80097d4 <LCD_IO_Init+0xe4>)
 800970e:	f043 0308 	orr.w	r3, r3, #8
 8009712:	6313      	str	r3, [r2, #48]	; 0x30
 8009714:	4b2f      	ldr	r3, [pc, #188]	; (80097d4 <LCD_IO_Init+0xe4>)
 8009716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009718:	f003 0308 	and.w	r3, r3, #8
 800971c:	60bb      	str	r3, [r7, #8]
 800971e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8009720:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009724:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8009726:	2301      	movs	r3, #1
 8009728:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800972a:	2300      	movs	r3, #0
 800972c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800972e:	2302      	movs	r3, #2
 8009730:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8009732:	f107 030c 	add.w	r3, r7, #12
 8009736:	4619      	mov	r1, r3
 8009738:	4827      	ldr	r0, [pc, #156]	; (80097d8 <LCD_IO_Init+0xe8>)
 800973a:	f002 f8dd 	bl	800b8f8 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800973e:	2300      	movs	r3, #0
 8009740:	607b      	str	r3, [r7, #4]
 8009742:	4b24      	ldr	r3, [pc, #144]	; (80097d4 <LCD_IO_Init+0xe4>)
 8009744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009746:	4a23      	ldr	r2, [pc, #140]	; (80097d4 <LCD_IO_Init+0xe4>)
 8009748:	f043 0308 	orr.w	r3, r3, #8
 800974c:	6313      	str	r3, [r2, #48]	; 0x30
 800974e:	4b21      	ldr	r3, [pc, #132]	; (80097d4 <LCD_IO_Init+0xe4>)
 8009750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009752:	f003 0308 	and.w	r3, r3, #8
 8009756:	607b      	str	r3, [r7, #4]
 8009758:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800975a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800975e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8009760:	2301      	movs	r3, #1
 8009762:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8009764:	2300      	movs	r3, #0
 8009766:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8009768:	2302      	movs	r3, #2
 800976a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800976c:	f107 030c 	add.w	r3, r7, #12
 8009770:	4619      	mov	r1, r3
 8009772:	4819      	ldr	r0, [pc, #100]	; (80097d8 <LCD_IO_Init+0xe8>)
 8009774:	f002 f8c0 	bl	800b8f8 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8009778:	2300      	movs	r3, #0
 800977a:	603b      	str	r3, [r7, #0]
 800977c:	4b15      	ldr	r3, [pc, #84]	; (80097d4 <LCD_IO_Init+0xe4>)
 800977e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009780:	4a14      	ldr	r2, [pc, #80]	; (80097d4 <LCD_IO_Init+0xe4>)
 8009782:	f043 0304 	orr.w	r3, r3, #4
 8009786:	6313      	str	r3, [r2, #48]	; 0x30
 8009788:	4b12      	ldr	r3, [pc, #72]	; (80097d4 <LCD_IO_Init+0xe4>)
 800978a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800978c:	f003 0304 	and.w	r3, r3, #4
 8009790:	603b      	str	r3, [r7, #0]
 8009792:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8009794:	2304      	movs	r3, #4
 8009796:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8009798:	2301      	movs	r3, #1
 800979a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800979c:	2300      	movs	r3, #0
 800979e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80097a0:	2302      	movs	r3, #2
 80097a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80097a4:	f107 030c 	add.w	r3, r7, #12
 80097a8:	4619      	mov	r1, r3
 80097aa:	480c      	ldr	r0, [pc, #48]	; (80097dc <LCD_IO_Init+0xec>)
 80097ac:	f002 f8a4 	bl	800b8f8 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80097b0:	2200      	movs	r2, #0
 80097b2:	2104      	movs	r1, #4
 80097b4:	4809      	ldr	r0, [pc, #36]	; (80097dc <LCD_IO_Init+0xec>)
 80097b6:	f002 fb6f 	bl	800be98 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80097ba:	2201      	movs	r2, #1
 80097bc:	2104      	movs	r1, #4
 80097be:	4807      	ldr	r0, [pc, #28]	; (80097dc <LCD_IO_Init+0xec>)
 80097c0:	f002 fb6a 	bl	800be98 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80097c4:	f7ff fed6 	bl	8009574 <SPIx_Init>
  }
}
 80097c8:	bf00      	nop
 80097ca:	3720      	adds	r7, #32
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}
 80097d0:	20000e1c 	.word	0x20000e1c
 80097d4:	40023800 	.word	0x40023800
 80097d8:	40020c00 	.word	0x40020c00
 80097dc:	40020800 	.word	0x40020800

080097e0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b082      	sub	sp, #8
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	4603      	mov	r3, r0
 80097e8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80097ea:	2201      	movs	r2, #1
 80097ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80097f0:	480a      	ldr	r0, [pc, #40]	; (800981c <LCD_IO_WriteData+0x3c>)
 80097f2:	f002 fb51 	bl	800be98 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80097f6:	2200      	movs	r2, #0
 80097f8:	2104      	movs	r1, #4
 80097fa:	4809      	ldr	r0, [pc, #36]	; (8009820 <LCD_IO_WriteData+0x40>)
 80097fc:	f002 fb4c 	bl	800be98 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8009800:	88fb      	ldrh	r3, [r7, #6]
 8009802:	4618      	mov	r0, r3
 8009804:	f7ff ff10 	bl	8009628 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8009808:	2201      	movs	r2, #1
 800980a:	2104      	movs	r1, #4
 800980c:	4804      	ldr	r0, [pc, #16]	; (8009820 <LCD_IO_WriteData+0x40>)
 800980e:	f002 fb43 	bl	800be98 <HAL_GPIO_WritePin>
}
 8009812:	bf00      	nop
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	40020c00 	.word	0x40020c00
 8009820:	40020800 	.word	0x40020800

08009824 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b082      	sub	sp, #8
 8009828:	af00      	add	r7, sp, #0
 800982a:	4603      	mov	r3, r0
 800982c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800982e:	2200      	movs	r2, #0
 8009830:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009834:	480a      	ldr	r0, [pc, #40]	; (8009860 <LCD_IO_WriteReg+0x3c>)
 8009836:	f002 fb2f 	bl	800be98 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800983a:	2200      	movs	r2, #0
 800983c:	2104      	movs	r1, #4
 800983e:	4809      	ldr	r0, [pc, #36]	; (8009864 <LCD_IO_WriteReg+0x40>)
 8009840:	f002 fb2a 	bl	800be98 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8009844:	79fb      	ldrb	r3, [r7, #7]
 8009846:	b29b      	uxth	r3, r3
 8009848:	4618      	mov	r0, r3
 800984a:	f7ff feed 	bl	8009628 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800984e:	2201      	movs	r2, #1
 8009850:	2104      	movs	r1, #4
 8009852:	4804      	ldr	r0, [pc, #16]	; (8009864 <LCD_IO_WriteReg+0x40>)
 8009854:	f002 fb20 	bl	800be98 <HAL_GPIO_WritePin>
}
 8009858:	bf00      	nop
 800985a:	3708      	adds	r7, #8
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}
 8009860:	40020c00 	.word	0x40020c00
 8009864:	40020800 	.word	0x40020800

08009868 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	4603      	mov	r3, r0
 8009870:	460a      	mov	r2, r1
 8009872:	80fb      	strh	r3, [r7, #6]
 8009874:	4613      	mov	r3, r2
 8009876:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8009878:	2300      	movs	r3, #0
 800987a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 800987c:	2200      	movs	r2, #0
 800987e:	2104      	movs	r1, #4
 8009880:	4810      	ldr	r0, [pc, #64]	; (80098c4 <LCD_IO_ReadData+0x5c>)
 8009882:	f002 fb09 	bl	800be98 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8009886:	2200      	movs	r2, #0
 8009888:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800988c:	480e      	ldr	r0, [pc, #56]	; (80098c8 <LCD_IO_ReadData+0x60>)
 800988e:	f002 fb03 	bl	800be98 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8009892:	88fb      	ldrh	r3, [r7, #6]
 8009894:	4618      	mov	r0, r3
 8009896:	f7ff fec7 	bl	8009628 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800989a:	797b      	ldrb	r3, [r7, #5]
 800989c:	4618      	mov	r0, r3
 800989e:	f7ff fea3 	bl	80095e8 <SPIx_Read>
 80098a2:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80098a4:	2201      	movs	r2, #1
 80098a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80098aa:	4807      	ldr	r0, [pc, #28]	; (80098c8 <LCD_IO_ReadData+0x60>)
 80098ac:	f002 faf4 	bl	800be98 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80098b0:	2201      	movs	r2, #1
 80098b2:	2104      	movs	r1, #4
 80098b4:	4803      	ldr	r0, [pc, #12]	; (80098c4 <LCD_IO_ReadData+0x5c>)
 80098b6:	f002 faef 	bl	800be98 <HAL_GPIO_WritePin>
  
  return readvalue;
 80098ba:	68fb      	ldr	r3, [r7, #12]
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	40020800 	.word	0x40020800
 80098c8:	40020c00 	.word	0x40020c00

080098cc <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f001 faa3 	bl	800ae20 <HAL_Delay>
}
 80098da:	bf00      	nop
 80098dc:	3708      	adds	r7, #8
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}

080098e2 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 80098e2:	b580      	push	{r7, lr}
 80098e4:	af00      	add	r7, sp, #0
  I2Cx_Init();
 80098e6:	f7ff fd53 	bl	8009390 <I2Cx_Init>
}
 80098ea:	bf00      	nop
 80098ec:	bd80      	pop	{r7, pc}

080098ee <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 80098f2:	f7ff fd7f 	bl	80093f4 <I2Cx_ITConfig>
}
 80098f6:	bf00      	nop
 80098f8:	bd80      	pop	{r7, pc}

080098fa <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b082      	sub	sp, #8
 80098fe:	af00      	add	r7, sp, #0
 8009900:	4603      	mov	r3, r0
 8009902:	71fb      	strb	r3, [r7, #7]
 8009904:	460b      	mov	r3, r1
 8009906:	71bb      	strb	r3, [r7, #6]
 8009908:	4613      	mov	r3, r2
 800990a:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 800990c:	797a      	ldrb	r2, [r7, #5]
 800990e:	79b9      	ldrb	r1, [r7, #6]
 8009910:	79fb      	ldrb	r3, [r7, #7]
 8009912:	4618      	mov	r0, r3
 8009914:	f7ff fd9e 	bl	8009454 <I2Cx_WriteData>
}
 8009918:	bf00      	nop
 800991a:	3708      	adds	r7, #8
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
 8009926:	4603      	mov	r3, r0
 8009928:	460a      	mov	r2, r1
 800992a:	71fb      	strb	r3, [r7, #7]
 800992c:	4613      	mov	r3, r2
 800992e:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8009930:	79ba      	ldrb	r2, [r7, #6]
 8009932:	79fb      	ldrb	r3, [r7, #7]
 8009934:	4611      	mov	r1, r2
 8009936:	4618      	mov	r0, r3
 8009938:	f7ff fdb6 	bl	80094a8 <I2Cx_ReadData>
 800993c:	4603      	mov	r3, r0
}
 800993e:	4618      	mov	r0, r3
 8009940:	3708      	adds	r7, #8
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b082      	sub	sp, #8
 800994a:	af00      	add	r7, sp, #0
 800994c:	603a      	str	r2, [r7, #0]
 800994e:	461a      	mov	r2, r3
 8009950:	4603      	mov	r3, r0
 8009952:	71fb      	strb	r3, [r7, #7]
 8009954:	460b      	mov	r3, r1
 8009956:	71bb      	strb	r3, [r7, #6]
 8009958:	4613      	mov	r3, r2
 800995a:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 800995c:	88bb      	ldrh	r3, [r7, #4]
 800995e:	79b9      	ldrb	r1, [r7, #6]
 8009960:	79f8      	ldrb	r0, [r7, #7]
 8009962:	683a      	ldr	r2, [r7, #0]
 8009964:	f7ff fdcc 	bl	8009500 <I2Cx_ReadBuffer>
 8009968:	4603      	mov	r3, r0
 800996a:	b29b      	uxth	r3, r3
}
 800996c:	4618      	mov	r0, r3
 800996e:	3708      	adds	r7, #8
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f001 fa4f 	bl	800ae20 <HAL_Delay>
}
 8009982:	bf00      	nop
 8009984:	3708      	adds	r7, #8
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
	...

0800998c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 800998c:	b580      	push	{r7, lr}
 800998e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8009990:	4b2d      	ldr	r3, [pc, #180]	; (8009a48 <BSP_LCD_Init+0xbc>)
 8009992:	4a2e      	ldr	r2, [pc, #184]	; (8009a4c <BSP_LCD_Init+0xc0>)
 8009994:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8009996:	4b2c      	ldr	r3, [pc, #176]	; (8009a48 <BSP_LCD_Init+0xbc>)
 8009998:	2209      	movs	r2, #9
 800999a:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 800999c:	4b2a      	ldr	r3, [pc, #168]	; (8009a48 <BSP_LCD_Init+0xbc>)
 800999e:	2201      	movs	r2, #1
 80099a0:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80099a2:	4b29      	ldr	r3, [pc, #164]	; (8009a48 <BSP_LCD_Init+0xbc>)
 80099a4:	221d      	movs	r2, #29
 80099a6:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80099a8:	4b27      	ldr	r3, [pc, #156]	; (8009a48 <BSP_LCD_Init+0xbc>)
 80099aa:	2203      	movs	r2, #3
 80099ac:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80099ae:	4b26      	ldr	r3, [pc, #152]	; (8009a48 <BSP_LCD_Init+0xbc>)
 80099b0:	f240 120d 	movw	r2, #269	; 0x10d
 80099b4:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80099b6:	4b24      	ldr	r3, [pc, #144]	; (8009a48 <BSP_LCD_Init+0xbc>)
 80099b8:	f240 1243 	movw	r2, #323	; 0x143
 80099bc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80099be:	4b22      	ldr	r3, [pc, #136]	; (8009a48 <BSP_LCD_Init+0xbc>)
 80099c0:	f240 1217 	movw	r2, #279	; 0x117
 80099c4:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80099c6:	4b20      	ldr	r3, [pc, #128]	; (8009a48 <BSP_LCD_Init+0xbc>)
 80099c8:	f240 1247 	movw	r2, #327	; 0x147
 80099cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80099ce:	4b1e      	ldr	r3, [pc, #120]	; (8009a48 <BSP_LCD_Init+0xbc>)
 80099d0:	2200      	movs	r2, #0
 80099d2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80099d6:	4b1c      	ldr	r3, [pc, #112]	; (8009a48 <BSP_LCD_Init+0xbc>)
 80099d8:	2200      	movs	r2, #0
 80099da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80099de:	4b1a      	ldr	r3, [pc, #104]	; (8009a48 <BSP_LCD_Init+0xbc>)
 80099e0:	2200      	movs	r2, #0
 80099e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80099e6:	4b1a      	ldr	r3, [pc, #104]	; (8009a50 <BSP_LCD_Init+0xc4>)
 80099e8:	2208      	movs	r2, #8
 80099ea:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80099ec:	4b18      	ldr	r3, [pc, #96]	; (8009a50 <BSP_LCD_Init+0xc4>)
 80099ee:	22c0      	movs	r2, #192	; 0xc0
 80099f0:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80099f2:	4b17      	ldr	r3, [pc, #92]	; (8009a50 <BSP_LCD_Init+0xc4>)
 80099f4:	2204      	movs	r2, #4
 80099f6:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80099f8:	4b15      	ldr	r3, [pc, #84]	; (8009a50 <BSP_LCD_Init+0xc4>)
 80099fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80099fe:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8009a00:	4813      	ldr	r0, [pc, #76]	; (8009a50 <BSP_LCD_Init+0xc4>)
 8009a02:	f004 faf3 	bl	800dfec <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8009a06:	4b10      	ldr	r3, [pc, #64]	; (8009a48 <BSP_LCD_Init+0xbc>)
 8009a08:	2200      	movs	r2, #0
 8009a0a:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8009a0c:	4b0e      	ldr	r3, [pc, #56]	; (8009a48 <BSP_LCD_Init+0xbc>)
 8009a0e:	2200      	movs	r2, #0
 8009a10:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8009a12:	4b0d      	ldr	r3, [pc, #52]	; (8009a48 <BSP_LCD_Init+0xbc>)
 8009a14:	2200      	movs	r2, #0
 8009a16:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8009a18:	4b0b      	ldr	r3, [pc, #44]	; (8009a48 <BSP_LCD_Init+0xbc>)
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8009a1e:	f000 fd19 	bl	800a454 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8009a22:	4809      	ldr	r0, [pc, #36]	; (8009a48 <BSP_LCD_Init+0xbc>)
 8009a24:	f003 faca 	bl	800cfbc <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8009a28:	4b0a      	ldr	r3, [pc, #40]	; (8009a54 <BSP_LCD_Init+0xc8>)
 8009a2a:	4a0b      	ldr	r2, [pc, #44]	; (8009a58 <BSP_LCD_Init+0xcc>)
 8009a2c:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8009a2e:	4b09      	ldr	r3, [pc, #36]	; (8009a54 <BSP_LCD_Init+0xc8>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8009a36:	f000 fefb 	bl	800a830 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8009a3a:	4808      	ldr	r0, [pc, #32]	; (8009a5c <BSP_LCD_Init+0xd0>)
 8009a3c:	f000 f920 	bl	8009c80 <BSP_LCD_SetFont>

  return LCD_OK;
 8009a40:	2300      	movs	r3, #0
}  
 8009a42:	4618      	mov	r0, r3
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	20000e20 	.word	0x20000e20
 8009a4c:	40016800 	.word	0x40016800
 8009a50:	20000f08 	.word	0x20000f08
 8009a54:	20000f54 	.word	0x20000f54
 8009a58:	20000004 	.word	0x20000004
 8009a5c:	20000070 	.word	0x20000070

08009a60 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8009a64:	4b03      	ldr	r3, [pc, #12]	; (8009a74 <BSP_LCD_GetXSize+0x14>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a6a:	4798      	blx	r3
 8009a6c:	4603      	mov	r3, r0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	bd80      	pop	{r7, pc}
 8009a72:	bf00      	nop
 8009a74:	20000f54 	.word	0x20000f54

08009a78 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8009a7c:	4b03      	ldr	r3, [pc, #12]	; (8009a8c <BSP_LCD_GetYSize+0x14>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a82:	4798      	blx	r3
 8009a84:	4603      	mov	r3, r0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	20000f54 	.word	0x20000f54

08009a90 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b090      	sub	sp, #64	; 0x40
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	4603      	mov	r3, r0
 8009a98:	6039      	str	r1, [r7, #0]
 8009a9a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8009aa0:	f7ff ffde 	bl	8009a60 <BSP_LCD_GetXSize>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8009aac:	f7ff ffe4 	bl	8009a78 <BSP_LCD_GetYSize>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8009abc:	23ff      	movs	r3, #255	; 0xff
 8009abe:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8009aca:	2300      	movs	r3, #0
 8009acc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8009ad6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009ada:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8009adc:	2307      	movs	r3, #7
 8009ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8009ae0:	f7ff ffbe 	bl	8009a60 <BSP_LCD_GetXSize>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8009ae8:	f7ff ffc6 	bl	8009a78 <BSP_LCD_GetYSize>
 8009aec:	4603      	mov	r3, r0
 8009aee:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8009af0:	88fa      	ldrh	r2, [r7, #6]
 8009af2:	f107 030c 	add.w	r3, r7, #12
 8009af6:	4619      	mov	r1, r3
 8009af8:	4814      	ldr	r0, [pc, #80]	; (8009b4c <BSP_LCD_LayerDefaultInit+0xbc>)
 8009afa:	f003 fb2f 	bl	800d15c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8009afe:	88fa      	ldrh	r2, [r7, #6]
 8009b00:	4913      	ldr	r1, [pc, #76]	; (8009b50 <BSP_LCD_LayerDefaultInit+0xc0>)
 8009b02:	4613      	mov	r3, r2
 8009b04:	005b      	lsls	r3, r3, #1
 8009b06:	4413      	add	r3, r2
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	440b      	add	r3, r1
 8009b0c:	3304      	adds	r3, #4
 8009b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b12:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8009b14:	88fa      	ldrh	r2, [r7, #6]
 8009b16:	490e      	ldr	r1, [pc, #56]	; (8009b50 <BSP_LCD_LayerDefaultInit+0xc0>)
 8009b18:	4613      	mov	r3, r2
 8009b1a:	005b      	lsls	r3, r3, #1
 8009b1c:	4413      	add	r3, r2
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	440b      	add	r3, r1
 8009b22:	3308      	adds	r3, #8
 8009b24:	4a0b      	ldr	r2, [pc, #44]	; (8009b54 <BSP_LCD_LayerDefaultInit+0xc4>)
 8009b26:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8009b28:	88fa      	ldrh	r2, [r7, #6]
 8009b2a:	4909      	ldr	r1, [pc, #36]	; (8009b50 <BSP_LCD_LayerDefaultInit+0xc0>)
 8009b2c:	4613      	mov	r3, r2
 8009b2e:	005b      	lsls	r3, r3, #1
 8009b30:	4413      	add	r3, r2
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	440b      	add	r3, r1
 8009b36:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8009b3a:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8009b3c:	4803      	ldr	r0, [pc, #12]	; (8009b4c <BSP_LCD_LayerDefaultInit+0xbc>)
 8009b3e:	f003 fbc9 	bl	800d2d4 <HAL_LTDC_EnableDither>
}
 8009b42:	bf00      	nop
 8009b44:	3740      	adds	r7, #64	; 0x40
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	20000e20 	.word	0x20000e20
 8009b50:	20000f3c 	.word	0x20000f3c
 8009b54:	20000070 	.word	0x20000070

08009b58 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8009b60:	4a04      	ldr	r2, [pc, #16]	; (8009b74 <BSP_LCD_SelectLayer+0x1c>)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6013      	str	r3, [r2, #0]
}
 8009b66:	bf00      	nop
 8009b68:	370c      	adds	r7, #12
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop
 8009b74:	20000f38 	.word	0x20000f38

08009b78 <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	460b      	mov	r3, r1
 8009b82:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 8009b84:	78fb      	ldrb	r3, [r7, #3]
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d112      	bne.n	8009bb0 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8009b8a:	4b19      	ldr	r3, [pc, #100]	; (8009bf0 <BSP_LCD_SetLayerVisible+0x78>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	461a      	mov	r2, r3
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	01db      	lsls	r3, r3, #7
 8009b94:	4413      	add	r3, r2
 8009b96:	3384      	adds	r3, #132	; 0x84
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a15      	ldr	r2, [pc, #84]	; (8009bf0 <BSP_LCD_SetLayerVisible+0x78>)
 8009b9c:	6812      	ldr	r2, [r2, #0]
 8009b9e:	4611      	mov	r1, r2
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	01d2      	lsls	r2, r2, #7
 8009ba4:	440a      	add	r2, r1
 8009ba6:	3284      	adds	r2, #132	; 0x84
 8009ba8:	f043 0301 	orr.w	r3, r3, #1
 8009bac:	6013      	str	r3, [r2, #0]
 8009bae:	e011      	b.n	8009bd4 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8009bb0:	4b0f      	ldr	r3, [pc, #60]	; (8009bf0 <BSP_LCD_SetLayerVisible+0x78>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	01db      	lsls	r3, r3, #7
 8009bba:	4413      	add	r3, r2
 8009bbc:	3384      	adds	r3, #132	; 0x84
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a0b      	ldr	r2, [pc, #44]	; (8009bf0 <BSP_LCD_SetLayerVisible+0x78>)
 8009bc2:	6812      	ldr	r2, [r2, #0]
 8009bc4:	4611      	mov	r1, r2
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	01d2      	lsls	r2, r2, #7
 8009bca:	440a      	add	r2, r1
 8009bcc:	3284      	adds	r2, #132	; 0x84
 8009bce:	f023 0301 	bic.w	r3, r3, #1
 8009bd2:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8009bd4:	4b06      	ldr	r3, [pc, #24]	; (8009bf0 <BSP_LCD_SetLayerVisible+0x78>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009bda:	4b05      	ldr	r3, [pc, #20]	; (8009bf0 <BSP_LCD_SetLayerVisible+0x78>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f042 0201 	orr.w	r2, r2, #1
 8009be2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009be4:	bf00      	nop
 8009be6:	370c      	adds	r7, #12
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr
 8009bf0:	20000e20 	.word	0x20000e20

08009bf4 <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color Keying.
  * @param  LayerIndex: the Layer foreground or background
  * @param  RGBValue: the Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	6839      	ldr	r1, [r7, #0]
 8009c02:	4805      	ldr	r0, [pc, #20]	; (8009c18 <BSP_LCD_SetColorKeying+0x24>)
 8009c04:	f003 fae8 	bl	800d1d8 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 8009c08:	6879      	ldr	r1, [r7, #4]
 8009c0a:	4803      	ldr	r0, [pc, #12]	; (8009c18 <BSP_LCD_SetColorKeying+0x24>)
 8009c0c:	f003 fb28 	bl	800d260 <HAL_LTDC_EnableColorKeying>
}
 8009c10:	bf00      	nop
 8009c12:	3708      	adds	r7, #8
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	20000e20 	.word	0x20000e20

08009c1c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8009c24:	4b07      	ldr	r3, [pc, #28]	; (8009c44 <BSP_LCD_SetTextColor+0x28>)
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	4907      	ldr	r1, [pc, #28]	; (8009c48 <BSP_LCD_SetTextColor+0x2c>)
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	005b      	lsls	r3, r3, #1
 8009c2e:	4413      	add	r3, r2
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	440b      	add	r3, r1
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	601a      	str	r2, [r3, #0]
}
 8009c38:	bf00      	nop
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr
 8009c44:	20000f38 	.word	0x20000f38
 8009c48:	20000f3c 	.word	0x20000f3c

08009c4c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8009c54:	4b08      	ldr	r3, [pc, #32]	; (8009c78 <BSP_LCD_SetBackColor+0x2c>)
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	4908      	ldr	r1, [pc, #32]	; (8009c7c <BSP_LCD_SetBackColor+0x30>)
 8009c5a:	4613      	mov	r3, r2
 8009c5c:	005b      	lsls	r3, r3, #1
 8009c5e:	4413      	add	r3, r2
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	440b      	add	r3, r1
 8009c64:	3304      	adds	r3, #4
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	601a      	str	r2, [r3, #0]
}
 8009c6a:	bf00      	nop
 8009c6c:	370c      	adds	r7, #12
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr
 8009c76:	bf00      	nop
 8009c78:	20000f38 	.word	0x20000f38
 8009c7c:	20000f3c 	.word	0x20000f3c

08009c80 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b083      	sub	sp, #12
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8009c88:	4b08      	ldr	r3, [pc, #32]	; (8009cac <BSP_LCD_SetFont+0x2c>)
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	4908      	ldr	r1, [pc, #32]	; (8009cb0 <BSP_LCD_SetFont+0x30>)
 8009c8e:	4613      	mov	r3, r2
 8009c90:	005b      	lsls	r3, r3, #1
 8009c92:	4413      	add	r3, r2
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	440b      	add	r3, r1
 8009c98:	3308      	adds	r3, #8
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	601a      	str	r2, [r3, #0]
}
 8009c9e:	bf00      	nop
 8009ca0:	370c      	adds	r7, #12
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	20000f38 	.word	0x20000f38
 8009cb0:	20000f3c 	.word	0x20000f3c

08009cb4 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8009cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af02      	add	r7, sp, #8
 8009cba:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8009cbc:	4b0f      	ldr	r3, [pc, #60]	; (8009cfc <BSP_LCD_Clear+0x48>)
 8009cbe:	681c      	ldr	r4, [r3, #0]
 8009cc0:	4b0e      	ldr	r3, [pc, #56]	; (8009cfc <BSP_LCD_Clear+0x48>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a0e      	ldr	r2, [pc, #56]	; (8009d00 <BSP_LCD_Clear+0x4c>)
 8009cc6:	2134      	movs	r1, #52	; 0x34
 8009cc8:	fb01 f303 	mul.w	r3, r1, r3
 8009ccc:	4413      	add	r3, r2
 8009cce:	335c      	adds	r3, #92	; 0x5c
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	461e      	mov	r6, r3
 8009cd4:	f7ff fec4 	bl	8009a60 <BSP_LCD_GetXSize>
 8009cd8:	4605      	mov	r5, r0
 8009cda:	f7ff fecd 	bl	8009a78 <BSP_LCD_GetYSize>
 8009cde:	4602      	mov	r2, r0
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	9301      	str	r3, [sp, #4]
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	9300      	str	r3, [sp, #0]
 8009ce8:	4613      	mov	r3, r2
 8009cea:	462a      	mov	r2, r5
 8009cec:	4631      	mov	r1, r6
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f000 fd66 	bl	800a7c0 <FillBuffer>
}
 8009cf4:	bf00      	nop
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cfc:	20000f38 	.word	0x20000f38
 8009d00:	20000e20 	.word	0x20000e20

08009d04 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8009d04:	b590      	push	{r4, r7, lr}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	80fb      	strh	r3, [r7, #6]
 8009d0e:	460b      	mov	r3, r1
 8009d10:	80bb      	strh	r3, [r7, #4]
 8009d12:	4613      	mov	r3, r2
 8009d14:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8009d16:	4b1b      	ldr	r3, [pc, #108]	; (8009d84 <BSP_LCD_DisplayChar+0x80>)
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	491b      	ldr	r1, [pc, #108]	; (8009d88 <BSP_LCD_DisplayChar+0x84>)
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	005b      	lsls	r3, r3, #1
 8009d20:	4413      	add	r3, r2
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	440b      	add	r3, r1
 8009d26:	3308      	adds	r3, #8
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	6819      	ldr	r1, [r3, #0]
 8009d2c:	78fb      	ldrb	r3, [r7, #3]
 8009d2e:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8009d32:	4b14      	ldr	r3, [pc, #80]	; (8009d84 <BSP_LCD_DisplayChar+0x80>)
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	4c14      	ldr	r4, [pc, #80]	; (8009d88 <BSP_LCD_DisplayChar+0x84>)
 8009d38:	4613      	mov	r3, r2
 8009d3a:	005b      	lsls	r3, r3, #1
 8009d3c:	4413      	add	r3, r2
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	4423      	add	r3, r4
 8009d42:	3308      	adds	r3, #8
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8009d48:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8009d4c:	4b0d      	ldr	r3, [pc, #52]	; (8009d84 <BSP_LCD_DisplayChar+0x80>)
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	4c0d      	ldr	r4, [pc, #52]	; (8009d88 <BSP_LCD_DisplayChar+0x84>)
 8009d52:	4613      	mov	r3, r2
 8009d54:	005b      	lsls	r3, r3, #1
 8009d56:	4413      	add	r3, r2
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	4423      	add	r3, r4
 8009d5c:	3308      	adds	r3, #8
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	889b      	ldrh	r3, [r3, #4]
 8009d62:	3307      	adds	r3, #7
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	da00      	bge.n	8009d6a <BSP_LCD_DisplayChar+0x66>
 8009d68:	3307      	adds	r3, #7
 8009d6a:	10db      	asrs	r3, r3, #3
 8009d6c:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8009d70:	18ca      	adds	r2, r1, r3
 8009d72:	88b9      	ldrh	r1, [r7, #4]
 8009d74:	88fb      	ldrh	r3, [r7, #6]
 8009d76:	4618      	mov	r0, r3
 8009d78:	f000 fc68 	bl	800a64c <DrawChar>
}
 8009d7c:	bf00      	nop
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd90      	pop	{r4, r7, pc}
 8009d84:	20000f38 	.word	0x20000f38
 8009d88:	20000f3c 	.word	0x20000f3c

08009d8c <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8009d8c:	b5b0      	push	{r4, r5, r7, lr}
 8009d8e:	b088      	sub	sp, #32
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60ba      	str	r2, [r7, #8]
 8009d94:	461a      	mov	r2, r3
 8009d96:	4603      	mov	r3, r0
 8009d98:	81fb      	strh	r3, [r7, #14]
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	81bb      	strh	r3, [r7, #12]
 8009d9e:	4613      	mov	r3, r2
 8009da0:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8009da2:	2301      	movs	r3, #1
 8009da4:	83fb      	strh	r3, [r7, #30]
 8009da6:	2300      	movs	r3, #0
 8009da8:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8009daa:	2300      	movs	r3, #0
 8009dac:	61bb      	str	r3, [r7, #24]
 8009dae:	2300      	movs	r3, #0
 8009db0:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8009db6:	e002      	b.n	8009dbe <BSP_LCD_DisplayStringAt+0x32>
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	3301      	adds	r3, #1
 8009dbc:	61bb      	str	r3, [r7, #24]
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	1c5a      	adds	r2, r3, #1
 8009dc2:	617a      	str	r2, [r7, #20]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d1f6      	bne.n	8009db8 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8009dca:	f7ff fe49 	bl	8009a60 <BSP_LCD_GetXSize>
 8009dce:	4601      	mov	r1, r0
 8009dd0:	4b4b      	ldr	r3, [pc, #300]	; (8009f00 <BSP_LCD_DisplayStringAt+0x174>)
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	484b      	ldr	r0, [pc, #300]	; (8009f04 <BSP_LCD_DisplayStringAt+0x178>)
 8009dd6:	4613      	mov	r3, r2
 8009dd8:	005b      	lsls	r3, r3, #1
 8009dda:	4413      	add	r3, r2
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	4403      	add	r3, r0
 8009de0:	3308      	adds	r3, #8
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	889b      	ldrh	r3, [r3, #4]
 8009de6:	fbb1 f3f3 	udiv	r3, r1, r3
 8009dea:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8009dec:	79fb      	ldrb	r3, [r7, #7]
 8009dee:	2b03      	cmp	r3, #3
 8009df0:	d01c      	beq.n	8009e2c <BSP_LCD_DisplayStringAt+0xa0>
 8009df2:	2b03      	cmp	r3, #3
 8009df4:	dc33      	bgt.n	8009e5e <BSP_LCD_DisplayStringAt+0xd2>
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d002      	beq.n	8009e00 <BSP_LCD_DisplayStringAt+0x74>
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	d019      	beq.n	8009e32 <BSP_LCD_DisplayStringAt+0xa6>
 8009dfe:	e02e      	b.n	8009e5e <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8009e00:	693a      	ldr	r2, [r7, #16]
 8009e02:	69bb      	ldr	r3, [r7, #24]
 8009e04:	1ad1      	subs	r1, r2, r3
 8009e06:	4b3e      	ldr	r3, [pc, #248]	; (8009f00 <BSP_LCD_DisplayStringAt+0x174>)
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	483e      	ldr	r0, [pc, #248]	; (8009f04 <BSP_LCD_DisplayStringAt+0x178>)
 8009e0c:	4613      	mov	r3, r2
 8009e0e:	005b      	lsls	r3, r3, #1
 8009e10:	4413      	add	r3, r2
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	4403      	add	r3, r0
 8009e16:	3308      	adds	r3, #8
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	889b      	ldrh	r3, [r3, #4]
 8009e1c:	fb01 f303 	mul.w	r3, r1, r3
 8009e20:	085b      	lsrs	r3, r3, #1
 8009e22:	b29a      	uxth	r2, r3
 8009e24:	89fb      	ldrh	r3, [r7, #14]
 8009e26:	4413      	add	r3, r2
 8009e28:	83fb      	strh	r3, [r7, #30]
      break;
 8009e2a:	e01b      	b.n	8009e64 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8009e2c:	89fb      	ldrh	r3, [r7, #14]
 8009e2e:	83fb      	strh	r3, [r7, #30]
      break;
 8009e30:	e018      	b.n	8009e64 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8009e32:	693a      	ldr	r2, [r7, #16]
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	1ad3      	subs	r3, r2, r3
 8009e38:	b299      	uxth	r1, r3
 8009e3a:	4b31      	ldr	r3, [pc, #196]	; (8009f00 <BSP_LCD_DisplayStringAt+0x174>)
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	4831      	ldr	r0, [pc, #196]	; (8009f04 <BSP_LCD_DisplayStringAt+0x178>)
 8009e40:	4613      	mov	r3, r2
 8009e42:	005b      	lsls	r3, r3, #1
 8009e44:	4413      	add	r3, r2
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	4403      	add	r3, r0
 8009e4a:	3308      	adds	r3, #8
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	889b      	ldrh	r3, [r3, #4]
 8009e50:	fb11 f303 	smulbb	r3, r1, r3
 8009e54:	b29a      	uxth	r2, r3
 8009e56:	89fb      	ldrh	r3, [r7, #14]
 8009e58:	4413      	add	r3, r2
 8009e5a:	83fb      	strh	r3, [r7, #30]
      break;
 8009e5c:	e002      	b.n	8009e64 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8009e5e:	89fb      	ldrh	r3, [r7, #14]
 8009e60:	83fb      	strh	r3, [r7, #30]
      break;
 8009e62:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8009e64:	e01a      	b.n	8009e9c <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	781a      	ldrb	r2, [r3, #0]
 8009e6a:	89b9      	ldrh	r1, [r7, #12]
 8009e6c:	8bfb      	ldrh	r3, [r7, #30]
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7ff ff48 	bl	8009d04 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8009e74:	4b22      	ldr	r3, [pc, #136]	; (8009f00 <BSP_LCD_DisplayStringAt+0x174>)
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	4922      	ldr	r1, [pc, #136]	; (8009f04 <BSP_LCD_DisplayStringAt+0x178>)
 8009e7a:	4613      	mov	r3, r2
 8009e7c:	005b      	lsls	r3, r3, #1
 8009e7e:	4413      	add	r3, r2
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	440b      	add	r3, r1
 8009e84:	3308      	adds	r3, #8
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	889a      	ldrh	r2, [r3, #4]
 8009e8a:	8bfb      	ldrh	r3, [r7, #30]
 8009e8c:	4413      	add	r3, r2
 8009e8e:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	3301      	adds	r3, #1
 8009e94:	60bb      	str	r3, [r7, #8]
    i++;
 8009e96:	8bbb      	ldrh	r3, [r7, #28]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	bf14      	ite	ne
 8009ea4:	2301      	movne	r3, #1
 8009ea6:	2300      	moveq	r3, #0
 8009ea8:	b2dc      	uxtb	r4, r3
 8009eaa:	f7ff fdd9 	bl	8009a60 <BSP_LCD_GetXSize>
 8009eae:	8bb9      	ldrh	r1, [r7, #28]
 8009eb0:	4b13      	ldr	r3, [pc, #76]	; (8009f00 <BSP_LCD_DisplayStringAt+0x174>)
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	4d13      	ldr	r5, [pc, #76]	; (8009f04 <BSP_LCD_DisplayStringAt+0x178>)
 8009eb6:	4613      	mov	r3, r2
 8009eb8:	005b      	lsls	r3, r3, #1
 8009eba:	4413      	add	r3, r2
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	442b      	add	r3, r5
 8009ec0:	3308      	adds	r3, #8
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	889b      	ldrh	r3, [r3, #4]
 8009ec6:	fb01 f303 	mul.w	r3, r1, r3
 8009eca:	1ac3      	subs	r3, r0, r3
 8009ecc:	b299      	uxth	r1, r3
 8009ece:	4b0c      	ldr	r3, [pc, #48]	; (8009f00 <BSP_LCD_DisplayStringAt+0x174>)
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	480c      	ldr	r0, [pc, #48]	; (8009f04 <BSP_LCD_DisplayStringAt+0x178>)
 8009ed4:	4613      	mov	r3, r2
 8009ed6:	005b      	lsls	r3, r3, #1
 8009ed8:	4413      	add	r3, r2
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	4403      	add	r3, r0
 8009ede:	3308      	adds	r3, #8
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	889b      	ldrh	r3, [r3, #4]
 8009ee4:	4299      	cmp	r1, r3
 8009ee6:	bf2c      	ite	cs
 8009ee8:	2301      	movcs	r3, #1
 8009eea:	2300      	movcc	r3, #0
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	4023      	ands	r3, r4
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d1b7      	bne.n	8009e66 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8009ef6:	bf00      	nop
 8009ef8:	bf00      	nop
 8009efa:	3720      	adds	r7, #32
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bdb0      	pop	{r4, r5, r7, pc}
 8009f00:	20000f38 	.word	0x20000f38
 8009f04:	20000f3c 	.word	0x20000f3c

08009f08 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8009f08:	b5b0      	push	{r4, r5, r7, lr}
 8009f0a:	b086      	sub	sp, #24
 8009f0c:	af02      	add	r7, sp, #8
 8009f0e:	4603      	mov	r3, r0
 8009f10:	80fb      	strh	r3, [r7, #6]
 8009f12:	460b      	mov	r3, r1
 8009f14:	80bb      	strh	r3, [r7, #4]
 8009f16:	4613      	mov	r3, r2
 8009f18:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8009f1e:	4b16      	ldr	r3, [pc, #88]	; (8009f78 <BSP_LCD_DrawHLine+0x70>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4a16      	ldr	r2, [pc, #88]	; (8009f7c <BSP_LCD_DrawHLine+0x74>)
 8009f24:	2134      	movs	r1, #52	; 0x34
 8009f26:	fb01 f303 	mul.w	r3, r1, r3
 8009f2a:	4413      	add	r3, r2
 8009f2c:	335c      	adds	r3, #92	; 0x5c
 8009f2e:	681c      	ldr	r4, [r3, #0]
 8009f30:	f7ff fd96 	bl	8009a60 <BSP_LCD_GetXSize>
 8009f34:	4602      	mov	r2, r0
 8009f36:	88bb      	ldrh	r3, [r7, #4]
 8009f38:	fb03 f202 	mul.w	r2, r3, r2
 8009f3c:	88fb      	ldrh	r3, [r7, #6]
 8009f3e:	4413      	add	r3, r2
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	4423      	add	r3, r4
 8009f44:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8009f46:	4b0c      	ldr	r3, [pc, #48]	; (8009f78 <BSP_LCD_DrawHLine+0x70>)
 8009f48:	6818      	ldr	r0, [r3, #0]
 8009f4a:	68f9      	ldr	r1, [r7, #12]
 8009f4c:	887c      	ldrh	r4, [r7, #2]
 8009f4e:	4b0a      	ldr	r3, [pc, #40]	; (8009f78 <BSP_LCD_DrawHLine+0x70>)
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	4d0b      	ldr	r5, [pc, #44]	; (8009f80 <BSP_LCD_DrawHLine+0x78>)
 8009f54:	4613      	mov	r3, r2
 8009f56:	005b      	lsls	r3, r3, #1
 8009f58:	4413      	add	r3, r2
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	442b      	add	r3, r5
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	9301      	str	r3, [sp, #4]
 8009f62:	2300      	movs	r3, #0
 8009f64:	9300      	str	r3, [sp, #0]
 8009f66:	2301      	movs	r3, #1
 8009f68:	4622      	mov	r2, r4
 8009f6a:	f000 fc29 	bl	800a7c0 <FillBuffer>
}
 8009f6e:	bf00      	nop
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bdb0      	pop	{r4, r5, r7, pc}
 8009f76:	bf00      	nop
 8009f78:	20000f38 	.word	0x20000f38
 8009f7c:	20000e20 	.word	0x20000e20
 8009f80:	20000f3c 	.word	0x20000f3c

08009f84 <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8009f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f86:	b087      	sub	sp, #28
 8009f88:	af02      	add	r7, sp, #8
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	80fb      	strh	r3, [r7, #6]
 8009f8e:	460b      	mov	r3, r1
 8009f90:	80bb      	strh	r3, [r7, #4]
 8009f92:	4613      	mov	r3, r2
 8009f94:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8009f96:	2300      	movs	r3, #0
 8009f98:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8009f9a:	4b18      	ldr	r3, [pc, #96]	; (8009ffc <BSP_LCD_DrawVLine+0x78>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a18      	ldr	r2, [pc, #96]	; (800a000 <BSP_LCD_DrawVLine+0x7c>)
 8009fa0:	2134      	movs	r1, #52	; 0x34
 8009fa2:	fb01 f303 	mul.w	r3, r1, r3
 8009fa6:	4413      	add	r3, r2
 8009fa8:	335c      	adds	r3, #92	; 0x5c
 8009faa:	681c      	ldr	r4, [r3, #0]
 8009fac:	f7ff fd58 	bl	8009a60 <BSP_LCD_GetXSize>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	88bb      	ldrh	r3, [r7, #4]
 8009fb4:	fb03 f202 	mul.w	r2, r3, r2
 8009fb8:	88fb      	ldrh	r3, [r7, #6]
 8009fba:	4413      	add	r3, r2
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	4423      	add	r3, r4
 8009fc0:	60fb      	str	r3, [r7, #12]
  
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8009fc2:	4b0e      	ldr	r3, [pc, #56]	; (8009ffc <BSP_LCD_DrawVLine+0x78>)
 8009fc4:	681c      	ldr	r4, [r3, #0]
 8009fc6:	68fd      	ldr	r5, [r7, #12]
 8009fc8:	887e      	ldrh	r6, [r7, #2]
 8009fca:	f7ff fd49 	bl	8009a60 <BSP_LCD_GetXSize>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	1e59      	subs	r1, r3, #1
 8009fd2:	4b0a      	ldr	r3, [pc, #40]	; (8009ffc <BSP_LCD_DrawVLine+0x78>)
 8009fd4:	681a      	ldr	r2, [r3, #0]
 8009fd6:	480b      	ldr	r0, [pc, #44]	; (800a004 <BSP_LCD_DrawVLine+0x80>)
 8009fd8:	4613      	mov	r3, r2
 8009fda:	005b      	lsls	r3, r3, #1
 8009fdc:	4413      	add	r3, r2
 8009fde:	009b      	lsls	r3, r3, #2
 8009fe0:	4403      	add	r3, r0
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	9301      	str	r3, [sp, #4]
 8009fe6:	9100      	str	r1, [sp, #0]
 8009fe8:	4633      	mov	r3, r6
 8009fea:	2201      	movs	r2, #1
 8009fec:	4629      	mov	r1, r5
 8009fee:	4620      	mov	r0, r4
 8009ff0:	f000 fbe6 	bl	800a7c0 <FillBuffer>
}
 8009ff4:	bf00      	nop
 8009ff6:	3714      	adds	r7, #20
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ffc:	20000f38 	.word	0x20000f38
 800a000:	20000e20 	.word	0x20000e20
 800a004:	20000f3c 	.word	0x20000f3c

0800a008 <BSP_LCD_DrawRect>:
  * @param  Ypos: the Y position
  * @param  Height: display rectangle height
  * @param  Width: display rectangle width
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800a008:	b590      	push	{r4, r7, lr}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	4604      	mov	r4, r0
 800a010:	4608      	mov	r0, r1
 800a012:	4611      	mov	r1, r2
 800a014:	461a      	mov	r2, r3
 800a016:	4623      	mov	r3, r4
 800a018:	80fb      	strh	r3, [r7, #6]
 800a01a:	4603      	mov	r3, r0
 800a01c:	80bb      	strh	r3, [r7, #4]
 800a01e:	460b      	mov	r3, r1
 800a020:	807b      	strh	r3, [r7, #2]
 800a022:	4613      	mov	r3, r2
 800a024:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 800a026:	887a      	ldrh	r2, [r7, #2]
 800a028:	88b9      	ldrh	r1, [r7, #4]
 800a02a:	88fb      	ldrh	r3, [r7, #6]
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7ff ff6b 	bl	8009f08 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 800a032:	88ba      	ldrh	r2, [r7, #4]
 800a034:	883b      	ldrh	r3, [r7, #0]
 800a036:	4413      	add	r3, r2
 800a038:	b299      	uxth	r1, r3
 800a03a:	887a      	ldrh	r2, [r7, #2]
 800a03c:	88fb      	ldrh	r3, [r7, #6]
 800a03e:	4618      	mov	r0, r3
 800a040:	f7ff ff62 	bl	8009f08 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 800a044:	883a      	ldrh	r2, [r7, #0]
 800a046:	88b9      	ldrh	r1, [r7, #4]
 800a048:	88fb      	ldrh	r3, [r7, #6]
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7ff ff9a 	bl	8009f84 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 800a050:	88fa      	ldrh	r2, [r7, #6]
 800a052:	887b      	ldrh	r3, [r7, #2]
 800a054:	4413      	add	r3, r2
 800a056:	b29b      	uxth	r3, r3
 800a058:	883a      	ldrh	r2, [r7, #0]
 800a05a:	88b9      	ldrh	r1, [r7, #4]
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7ff ff91 	bl	8009f84 <BSP_LCD_DrawVLine>
}
 800a062:	bf00      	nop
 800a064:	370c      	adds	r7, #12
 800a066:	46bd      	mov	sp, r7
 800a068:	bd90      	pop	{r4, r7, pc}
	...

0800a06c <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800a06c:	b590      	push	{r4, r7, lr}
 800a06e:	b087      	sub	sp, #28
 800a070:	af00      	add	r7, sp, #0
 800a072:	4603      	mov	r3, r0
 800a074:	80fb      	strh	r3, [r7, #6]
 800a076:	460b      	mov	r3, r1
 800a078:	80bb      	strh	r3, [r7, #4]
 800a07a:	4613      	mov	r3, r2
 800a07c:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 800a07e:	887b      	ldrh	r3, [r7, #2]
 800a080:	005b      	lsls	r3, r3, #1
 800a082:	f1c3 0303 	rsb	r3, r3, #3
 800a086:	617b      	str	r3, [r7, #20]
  curx = 0;
 800a088:	2300      	movs	r3, #0
 800a08a:	613b      	str	r3, [r7, #16]
  cury = Radius;
 800a08c:	887b      	ldrh	r3, [r7, #2]
 800a08e:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 800a090:	e0c7      	b.n	800a222 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	b29a      	uxth	r2, r3
 800a096:	88fb      	ldrh	r3, [r7, #6]
 800a098:	4413      	add	r3, r2
 800a09a:	b298      	uxth	r0, r3
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	88ba      	ldrh	r2, [r7, #4]
 800a0a2:	1ad3      	subs	r3, r2, r3
 800a0a4:	b299      	uxth	r1, r3
 800a0a6:	4b64      	ldr	r3, [pc, #400]	; (800a238 <BSP_LCD_DrawCircle+0x1cc>)
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	4c64      	ldr	r4, [pc, #400]	; (800a23c <BSP_LCD_DrawCircle+0x1d0>)
 800a0ac:	4613      	mov	r3, r2
 800a0ae:	005b      	lsls	r3, r3, #1
 800a0b0:	4413      	add	r3, r2
 800a0b2:	009b      	lsls	r3, r3, #2
 800a0b4:	4423      	add	r3, r4
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	f000 faa1 	bl	800a600 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	88fa      	ldrh	r2, [r7, #6]
 800a0c4:	1ad3      	subs	r3, r2, r3
 800a0c6:	b298      	uxth	r0, r3
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	88ba      	ldrh	r2, [r7, #4]
 800a0ce:	1ad3      	subs	r3, r2, r3
 800a0d0:	b299      	uxth	r1, r3
 800a0d2:	4b59      	ldr	r3, [pc, #356]	; (800a238 <BSP_LCD_DrawCircle+0x1cc>)
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	4c59      	ldr	r4, [pc, #356]	; (800a23c <BSP_LCD_DrawCircle+0x1d0>)
 800a0d8:	4613      	mov	r3, r2
 800a0da:	005b      	lsls	r3, r3, #1
 800a0dc:	4413      	add	r3, r2
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	4423      	add	r3, r4
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	f000 fa8b 	bl	800a600 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	b29a      	uxth	r2, r3
 800a0ee:	88fb      	ldrh	r3, [r7, #6]
 800a0f0:	4413      	add	r3, r2
 800a0f2:	b298      	uxth	r0, r3
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	88ba      	ldrh	r2, [r7, #4]
 800a0fa:	1ad3      	subs	r3, r2, r3
 800a0fc:	b299      	uxth	r1, r3
 800a0fe:	4b4e      	ldr	r3, [pc, #312]	; (800a238 <BSP_LCD_DrawCircle+0x1cc>)
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	4c4e      	ldr	r4, [pc, #312]	; (800a23c <BSP_LCD_DrawCircle+0x1d0>)
 800a104:	4613      	mov	r3, r2
 800a106:	005b      	lsls	r3, r3, #1
 800a108:	4413      	add	r3, r2
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	4423      	add	r3, r4
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	461a      	mov	r2, r3
 800a112:	f000 fa75 	bl	800a600 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	b29b      	uxth	r3, r3
 800a11a:	88fa      	ldrh	r2, [r7, #6]
 800a11c:	1ad3      	subs	r3, r2, r3
 800a11e:	b298      	uxth	r0, r3
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	b29b      	uxth	r3, r3
 800a124:	88ba      	ldrh	r2, [r7, #4]
 800a126:	1ad3      	subs	r3, r2, r3
 800a128:	b299      	uxth	r1, r3
 800a12a:	4b43      	ldr	r3, [pc, #268]	; (800a238 <BSP_LCD_DrawCircle+0x1cc>)
 800a12c:	681a      	ldr	r2, [r3, #0]
 800a12e:	4c43      	ldr	r4, [pc, #268]	; (800a23c <BSP_LCD_DrawCircle+0x1d0>)
 800a130:	4613      	mov	r3, r2
 800a132:	005b      	lsls	r3, r3, #1
 800a134:	4413      	add	r3, r2
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	4423      	add	r3, r4
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	461a      	mov	r2, r3
 800a13e:	f000 fa5f 	bl	800a600 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	b29a      	uxth	r2, r3
 800a146:	88fb      	ldrh	r3, [r7, #6]
 800a148:	4413      	add	r3, r2
 800a14a:	b298      	uxth	r0, r3
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	b29a      	uxth	r2, r3
 800a150:	88bb      	ldrh	r3, [r7, #4]
 800a152:	4413      	add	r3, r2
 800a154:	b299      	uxth	r1, r3
 800a156:	4b38      	ldr	r3, [pc, #224]	; (800a238 <BSP_LCD_DrawCircle+0x1cc>)
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	4c38      	ldr	r4, [pc, #224]	; (800a23c <BSP_LCD_DrawCircle+0x1d0>)
 800a15c:	4613      	mov	r3, r2
 800a15e:	005b      	lsls	r3, r3, #1
 800a160:	4413      	add	r3, r2
 800a162:	009b      	lsls	r3, r3, #2
 800a164:	4423      	add	r3, r4
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	461a      	mov	r2, r3
 800a16a:	f000 fa49 	bl	800a600 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	b29b      	uxth	r3, r3
 800a172:	88fa      	ldrh	r2, [r7, #6]
 800a174:	1ad3      	subs	r3, r2, r3
 800a176:	b298      	uxth	r0, r3
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	b29a      	uxth	r2, r3
 800a17c:	88bb      	ldrh	r3, [r7, #4]
 800a17e:	4413      	add	r3, r2
 800a180:	b299      	uxth	r1, r3
 800a182:	4b2d      	ldr	r3, [pc, #180]	; (800a238 <BSP_LCD_DrawCircle+0x1cc>)
 800a184:	681a      	ldr	r2, [r3, #0]
 800a186:	4c2d      	ldr	r4, [pc, #180]	; (800a23c <BSP_LCD_DrawCircle+0x1d0>)
 800a188:	4613      	mov	r3, r2
 800a18a:	005b      	lsls	r3, r3, #1
 800a18c:	4413      	add	r3, r2
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	4423      	add	r3, r4
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	461a      	mov	r2, r3
 800a196:	f000 fa33 	bl	800a600 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	88fb      	ldrh	r3, [r7, #6]
 800a1a0:	4413      	add	r3, r2
 800a1a2:	b298      	uxth	r0, r3
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	b29a      	uxth	r2, r3
 800a1a8:	88bb      	ldrh	r3, [r7, #4]
 800a1aa:	4413      	add	r3, r2
 800a1ac:	b299      	uxth	r1, r3
 800a1ae:	4b22      	ldr	r3, [pc, #136]	; (800a238 <BSP_LCD_DrawCircle+0x1cc>)
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	4c22      	ldr	r4, [pc, #136]	; (800a23c <BSP_LCD_DrawCircle+0x1d0>)
 800a1b4:	4613      	mov	r3, r2
 800a1b6:	005b      	lsls	r3, r3, #1
 800a1b8:	4413      	add	r3, r2
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	4423      	add	r3, r4
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	f000 fa1d 	bl	800a600 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	88fa      	ldrh	r2, [r7, #6]
 800a1cc:	1ad3      	subs	r3, r2, r3
 800a1ce:	b298      	uxth	r0, r3
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	b29a      	uxth	r2, r3
 800a1d4:	88bb      	ldrh	r3, [r7, #4]
 800a1d6:	4413      	add	r3, r2
 800a1d8:	b299      	uxth	r1, r3
 800a1da:	4b17      	ldr	r3, [pc, #92]	; (800a238 <BSP_LCD_DrawCircle+0x1cc>)
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	4c17      	ldr	r4, [pc, #92]	; (800a23c <BSP_LCD_DrawCircle+0x1d0>)
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	005b      	lsls	r3, r3, #1
 800a1e4:	4413      	add	r3, r2
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	4423      	add	r3, r4
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	f000 fa07 	bl	800a600 <BSP_LCD_DrawPixel>

    if (d < 0)
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	da06      	bge.n	800a206 <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	009a      	lsls	r2, r3, #2
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	4413      	add	r3, r2
 800a200:	3306      	adds	r3, #6
 800a202:	617b      	str	r3, [r7, #20]
 800a204:	e00a      	b.n	800a21c <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 800a206:	693a      	ldr	r2, [r7, #16]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	1ad3      	subs	r3, r2, r3
 800a20c:	009a      	lsls	r2, r3, #2
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	4413      	add	r3, r2
 800a212:	330a      	adds	r3, #10
 800a214:	617b      	str	r3, [r7, #20]
      cury--;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	3b01      	subs	r3, #1
 800a21a:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	3301      	adds	r3, #1
 800a220:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 800a222:	693a      	ldr	r2, [r7, #16]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	429a      	cmp	r2, r3
 800a228:	f67f af33 	bls.w	800a092 <BSP_LCD_DrawCircle+0x26>
  } 
}
 800a22c:	bf00      	nop
 800a22e:	bf00      	nop
 800a230:	371c      	adds	r7, #28
 800a232:	46bd      	mov	sp, r7
 800a234:	bd90      	pop	{r4, r7, pc}
 800a236:	bf00      	nop
 800a238:	20000f38 	.word	0x20000f38
 800a23c:	20000f3c 	.word	0x20000f3c

0800a240 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800a240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a244:	b086      	sub	sp, #24
 800a246:	af02      	add	r7, sp, #8
 800a248:	4604      	mov	r4, r0
 800a24a:	4608      	mov	r0, r1
 800a24c:	4611      	mov	r1, r2
 800a24e:	461a      	mov	r2, r3
 800a250:	4623      	mov	r3, r4
 800a252:	80fb      	strh	r3, [r7, #6]
 800a254:	4603      	mov	r3, r0
 800a256:	80bb      	strh	r3, [r7, #4]
 800a258:	460b      	mov	r3, r1
 800a25a:	807b      	strh	r3, [r7, #2]
 800a25c:	4613      	mov	r3, r2
 800a25e:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 800a260:	2300      	movs	r3, #0
 800a262:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800a264:	4b20      	ldr	r3, [pc, #128]	; (800a2e8 <BSP_LCD_FillRect+0xa8>)
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	4920      	ldr	r1, [pc, #128]	; (800a2ec <BSP_LCD_FillRect+0xac>)
 800a26a:	4613      	mov	r3, r2
 800a26c:	005b      	lsls	r3, r3, #1
 800a26e:	4413      	add	r3, r2
 800a270:	009b      	lsls	r3, r3, #2
 800a272:	440b      	add	r3, r1
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4618      	mov	r0, r3
 800a278:	f7ff fcd0 	bl	8009c1c <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800a27c:	4b1a      	ldr	r3, [pc, #104]	; (800a2e8 <BSP_LCD_FillRect+0xa8>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a1b      	ldr	r2, [pc, #108]	; (800a2f0 <BSP_LCD_FillRect+0xb0>)
 800a282:	2134      	movs	r1, #52	; 0x34
 800a284:	fb01 f303 	mul.w	r3, r1, r3
 800a288:	4413      	add	r3, r2
 800a28a:	335c      	adds	r3, #92	; 0x5c
 800a28c:	681c      	ldr	r4, [r3, #0]
 800a28e:	f7ff fbe7 	bl	8009a60 <BSP_LCD_GetXSize>
 800a292:	4602      	mov	r2, r0
 800a294:	88bb      	ldrh	r3, [r7, #4]
 800a296:	fb03 f202 	mul.w	r2, r3, r2
 800a29a:	88fb      	ldrh	r3, [r7, #6]
 800a29c:	4413      	add	r3, r2
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	4423      	add	r3, r4
 800a2a2:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800a2a4:	4b10      	ldr	r3, [pc, #64]	; (800a2e8 <BSP_LCD_FillRect+0xa8>)
 800a2a6:	681c      	ldr	r4, [r3, #0]
 800a2a8:	68fd      	ldr	r5, [r7, #12]
 800a2aa:	887e      	ldrh	r6, [r7, #2]
 800a2ac:	f8b7 8000 	ldrh.w	r8, [r7]
 800a2b0:	f7ff fbd6 	bl	8009a60 <BSP_LCD_GetXSize>
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	887b      	ldrh	r3, [r7, #2]
 800a2b8:	1ad1      	subs	r1, r2, r3
 800a2ba:	4b0b      	ldr	r3, [pc, #44]	; (800a2e8 <BSP_LCD_FillRect+0xa8>)
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	480b      	ldr	r0, [pc, #44]	; (800a2ec <BSP_LCD_FillRect+0xac>)
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	005b      	lsls	r3, r3, #1
 800a2c4:	4413      	add	r3, r2
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	4403      	add	r3, r0
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	9301      	str	r3, [sp, #4]
 800a2ce:	9100      	str	r1, [sp, #0]
 800a2d0:	4643      	mov	r3, r8
 800a2d2:	4632      	mov	r2, r6
 800a2d4:	4629      	mov	r1, r5
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	f000 fa72 	bl	800a7c0 <FillBuffer>
}
 800a2dc:	bf00      	nop
 800a2de:	3710      	adds	r7, #16
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2e6:	bf00      	nop
 800a2e8:	20000f38 	.word	0x20000f38
 800a2ec:	20000f3c 	.word	0x20000f3c
 800a2f0:	20000e20 	.word	0x20000e20

0800a2f4 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b086      	sub	sp, #24
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	80fb      	strh	r3, [r7, #6]
 800a2fe:	460b      	mov	r3, r1
 800a300:	80bb      	strh	r3, [r7, #4]
 800a302:	4613      	mov	r3, r2
 800a304:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 800a306:	887b      	ldrh	r3, [r7, #2]
 800a308:	005b      	lsls	r3, r3, #1
 800a30a:	f1c3 0303 	rsb	r3, r3, #3
 800a30e:	617b      	str	r3, [r7, #20]

  curx = 0;
 800a310:	2300      	movs	r3, #0
 800a312:	613b      	str	r3, [r7, #16]
  cury = Radius;
 800a314:	887b      	ldrh	r3, [r7, #2]
 800a316:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800a318:	4b44      	ldr	r3, [pc, #272]	; (800a42c <BSP_LCD_FillCircle+0x138>)
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	4944      	ldr	r1, [pc, #272]	; (800a430 <BSP_LCD_FillCircle+0x13c>)
 800a31e:	4613      	mov	r3, r2
 800a320:	005b      	lsls	r3, r3, #1
 800a322:	4413      	add	r3, r2
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	440b      	add	r3, r1
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7ff fc76 	bl	8009c1c <BSP_LCD_SetTextColor>

  while (curx <= cury)
 800a330:	e061      	b.n	800a3f6 <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d021      	beq.n	800a37c <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	88fa      	ldrh	r2, [r7, #6]
 800a33e:	1ad3      	subs	r3, r2, r3
 800a340:	b298      	uxth	r0, r3
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	b29a      	uxth	r2, r3
 800a346:	88bb      	ldrh	r3, [r7, #4]
 800a348:	4413      	add	r3, r2
 800a34a:	b299      	uxth	r1, r3
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	b29b      	uxth	r3, r3
 800a350:	005b      	lsls	r3, r3, #1
 800a352:	b29b      	uxth	r3, r3
 800a354:	461a      	mov	r2, r3
 800a356:	f7ff fdd7 	bl	8009f08 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	88fa      	ldrh	r2, [r7, #6]
 800a360:	1ad3      	subs	r3, r2, r3
 800a362:	b298      	uxth	r0, r3
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	b29b      	uxth	r3, r3
 800a368:	88ba      	ldrh	r2, [r7, #4]
 800a36a:	1ad3      	subs	r3, r2, r3
 800a36c:	b299      	uxth	r1, r3
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	b29b      	uxth	r3, r3
 800a372:	005b      	lsls	r3, r3, #1
 800a374:	b29b      	uxth	r3, r3
 800a376:	461a      	mov	r2, r3
 800a378:	f7ff fdc6 	bl	8009f08 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d021      	beq.n	800a3c6 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	b29b      	uxth	r3, r3
 800a386:	88fa      	ldrh	r2, [r7, #6]
 800a388:	1ad3      	subs	r3, r2, r3
 800a38a:	b298      	uxth	r0, r3
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	b29b      	uxth	r3, r3
 800a390:	88ba      	ldrh	r2, [r7, #4]
 800a392:	1ad3      	subs	r3, r2, r3
 800a394:	b299      	uxth	r1, r3
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	b29b      	uxth	r3, r3
 800a39a:	005b      	lsls	r3, r3, #1
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	461a      	mov	r2, r3
 800a3a0:	f7ff fdb2 	bl	8009f08 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	88fa      	ldrh	r2, [r7, #6]
 800a3aa:	1ad3      	subs	r3, r2, r3
 800a3ac:	b298      	uxth	r0, r3
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	b29a      	uxth	r2, r3
 800a3b2:	88bb      	ldrh	r3, [r7, #4]
 800a3b4:	4413      	add	r3, r2
 800a3b6:	b299      	uxth	r1, r3
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	005b      	lsls	r3, r3, #1
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	f7ff fda1 	bl	8009f08 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	da06      	bge.n	800a3da <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	009a      	lsls	r2, r3, #2
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	4413      	add	r3, r2
 800a3d4:	3306      	adds	r3, #6
 800a3d6:	617b      	str	r3, [r7, #20]
 800a3d8:	e00a      	b.n	800a3f0 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 800a3da:	693a      	ldr	r2, [r7, #16]
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	1ad3      	subs	r3, r2, r3
 800a3e0:	009a      	lsls	r2, r3, #2
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	330a      	adds	r3, #10
 800a3e8:	617b      	str	r3, [r7, #20]
      cury--;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	3b01      	subs	r3, #1
 800a3ee:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 800a3f6:	693a      	ldr	r2, [r7, #16]
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d999      	bls.n	800a332 <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800a3fe:	4b0b      	ldr	r3, [pc, #44]	; (800a42c <BSP_LCD_FillCircle+0x138>)
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	490b      	ldr	r1, [pc, #44]	; (800a430 <BSP_LCD_FillCircle+0x13c>)
 800a404:	4613      	mov	r3, r2
 800a406:	005b      	lsls	r3, r3, #1
 800a408:	4413      	add	r3, r2
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	440b      	add	r3, r1
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4618      	mov	r0, r3
 800a412:	f7ff fc03 	bl	8009c1c <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800a416:	887a      	ldrh	r2, [r7, #2]
 800a418:	88b9      	ldrh	r1, [r7, #4]
 800a41a:	88fb      	ldrh	r3, [r7, #6]
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7ff fe25 	bl	800a06c <BSP_LCD_DrawCircle>
}
 800a422:	bf00      	nop
 800a424:	3718      	adds	r7, #24
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	20000f38 	.word	0x20000f38
 800a430:	20000f3c 	.word	0x20000f3c

0800a434 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 800a438:	4b05      	ldr	r3, [pc, #20]	; (800a450 <BSP_LCD_DisplayOn+0x1c>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	689b      	ldr	r3, [r3, #8]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d003      	beq.n	800a44a <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800a442:	4b03      	ldr	r3, [pc, #12]	; (800a450 <BSP_LCD_DisplayOn+0x1c>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	4798      	blx	r3
  }
}
 800a44a:	bf00      	nop
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop
 800a450:	20000f54 	.word	0x20000f54

0800a454 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b08e      	sub	sp, #56	; 0x38
 800a458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800a45a:	2300      	movs	r3, #0
 800a45c:	623b      	str	r3, [r7, #32]
 800a45e:	4b61      	ldr	r3, [pc, #388]	; (800a5e4 <BSP_LCD_MspInit+0x190>)
 800a460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a462:	4a60      	ldr	r2, [pc, #384]	; (800a5e4 <BSP_LCD_MspInit+0x190>)
 800a464:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a468:	6453      	str	r3, [r2, #68]	; 0x44
 800a46a:	4b5e      	ldr	r3, [pc, #376]	; (800a5e4 <BSP_LCD_MspInit+0x190>)
 800a46c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a46e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a472:	623b      	str	r3, [r7, #32]
 800a474:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800a476:	2300      	movs	r3, #0
 800a478:	61fb      	str	r3, [r7, #28]
 800a47a:	4b5a      	ldr	r3, [pc, #360]	; (800a5e4 <BSP_LCD_MspInit+0x190>)
 800a47c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a47e:	4a59      	ldr	r2, [pc, #356]	; (800a5e4 <BSP_LCD_MspInit+0x190>)
 800a480:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a484:	6313      	str	r3, [r2, #48]	; 0x30
 800a486:	4b57      	ldr	r3, [pc, #348]	; (800a5e4 <BSP_LCD_MspInit+0x190>)
 800a488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a48a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a48e:	61fb      	str	r3, [r7, #28]
 800a490:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a492:	2300      	movs	r3, #0
 800a494:	61bb      	str	r3, [r7, #24]
 800a496:	4b53      	ldr	r3, [pc, #332]	; (800a5e4 <BSP_LCD_MspInit+0x190>)
 800a498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a49a:	4a52      	ldr	r2, [pc, #328]	; (800a5e4 <BSP_LCD_MspInit+0x190>)
 800a49c:	f043 0301 	orr.w	r3, r3, #1
 800a4a0:	6313      	str	r3, [r2, #48]	; 0x30
 800a4a2:	4b50      	ldr	r3, [pc, #320]	; (800a5e4 <BSP_LCD_MspInit+0x190>)
 800a4a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4a6:	f003 0301 	and.w	r3, r3, #1
 800a4aa:	61bb      	str	r3, [r7, #24]
 800a4ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	617b      	str	r3, [r7, #20]
 800a4b2:	4b4c      	ldr	r3, [pc, #304]	; (800a5e4 <BSP_LCD_MspInit+0x190>)
 800a4b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4b6:	4a4b      	ldr	r2, [pc, #300]	; (800a5e4 <BSP_LCD_MspInit+0x190>)
 800a4b8:	f043 0302 	orr.w	r3, r3, #2
 800a4bc:	6313      	str	r3, [r2, #48]	; 0x30
 800a4be:	4b49      	ldr	r3, [pc, #292]	; (800a5e4 <BSP_LCD_MspInit+0x190>)
 800a4c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4c2:	f003 0302 	and.w	r3, r3, #2
 800a4c6:	617b      	str	r3, [r7, #20]
 800a4c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	613b      	str	r3, [r7, #16]
 800a4ce:	4b45      	ldr	r3, [pc, #276]	; (800a5e4 <BSP_LCD_MspInit+0x190>)
 800a4d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4d2:	4a44      	ldr	r2, [pc, #272]	; (800a5e4 <BSP_LCD_MspInit+0x190>)
 800a4d4:	f043 0304 	orr.w	r3, r3, #4
 800a4d8:	6313      	str	r3, [r2, #48]	; 0x30
 800a4da:	4b42      	ldr	r3, [pc, #264]	; (800a5e4 <BSP_LCD_MspInit+0x190>)
 800a4dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4de:	f003 0304 	and.w	r3, r3, #4
 800a4e2:	613b      	str	r3, [r7, #16]
 800a4e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	60fb      	str	r3, [r7, #12]
 800a4ea:	4b3e      	ldr	r3, [pc, #248]	; (800a5e4 <BSP_LCD_MspInit+0x190>)
 800a4ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ee:	4a3d      	ldr	r2, [pc, #244]	; (800a5e4 <BSP_LCD_MspInit+0x190>)
 800a4f0:	f043 0308 	orr.w	r3, r3, #8
 800a4f4:	6313      	str	r3, [r2, #48]	; 0x30
 800a4f6:	4b3b      	ldr	r3, [pc, #236]	; (800a5e4 <BSP_LCD_MspInit+0x190>)
 800a4f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4fa:	f003 0308 	and.w	r3, r3, #8
 800a4fe:	60fb      	str	r3, [r7, #12]
 800a500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a502:	2300      	movs	r3, #0
 800a504:	60bb      	str	r3, [r7, #8]
 800a506:	4b37      	ldr	r3, [pc, #220]	; (800a5e4 <BSP_LCD_MspInit+0x190>)
 800a508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a50a:	4a36      	ldr	r2, [pc, #216]	; (800a5e4 <BSP_LCD_MspInit+0x190>)
 800a50c:	f043 0320 	orr.w	r3, r3, #32
 800a510:	6313      	str	r3, [r2, #48]	; 0x30
 800a512:	4b34      	ldr	r3, [pc, #208]	; (800a5e4 <BSP_LCD_MspInit+0x190>)
 800a514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a516:	f003 0320 	and.w	r3, r3, #32
 800a51a:	60bb      	str	r3, [r7, #8]
 800a51c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a51e:	2300      	movs	r3, #0
 800a520:	607b      	str	r3, [r7, #4]
 800a522:	4b30      	ldr	r3, [pc, #192]	; (800a5e4 <BSP_LCD_MspInit+0x190>)
 800a524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a526:	4a2f      	ldr	r2, [pc, #188]	; (800a5e4 <BSP_LCD_MspInit+0x190>)
 800a528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a52c:	6313      	str	r3, [r2, #48]	; 0x30
 800a52e:	4b2d      	ldr	r3, [pc, #180]	; (800a5e4 <BSP_LCD_MspInit+0x190>)
 800a530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a536:	607b      	str	r3, [r7, #4]
 800a538:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800a53a:	f641 0358 	movw	r3, #6232	; 0x1858
 800a53e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800a540:	2302      	movs	r3, #2
 800a542:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800a544:	2300      	movs	r3, #0
 800a546:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800a548:	2302      	movs	r3, #2
 800a54a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800a54c:	230e      	movs	r3, #14
 800a54e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800a550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a554:	4619      	mov	r1, r3
 800a556:	4824      	ldr	r0, [pc, #144]	; (800a5e8 <BSP_LCD_MspInit+0x194>)
 800a558:	f001 f9ce 	bl	800b8f8 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800a55c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800a560:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800a562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a566:	4619      	mov	r1, r3
 800a568:	4820      	ldr	r0, [pc, #128]	; (800a5ec <BSP_LCD_MspInit+0x198>)
 800a56a:	f001 f9c5 	bl	800b8f8 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800a56e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800a572:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800a574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a578:	4619      	mov	r1, r3
 800a57a:	481d      	ldr	r0, [pc, #116]	; (800a5f0 <BSP_LCD_MspInit+0x19c>)
 800a57c:	f001 f9bc 	bl	800b8f8 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800a580:	2348      	movs	r3, #72	; 0x48
 800a582:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800a584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a588:	4619      	mov	r1, r3
 800a58a:	481a      	ldr	r0, [pc, #104]	; (800a5f4 <BSP_LCD_MspInit+0x1a0>)
 800a58c:	f001 f9b4 	bl	800b8f8 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800a590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a594:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800a596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a59a:	4619      	mov	r1, r3
 800a59c:	4816      	ldr	r0, [pc, #88]	; (800a5f8 <BSP_LCD_MspInit+0x1a4>)
 800a59e:	f001 f9ab 	bl	800b8f8 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800a5a2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800a5a6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800a5a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	4813      	ldr	r0, [pc, #76]	; (800a5fc <BSP_LCD_MspInit+0x1a8>)
 800a5b0:	f001 f9a2 	bl	800b8f8 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800a5b4:	2303      	movs	r3, #3
 800a5b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 800a5b8:	2309      	movs	r3, #9
 800a5ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800a5bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	480a      	ldr	r0, [pc, #40]	; (800a5ec <BSP_LCD_MspInit+0x198>)
 800a5c4:	f001 f998 	bl	800b8f8 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 800a5c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a5cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800a5ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	4809      	ldr	r0, [pc, #36]	; (800a5fc <BSP_LCD_MspInit+0x1a8>)
 800a5d6:	f001 f98f 	bl	800b8f8 <HAL_GPIO_Init>
}
 800a5da:	bf00      	nop
 800a5dc:	3738      	adds	r7, #56	; 0x38
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
 800a5e2:	bf00      	nop
 800a5e4:	40023800 	.word	0x40023800
 800a5e8:	40020000 	.word	0x40020000
 800a5ec:	40020400 	.word	0x40020400
 800a5f0:	40020800 	.word	0x40020800
 800a5f4:	40020c00 	.word	0x40020c00
 800a5f8:	40021400 	.word	0x40021400
 800a5fc:	40021800 	.word	0x40021800

0800a600 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800a600:	b5b0      	push	{r4, r5, r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	4603      	mov	r3, r0
 800a608:	603a      	str	r2, [r7, #0]
 800a60a:	80fb      	strh	r3, [r7, #6]
 800a60c:	460b      	mov	r3, r1
 800a60e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800a610:	4b0c      	ldr	r3, [pc, #48]	; (800a644 <BSP_LCD_DrawPixel+0x44>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4a0c      	ldr	r2, [pc, #48]	; (800a648 <BSP_LCD_DrawPixel+0x48>)
 800a616:	2134      	movs	r1, #52	; 0x34
 800a618:	fb01 f303 	mul.w	r3, r1, r3
 800a61c:	4413      	add	r3, r2
 800a61e:	335c      	adds	r3, #92	; 0x5c
 800a620:	681c      	ldr	r4, [r3, #0]
 800a622:	88bd      	ldrh	r5, [r7, #4]
 800a624:	f7ff fa1c 	bl	8009a60 <BSP_LCD_GetXSize>
 800a628:	4603      	mov	r3, r0
 800a62a:	fb03 f205 	mul.w	r2, r3, r5
 800a62e:	88fb      	ldrh	r3, [r7, #6]
 800a630:	4413      	add	r3, r2
 800a632:	009b      	lsls	r3, r3, #2
 800a634:	4423      	add	r3, r4
 800a636:	461a      	mov	r2, r3
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	6013      	str	r3, [r2, #0]
}
 800a63c:	bf00      	nop
 800a63e:	3708      	adds	r7, #8
 800a640:	46bd      	mov	sp, r7
 800a642:	bdb0      	pop	{r4, r5, r7, pc}
 800a644:	20000f38 	.word	0x20000f38
 800a648:	20000e20 	.word	0x20000e20

0800a64c <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b088      	sub	sp, #32
 800a650:	af00      	add	r7, sp, #0
 800a652:	4603      	mov	r3, r0
 800a654:	603a      	str	r2, [r7, #0]
 800a656:	80fb      	strh	r3, [r7, #6]
 800a658:	460b      	mov	r3, r1
 800a65a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800a65c:	2300      	movs	r3, #0
 800a65e:	61fb      	str	r3, [r7, #28]
 800a660:	2300      	movs	r3, #0
 800a662:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 800a664:	2300      	movs	r3, #0
 800a666:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 800a668:	4b53      	ldr	r3, [pc, #332]	; (800a7b8 <DrawChar+0x16c>)
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	4953      	ldr	r1, [pc, #332]	; (800a7bc <DrawChar+0x170>)
 800a66e:	4613      	mov	r3, r2
 800a670:	005b      	lsls	r3, r3, #1
 800a672:	4413      	add	r3, r2
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	440b      	add	r3, r1
 800a678:	3308      	adds	r3, #8
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	88db      	ldrh	r3, [r3, #6]
 800a67e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800a680:	4b4d      	ldr	r3, [pc, #308]	; (800a7b8 <DrawChar+0x16c>)
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	494d      	ldr	r1, [pc, #308]	; (800a7bc <DrawChar+0x170>)
 800a686:	4613      	mov	r3, r2
 800a688:	005b      	lsls	r3, r3, #1
 800a68a:	4413      	add	r3, r2
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	440b      	add	r3, r1
 800a690:	3308      	adds	r3, #8
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	889b      	ldrh	r3, [r3, #4]
 800a696:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 800a698:	8a3b      	ldrh	r3, [r7, #16]
 800a69a:	3307      	adds	r3, #7
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	da00      	bge.n	800a6a2 <DrawChar+0x56>
 800a6a0:	3307      	adds	r3, #7
 800a6a2:	10db      	asrs	r3, r3, #3
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	00db      	lsls	r3, r3, #3
 800a6a8:	b2da      	uxtb	r2, r3
 800a6aa:	8a3b      	ldrh	r3, [r7, #16]
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	1ad3      	subs	r3, r2, r3
 800a6b0:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	61fb      	str	r3, [r7, #28]
 800a6b6:	e076      	b.n	800a7a6 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800a6b8:	8a3b      	ldrh	r3, [r7, #16]
 800a6ba:	3307      	adds	r3, #7
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	da00      	bge.n	800a6c2 <DrawChar+0x76>
 800a6c0:	3307      	adds	r3, #7
 800a6c2:	10db      	asrs	r3, r3, #3
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	69fb      	ldr	r3, [r7, #28]
 800a6c8:	fb02 f303 	mul.w	r3, r2, r3
 800a6cc:	683a      	ldr	r2, [r7, #0]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800a6d2:	8a3b      	ldrh	r3, [r7, #16]
 800a6d4:	3307      	adds	r3, #7
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	da00      	bge.n	800a6dc <DrawChar+0x90>
 800a6da:	3307      	adds	r3, #7
 800a6dc:	10db      	asrs	r3, r3, #3
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d002      	beq.n	800a6e8 <DrawChar+0x9c>
 800a6e2:	2b02      	cmp	r3, #2
 800a6e4:	d004      	beq.n	800a6f0 <DrawChar+0xa4>
 800a6e6:	e00c      	b.n	800a702 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	617b      	str	r3, [r7, #20]
      break;
 800a6ee:	e016      	b.n	800a71e <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	021b      	lsls	r3, r3, #8
 800a6f6:	68ba      	ldr	r2, [r7, #8]
 800a6f8:	3201      	adds	r2, #1
 800a6fa:	7812      	ldrb	r2, [r2, #0]
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	617b      	str	r3, [r7, #20]
      break;
 800a700:	e00d      	b.n	800a71e <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	041a      	lsls	r2, r3, #16
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	3301      	adds	r3, #1
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	021b      	lsls	r3, r3, #8
 800a710:	4313      	orrs	r3, r2
 800a712:	68ba      	ldr	r2, [r7, #8]
 800a714:	3202      	adds	r2, #2
 800a716:	7812      	ldrb	r2, [r2, #0]
 800a718:	4313      	orrs	r3, r2
 800a71a:	617b      	str	r3, [r7, #20]
      break;
 800a71c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800a71e:	2300      	movs	r3, #0
 800a720:	61bb      	str	r3, [r7, #24]
 800a722:	e036      	b.n	800a792 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800a724:	8a3a      	ldrh	r2, [r7, #16]
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	1ad2      	subs	r2, r2, r3
 800a72a:	7bfb      	ldrb	r3, [r7, #15]
 800a72c:	4413      	add	r3, r2
 800a72e:	3b01      	subs	r3, #1
 800a730:	2201      	movs	r2, #1
 800a732:	fa02 f303 	lsl.w	r3, r2, r3
 800a736:	461a      	mov	r2, r3
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	4013      	ands	r3, r2
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d012      	beq.n	800a766 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800a740:	69bb      	ldr	r3, [r7, #24]
 800a742:	b29a      	uxth	r2, r3
 800a744:	88fb      	ldrh	r3, [r7, #6]
 800a746:	4413      	add	r3, r2
 800a748:	b298      	uxth	r0, r3
 800a74a:	4b1b      	ldr	r3, [pc, #108]	; (800a7b8 <DrawChar+0x16c>)
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	491b      	ldr	r1, [pc, #108]	; (800a7bc <DrawChar+0x170>)
 800a750:	4613      	mov	r3, r2
 800a752:	005b      	lsls	r3, r3, #1
 800a754:	4413      	add	r3, r2
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	440b      	add	r3, r1
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	88bb      	ldrh	r3, [r7, #4]
 800a75e:	4619      	mov	r1, r3
 800a760:	f7ff ff4e 	bl	800a600 <BSP_LCD_DrawPixel>
 800a764:	e012      	b.n	800a78c <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	b29a      	uxth	r2, r3
 800a76a:	88fb      	ldrh	r3, [r7, #6]
 800a76c:	4413      	add	r3, r2
 800a76e:	b298      	uxth	r0, r3
 800a770:	4b11      	ldr	r3, [pc, #68]	; (800a7b8 <DrawChar+0x16c>)
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	4911      	ldr	r1, [pc, #68]	; (800a7bc <DrawChar+0x170>)
 800a776:	4613      	mov	r3, r2
 800a778:	005b      	lsls	r3, r3, #1
 800a77a:	4413      	add	r3, r2
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	440b      	add	r3, r1
 800a780:	3304      	adds	r3, #4
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	88bb      	ldrh	r3, [r7, #4]
 800a786:	4619      	mov	r1, r3
 800a788:	f7ff ff3a 	bl	800a600 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800a78c:	69bb      	ldr	r3, [r7, #24]
 800a78e:	3301      	adds	r3, #1
 800a790:	61bb      	str	r3, [r7, #24]
 800a792:	8a3b      	ldrh	r3, [r7, #16]
 800a794:	69ba      	ldr	r2, [r7, #24]
 800a796:	429a      	cmp	r2, r3
 800a798:	d3c4      	bcc.n	800a724 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 800a79a:	88bb      	ldrh	r3, [r7, #4]
 800a79c:	3301      	adds	r3, #1
 800a79e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800a7a0:	69fb      	ldr	r3, [r7, #28]
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	61fb      	str	r3, [r7, #28]
 800a7a6:	8a7b      	ldrh	r3, [r7, #18]
 800a7a8:	69fa      	ldr	r2, [r7, #28]
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d384      	bcc.n	800a6b8 <DrawChar+0x6c>
  }
}
 800a7ae:	bf00      	nop
 800a7b0:	bf00      	nop
 800a7b2:	3720      	adds	r7, #32
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}
 800a7b8:	20000f38 	.word	0x20000f38
 800a7bc:	20000f3c 	.word	0x20000f3c

0800a7c0 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b086      	sub	sp, #24
 800a7c4:	af02      	add	r7, sp, #8
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	60b9      	str	r1, [r7, #8]
 800a7ca:	607a      	str	r2, [r7, #4]
 800a7cc:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800a7ce:	4b16      	ldr	r3, [pc, #88]	; (800a828 <FillBuffer+0x68>)
 800a7d0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a7d4:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800a7d6:	4b14      	ldr	r3, [pc, #80]	; (800a828 <FillBuffer+0x68>)
 800a7d8:	2200      	movs	r2, #0
 800a7da:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 800a7dc:	4a12      	ldr	r2, [pc, #72]	; (800a828 <FillBuffer+0x68>)
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 800a7e2:	4b11      	ldr	r3, [pc, #68]	; (800a828 <FillBuffer+0x68>)
 800a7e4:	4a11      	ldr	r2, [pc, #68]	; (800a82c <FillBuffer+0x6c>)
 800a7e6:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 800a7e8:	480f      	ldr	r0, [pc, #60]	; (800a828 <FillBuffer+0x68>)
 800a7ea:	f000 fdf9 	bl	800b3e0 <HAL_DMA2D_Init>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d115      	bne.n	800a820 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 800a7f4:	68f9      	ldr	r1, [r7, #12]
 800a7f6:	480c      	ldr	r0, [pc, #48]	; (800a828 <FillBuffer+0x68>)
 800a7f8:	f000 ff50 	bl	800b69c <HAL_DMA2D_ConfigLayer>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d10e      	bne.n	800a820 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800a802:	68ba      	ldr	r2, [r7, #8]
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	9300      	str	r3, [sp, #0]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	69f9      	ldr	r1, [r7, #28]
 800a80c:	4806      	ldr	r0, [pc, #24]	; (800a828 <FillBuffer+0x68>)
 800a80e:	f000 fe30 	bl	800b472 <HAL_DMA2D_Start>
 800a812:	4603      	mov	r3, r0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d103      	bne.n	800a820 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 800a818:	210a      	movs	r1, #10
 800a81a:	4803      	ldr	r0, [pc, #12]	; (800a828 <FillBuffer+0x68>)
 800a81c:	f000 fe54 	bl	800b4c8 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800a820:	bf00      	nop
 800a822:	3710      	adds	r7, #16
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}
 800a828:	20000ec8 	.word	0x20000ec8
 800a82c:	4002b000 	.word	0x4002b000

0800a830 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 800a834:	4b29      	ldr	r3, [pc, #164]	; (800a8dc <BSP_SDRAM_Init+0xac>)
 800a836:	4a2a      	ldr	r2, [pc, #168]	; (800a8e0 <BSP_SDRAM_Init+0xb0>)
 800a838:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800a83a:	4b2a      	ldr	r3, [pc, #168]	; (800a8e4 <BSP_SDRAM_Init+0xb4>)
 800a83c:	2202      	movs	r2, #2
 800a83e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 800a840:	4b28      	ldr	r3, [pc, #160]	; (800a8e4 <BSP_SDRAM_Init+0xb4>)
 800a842:	2207      	movs	r2, #7
 800a844:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800a846:	4b27      	ldr	r3, [pc, #156]	; (800a8e4 <BSP_SDRAM_Init+0xb4>)
 800a848:	2204      	movs	r2, #4
 800a84a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 800a84c:	4b25      	ldr	r3, [pc, #148]	; (800a8e4 <BSP_SDRAM_Init+0xb4>)
 800a84e:	2207      	movs	r2, #7
 800a850:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800a852:	4b24      	ldr	r3, [pc, #144]	; (800a8e4 <BSP_SDRAM_Init+0xb4>)
 800a854:	2202      	movs	r2, #2
 800a856:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 800a858:	4b22      	ldr	r3, [pc, #136]	; (800a8e4 <BSP_SDRAM_Init+0xb4>)
 800a85a:	2202      	movs	r2, #2
 800a85c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800a85e:	4b21      	ldr	r3, [pc, #132]	; (800a8e4 <BSP_SDRAM_Init+0xb4>)
 800a860:	2202      	movs	r2, #2
 800a862:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 800a864:	4b1d      	ldr	r3, [pc, #116]	; (800a8dc <BSP_SDRAM_Init+0xac>)
 800a866:	2201      	movs	r2, #1
 800a868:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800a86a:	4b1c      	ldr	r3, [pc, #112]	; (800a8dc <BSP_SDRAM_Init+0xac>)
 800a86c:	2200      	movs	r2, #0
 800a86e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800a870:	4b1a      	ldr	r3, [pc, #104]	; (800a8dc <BSP_SDRAM_Init+0xac>)
 800a872:	2204      	movs	r2, #4
 800a874:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800a876:	4b19      	ldr	r3, [pc, #100]	; (800a8dc <BSP_SDRAM_Init+0xac>)
 800a878:	2210      	movs	r2, #16
 800a87a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800a87c:	4b17      	ldr	r3, [pc, #92]	; (800a8dc <BSP_SDRAM_Init+0xac>)
 800a87e:	2240      	movs	r2, #64	; 0x40
 800a880:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800a882:	4b16      	ldr	r3, [pc, #88]	; (800a8dc <BSP_SDRAM_Init+0xac>)
 800a884:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800a888:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800a88a:	4b14      	ldr	r3, [pc, #80]	; (800a8dc <BSP_SDRAM_Init+0xac>)
 800a88c:	2200      	movs	r2, #0
 800a88e:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800a890:	4b12      	ldr	r3, [pc, #72]	; (800a8dc <BSP_SDRAM_Init+0xac>)
 800a892:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a896:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 800a898:	4b10      	ldr	r3, [pc, #64]	; (800a8dc <BSP_SDRAM_Init+0xac>)
 800a89a:	2200      	movs	r2, #0
 800a89c:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800a89e:	4b0f      	ldr	r3, [pc, #60]	; (800a8dc <BSP_SDRAM_Init+0xac>)
 800a8a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a8a4:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800a8a6:	2100      	movs	r1, #0
 800a8a8:	480c      	ldr	r0, [pc, #48]	; (800a8dc <BSP_SDRAM_Init+0xac>)
 800a8aa:	f000 f87f 	bl	800a9ac <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800a8ae:	490d      	ldr	r1, [pc, #52]	; (800a8e4 <BSP_SDRAM_Init+0xb4>)
 800a8b0:	480a      	ldr	r0, [pc, #40]	; (800a8dc <BSP_SDRAM_Init+0xac>)
 800a8b2:	f003 fd5b 	bl	800e36c <HAL_SDRAM_Init>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d003      	beq.n	800a8c4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800a8bc:	4b0a      	ldr	r3, [pc, #40]	; (800a8e8 <BSP_SDRAM_Init+0xb8>)
 800a8be:	2201      	movs	r2, #1
 800a8c0:	701a      	strb	r2, [r3, #0]
 800a8c2:	e002      	b.n	800a8ca <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800a8c4:	4b08      	ldr	r3, [pc, #32]	; (800a8e8 <BSP_SDRAM_Init+0xb8>)
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800a8ca:	f240 506a 	movw	r0, #1386	; 0x56a
 800a8ce:	f000 f80d 	bl	800a8ec <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800a8d2:	4b05      	ldr	r3, [pc, #20]	; (800a8e8 <BSP_SDRAM_Init+0xb8>)
 800a8d4:	781b      	ldrb	r3, [r3, #0]
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	20000f58 	.word	0x20000f58
 800a8e0:	a0000140 	.word	0xa0000140
 800a8e4:	20000f8c 	.word	0x20000f8c
 800a8e8:	20000088 	.word	0x20000088

0800a8ec <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 800a8f8:	4b2a      	ldr	r3, [pc, #168]	; (800a9a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800a8fe:	4b29      	ldr	r3, [pc, #164]	; (800a9a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a900:	2208      	movs	r2, #8
 800a902:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800a904:	4b27      	ldr	r3, [pc, #156]	; (800a9a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a906:	2201      	movs	r2, #1
 800a908:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800a90a:	4b26      	ldr	r3, [pc, #152]	; (800a9a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a90c:	2200      	movs	r2, #0
 800a90e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800a910:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a914:	4923      	ldr	r1, [pc, #140]	; (800a9a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a916:	4824      	ldr	r0, [pc, #144]	; (800a9a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800a918:	f003 fd5c 	bl	800e3d4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800a91c:	2001      	movs	r0, #1
 800a91e:	f000 fa7f 	bl	800ae20 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800a922:	4b20      	ldr	r3, [pc, #128]	; (800a9a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a924:	2202      	movs	r2, #2
 800a926:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800a928:	4b1e      	ldr	r3, [pc, #120]	; (800a9a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a92a:	2208      	movs	r2, #8
 800a92c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800a92e:	4b1d      	ldr	r3, [pc, #116]	; (800a9a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a930:	2201      	movs	r2, #1
 800a932:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800a934:	4b1b      	ldr	r3, [pc, #108]	; (800a9a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a936:	2200      	movs	r2, #0
 800a938:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800a93a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a93e:	4919      	ldr	r1, [pc, #100]	; (800a9a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a940:	4819      	ldr	r0, [pc, #100]	; (800a9a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800a942:	f003 fd47 	bl	800e3d4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800a946:	4b17      	ldr	r3, [pc, #92]	; (800a9a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a948:	2203      	movs	r2, #3
 800a94a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800a94c:	4b15      	ldr	r3, [pc, #84]	; (800a9a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a94e:	2208      	movs	r2, #8
 800a950:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800a952:	4b14      	ldr	r3, [pc, #80]	; (800a9a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a954:	2204      	movs	r2, #4
 800a956:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800a958:	4b12      	ldr	r3, [pc, #72]	; (800a9a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a95a:	2200      	movs	r2, #0
 800a95c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800a95e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a962:	4910      	ldr	r1, [pc, #64]	; (800a9a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a964:	4810      	ldr	r0, [pc, #64]	; (800a9a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800a966:	f003 fd35 	bl	800e3d4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800a96a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800a96e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 800a970:	4b0c      	ldr	r3, [pc, #48]	; (800a9a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a972:	2204      	movs	r2, #4
 800a974:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800a976:	4b0b      	ldr	r3, [pc, #44]	; (800a9a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a978:	2208      	movs	r2, #8
 800a97a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800a97c:	4b09      	ldr	r3, [pc, #36]	; (800a9a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a97e:	2201      	movs	r2, #1
 800a980:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	4a07      	ldr	r2, [pc, #28]	; (800a9a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a986:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800a988:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a98c:	4905      	ldr	r1, [pc, #20]	; (800a9a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a98e:	4806      	ldr	r0, [pc, #24]	; (800a9a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800a990:	f003 fd20 	bl	800e3d4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 800a994:	6879      	ldr	r1, [r7, #4]
 800a996:	4804      	ldr	r0, [pc, #16]	; (800a9a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800a998:	f003 fd51 	bl	800e43e <HAL_SDRAM_ProgramRefreshRate>
}
 800a99c:	bf00      	nop
 800a99e:	3710      	adds	r7, #16
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}
 800a9a4:	20000fa8 	.word	0x20000fa8
 800a9a8:	20000f58 	.word	0x20000f58

0800a9ac <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b090      	sub	sp, #64	; 0x40
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	f000 80ec 	beq.w	800ab96 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800a9be:	2300      	movs	r3, #0
 800a9c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9c2:	4b77      	ldr	r3, [pc, #476]	; (800aba0 <BSP_SDRAM_MspInit+0x1f4>)
 800a9c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c6:	4a76      	ldr	r2, [pc, #472]	; (800aba0 <BSP_SDRAM_MspInit+0x1f4>)
 800a9c8:	f043 0301 	orr.w	r3, r3, #1
 800a9cc:	6393      	str	r3, [r2, #56]	; 0x38
 800a9ce:	4b74      	ldr	r3, [pc, #464]	; (800aba0 <BSP_SDRAM_MspInit+0x1f4>)
 800a9d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d2:	f003 0301 	and.w	r3, r3, #1
 800a9d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800a9da:	2300      	movs	r3, #0
 800a9dc:	627b      	str	r3, [r7, #36]	; 0x24
 800a9de:	4b70      	ldr	r3, [pc, #448]	; (800aba0 <BSP_SDRAM_MspInit+0x1f4>)
 800a9e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9e2:	4a6f      	ldr	r2, [pc, #444]	; (800aba0 <BSP_SDRAM_MspInit+0x1f4>)
 800a9e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a9e8:	6313      	str	r3, [r2, #48]	; 0x30
 800a9ea:	4b6d      	ldr	r3, [pc, #436]	; (800aba0 <BSP_SDRAM_MspInit+0x1f4>)
 800a9ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a9f2:	627b      	str	r3, [r7, #36]	; 0x24
 800a9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	623b      	str	r3, [r7, #32]
 800a9fa:	4b69      	ldr	r3, [pc, #420]	; (800aba0 <BSP_SDRAM_MspInit+0x1f4>)
 800a9fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9fe:	4a68      	ldr	r2, [pc, #416]	; (800aba0 <BSP_SDRAM_MspInit+0x1f4>)
 800aa00:	f043 0302 	orr.w	r3, r3, #2
 800aa04:	6313      	str	r3, [r2, #48]	; 0x30
 800aa06:	4b66      	ldr	r3, [pc, #408]	; (800aba0 <BSP_SDRAM_MspInit+0x1f4>)
 800aa08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa0a:	f003 0302 	and.w	r3, r3, #2
 800aa0e:	623b      	str	r3, [r7, #32]
 800aa10:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800aa12:	2300      	movs	r3, #0
 800aa14:	61fb      	str	r3, [r7, #28]
 800aa16:	4b62      	ldr	r3, [pc, #392]	; (800aba0 <BSP_SDRAM_MspInit+0x1f4>)
 800aa18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa1a:	4a61      	ldr	r2, [pc, #388]	; (800aba0 <BSP_SDRAM_MspInit+0x1f4>)
 800aa1c:	f043 0304 	orr.w	r3, r3, #4
 800aa20:	6313      	str	r3, [r2, #48]	; 0x30
 800aa22:	4b5f      	ldr	r3, [pc, #380]	; (800aba0 <BSP_SDRAM_MspInit+0x1f4>)
 800aa24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa26:	f003 0304 	and.w	r3, r3, #4
 800aa2a:	61fb      	str	r3, [r7, #28]
 800aa2c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800aa2e:	2300      	movs	r3, #0
 800aa30:	61bb      	str	r3, [r7, #24]
 800aa32:	4b5b      	ldr	r3, [pc, #364]	; (800aba0 <BSP_SDRAM_MspInit+0x1f4>)
 800aa34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa36:	4a5a      	ldr	r2, [pc, #360]	; (800aba0 <BSP_SDRAM_MspInit+0x1f4>)
 800aa38:	f043 0308 	orr.w	r3, r3, #8
 800aa3c:	6313      	str	r3, [r2, #48]	; 0x30
 800aa3e:	4b58      	ldr	r3, [pc, #352]	; (800aba0 <BSP_SDRAM_MspInit+0x1f4>)
 800aa40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa42:	f003 0308 	and.w	r3, r3, #8
 800aa46:	61bb      	str	r3, [r7, #24]
 800aa48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	617b      	str	r3, [r7, #20]
 800aa4e:	4b54      	ldr	r3, [pc, #336]	; (800aba0 <BSP_SDRAM_MspInit+0x1f4>)
 800aa50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa52:	4a53      	ldr	r2, [pc, #332]	; (800aba0 <BSP_SDRAM_MspInit+0x1f4>)
 800aa54:	f043 0310 	orr.w	r3, r3, #16
 800aa58:	6313      	str	r3, [r2, #48]	; 0x30
 800aa5a:	4b51      	ldr	r3, [pc, #324]	; (800aba0 <BSP_SDRAM_MspInit+0x1f4>)
 800aa5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa5e:	f003 0310 	and.w	r3, r3, #16
 800aa62:	617b      	str	r3, [r7, #20]
 800aa64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800aa66:	2300      	movs	r3, #0
 800aa68:	613b      	str	r3, [r7, #16]
 800aa6a:	4b4d      	ldr	r3, [pc, #308]	; (800aba0 <BSP_SDRAM_MspInit+0x1f4>)
 800aa6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa6e:	4a4c      	ldr	r2, [pc, #304]	; (800aba0 <BSP_SDRAM_MspInit+0x1f4>)
 800aa70:	f043 0320 	orr.w	r3, r3, #32
 800aa74:	6313      	str	r3, [r2, #48]	; 0x30
 800aa76:	4b4a      	ldr	r3, [pc, #296]	; (800aba0 <BSP_SDRAM_MspInit+0x1f4>)
 800aa78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa7a:	f003 0320 	and.w	r3, r3, #32
 800aa7e:	613b      	str	r3, [r7, #16]
 800aa80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800aa82:	2300      	movs	r3, #0
 800aa84:	60fb      	str	r3, [r7, #12]
 800aa86:	4b46      	ldr	r3, [pc, #280]	; (800aba0 <BSP_SDRAM_MspInit+0x1f4>)
 800aa88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa8a:	4a45      	ldr	r2, [pc, #276]	; (800aba0 <BSP_SDRAM_MspInit+0x1f4>)
 800aa8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa90:	6313      	str	r3, [r2, #48]	; 0x30
 800aa92:	4b43      	ldr	r3, [pc, #268]	; (800aba0 <BSP_SDRAM_MspInit+0x1f4>)
 800aa94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa9a:	60fb      	str	r3, [r7, #12]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800aa9e:	2302      	movs	r3, #2
 800aaa0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800aaa2:	2302      	movs	r3, #2
 800aaa4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 800aaaa:	230c      	movs	r3, #12
 800aaac:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800aaae:	2360      	movs	r3, #96	; 0x60
 800aab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800aab2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aab6:	4619      	mov	r1, r3
 800aab8:	483a      	ldr	r0, [pc, #232]	; (800aba4 <BSP_SDRAM_MspInit+0x1f8>)
 800aaba:	f000 ff1d 	bl	800b8f8 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800aabe:	2301      	movs	r3, #1
 800aac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800aac2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aac6:	4619      	mov	r1, r3
 800aac8:	4837      	ldr	r0, [pc, #220]	; (800aba8 <BSP_SDRAM_MspInit+0x1fc>)
 800aaca:	f000 ff15 	bl	800b8f8 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 800aace:	f24c 7303 	movw	r3, #50947	; 0xc703
 800aad2:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800aad4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aad8:	4619      	mov	r1, r3
 800aada:	4834      	ldr	r0, [pc, #208]	; (800abac <BSP_SDRAM_MspInit+0x200>)
 800aadc:	f000 ff0c 	bl	800b8f8 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 800aae0:	f64f 7383 	movw	r3, #65411	; 0xff83
 800aae4:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800aae6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aaea:	4619      	mov	r1, r3
 800aaec:	4830      	ldr	r0, [pc, #192]	; (800abb0 <BSP_SDRAM_MspInit+0x204>)
 800aaee:	f000 ff03 	bl	800b8f8 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800aaf2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800aaf6:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800aaf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aafc:	4619      	mov	r1, r3
 800aafe:	482d      	ldr	r0, [pc, #180]	; (800abb4 <BSP_SDRAM_MspInit+0x208>)
 800ab00:	f000 fefa 	bl	800b8f8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800ab04:	f248 1333 	movw	r3, #33075	; 0x8133
 800ab08:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800ab0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ab0e:	4619      	mov	r1, r3
 800ab10:	4829      	ldr	r0, [pc, #164]	; (800abb8 <BSP_SDRAM_MspInit+0x20c>)
 800ab12:	f000 fef1 	bl	800b8f8 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800ab16:	4b29      	ldr	r3, [pc, #164]	; (800abbc <BSP_SDRAM_MspInit+0x210>)
 800ab18:	2200      	movs	r2, #0
 800ab1a:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800ab1c:	4b27      	ldr	r3, [pc, #156]	; (800abbc <BSP_SDRAM_MspInit+0x210>)
 800ab1e:	2280      	movs	r2, #128	; 0x80
 800ab20:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800ab22:	4b26      	ldr	r3, [pc, #152]	; (800abbc <BSP_SDRAM_MspInit+0x210>)
 800ab24:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab28:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800ab2a:	4b24      	ldr	r3, [pc, #144]	; (800abbc <BSP_SDRAM_MspInit+0x210>)
 800ab2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ab30:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800ab32:	4b22      	ldr	r3, [pc, #136]	; (800abbc <BSP_SDRAM_MspInit+0x210>)
 800ab34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ab38:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800ab3a:	4b20      	ldr	r3, [pc, #128]	; (800abbc <BSP_SDRAM_MspInit+0x210>)
 800ab3c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ab40:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800ab42:	4b1e      	ldr	r3, [pc, #120]	; (800abbc <BSP_SDRAM_MspInit+0x210>)
 800ab44:	2200      	movs	r2, #0
 800ab46:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 800ab48:	4b1c      	ldr	r3, [pc, #112]	; (800abbc <BSP_SDRAM_MspInit+0x210>)
 800ab4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ab4e:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800ab50:	4b1a      	ldr	r3, [pc, #104]	; (800abbc <BSP_SDRAM_MspInit+0x210>)
 800ab52:	2200      	movs	r2, #0
 800ab54:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800ab56:	4b19      	ldr	r3, [pc, #100]	; (800abbc <BSP_SDRAM_MspInit+0x210>)
 800ab58:	2203      	movs	r2, #3
 800ab5a:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800ab5c:	4b17      	ldr	r3, [pc, #92]	; (800abbc <BSP_SDRAM_MspInit+0x210>)
 800ab5e:	2200      	movs	r2, #0
 800ab60:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800ab62:	4b16      	ldr	r3, [pc, #88]	; (800abbc <BSP_SDRAM_MspInit+0x210>)
 800ab64:	2200      	movs	r2, #0
 800ab66:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 800ab68:	4b14      	ldr	r3, [pc, #80]	; (800abbc <BSP_SDRAM_MspInit+0x210>)
 800ab6a:	4a15      	ldr	r2, [pc, #84]	; (800abc0 <BSP_SDRAM_MspInit+0x214>)
 800ab6c:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	4a12      	ldr	r2, [pc, #72]	; (800abbc <BSP_SDRAM_MspInit+0x210>)
 800ab72:	631a      	str	r2, [r3, #48]	; 0x30
 800ab74:	4a11      	ldr	r2, [pc, #68]	; (800abbc <BSP_SDRAM_MspInit+0x210>)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800ab7a:	4810      	ldr	r0, [pc, #64]	; (800abbc <BSP_SDRAM_MspInit+0x210>)
 800ab7c:	f000 fb20 	bl	800b1c0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 800ab80:	480e      	ldr	r0, [pc, #56]	; (800abbc <BSP_SDRAM_MspInit+0x210>)
 800ab82:	f000 fa6f 	bl	800b064 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800ab86:	2200      	movs	r2, #0
 800ab88:	210f      	movs	r1, #15
 800ab8a:	2038      	movs	r0, #56	; 0x38
 800ab8c:	f000 fa24 	bl	800afd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800ab90:	2038      	movs	r0, #56	; 0x38
 800ab92:	f000 fa3d 	bl	800b010 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800ab96:	bf00      	nop
 800ab98:	3740      	adds	r7, #64	; 0x40
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	40023800 	.word	0x40023800
 800aba4:	40020400 	.word	0x40020400
 800aba8:	40020800 	.word	0x40020800
 800abac:	40020c00 	.word	0x40020c00
 800abb0:	40021000 	.word	0x40021000
 800abb4:	40021400 	.word	0x40021400
 800abb8:	40021800 	.word	0x40021800
 800abbc:	20000fb8 	.word	0x20000fb8
 800abc0:	40026410 	.word	0x40026410

0800abc4 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	4603      	mov	r3, r0
 800abcc:	460a      	mov	r2, r1
 800abce:	80fb      	strh	r3, [r7, #6]
 800abd0:	4613      	mov	r3, r2
 800abd2:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 800abd4:	2301      	movs	r3, #1
 800abd6:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 800abd8:	4a13      	ldr	r2, [pc, #76]	; (800ac28 <BSP_TS_Init+0x64>)
 800abda:	88fb      	ldrh	r3, [r7, #6]
 800abdc:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 800abde:	4a13      	ldr	r2, [pc, #76]	; (800ac2c <BSP_TS_Init+0x68>)
 800abe0:	88bb      	ldrh	r3, [r7, #4]
 800abe2:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 800abe4:	4b12      	ldr	r3, [pc, #72]	; (800ac30 <BSP_TS_Init+0x6c>)
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	2082      	movs	r0, #130	; 0x82
 800abea:	4798      	blx	r3
 800abec:	4603      	mov	r3, r0
 800abee:	461a      	mov	r2, r3
 800abf0:	f640 0311 	movw	r3, #2065	; 0x811
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d104      	bne.n	800ac02 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 800abf8:	4b0e      	ldr	r3, [pc, #56]	; (800ac34 <BSP_TS_Init+0x70>)
 800abfa:	4a0d      	ldr	r2, [pc, #52]	; (800ac30 <BSP_TS_Init+0x6c>)
 800abfc:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 800abfe:	2300      	movs	r3, #0
 800ac00:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 800ac02:	7bfb      	ldrb	r3, [r7, #15]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d109      	bne.n	800ac1c <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 800ac08:	4b0a      	ldr	r3, [pc, #40]	; (800ac34 <BSP_TS_Init+0x70>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	2082      	movs	r0, #130	; 0x82
 800ac10:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 800ac12:	4b08      	ldr	r3, [pc, #32]	; (800ac34 <BSP_TS_Init+0x70>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	2082      	movs	r0, #130	; 0x82
 800ac1a:	4798      	blx	r3
  }

  return ret;
 800ac1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3710      	adds	r7, #16
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	2000101c 	.word	0x2000101c
 800ac2c:	2000101e 	.word	0x2000101e
 800ac30:	2000003c 	.word	0x2000003c
 800ac34:	20001018 	.word	0x20001018

0800ac38 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b086      	sub	sp, #24
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 800ac40:	4b4f      	ldr	r3, [pc, #316]	; (800ad80 <BSP_TS_GetState+0x148>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	691b      	ldr	r3, [r3, #16]
 800ac46:	2082      	movs	r0, #130	; 0x82
 800ac48:	4798      	blx	r3
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	b29a      	uxth	r2, r3
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	881b      	ldrh	r3, [r3, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	f000 808d 	beq.w	800ad76 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 800ac5c:	4b48      	ldr	r3, [pc, #288]	; (800ad80 <BSP_TS_GetState+0x148>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	695b      	ldr	r3, [r3, #20]
 800ac62:	f107 020c 	add.w	r2, r7, #12
 800ac66:	f107 010e 	add.w	r1, r7, #14
 800ac6a:	2082      	movs	r0, #130	; 0x82
 800ac6c:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 800ac6e:	89bb      	ldrh	r3, [r7, #12]
 800ac70:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 800ac78:	89bb      	ldrh	r3, [r7, #12]
 800ac7a:	4a42      	ldr	r2, [pc, #264]	; (800ad84 <BSP_TS_GetState+0x14c>)
 800ac7c:	fba2 2303 	umull	r2, r3, r2, r3
 800ac80:	08db      	lsrs	r3, r3, #3
 800ac82:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 800ac84:	8abb      	ldrh	r3, [r7, #20]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d102      	bne.n	800ac90 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	82bb      	strh	r3, [r7, #20]
 800ac8e:	e008      	b.n	800aca2 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 800ac90:	4b3d      	ldr	r3, [pc, #244]	; (800ad88 <BSP_TS_GetState+0x150>)
 800ac92:	881b      	ldrh	r3, [r3, #0]
 800ac94:	8aba      	ldrh	r2, [r7, #20]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d903      	bls.n	800aca2 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 800ac9a:	4b3b      	ldr	r3, [pc, #236]	; (800ad88 <BSP_TS_GetState+0x150>)
 800ac9c:	881b      	ldrh	r3, [r3, #0]
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 800aca2:	8abb      	ldrh	r3, [r7, #20]
 800aca4:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 800aca6:	89fb      	ldrh	r3, [r7, #14]
 800aca8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800acac:	4293      	cmp	r3, r2
 800acae:	d806      	bhi.n	800acbe <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 800acb0:	89fb      	ldrh	r3, [r7, #14]
 800acb2:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 800acb6:	330e      	adds	r3, #14
 800acb8:	b29b      	uxth	r3, r3
 800acba:	81fb      	strh	r3, [r7, #14]
 800acbc:	e005      	b.n	800acca <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 800acbe:	89fb      	ldrh	r3, [r7, #14]
 800acc0:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 800acc4:	3308      	adds	r3, #8
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 800acca:	89fb      	ldrh	r3, [r7, #14]
 800accc:	4a2f      	ldr	r2, [pc, #188]	; (800ad8c <BSP_TS_GetState+0x154>)
 800acce:	fba2 2303 	umull	r2, r3, r2, r3
 800acd2:	08db      	lsrs	r3, r3, #3
 800acd4:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 800acd6:	8afb      	ldrh	r3, [r7, #22]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d102      	bne.n	800ace2 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 800acdc:	2300      	movs	r3, #0
 800acde:	82fb      	strh	r3, [r7, #22]
 800ace0:	e008      	b.n	800acf4 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 800ace2:	4b2b      	ldr	r3, [pc, #172]	; (800ad90 <BSP_TS_GetState+0x158>)
 800ace4:	881b      	ldrh	r3, [r3, #0]
 800ace6:	8afa      	ldrh	r2, [r7, #22]
 800ace8:	429a      	cmp	r2, r3
 800acea:	d903      	bls.n	800acf4 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 800acec:	4b28      	ldr	r3, [pc, #160]	; (800ad90 <BSP_TS_GetState+0x158>)
 800acee:	881b      	ldrh	r3, [r3, #0]
 800acf0:	3b01      	subs	r3, #1
 800acf2:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 800acf4:	8afb      	ldrh	r3, [r7, #22]
 800acf6:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 800acf8:	89fb      	ldrh	r3, [r7, #14]
 800acfa:	461a      	mov	r2, r3
 800acfc:	4b25      	ldr	r3, [pc, #148]	; (800ad94 <BSP_TS_GetState+0x15c>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d906      	bls.n	800ad12 <BSP_TS_GetState+0xda>
 800ad04:	89fa      	ldrh	r2, [r7, #14]
 800ad06:	4b23      	ldr	r3, [pc, #140]	; (800ad94 <BSP_TS_GetState+0x15c>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	1ad3      	subs	r3, r2, r3
 800ad0e:	b29b      	uxth	r3, r3
 800ad10:	e005      	b.n	800ad1e <BSP_TS_GetState+0xe6>
 800ad12:	4b20      	ldr	r3, [pc, #128]	; (800ad94 <BSP_TS_GetState+0x15c>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	b29a      	uxth	r2, r3
 800ad18:	89fb      	ldrh	r3, [r7, #14]
 800ad1a:	1ad3      	subs	r3, r2, r3
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 800ad20:	89bb      	ldrh	r3, [r7, #12]
 800ad22:	461a      	mov	r2, r3
 800ad24:	4b1c      	ldr	r3, [pc, #112]	; (800ad98 <BSP_TS_GetState+0x160>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d906      	bls.n	800ad3a <BSP_TS_GetState+0x102>
 800ad2c:	89ba      	ldrh	r2, [r7, #12]
 800ad2e:	4b1a      	ldr	r3, [pc, #104]	; (800ad98 <BSP_TS_GetState+0x160>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	1ad3      	subs	r3, r2, r3
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	e005      	b.n	800ad46 <BSP_TS_GetState+0x10e>
 800ad3a:	4b17      	ldr	r3, [pc, #92]	; (800ad98 <BSP_TS_GetState+0x160>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	b29a      	uxth	r2, r3
 800ad40:	89bb      	ldrh	r3, [r7, #12]
 800ad42:	1ad3      	subs	r3, r2, r3
 800ad44:	b29b      	uxth	r3, r3
 800ad46:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 800ad48:	8a7a      	ldrh	r2, [r7, #18]
 800ad4a:	8a3b      	ldrh	r3, [r7, #16]
 800ad4c:	4413      	add	r3, r2
 800ad4e:	2b05      	cmp	r3, #5
 800ad50:	dd07      	ble.n	800ad62 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 800ad52:	89fb      	ldrh	r3, [r7, #14]
 800ad54:	461a      	mov	r2, r3
 800ad56:	4b0f      	ldr	r3, [pc, #60]	; (800ad94 <BSP_TS_GetState+0x15c>)
 800ad58:	601a      	str	r2, [r3, #0]
      _y = y; 
 800ad5a:	89bb      	ldrh	r3, [r7, #12]
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	4b0e      	ldr	r3, [pc, #56]	; (800ad98 <BSP_TS_GetState+0x160>)
 800ad60:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 800ad62:	4b0c      	ldr	r3, [pc, #48]	; (800ad94 <BSP_TS_GetState+0x15c>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	b29a      	uxth	r2, r3
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 800ad6c:	4b0a      	ldr	r3, [pc, #40]	; (800ad98 <BSP_TS_GetState+0x160>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	b29a      	uxth	r2, r3
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	809a      	strh	r2, [r3, #4]
  }
}
 800ad76:	bf00      	nop
 800ad78:	3718      	adds	r7, #24
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	20001018 	.word	0x20001018
 800ad84:	ba2e8ba3 	.word	0xba2e8ba3
 800ad88:	2000101e 	.word	0x2000101e
 800ad8c:	88888889 	.word	0x88888889
 800ad90:	2000101c 	.word	0x2000101c
 800ad94:	20001020 	.word	0x20001020
 800ad98:	20001024 	.word	0x20001024

0800ad9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ada0:	4b0e      	ldr	r3, [pc, #56]	; (800addc <HAL_Init+0x40>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4a0d      	ldr	r2, [pc, #52]	; (800addc <HAL_Init+0x40>)
 800ada6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800adaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800adac:	4b0b      	ldr	r3, [pc, #44]	; (800addc <HAL_Init+0x40>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a0a      	ldr	r2, [pc, #40]	; (800addc <HAL_Init+0x40>)
 800adb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800adb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800adb8:	4b08      	ldr	r3, [pc, #32]	; (800addc <HAL_Init+0x40>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a07      	ldr	r2, [pc, #28]	; (800addc <HAL_Init+0x40>)
 800adbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800adc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800adc4:	2003      	movs	r0, #3
 800adc6:	f000 f8fc 	bl	800afc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800adca:	200f      	movs	r0, #15
 800adcc:	f7fd fb5c 	bl	8008488 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800add0:	f7fd fb32 	bl	8008438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800add4:	2300      	movs	r3, #0
}
 800add6:	4618      	mov	r0, r3
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	40023c00 	.word	0x40023c00

0800ade0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ade0:	b480      	push	{r7}
 800ade2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ade4:	4b06      	ldr	r3, [pc, #24]	; (800ae00 <HAL_IncTick+0x20>)
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	461a      	mov	r2, r3
 800adea:	4b06      	ldr	r3, [pc, #24]	; (800ae04 <HAL_IncTick+0x24>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4413      	add	r3, r2
 800adf0:	4a04      	ldr	r2, [pc, #16]	; (800ae04 <HAL_IncTick+0x24>)
 800adf2:	6013      	str	r3, [r2, #0]
}
 800adf4:	bf00      	nop
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr
 800adfe:	bf00      	nop
 800ae00:	20000090 	.word	0x20000090
 800ae04:	20001028 	.word	0x20001028

0800ae08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	af00      	add	r7, sp, #0
  return uwTick;
 800ae0c:	4b03      	ldr	r3, [pc, #12]	; (800ae1c <HAL_GetTick+0x14>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr
 800ae1a:	bf00      	nop
 800ae1c:	20001028 	.word	0x20001028

0800ae20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ae28:	f7ff ffee 	bl	800ae08 <HAL_GetTick>
 800ae2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae38:	d005      	beq.n	800ae46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800ae3a:	4b0a      	ldr	r3, [pc, #40]	; (800ae64 <HAL_Delay+0x44>)
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	461a      	mov	r2, r3
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	4413      	add	r3, r2
 800ae44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800ae46:	bf00      	nop
 800ae48:	f7ff ffde 	bl	800ae08 <HAL_GetTick>
 800ae4c:	4602      	mov	r2, r0
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	1ad3      	subs	r3, r2, r3
 800ae52:	68fa      	ldr	r2, [r7, #12]
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d8f7      	bhi.n	800ae48 <HAL_Delay+0x28>
  {
  }
}
 800ae58:	bf00      	nop
 800ae5a:	bf00      	nop
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	20000090 	.word	0x20000090

0800ae68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b085      	sub	sp, #20
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f003 0307 	and.w	r3, r3, #7
 800ae76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ae78:	4b0c      	ldr	r3, [pc, #48]	; (800aeac <__NVIC_SetPriorityGrouping+0x44>)
 800ae7a:	68db      	ldr	r3, [r3, #12]
 800ae7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ae7e:	68ba      	ldr	r2, [r7, #8]
 800ae80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ae84:	4013      	ands	r3, r2
 800ae86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ae90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ae94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ae9a:	4a04      	ldr	r2, [pc, #16]	; (800aeac <__NVIC_SetPriorityGrouping+0x44>)
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	60d3      	str	r3, [r2, #12]
}
 800aea0:	bf00      	nop
 800aea2:	3714      	adds	r7, #20
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr
 800aeac:	e000ed00 	.word	0xe000ed00

0800aeb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800aeb4:	4b04      	ldr	r3, [pc, #16]	; (800aec8 <__NVIC_GetPriorityGrouping+0x18>)
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	0a1b      	lsrs	r3, r3, #8
 800aeba:	f003 0307 	and.w	r3, r3, #7
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr
 800aec8:	e000ed00 	.word	0xe000ed00

0800aecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800aecc:	b480      	push	{r7}
 800aece:	b083      	sub	sp, #12
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	4603      	mov	r3, r0
 800aed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	db0b      	blt.n	800aef6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800aede:	79fb      	ldrb	r3, [r7, #7]
 800aee0:	f003 021f 	and.w	r2, r3, #31
 800aee4:	4907      	ldr	r1, [pc, #28]	; (800af04 <__NVIC_EnableIRQ+0x38>)
 800aee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aeea:	095b      	lsrs	r3, r3, #5
 800aeec:	2001      	movs	r0, #1
 800aeee:	fa00 f202 	lsl.w	r2, r0, r2
 800aef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800aef6:	bf00      	nop
 800aef8:	370c      	adds	r7, #12
 800aefa:	46bd      	mov	sp, r7
 800aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af00:	4770      	bx	lr
 800af02:	bf00      	nop
 800af04:	e000e100 	.word	0xe000e100

0800af08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800af08:	b480      	push	{r7}
 800af0a:	b083      	sub	sp, #12
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	4603      	mov	r3, r0
 800af10:	6039      	str	r1, [r7, #0]
 800af12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800af14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	db0a      	blt.n	800af32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	b2da      	uxtb	r2, r3
 800af20:	490c      	ldr	r1, [pc, #48]	; (800af54 <__NVIC_SetPriority+0x4c>)
 800af22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af26:	0112      	lsls	r2, r2, #4
 800af28:	b2d2      	uxtb	r2, r2
 800af2a:	440b      	add	r3, r1
 800af2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800af30:	e00a      	b.n	800af48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	b2da      	uxtb	r2, r3
 800af36:	4908      	ldr	r1, [pc, #32]	; (800af58 <__NVIC_SetPriority+0x50>)
 800af38:	79fb      	ldrb	r3, [r7, #7]
 800af3a:	f003 030f 	and.w	r3, r3, #15
 800af3e:	3b04      	subs	r3, #4
 800af40:	0112      	lsls	r2, r2, #4
 800af42:	b2d2      	uxtb	r2, r2
 800af44:	440b      	add	r3, r1
 800af46:	761a      	strb	r2, [r3, #24]
}
 800af48:	bf00      	nop
 800af4a:	370c      	adds	r7, #12
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr
 800af54:	e000e100 	.word	0xe000e100
 800af58:	e000ed00 	.word	0xe000ed00

0800af5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b089      	sub	sp, #36	; 0x24
 800af60:	af00      	add	r7, sp, #0
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f003 0307 	and.w	r3, r3, #7
 800af6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800af70:	69fb      	ldr	r3, [r7, #28]
 800af72:	f1c3 0307 	rsb	r3, r3, #7
 800af76:	2b04      	cmp	r3, #4
 800af78:	bf28      	it	cs
 800af7a:	2304      	movcs	r3, #4
 800af7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800af7e:	69fb      	ldr	r3, [r7, #28]
 800af80:	3304      	adds	r3, #4
 800af82:	2b06      	cmp	r3, #6
 800af84:	d902      	bls.n	800af8c <NVIC_EncodePriority+0x30>
 800af86:	69fb      	ldr	r3, [r7, #28]
 800af88:	3b03      	subs	r3, #3
 800af8a:	e000      	b.n	800af8e <NVIC_EncodePriority+0x32>
 800af8c:	2300      	movs	r3, #0
 800af8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800af90:	f04f 32ff 	mov.w	r2, #4294967295
 800af94:	69bb      	ldr	r3, [r7, #24]
 800af96:	fa02 f303 	lsl.w	r3, r2, r3
 800af9a:	43da      	mvns	r2, r3
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	401a      	ands	r2, r3
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800afa4:	f04f 31ff 	mov.w	r1, #4294967295
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	fa01 f303 	lsl.w	r3, r1, r3
 800afae:	43d9      	mvns	r1, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800afb4:	4313      	orrs	r3, r2
         );
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3724      	adds	r7, #36	; 0x24
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr

0800afc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800afc2:	b580      	push	{r7, lr}
 800afc4:	b082      	sub	sp, #8
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f7ff ff4c 	bl	800ae68 <__NVIC_SetPriorityGrouping>
}
 800afd0:	bf00      	nop
 800afd2:	3708      	adds	r7, #8
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}

0800afd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800afd8:	b580      	push	{r7, lr}
 800afda:	b086      	sub	sp, #24
 800afdc:	af00      	add	r7, sp, #0
 800afde:	4603      	mov	r3, r0
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	607a      	str	r2, [r7, #4]
 800afe4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800afe6:	2300      	movs	r3, #0
 800afe8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800afea:	f7ff ff61 	bl	800aeb0 <__NVIC_GetPriorityGrouping>
 800afee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	68b9      	ldr	r1, [r7, #8]
 800aff4:	6978      	ldr	r0, [r7, #20]
 800aff6:	f7ff ffb1 	bl	800af5c <NVIC_EncodePriority>
 800affa:	4602      	mov	r2, r0
 800affc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b000:	4611      	mov	r1, r2
 800b002:	4618      	mov	r0, r3
 800b004:	f7ff ff80 	bl	800af08 <__NVIC_SetPriority>
}
 800b008:	bf00      	nop
 800b00a:	3718      	adds	r7, #24
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b082      	sub	sp, #8
 800b014:	af00      	add	r7, sp, #0
 800b016:	4603      	mov	r3, r0
 800b018:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b01a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b01e:	4618      	mov	r0, r3
 800b020:	f7ff ff54 	bl	800aecc <__NVIC_EnableIRQ>
}
 800b024:	bf00      	nop
 800b026:	3708      	adds	r7, #8
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b082      	sub	sp, #8
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d101      	bne.n	800b03e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800b03a:	2301      	movs	r3, #1
 800b03c:	e00e      	b.n	800b05c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	795b      	ldrb	r3, [r3, #5]
 800b042:	b2db      	uxtb	r3, r3
 800b044:	2b00      	cmp	r3, #0
 800b046:	d105      	bne.n	800b054 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2200      	movs	r2, #0
 800b04c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f7fc f85e 	bl	8007110 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2201      	movs	r2, #1
 800b058:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800b05a:	2300      	movs	r3, #0
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3708      	adds	r7, #8
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b086      	sub	sp, #24
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b06c:	2300      	movs	r3, #0
 800b06e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b070:	f7ff feca 	bl	800ae08 <HAL_GetTick>
 800b074:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d101      	bne.n	800b080 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b07c:	2301      	movs	r3, #1
 800b07e:	e099      	b.n	800b1b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2202      	movs	r2, #2
 800b084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2200      	movs	r2, #0
 800b08c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	681a      	ldr	r2, [r3, #0]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f022 0201 	bic.w	r2, r2, #1
 800b09e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b0a0:	e00f      	b.n	800b0c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b0a2:	f7ff feb1 	bl	800ae08 <HAL_GetTick>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	1ad3      	subs	r3, r2, r3
 800b0ac:	2b05      	cmp	r3, #5
 800b0ae:	d908      	bls.n	800b0c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2220      	movs	r2, #32
 800b0b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2203      	movs	r2, #3
 800b0ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b0be:	2303      	movs	r3, #3
 800b0c0:	e078      	b.n	800b1b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f003 0301 	and.w	r3, r3, #1
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d1e8      	bne.n	800b0a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b0d8:	697a      	ldr	r2, [r7, #20]
 800b0da:	4b38      	ldr	r3, [pc, #224]	; (800b1bc <HAL_DMA_Init+0x158>)
 800b0dc:	4013      	ands	r3, r2
 800b0de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	685a      	ldr	r2, [r3, #4]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	689b      	ldr	r3, [r3, #8]
 800b0e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b0ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	691b      	ldr	r3, [r3, #16]
 800b0f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b0fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	699b      	ldr	r3, [r3, #24]
 800b100:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b106:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6a1b      	ldr	r3, [r3, #32]
 800b10c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b10e:	697a      	ldr	r2, [r7, #20]
 800b110:	4313      	orrs	r3, r2
 800b112:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b118:	2b04      	cmp	r3, #4
 800b11a:	d107      	bne.n	800b12c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b124:	4313      	orrs	r3, r2
 800b126:	697a      	ldr	r2, [r7, #20]
 800b128:	4313      	orrs	r3, r2
 800b12a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	697a      	ldr	r2, [r7, #20]
 800b132:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	695b      	ldr	r3, [r3, #20]
 800b13a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	f023 0307 	bic.w	r3, r3, #7
 800b142:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b148:	697a      	ldr	r2, [r7, #20]
 800b14a:	4313      	orrs	r3, r2
 800b14c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b152:	2b04      	cmp	r3, #4
 800b154:	d117      	bne.n	800b186 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b15a:	697a      	ldr	r2, [r7, #20]
 800b15c:	4313      	orrs	r3, r2
 800b15e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b164:	2b00      	cmp	r3, #0
 800b166:	d00e      	beq.n	800b186 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f000 f8bd 	bl	800b2e8 <DMA_CheckFifoParam>
 800b16e:	4603      	mov	r3, r0
 800b170:	2b00      	cmp	r3, #0
 800b172:	d008      	beq.n	800b186 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2240      	movs	r2, #64	; 0x40
 800b178:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2201      	movs	r2, #1
 800b17e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b182:	2301      	movs	r3, #1
 800b184:	e016      	b.n	800b1b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	697a      	ldr	r2, [r7, #20]
 800b18c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 f874 	bl	800b27c <DMA_CalcBaseAndBitshift>
 800b194:	4603      	mov	r3, r0
 800b196:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b19c:	223f      	movs	r2, #63	; 0x3f
 800b19e:	409a      	lsls	r2, r3
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b1b2:	2300      	movs	r3, #0
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3718      	adds	r7, #24
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}
 800b1bc:	f010803f 	.word	0xf010803f

0800b1c0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b084      	sub	sp, #16
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d101      	bne.n	800b1d2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e050      	b.n	800b274 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b1d8:	b2db      	uxtb	r3, r3
 800b1da:	2b02      	cmp	r3, #2
 800b1dc:	d101      	bne.n	800b1e2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800b1de:	2302      	movs	r3, #2
 800b1e0:	e048      	b.n	800b274 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f022 0201 	bic.w	r2, r2, #1
 800b1f0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	2200      	movs	r2, #0
 800b200:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	2200      	movs	r2, #0
 800b208:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	2200      	movs	r2, #0
 800b210:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2200      	movs	r2, #0
 800b218:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	2221      	movs	r2, #33	; 0x21
 800b220:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 f82a 	bl	800b27c <DMA_CalcBaseAndBitshift>
 800b228:	4603      	mov	r3, r0
 800b22a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2200      	movs	r2, #0
 800b236:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2200      	movs	r2, #0
 800b23c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2200      	movs	r2, #0
 800b242:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b254:	223f      	movs	r2, #63	; 0x3f
 800b256:	409a      	lsls	r2, r3
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2200      	movs	r2, #0
 800b260:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2200      	movs	r2, #0
 800b266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b272:	2300      	movs	r3, #0
}
 800b274:	4618      	mov	r0, r3
 800b276:	3710      	adds	r7, #16
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b085      	sub	sp, #20
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	b2db      	uxtb	r3, r3
 800b28a:	3b10      	subs	r3, #16
 800b28c:	4a14      	ldr	r2, [pc, #80]	; (800b2e0 <DMA_CalcBaseAndBitshift+0x64>)
 800b28e:	fba2 2303 	umull	r2, r3, r2, r3
 800b292:	091b      	lsrs	r3, r3, #4
 800b294:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b296:	4a13      	ldr	r2, [pc, #76]	; (800b2e4 <DMA_CalcBaseAndBitshift+0x68>)
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	4413      	add	r3, r2
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	461a      	mov	r2, r3
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2b03      	cmp	r3, #3
 800b2a8:	d909      	bls.n	800b2be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b2b2:	f023 0303 	bic.w	r3, r3, #3
 800b2b6:	1d1a      	adds	r2, r3, #4
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	659a      	str	r2, [r3, #88]	; 0x58
 800b2bc:	e007      	b.n	800b2ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b2c6:	f023 0303 	bic.w	r3, r3, #3
 800b2ca:	687a      	ldr	r2, [r7, #4]
 800b2cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3714      	adds	r7, #20
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr
 800b2de:	bf00      	nop
 800b2e0:	aaaaaaab 	.word	0xaaaaaaab
 800b2e4:	0801b74c 	.word	0x0801b74c

0800b2e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b085      	sub	sp, #20
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	699b      	ldr	r3, [r3, #24]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d11f      	bne.n	800b342 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	2b03      	cmp	r3, #3
 800b306:	d856      	bhi.n	800b3b6 <DMA_CheckFifoParam+0xce>
 800b308:	a201      	add	r2, pc, #4	; (adr r2, 800b310 <DMA_CheckFifoParam+0x28>)
 800b30a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b30e:	bf00      	nop
 800b310:	0800b321 	.word	0x0800b321
 800b314:	0800b333 	.word	0x0800b333
 800b318:	0800b321 	.word	0x0800b321
 800b31c:	0800b3b7 	.word	0x0800b3b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b324:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d046      	beq.n	800b3ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800b32c:	2301      	movs	r3, #1
 800b32e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b330:	e043      	b.n	800b3ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b336:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b33a:	d140      	bne.n	800b3be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800b33c:	2301      	movs	r3, #1
 800b33e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b340:	e03d      	b.n	800b3be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	699b      	ldr	r3, [r3, #24]
 800b346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b34a:	d121      	bne.n	800b390 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	2b03      	cmp	r3, #3
 800b350:	d837      	bhi.n	800b3c2 <DMA_CheckFifoParam+0xda>
 800b352:	a201      	add	r2, pc, #4	; (adr r2, 800b358 <DMA_CheckFifoParam+0x70>)
 800b354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b358:	0800b369 	.word	0x0800b369
 800b35c:	0800b36f 	.word	0x0800b36f
 800b360:	0800b369 	.word	0x0800b369
 800b364:	0800b381 	.word	0x0800b381
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b368:	2301      	movs	r3, #1
 800b36a:	73fb      	strb	r3, [r7, #15]
      break;
 800b36c:	e030      	b.n	800b3d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b372:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b376:	2b00      	cmp	r3, #0
 800b378:	d025      	beq.n	800b3c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800b37a:	2301      	movs	r3, #1
 800b37c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b37e:	e022      	b.n	800b3c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b384:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b388:	d11f      	bne.n	800b3ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800b38a:	2301      	movs	r3, #1
 800b38c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b38e:	e01c      	b.n	800b3ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	2b02      	cmp	r3, #2
 800b394:	d903      	bls.n	800b39e <DMA_CheckFifoParam+0xb6>
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	2b03      	cmp	r3, #3
 800b39a:	d003      	beq.n	800b3a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b39c:	e018      	b.n	800b3d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	73fb      	strb	r3, [r7, #15]
      break;
 800b3a2:	e015      	b.n	800b3d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d00e      	beq.n	800b3ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	73fb      	strb	r3, [r7, #15]
      break;
 800b3b4:	e00b      	b.n	800b3ce <DMA_CheckFifoParam+0xe6>
      break;
 800b3b6:	bf00      	nop
 800b3b8:	e00a      	b.n	800b3d0 <DMA_CheckFifoParam+0xe8>
      break;
 800b3ba:	bf00      	nop
 800b3bc:	e008      	b.n	800b3d0 <DMA_CheckFifoParam+0xe8>
      break;
 800b3be:	bf00      	nop
 800b3c0:	e006      	b.n	800b3d0 <DMA_CheckFifoParam+0xe8>
      break;
 800b3c2:	bf00      	nop
 800b3c4:	e004      	b.n	800b3d0 <DMA_CheckFifoParam+0xe8>
      break;
 800b3c6:	bf00      	nop
 800b3c8:	e002      	b.n	800b3d0 <DMA_CheckFifoParam+0xe8>
      break;   
 800b3ca:	bf00      	nop
 800b3cc:	e000      	b.n	800b3d0 <DMA_CheckFifoParam+0xe8>
      break;
 800b3ce:	bf00      	nop
    }
  } 
  
  return status; 
 800b3d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3714      	adds	r7, #20
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr
 800b3de:	bf00      	nop

0800b3e0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d101      	bne.n	800b3f2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	e03b      	b.n	800b46a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b3f8:	b2db      	uxtb	r3, r3
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d106      	bne.n	800b40c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2200      	movs	r2, #0
 800b402:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f7fb fed6 	bl	80071b8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2202      	movs	r2, #2
 800b410:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	685a      	ldr	r2, [r3, #4]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	430a      	orrs	r2, r1
 800b428:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b430:	f023 0107 	bic.w	r1, r3, #7
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	689a      	ldr	r2, [r3, #8]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	430a      	orrs	r2, r1
 800b43e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b446:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800b44a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b44e:	687a      	ldr	r2, [r7, #4]
 800b450:	68d1      	ldr	r1, [r2, #12]
 800b452:	687a      	ldr	r2, [r7, #4]
 800b454:	6812      	ldr	r2, [r2, #0]
 800b456:	430b      	orrs	r3, r1
 800b458:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2200      	movs	r2, #0
 800b45e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2201      	movs	r2, #1
 800b464:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800b468:	2300      	movs	r3, #0
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3708      	adds	r7, #8
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}

0800b472 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800b472:	b580      	push	{r7, lr}
 800b474:	b086      	sub	sp, #24
 800b476:	af02      	add	r7, sp, #8
 800b478:	60f8      	str	r0, [r7, #12]
 800b47a:	60b9      	str	r1, [r7, #8]
 800b47c:	607a      	str	r2, [r7, #4]
 800b47e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b486:	2b01      	cmp	r3, #1
 800b488:	d101      	bne.n	800b48e <HAL_DMA2D_Start+0x1c>
 800b48a:	2302      	movs	r3, #2
 800b48c:	e018      	b.n	800b4c0 <HAL_DMA2D_Start+0x4e>
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2201      	movs	r2, #1
 800b492:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2202      	movs	r2, #2
 800b49a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800b49e:	69bb      	ldr	r3, [r7, #24]
 800b4a0:	9300      	str	r3, [sp, #0]
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	68b9      	ldr	r1, [r7, #8]
 800b4a8:	68f8      	ldr	r0, [r7, #12]
 800b4aa:	f000 f989 	bl	800b7c0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f042 0201 	orr.w	r2, r2, #1
 800b4bc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b4be:	2300      	movs	r3, #0
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3710      	adds	r7, #16
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b086      	sub	sp, #24
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f003 0301 	and.w	r3, r3, #1
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d056      	beq.n	800b592 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800b4e4:	f7ff fc90 	bl	800ae08 <HAL_GetTick>
 800b4e8:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800b4ea:	e04b      	b.n	800b584 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d023      	beq.n	800b546 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f003 0320 	and.w	r3, r3, #32
 800b504:	2b00      	cmp	r3, #0
 800b506:	d005      	beq.n	800b514 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b50c:	f043 0202 	orr.w	r2, r3, #2
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f003 0301 	and.w	r3, r3, #1
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d005      	beq.n	800b52a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b522:	f043 0201 	orr.w	r2, r3, #1
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	2221      	movs	r2, #33	; 0x21
 800b530:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2204      	movs	r2, #4
 800b536:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2200      	movs	r2, #0
 800b53e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800b542:	2301      	movs	r3, #1
 800b544:	e0a5      	b.n	800b692 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b54c:	d01a      	beq.n	800b584 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b54e:	f7ff fc5b 	bl	800ae08 <HAL_GetTick>
 800b552:	4602      	mov	r2, r0
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	1ad3      	subs	r3, r2, r3
 800b558:	683a      	ldr	r2, [r7, #0]
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d302      	bcc.n	800b564 <HAL_DMA2D_PollForTransfer+0x9c>
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d10f      	bne.n	800b584 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b568:	f043 0220 	orr.w	r2, r3, #32
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2203      	movs	r2, #3
 800b574:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2200      	movs	r2, #0
 800b57c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800b580:	2303      	movs	r3, #3
 800b582:	e086      	b.n	800b692 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	f003 0302 	and.w	r3, r3, #2
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d0ac      	beq.n	800b4ec <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	69db      	ldr	r3, [r3, #28]
 800b598:	f003 0320 	and.w	r3, r3, #32
 800b59c:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a4:	f003 0320 	and.w	r3, r3, #32
 800b5a8:	693a      	ldr	r2, [r7, #16]
 800b5aa:	4313      	orrs	r3, r2
 800b5ac:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d061      	beq.n	800b678 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800b5b4:	f7ff fc28 	bl	800ae08 <HAL_GetTick>
 800b5b8:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800b5ba:	e056      	b.n	800b66a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	685b      	ldr	r3, [r3, #4]
 800b5c2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d02e      	beq.n	800b62c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f003 0308 	and.w	r3, r3, #8
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d005      	beq.n	800b5e4 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5dc:	f043 0204 	orr.w	r2, r3, #4
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f003 0320 	and.w	r3, r3, #32
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d005      	beq.n	800b5fa <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5f2:	f043 0202 	orr.w	r2, r3, #2
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f003 0301 	and.w	r3, r3, #1
 800b600:	2b00      	cmp	r3, #0
 800b602:	d005      	beq.n	800b610 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b608:	f043 0201 	orr.w	r2, r3, #1
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	2229      	movs	r2, #41	; 0x29
 800b616:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2204      	movs	r2, #4
 800b61c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2200      	movs	r2, #0
 800b624:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800b628:	2301      	movs	r3, #1
 800b62a:	e032      	b.n	800b692 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b632:	d01a      	beq.n	800b66a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b634:	f7ff fbe8 	bl	800ae08 <HAL_GetTick>
 800b638:	4602      	mov	r2, r0
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	1ad3      	subs	r3, r2, r3
 800b63e:	683a      	ldr	r2, [r7, #0]
 800b640:	429a      	cmp	r2, r3
 800b642:	d302      	bcc.n	800b64a <HAL_DMA2D_PollForTransfer+0x182>
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d10f      	bne.n	800b66a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b64e:	f043 0220 	orr.w	r2, r3, #32
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2203      	movs	r2, #3
 800b65a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2200      	movs	r2, #0
 800b662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800b666:	2303      	movs	r3, #3
 800b668:	e013      	b.n	800b692 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	685b      	ldr	r3, [r3, #4]
 800b670:	f003 0310 	and.w	r3, r3, #16
 800b674:	2b00      	cmp	r3, #0
 800b676:	d0a1      	beq.n	800b5bc <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	2212      	movs	r2, #18
 800b67e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2201      	movs	r2, #1
 800b684:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2200      	movs	r2, #0
 800b68c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800b690:	2300      	movs	r3, #0
}
 800b692:	4618      	mov	r0, r3
 800b694:	3718      	adds	r7, #24
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}
	...

0800b69c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b087      	sub	sp, #28
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d101      	bne.n	800b6bc <HAL_DMA2D_ConfigLayer+0x20>
 800b6b8:	2302      	movs	r3, #2
 800b6ba:	e079      	b.n	800b7b0 <HAL_DMA2D_ConfigLayer+0x114>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2201      	movs	r2, #1
 800b6c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2202      	movs	r2, #2
 800b6c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	011b      	lsls	r3, r3, #4
 800b6d0:	3318      	adds	r3, #24
 800b6d2:	687a      	ldr	r2, [r7, #4]
 800b6d4:	4413      	add	r3, r2
 800b6d6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	685a      	ldr	r2, [r3, #4]
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	041b      	lsls	r3, r3, #16
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800b6e6:	4b35      	ldr	r3, [pc, #212]	; (800b7bc <HAL_DMA2D_ConfigLayer+0x120>)
 800b6e8:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	2b0a      	cmp	r3, #10
 800b6f0:	d003      	beq.n	800b6fa <HAL_DMA2D_ConfigLayer+0x5e>
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	2b09      	cmp	r3, #9
 800b6f8:	d107      	bne.n	800b70a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	68db      	ldr	r3, [r3, #12]
 800b6fe:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b702:	697a      	ldr	r2, [r7, #20]
 800b704:	4313      	orrs	r3, r2
 800b706:	617b      	str	r3, [r7, #20]
 800b708:	e005      	b.n	800b716 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	68db      	ldr	r3, [r3, #12]
 800b70e:	061b      	lsls	r3, r3, #24
 800b710:	697a      	ldr	r2, [r7, #20]
 800b712:	4313      	orrs	r3, r2
 800b714:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d120      	bne.n	800b75e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	43db      	mvns	r3, r3
 800b726:	ea02 0103 	and.w	r1, r2, r3
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	697a      	ldr	r2, [r7, #20]
 800b730:	430a      	orrs	r2, r1
 800b732:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	693a      	ldr	r2, [r7, #16]
 800b73a:	6812      	ldr	r2, [r2, #0]
 800b73c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	2b0a      	cmp	r3, #10
 800b744:	d003      	beq.n	800b74e <HAL_DMA2D_ConfigLayer+0xb2>
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	2b09      	cmp	r3, #9
 800b74c:	d127      	bne.n	800b79e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	68da      	ldr	r2, [r3, #12]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800b75a:	629a      	str	r2, [r3, #40]	; 0x28
 800b75c:	e01f      	b.n	800b79e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	69da      	ldr	r2, [r3, #28]
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	43db      	mvns	r3, r3
 800b768:	ea02 0103 	and.w	r1, r2, r3
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	697a      	ldr	r2, [r7, #20]
 800b772:	430a      	orrs	r2, r1
 800b774:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	693a      	ldr	r2, [r7, #16]
 800b77c:	6812      	ldr	r2, [r2, #0]
 800b77e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	2b0a      	cmp	r3, #10
 800b786:	d003      	beq.n	800b790 <HAL_DMA2D_ConfigLayer+0xf4>
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	2b09      	cmp	r3, #9
 800b78e:	d106      	bne.n	800b79e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	68da      	ldr	r2, [r3, #12]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800b79c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800b7ae:	2300      	movs	r3, #0
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	371c      	adds	r7, #28
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr
 800b7bc:	ff03000f 	.word	0xff03000f

0800b7c0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b08b      	sub	sp, #44	; 0x2c
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	607a      	str	r2, [r7, #4]
 800b7cc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7d4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	041a      	lsls	r2, r3, #16
 800b7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7de:	431a      	orrs	r2, r3
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	430a      	orrs	r2, r1
 800b7e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b7f8:	d174      	bne.n	800b8e4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b800:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b808:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b810:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	b2db      	uxtb	r3, r3
 800b816:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d108      	bne.n	800b832 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800b820:	69ba      	ldr	r2, [r7, #24]
 800b822:	69fb      	ldr	r3, [r7, #28]
 800b824:	431a      	orrs	r2, r3
 800b826:	6a3b      	ldr	r3, [r7, #32]
 800b828:	4313      	orrs	r3, r2
 800b82a:	697a      	ldr	r2, [r7, #20]
 800b82c:	4313      	orrs	r3, r2
 800b82e:	627b      	str	r3, [r7, #36]	; 0x24
 800b830:	e053      	b.n	800b8da <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	689b      	ldr	r3, [r3, #8]
 800b836:	2b01      	cmp	r3, #1
 800b838:	d106      	bne.n	800b848 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800b83a:	69ba      	ldr	r2, [r7, #24]
 800b83c:	69fb      	ldr	r3, [r7, #28]
 800b83e:	4313      	orrs	r3, r2
 800b840:	697a      	ldr	r2, [r7, #20]
 800b842:	4313      	orrs	r3, r2
 800b844:	627b      	str	r3, [r7, #36]	; 0x24
 800b846:	e048      	b.n	800b8da <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	689b      	ldr	r3, [r3, #8]
 800b84c:	2b02      	cmp	r3, #2
 800b84e:	d111      	bne.n	800b874 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800b850:	69fb      	ldr	r3, [r7, #28]
 800b852:	0cdb      	lsrs	r3, r3, #19
 800b854:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800b856:	69bb      	ldr	r3, [r7, #24]
 800b858:	0a9b      	lsrs	r3, r3, #10
 800b85a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	08db      	lsrs	r3, r3, #3
 800b860:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800b862:	69bb      	ldr	r3, [r7, #24]
 800b864:	015a      	lsls	r2, r3, #5
 800b866:	69fb      	ldr	r3, [r7, #28]
 800b868:	02db      	lsls	r3, r3, #11
 800b86a:	4313      	orrs	r3, r2
 800b86c:	697a      	ldr	r2, [r7, #20]
 800b86e:	4313      	orrs	r3, r2
 800b870:	627b      	str	r3, [r7, #36]	; 0x24
 800b872:	e032      	b.n	800b8da <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	689b      	ldr	r3, [r3, #8]
 800b878:	2b03      	cmp	r3, #3
 800b87a:	d117      	bne.n	800b8ac <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800b87c:	6a3b      	ldr	r3, [r7, #32]
 800b87e:	0fdb      	lsrs	r3, r3, #31
 800b880:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800b882:	69fb      	ldr	r3, [r7, #28]
 800b884:	0cdb      	lsrs	r3, r3, #19
 800b886:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800b888:	69bb      	ldr	r3, [r7, #24]
 800b88a:	0adb      	lsrs	r3, r3, #11
 800b88c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	08db      	lsrs	r3, r3, #3
 800b892:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800b894:	69bb      	ldr	r3, [r7, #24]
 800b896:	015a      	lsls	r2, r3, #5
 800b898:	69fb      	ldr	r3, [r7, #28]
 800b89a:	029b      	lsls	r3, r3, #10
 800b89c:	431a      	orrs	r2, r3
 800b89e:	6a3b      	ldr	r3, [r7, #32]
 800b8a0:	03db      	lsls	r3, r3, #15
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	697a      	ldr	r2, [r7, #20]
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	627b      	str	r3, [r7, #36]	; 0x24
 800b8aa:	e016      	b.n	800b8da <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800b8ac:	6a3b      	ldr	r3, [r7, #32]
 800b8ae:	0f1b      	lsrs	r3, r3, #28
 800b8b0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800b8b2:	69fb      	ldr	r3, [r7, #28]
 800b8b4:	0d1b      	lsrs	r3, r3, #20
 800b8b6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800b8b8:	69bb      	ldr	r3, [r7, #24]
 800b8ba:	0b1b      	lsrs	r3, r3, #12
 800b8bc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	091b      	lsrs	r3, r3, #4
 800b8c2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800b8c4:	69bb      	ldr	r3, [r7, #24]
 800b8c6:	011a      	lsls	r2, r3, #4
 800b8c8:	69fb      	ldr	r3, [r7, #28]
 800b8ca:	021b      	lsls	r3, r3, #8
 800b8cc:	431a      	orrs	r2, r3
 800b8ce:	6a3b      	ldr	r3, [r7, #32]
 800b8d0:	031b      	lsls	r3, r3, #12
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	697a      	ldr	r2, [r7, #20]
 800b8d6:	4313      	orrs	r3, r2
 800b8d8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8e0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800b8e2:	e003      	b.n	800b8ec <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	68ba      	ldr	r2, [r7, #8]
 800b8ea:	60da      	str	r2, [r3, #12]
}
 800b8ec:	bf00      	nop
 800b8ee:	372c      	adds	r7, #44	; 0x2c
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr

0800b8f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b089      	sub	sp, #36	; 0x24
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b902:	2300      	movs	r3, #0
 800b904:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b906:	2300      	movs	r3, #0
 800b908:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b90a:	2300      	movs	r3, #0
 800b90c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b90e:	2300      	movs	r3, #0
 800b910:	61fb      	str	r3, [r7, #28]
 800b912:	e177      	b.n	800bc04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b914:	2201      	movs	r2, #1
 800b916:	69fb      	ldr	r3, [r7, #28]
 800b918:	fa02 f303 	lsl.w	r3, r2, r3
 800b91c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	697a      	ldr	r2, [r7, #20]
 800b924:	4013      	ands	r3, r2
 800b926:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b928:	693a      	ldr	r2, [r7, #16]
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	429a      	cmp	r2, r3
 800b92e:	f040 8166 	bne.w	800bbfe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	f003 0303 	and.w	r3, r3, #3
 800b93a:	2b01      	cmp	r3, #1
 800b93c:	d005      	beq.n	800b94a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b946:	2b02      	cmp	r3, #2
 800b948:	d130      	bne.n	800b9ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	689b      	ldr	r3, [r3, #8]
 800b94e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b950:	69fb      	ldr	r3, [r7, #28]
 800b952:	005b      	lsls	r3, r3, #1
 800b954:	2203      	movs	r2, #3
 800b956:	fa02 f303 	lsl.w	r3, r2, r3
 800b95a:	43db      	mvns	r3, r3
 800b95c:	69ba      	ldr	r2, [r7, #24]
 800b95e:	4013      	ands	r3, r2
 800b960:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	68da      	ldr	r2, [r3, #12]
 800b966:	69fb      	ldr	r3, [r7, #28]
 800b968:	005b      	lsls	r3, r3, #1
 800b96a:	fa02 f303 	lsl.w	r3, r2, r3
 800b96e:	69ba      	ldr	r2, [r7, #24]
 800b970:	4313      	orrs	r3, r2
 800b972:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	69ba      	ldr	r2, [r7, #24]
 800b978:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b980:	2201      	movs	r2, #1
 800b982:	69fb      	ldr	r3, [r7, #28]
 800b984:	fa02 f303 	lsl.w	r3, r2, r3
 800b988:	43db      	mvns	r3, r3
 800b98a:	69ba      	ldr	r2, [r7, #24]
 800b98c:	4013      	ands	r3, r2
 800b98e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	091b      	lsrs	r3, r3, #4
 800b996:	f003 0201 	and.w	r2, r3, #1
 800b99a:	69fb      	ldr	r3, [r7, #28]
 800b99c:	fa02 f303 	lsl.w	r3, r2, r3
 800b9a0:	69ba      	ldr	r2, [r7, #24]
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	69ba      	ldr	r2, [r7, #24]
 800b9aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	f003 0303 	and.w	r3, r3, #3
 800b9b4:	2b03      	cmp	r3, #3
 800b9b6:	d017      	beq.n	800b9e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	68db      	ldr	r3, [r3, #12]
 800b9bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b9be:	69fb      	ldr	r3, [r7, #28]
 800b9c0:	005b      	lsls	r3, r3, #1
 800b9c2:	2203      	movs	r2, #3
 800b9c4:	fa02 f303 	lsl.w	r3, r2, r3
 800b9c8:	43db      	mvns	r3, r3
 800b9ca:	69ba      	ldr	r2, [r7, #24]
 800b9cc:	4013      	ands	r3, r2
 800b9ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	689a      	ldr	r2, [r3, #8]
 800b9d4:	69fb      	ldr	r3, [r7, #28]
 800b9d6:	005b      	lsls	r3, r3, #1
 800b9d8:	fa02 f303 	lsl.w	r3, r2, r3
 800b9dc:	69ba      	ldr	r2, [r7, #24]
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	69ba      	ldr	r2, [r7, #24]
 800b9e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	f003 0303 	and.w	r3, r3, #3
 800b9f0:	2b02      	cmp	r3, #2
 800b9f2:	d123      	bne.n	800ba3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b9f4:	69fb      	ldr	r3, [r7, #28]
 800b9f6:	08da      	lsrs	r2, r3, #3
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	3208      	adds	r2, #8
 800b9fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ba02:	69fb      	ldr	r3, [r7, #28]
 800ba04:	f003 0307 	and.w	r3, r3, #7
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	220f      	movs	r2, #15
 800ba0c:	fa02 f303 	lsl.w	r3, r2, r3
 800ba10:	43db      	mvns	r3, r3
 800ba12:	69ba      	ldr	r2, [r7, #24]
 800ba14:	4013      	ands	r3, r2
 800ba16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	691a      	ldr	r2, [r3, #16]
 800ba1c:	69fb      	ldr	r3, [r7, #28]
 800ba1e:	f003 0307 	and.w	r3, r3, #7
 800ba22:	009b      	lsls	r3, r3, #2
 800ba24:	fa02 f303 	lsl.w	r3, r2, r3
 800ba28:	69ba      	ldr	r2, [r7, #24]
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ba2e:	69fb      	ldr	r3, [r7, #28]
 800ba30:	08da      	lsrs	r2, r3, #3
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	3208      	adds	r2, #8
 800ba36:	69b9      	ldr	r1, [r7, #24]
 800ba38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ba42:	69fb      	ldr	r3, [r7, #28]
 800ba44:	005b      	lsls	r3, r3, #1
 800ba46:	2203      	movs	r2, #3
 800ba48:	fa02 f303 	lsl.w	r3, r2, r3
 800ba4c:	43db      	mvns	r3, r3
 800ba4e:	69ba      	ldr	r2, [r7, #24]
 800ba50:	4013      	ands	r3, r2
 800ba52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	f003 0203 	and.w	r2, r3, #3
 800ba5c:	69fb      	ldr	r3, [r7, #28]
 800ba5e:	005b      	lsls	r3, r3, #1
 800ba60:	fa02 f303 	lsl.w	r3, r2, r3
 800ba64:	69ba      	ldr	r2, [r7, #24]
 800ba66:	4313      	orrs	r3, r2
 800ba68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	69ba      	ldr	r2, [r7, #24]
 800ba6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	685b      	ldr	r3, [r3, #4]
 800ba74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	f000 80c0 	beq.w	800bbfe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ba7e:	2300      	movs	r3, #0
 800ba80:	60fb      	str	r3, [r7, #12]
 800ba82:	4b66      	ldr	r3, [pc, #408]	; (800bc1c <HAL_GPIO_Init+0x324>)
 800ba84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba86:	4a65      	ldr	r2, [pc, #404]	; (800bc1c <HAL_GPIO_Init+0x324>)
 800ba88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ba8c:	6453      	str	r3, [r2, #68]	; 0x44
 800ba8e:	4b63      	ldr	r3, [pc, #396]	; (800bc1c <HAL_GPIO_Init+0x324>)
 800ba90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba96:	60fb      	str	r3, [r7, #12]
 800ba98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ba9a:	4a61      	ldr	r2, [pc, #388]	; (800bc20 <HAL_GPIO_Init+0x328>)
 800ba9c:	69fb      	ldr	r3, [r7, #28]
 800ba9e:	089b      	lsrs	r3, r3, #2
 800baa0:	3302      	adds	r3, #2
 800baa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800baa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800baa8:	69fb      	ldr	r3, [r7, #28]
 800baaa:	f003 0303 	and.w	r3, r3, #3
 800baae:	009b      	lsls	r3, r3, #2
 800bab0:	220f      	movs	r2, #15
 800bab2:	fa02 f303 	lsl.w	r3, r2, r3
 800bab6:	43db      	mvns	r3, r3
 800bab8:	69ba      	ldr	r2, [r7, #24]
 800baba:	4013      	ands	r3, r2
 800babc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	4a58      	ldr	r2, [pc, #352]	; (800bc24 <HAL_GPIO_Init+0x32c>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d037      	beq.n	800bb36 <HAL_GPIO_Init+0x23e>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	4a57      	ldr	r2, [pc, #348]	; (800bc28 <HAL_GPIO_Init+0x330>)
 800baca:	4293      	cmp	r3, r2
 800bacc:	d031      	beq.n	800bb32 <HAL_GPIO_Init+0x23a>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	4a56      	ldr	r2, [pc, #344]	; (800bc2c <HAL_GPIO_Init+0x334>)
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d02b      	beq.n	800bb2e <HAL_GPIO_Init+0x236>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	4a55      	ldr	r2, [pc, #340]	; (800bc30 <HAL_GPIO_Init+0x338>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d025      	beq.n	800bb2a <HAL_GPIO_Init+0x232>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	4a54      	ldr	r2, [pc, #336]	; (800bc34 <HAL_GPIO_Init+0x33c>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d01f      	beq.n	800bb26 <HAL_GPIO_Init+0x22e>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	4a53      	ldr	r2, [pc, #332]	; (800bc38 <HAL_GPIO_Init+0x340>)
 800baea:	4293      	cmp	r3, r2
 800baec:	d019      	beq.n	800bb22 <HAL_GPIO_Init+0x22a>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	4a52      	ldr	r2, [pc, #328]	; (800bc3c <HAL_GPIO_Init+0x344>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d013      	beq.n	800bb1e <HAL_GPIO_Init+0x226>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	4a51      	ldr	r2, [pc, #324]	; (800bc40 <HAL_GPIO_Init+0x348>)
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d00d      	beq.n	800bb1a <HAL_GPIO_Init+0x222>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	4a50      	ldr	r2, [pc, #320]	; (800bc44 <HAL_GPIO_Init+0x34c>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d007      	beq.n	800bb16 <HAL_GPIO_Init+0x21e>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	4a4f      	ldr	r2, [pc, #316]	; (800bc48 <HAL_GPIO_Init+0x350>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d101      	bne.n	800bb12 <HAL_GPIO_Init+0x21a>
 800bb0e:	2309      	movs	r3, #9
 800bb10:	e012      	b.n	800bb38 <HAL_GPIO_Init+0x240>
 800bb12:	230a      	movs	r3, #10
 800bb14:	e010      	b.n	800bb38 <HAL_GPIO_Init+0x240>
 800bb16:	2308      	movs	r3, #8
 800bb18:	e00e      	b.n	800bb38 <HAL_GPIO_Init+0x240>
 800bb1a:	2307      	movs	r3, #7
 800bb1c:	e00c      	b.n	800bb38 <HAL_GPIO_Init+0x240>
 800bb1e:	2306      	movs	r3, #6
 800bb20:	e00a      	b.n	800bb38 <HAL_GPIO_Init+0x240>
 800bb22:	2305      	movs	r3, #5
 800bb24:	e008      	b.n	800bb38 <HAL_GPIO_Init+0x240>
 800bb26:	2304      	movs	r3, #4
 800bb28:	e006      	b.n	800bb38 <HAL_GPIO_Init+0x240>
 800bb2a:	2303      	movs	r3, #3
 800bb2c:	e004      	b.n	800bb38 <HAL_GPIO_Init+0x240>
 800bb2e:	2302      	movs	r3, #2
 800bb30:	e002      	b.n	800bb38 <HAL_GPIO_Init+0x240>
 800bb32:	2301      	movs	r3, #1
 800bb34:	e000      	b.n	800bb38 <HAL_GPIO_Init+0x240>
 800bb36:	2300      	movs	r3, #0
 800bb38:	69fa      	ldr	r2, [r7, #28]
 800bb3a:	f002 0203 	and.w	r2, r2, #3
 800bb3e:	0092      	lsls	r2, r2, #2
 800bb40:	4093      	lsls	r3, r2
 800bb42:	69ba      	ldr	r2, [r7, #24]
 800bb44:	4313      	orrs	r3, r2
 800bb46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bb48:	4935      	ldr	r1, [pc, #212]	; (800bc20 <HAL_GPIO_Init+0x328>)
 800bb4a:	69fb      	ldr	r3, [r7, #28]
 800bb4c:	089b      	lsrs	r3, r3, #2
 800bb4e:	3302      	adds	r3, #2
 800bb50:	69ba      	ldr	r2, [r7, #24]
 800bb52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800bb56:	4b3d      	ldr	r3, [pc, #244]	; (800bc4c <HAL_GPIO_Init+0x354>)
 800bb58:	689b      	ldr	r3, [r3, #8]
 800bb5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	43db      	mvns	r3, r3
 800bb60:	69ba      	ldr	r2, [r7, #24]
 800bb62:	4013      	ands	r3, r2
 800bb64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d003      	beq.n	800bb7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800bb72:	69ba      	ldr	r2, [r7, #24]
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	4313      	orrs	r3, r2
 800bb78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800bb7a:	4a34      	ldr	r2, [pc, #208]	; (800bc4c <HAL_GPIO_Init+0x354>)
 800bb7c:	69bb      	ldr	r3, [r7, #24]
 800bb7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800bb80:	4b32      	ldr	r3, [pc, #200]	; (800bc4c <HAL_GPIO_Init+0x354>)
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	43db      	mvns	r3, r3
 800bb8a:	69ba      	ldr	r2, [r7, #24]
 800bb8c:	4013      	ands	r3, r2
 800bb8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d003      	beq.n	800bba4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800bb9c:	69ba      	ldr	r2, [r7, #24]
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	4313      	orrs	r3, r2
 800bba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800bba4:	4a29      	ldr	r2, [pc, #164]	; (800bc4c <HAL_GPIO_Init+0x354>)
 800bba6:	69bb      	ldr	r3, [r7, #24]
 800bba8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800bbaa:	4b28      	ldr	r3, [pc, #160]	; (800bc4c <HAL_GPIO_Init+0x354>)
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	43db      	mvns	r3, r3
 800bbb4:	69ba      	ldr	r2, [r7, #24]
 800bbb6:	4013      	ands	r3, r2
 800bbb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	685b      	ldr	r3, [r3, #4]
 800bbbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d003      	beq.n	800bbce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800bbc6:	69ba      	ldr	r2, [r7, #24]
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800bbce:	4a1f      	ldr	r2, [pc, #124]	; (800bc4c <HAL_GPIO_Init+0x354>)
 800bbd0:	69bb      	ldr	r3, [r7, #24]
 800bbd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800bbd4:	4b1d      	ldr	r3, [pc, #116]	; (800bc4c <HAL_GPIO_Init+0x354>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	43db      	mvns	r3, r3
 800bbde:	69ba      	ldr	r2, [r7, #24]
 800bbe0:	4013      	ands	r3, r2
 800bbe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d003      	beq.n	800bbf8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800bbf0:	69ba      	ldr	r2, [r7, #24]
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800bbf8:	4a14      	ldr	r2, [pc, #80]	; (800bc4c <HAL_GPIO_Init+0x354>)
 800bbfa:	69bb      	ldr	r3, [r7, #24]
 800bbfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bbfe:	69fb      	ldr	r3, [r7, #28]
 800bc00:	3301      	adds	r3, #1
 800bc02:	61fb      	str	r3, [r7, #28]
 800bc04:	69fb      	ldr	r3, [r7, #28]
 800bc06:	2b0f      	cmp	r3, #15
 800bc08:	f67f ae84 	bls.w	800b914 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800bc0c:	bf00      	nop
 800bc0e:	bf00      	nop
 800bc10:	3724      	adds	r7, #36	; 0x24
 800bc12:	46bd      	mov	sp, r7
 800bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc18:	4770      	bx	lr
 800bc1a:	bf00      	nop
 800bc1c:	40023800 	.word	0x40023800
 800bc20:	40013800 	.word	0x40013800
 800bc24:	40020000 	.word	0x40020000
 800bc28:	40020400 	.word	0x40020400
 800bc2c:	40020800 	.word	0x40020800
 800bc30:	40020c00 	.word	0x40020c00
 800bc34:	40021000 	.word	0x40021000
 800bc38:	40021400 	.word	0x40021400
 800bc3c:	40021800 	.word	0x40021800
 800bc40:	40021c00 	.word	0x40021c00
 800bc44:	40022000 	.word	0x40022000
 800bc48:	40022400 	.word	0x40022400
 800bc4c:	40013c00 	.word	0x40013c00

0800bc50 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b087      	sub	sp, #28
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800bc62:	2300      	movs	r3, #0
 800bc64:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bc66:	2300      	movs	r3, #0
 800bc68:	617b      	str	r3, [r7, #20]
 800bc6a:	e0d9      	b.n	800be20 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	fa02 f303 	lsl.w	r3, r2, r3
 800bc74:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800bc76:	683a      	ldr	r2, [r7, #0]
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	4013      	ands	r3, r2
 800bc7c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800bc7e:	68fa      	ldr	r2, [r7, #12]
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	429a      	cmp	r2, r3
 800bc84:	f040 80c9 	bne.w	800be1a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800bc88:	4a6b      	ldr	r2, [pc, #428]	; (800be38 <HAL_GPIO_DeInit+0x1e8>)
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	089b      	lsrs	r3, r3, #2
 800bc8e:	3302      	adds	r3, #2
 800bc90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc94:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	f003 0303 	and.w	r3, r3, #3
 800bc9c:	009b      	lsls	r3, r3, #2
 800bc9e:	220f      	movs	r2, #15
 800bca0:	fa02 f303 	lsl.w	r3, r2, r3
 800bca4:	68ba      	ldr	r2, [r7, #8]
 800bca6:	4013      	ands	r3, r2
 800bca8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	4a63      	ldr	r2, [pc, #396]	; (800be3c <HAL_GPIO_DeInit+0x1ec>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d037      	beq.n	800bd22 <HAL_GPIO_DeInit+0xd2>
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	4a62      	ldr	r2, [pc, #392]	; (800be40 <HAL_GPIO_DeInit+0x1f0>)
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d031      	beq.n	800bd1e <HAL_GPIO_DeInit+0xce>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	4a61      	ldr	r2, [pc, #388]	; (800be44 <HAL_GPIO_DeInit+0x1f4>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d02b      	beq.n	800bd1a <HAL_GPIO_DeInit+0xca>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	4a60      	ldr	r2, [pc, #384]	; (800be48 <HAL_GPIO_DeInit+0x1f8>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d025      	beq.n	800bd16 <HAL_GPIO_DeInit+0xc6>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	4a5f      	ldr	r2, [pc, #380]	; (800be4c <HAL_GPIO_DeInit+0x1fc>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d01f      	beq.n	800bd12 <HAL_GPIO_DeInit+0xc2>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	4a5e      	ldr	r2, [pc, #376]	; (800be50 <HAL_GPIO_DeInit+0x200>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d019      	beq.n	800bd0e <HAL_GPIO_DeInit+0xbe>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	4a5d      	ldr	r2, [pc, #372]	; (800be54 <HAL_GPIO_DeInit+0x204>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d013      	beq.n	800bd0a <HAL_GPIO_DeInit+0xba>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	4a5c      	ldr	r2, [pc, #368]	; (800be58 <HAL_GPIO_DeInit+0x208>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d00d      	beq.n	800bd06 <HAL_GPIO_DeInit+0xb6>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	4a5b      	ldr	r2, [pc, #364]	; (800be5c <HAL_GPIO_DeInit+0x20c>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d007      	beq.n	800bd02 <HAL_GPIO_DeInit+0xb2>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	4a5a      	ldr	r2, [pc, #360]	; (800be60 <HAL_GPIO_DeInit+0x210>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d101      	bne.n	800bcfe <HAL_GPIO_DeInit+0xae>
 800bcfa:	2309      	movs	r3, #9
 800bcfc:	e012      	b.n	800bd24 <HAL_GPIO_DeInit+0xd4>
 800bcfe:	230a      	movs	r3, #10
 800bd00:	e010      	b.n	800bd24 <HAL_GPIO_DeInit+0xd4>
 800bd02:	2308      	movs	r3, #8
 800bd04:	e00e      	b.n	800bd24 <HAL_GPIO_DeInit+0xd4>
 800bd06:	2307      	movs	r3, #7
 800bd08:	e00c      	b.n	800bd24 <HAL_GPIO_DeInit+0xd4>
 800bd0a:	2306      	movs	r3, #6
 800bd0c:	e00a      	b.n	800bd24 <HAL_GPIO_DeInit+0xd4>
 800bd0e:	2305      	movs	r3, #5
 800bd10:	e008      	b.n	800bd24 <HAL_GPIO_DeInit+0xd4>
 800bd12:	2304      	movs	r3, #4
 800bd14:	e006      	b.n	800bd24 <HAL_GPIO_DeInit+0xd4>
 800bd16:	2303      	movs	r3, #3
 800bd18:	e004      	b.n	800bd24 <HAL_GPIO_DeInit+0xd4>
 800bd1a:	2302      	movs	r3, #2
 800bd1c:	e002      	b.n	800bd24 <HAL_GPIO_DeInit+0xd4>
 800bd1e:	2301      	movs	r3, #1
 800bd20:	e000      	b.n	800bd24 <HAL_GPIO_DeInit+0xd4>
 800bd22:	2300      	movs	r3, #0
 800bd24:	697a      	ldr	r2, [r7, #20]
 800bd26:	f002 0203 	and.w	r2, r2, #3
 800bd2a:	0092      	lsls	r2, r2, #2
 800bd2c:	4093      	lsls	r3, r2
 800bd2e:	68ba      	ldr	r2, [r7, #8]
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d132      	bne.n	800bd9a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800bd34:	4b4b      	ldr	r3, [pc, #300]	; (800be64 <HAL_GPIO_DeInit+0x214>)
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	43db      	mvns	r3, r3
 800bd3c:	4949      	ldr	r1, [pc, #292]	; (800be64 <HAL_GPIO_DeInit+0x214>)
 800bd3e:	4013      	ands	r3, r2
 800bd40:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800bd42:	4b48      	ldr	r3, [pc, #288]	; (800be64 <HAL_GPIO_DeInit+0x214>)
 800bd44:	685a      	ldr	r2, [r3, #4]
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	43db      	mvns	r3, r3
 800bd4a:	4946      	ldr	r1, [pc, #280]	; (800be64 <HAL_GPIO_DeInit+0x214>)
 800bd4c:	4013      	ands	r3, r2
 800bd4e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800bd50:	4b44      	ldr	r3, [pc, #272]	; (800be64 <HAL_GPIO_DeInit+0x214>)
 800bd52:	68da      	ldr	r2, [r3, #12]
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	43db      	mvns	r3, r3
 800bd58:	4942      	ldr	r1, [pc, #264]	; (800be64 <HAL_GPIO_DeInit+0x214>)
 800bd5a:	4013      	ands	r3, r2
 800bd5c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800bd5e:	4b41      	ldr	r3, [pc, #260]	; (800be64 <HAL_GPIO_DeInit+0x214>)
 800bd60:	689a      	ldr	r2, [r3, #8]
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	43db      	mvns	r3, r3
 800bd66:	493f      	ldr	r1, [pc, #252]	; (800be64 <HAL_GPIO_DeInit+0x214>)
 800bd68:	4013      	ands	r3, r2
 800bd6a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	f003 0303 	and.w	r3, r3, #3
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	220f      	movs	r2, #15
 800bd76:	fa02 f303 	lsl.w	r3, r2, r3
 800bd7a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800bd7c:	4a2e      	ldr	r2, [pc, #184]	; (800be38 <HAL_GPIO_DeInit+0x1e8>)
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	089b      	lsrs	r3, r3, #2
 800bd82:	3302      	adds	r3, #2
 800bd84:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	43da      	mvns	r2, r3
 800bd8c:	482a      	ldr	r0, [pc, #168]	; (800be38 <HAL_GPIO_DeInit+0x1e8>)
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	089b      	lsrs	r3, r3, #2
 800bd92:	400a      	ands	r2, r1
 800bd94:	3302      	adds	r3, #2
 800bd96:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681a      	ldr	r2, [r3, #0]
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	005b      	lsls	r3, r3, #1
 800bda2:	2103      	movs	r1, #3
 800bda4:	fa01 f303 	lsl.w	r3, r1, r3
 800bda8:	43db      	mvns	r3, r3
 800bdaa:	401a      	ands	r2, r3
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	08da      	lsrs	r2, r3, #3
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	3208      	adds	r2, #8
 800bdb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	f003 0307 	and.w	r3, r3, #7
 800bdc2:	009b      	lsls	r3, r3, #2
 800bdc4:	220f      	movs	r2, #15
 800bdc6:	fa02 f303 	lsl.w	r3, r2, r3
 800bdca:	43db      	mvns	r3, r3
 800bdcc:	697a      	ldr	r2, [r7, #20]
 800bdce:	08d2      	lsrs	r2, r2, #3
 800bdd0:	4019      	ands	r1, r3
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	3208      	adds	r2, #8
 800bdd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	68da      	ldr	r2, [r3, #12]
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	005b      	lsls	r3, r3, #1
 800bde2:	2103      	movs	r1, #3
 800bde4:	fa01 f303 	lsl.w	r3, r1, r3
 800bde8:	43db      	mvns	r3, r3
 800bdea:	401a      	ands	r2, r3
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	685a      	ldr	r2, [r3, #4]
 800bdf4:	2101      	movs	r1, #1
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	fa01 f303 	lsl.w	r3, r1, r3
 800bdfc:	43db      	mvns	r3, r3
 800bdfe:	401a      	ands	r2, r3
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	689a      	ldr	r2, [r3, #8]
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	005b      	lsls	r3, r3, #1
 800be0c:	2103      	movs	r1, #3
 800be0e:	fa01 f303 	lsl.w	r3, r1, r3
 800be12:	43db      	mvns	r3, r3
 800be14:	401a      	ands	r2, r3
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	3301      	adds	r3, #1
 800be1e:	617b      	str	r3, [r7, #20]
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	2b0f      	cmp	r3, #15
 800be24:	f67f af22 	bls.w	800bc6c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800be28:	bf00      	nop
 800be2a:	bf00      	nop
 800be2c:	371c      	adds	r7, #28
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr
 800be36:	bf00      	nop
 800be38:	40013800 	.word	0x40013800
 800be3c:	40020000 	.word	0x40020000
 800be40:	40020400 	.word	0x40020400
 800be44:	40020800 	.word	0x40020800
 800be48:	40020c00 	.word	0x40020c00
 800be4c:	40021000 	.word	0x40021000
 800be50:	40021400 	.word	0x40021400
 800be54:	40021800 	.word	0x40021800
 800be58:	40021c00 	.word	0x40021c00
 800be5c:	40022000 	.word	0x40022000
 800be60:	40022400 	.word	0x40022400
 800be64:	40013c00 	.word	0x40013c00

0800be68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800be68:	b480      	push	{r7}
 800be6a:	b085      	sub	sp, #20
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	460b      	mov	r3, r1
 800be72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	691a      	ldr	r2, [r3, #16]
 800be78:	887b      	ldrh	r3, [r7, #2]
 800be7a:	4013      	ands	r3, r2
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d002      	beq.n	800be86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800be80:	2301      	movs	r3, #1
 800be82:	73fb      	strb	r3, [r7, #15]
 800be84:	e001      	b.n	800be8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800be86:	2300      	movs	r3, #0
 800be88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800be8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3714      	adds	r7, #20
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr

0800be98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800be98:	b480      	push	{r7}
 800be9a:	b083      	sub	sp, #12
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	460b      	mov	r3, r1
 800bea2:	807b      	strh	r3, [r7, #2]
 800bea4:	4613      	mov	r3, r2
 800bea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800bea8:	787b      	ldrb	r3, [r7, #1]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d003      	beq.n	800beb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800beae:	887a      	ldrh	r2, [r7, #2]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800beb4:	e003      	b.n	800bebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800beb6:	887b      	ldrh	r3, [r7, #2]
 800beb8:	041a      	lsls	r2, r3, #16
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	619a      	str	r2, [r3, #24]
}
 800bebe:	bf00      	nop
 800bec0:	370c      	adds	r7, #12
 800bec2:	46bd      	mov	sp, r7
 800bec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec8:	4770      	bx	lr
	...

0800becc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b084      	sub	sp, #16
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d101      	bne.n	800bede <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800beda:	2301      	movs	r3, #1
 800bedc:	e12b      	b.n	800c136 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bee4:	b2db      	uxtb	r3, r3
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d106      	bne.n	800bef8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2200      	movs	r2, #0
 800beee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f7fb fbbe 	bl	8007674 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2224      	movs	r2, #36	; 0x24
 800befc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	681a      	ldr	r2, [r3, #0]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f022 0201 	bic.w	r2, r2, #1
 800bf0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	681a      	ldr	r2, [r3, #0]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bf1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	681a      	ldr	r2, [r3, #0]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bf2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800bf30:	f002 f802 	bl	800df38 <HAL_RCC_GetPCLK1Freq>
 800bf34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	685b      	ldr	r3, [r3, #4]
 800bf3a:	4a81      	ldr	r2, [pc, #516]	; (800c140 <HAL_I2C_Init+0x274>)
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d807      	bhi.n	800bf50 <HAL_I2C_Init+0x84>
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	4a80      	ldr	r2, [pc, #512]	; (800c144 <HAL_I2C_Init+0x278>)
 800bf44:	4293      	cmp	r3, r2
 800bf46:	bf94      	ite	ls
 800bf48:	2301      	movls	r3, #1
 800bf4a:	2300      	movhi	r3, #0
 800bf4c:	b2db      	uxtb	r3, r3
 800bf4e:	e006      	b.n	800bf5e <HAL_I2C_Init+0x92>
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	4a7d      	ldr	r2, [pc, #500]	; (800c148 <HAL_I2C_Init+0x27c>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	bf94      	ite	ls
 800bf58:	2301      	movls	r3, #1
 800bf5a:	2300      	movhi	r3, #0
 800bf5c:	b2db      	uxtb	r3, r3
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d001      	beq.n	800bf66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800bf62:	2301      	movs	r3, #1
 800bf64:	e0e7      	b.n	800c136 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	4a78      	ldr	r2, [pc, #480]	; (800c14c <HAL_I2C_Init+0x280>)
 800bf6a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf6e:	0c9b      	lsrs	r3, r3, #18
 800bf70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	685b      	ldr	r3, [r3, #4]
 800bf78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	68ba      	ldr	r2, [r7, #8]
 800bf82:	430a      	orrs	r2, r1
 800bf84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	6a1b      	ldr	r3, [r3, #32]
 800bf8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	4a6a      	ldr	r2, [pc, #424]	; (800c140 <HAL_I2C_Init+0x274>)
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d802      	bhi.n	800bfa0 <HAL_I2C_Init+0xd4>
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	e009      	b.n	800bfb4 <HAL_I2C_Init+0xe8>
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800bfa6:	fb02 f303 	mul.w	r3, r2, r3
 800bfaa:	4a69      	ldr	r2, [pc, #420]	; (800c150 <HAL_I2C_Init+0x284>)
 800bfac:	fba2 2303 	umull	r2, r3, r2, r3
 800bfb0:	099b      	lsrs	r3, r3, #6
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	687a      	ldr	r2, [r7, #4]
 800bfb6:	6812      	ldr	r2, [r2, #0]
 800bfb8:	430b      	orrs	r3, r1
 800bfba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	69db      	ldr	r3, [r3, #28]
 800bfc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800bfc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	495c      	ldr	r1, [pc, #368]	; (800c140 <HAL_I2C_Init+0x274>)
 800bfd0:	428b      	cmp	r3, r1
 800bfd2:	d819      	bhi.n	800c008 <HAL_I2C_Init+0x13c>
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	1e59      	subs	r1, r3, #1
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	685b      	ldr	r3, [r3, #4]
 800bfdc:	005b      	lsls	r3, r3, #1
 800bfde:	fbb1 f3f3 	udiv	r3, r1, r3
 800bfe2:	1c59      	adds	r1, r3, #1
 800bfe4:	f640 73fc 	movw	r3, #4092	; 0xffc
 800bfe8:	400b      	ands	r3, r1
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d00a      	beq.n	800c004 <HAL_I2C_Init+0x138>
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	1e59      	subs	r1, r3, #1
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	005b      	lsls	r3, r3, #1
 800bff8:	fbb1 f3f3 	udiv	r3, r1, r3
 800bffc:	3301      	adds	r3, #1
 800bffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c002:	e051      	b.n	800c0a8 <HAL_I2C_Init+0x1dc>
 800c004:	2304      	movs	r3, #4
 800c006:	e04f      	b.n	800c0a8 <HAL_I2C_Init+0x1dc>
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	689b      	ldr	r3, [r3, #8]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d111      	bne.n	800c034 <HAL_I2C_Init+0x168>
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	1e58      	subs	r0, r3, #1
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6859      	ldr	r1, [r3, #4]
 800c018:	460b      	mov	r3, r1
 800c01a:	005b      	lsls	r3, r3, #1
 800c01c:	440b      	add	r3, r1
 800c01e:	fbb0 f3f3 	udiv	r3, r0, r3
 800c022:	3301      	adds	r3, #1
 800c024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c028:	2b00      	cmp	r3, #0
 800c02a:	bf0c      	ite	eq
 800c02c:	2301      	moveq	r3, #1
 800c02e:	2300      	movne	r3, #0
 800c030:	b2db      	uxtb	r3, r3
 800c032:	e012      	b.n	800c05a <HAL_I2C_Init+0x18e>
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	1e58      	subs	r0, r3, #1
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6859      	ldr	r1, [r3, #4]
 800c03c:	460b      	mov	r3, r1
 800c03e:	009b      	lsls	r3, r3, #2
 800c040:	440b      	add	r3, r1
 800c042:	0099      	lsls	r1, r3, #2
 800c044:	440b      	add	r3, r1
 800c046:	fbb0 f3f3 	udiv	r3, r0, r3
 800c04a:	3301      	adds	r3, #1
 800c04c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c050:	2b00      	cmp	r3, #0
 800c052:	bf0c      	ite	eq
 800c054:	2301      	moveq	r3, #1
 800c056:	2300      	movne	r3, #0
 800c058:	b2db      	uxtb	r3, r3
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d001      	beq.n	800c062 <HAL_I2C_Init+0x196>
 800c05e:	2301      	movs	r3, #1
 800c060:	e022      	b.n	800c0a8 <HAL_I2C_Init+0x1dc>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	689b      	ldr	r3, [r3, #8]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d10e      	bne.n	800c088 <HAL_I2C_Init+0x1bc>
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	1e58      	subs	r0, r3, #1
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6859      	ldr	r1, [r3, #4]
 800c072:	460b      	mov	r3, r1
 800c074:	005b      	lsls	r3, r3, #1
 800c076:	440b      	add	r3, r1
 800c078:	fbb0 f3f3 	udiv	r3, r0, r3
 800c07c:	3301      	adds	r3, #1
 800c07e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c086:	e00f      	b.n	800c0a8 <HAL_I2C_Init+0x1dc>
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	1e58      	subs	r0, r3, #1
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6859      	ldr	r1, [r3, #4]
 800c090:	460b      	mov	r3, r1
 800c092:	009b      	lsls	r3, r3, #2
 800c094:	440b      	add	r3, r1
 800c096:	0099      	lsls	r1, r3, #2
 800c098:	440b      	add	r3, r1
 800c09a:	fbb0 f3f3 	udiv	r3, r0, r3
 800c09e:	3301      	adds	r3, #1
 800c0a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c0a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c0a8:	6879      	ldr	r1, [r7, #4]
 800c0aa:	6809      	ldr	r1, [r1, #0]
 800c0ac:	4313      	orrs	r3, r2
 800c0ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	69da      	ldr	r2, [r3, #28]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6a1b      	ldr	r3, [r3, #32]
 800c0c2:	431a      	orrs	r2, r3
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	430a      	orrs	r2, r1
 800c0ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	689b      	ldr	r3, [r3, #8]
 800c0d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800c0d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c0da:	687a      	ldr	r2, [r7, #4]
 800c0dc:	6911      	ldr	r1, [r2, #16]
 800c0de:	687a      	ldr	r2, [r7, #4]
 800c0e0:	68d2      	ldr	r2, [r2, #12]
 800c0e2:	4311      	orrs	r1, r2
 800c0e4:	687a      	ldr	r2, [r7, #4]
 800c0e6:	6812      	ldr	r2, [r2, #0]
 800c0e8:	430b      	orrs	r3, r1
 800c0ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	68db      	ldr	r3, [r3, #12]
 800c0f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	695a      	ldr	r2, [r3, #20]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	699b      	ldr	r3, [r3, #24]
 800c0fe:	431a      	orrs	r2, r3
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	430a      	orrs	r2, r1
 800c106:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	681a      	ldr	r2, [r3, #0]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f042 0201 	orr.w	r2, r2, #1
 800c116:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2200      	movs	r2, #0
 800c11c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2220      	movs	r2, #32
 800c122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2200      	movs	r2, #0
 800c12a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2200      	movs	r2, #0
 800c130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c134:	2300      	movs	r3, #0
}
 800c136:	4618      	mov	r0, r3
 800c138:	3710      	adds	r7, #16
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
 800c13e:	bf00      	nop
 800c140:	000186a0 	.word	0x000186a0
 800c144:	001e847f 	.word	0x001e847f
 800c148:	003d08ff 	.word	0x003d08ff
 800c14c:	431bde83 	.word	0x431bde83
 800c150:	10624dd3 	.word	0x10624dd3

0800c154 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b082      	sub	sp, #8
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d101      	bne.n	800c166 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800c162:	2301      	movs	r3, #1
 800c164:	e021      	b.n	800c1aa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2224      	movs	r2, #36	; 0x24
 800c16a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	681a      	ldr	r2, [r3, #0]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f022 0201 	bic.w	r2, r2, #1
 800c17c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f7fb fae2 	bl	8007748 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2200      	movs	r2, #0
 800c188:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2200      	movs	r2, #0
 800c18e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2200      	movs	r2, #0
 800c196:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2200      	movs	r2, #0
 800c19c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c1a8:	2300      	movs	r3, #0
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3708      	adds	r7, #8
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
	...

0800c1b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b088      	sub	sp, #32
 800c1b8:	af02      	add	r7, sp, #8
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	4608      	mov	r0, r1
 800c1be:	4611      	mov	r1, r2
 800c1c0:	461a      	mov	r2, r3
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	817b      	strh	r3, [r7, #10]
 800c1c6:	460b      	mov	r3, r1
 800c1c8:	813b      	strh	r3, [r7, #8]
 800c1ca:	4613      	mov	r3, r2
 800c1cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c1ce:	f7fe fe1b 	bl	800ae08 <HAL_GetTick>
 800c1d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1da:	b2db      	uxtb	r3, r3
 800c1dc:	2b20      	cmp	r3, #32
 800c1de:	f040 80d9 	bne.w	800c394 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	9300      	str	r3, [sp, #0]
 800c1e6:	2319      	movs	r3, #25
 800c1e8:	2201      	movs	r2, #1
 800c1ea:	496d      	ldr	r1, [pc, #436]	; (800c3a0 <HAL_I2C_Mem_Write+0x1ec>)
 800c1ec:	68f8      	ldr	r0, [r7, #12]
 800c1ee:	f000 fc8d 	bl	800cb0c <I2C_WaitOnFlagUntilTimeout>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d001      	beq.n	800c1fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800c1f8:	2302      	movs	r3, #2
 800c1fa:	e0cc      	b.n	800c396 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c202:	2b01      	cmp	r3, #1
 800c204:	d101      	bne.n	800c20a <HAL_I2C_Mem_Write+0x56>
 800c206:	2302      	movs	r3, #2
 800c208:	e0c5      	b.n	800c396 <HAL_I2C_Mem_Write+0x1e2>
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2201      	movs	r2, #1
 800c20e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	f003 0301 	and.w	r3, r3, #1
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d007      	beq.n	800c230 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	681a      	ldr	r2, [r3, #0]
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f042 0201 	orr.w	r2, r2, #1
 800c22e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	681a      	ldr	r2, [r3, #0]
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c23e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	2221      	movs	r2, #33	; 0x21
 800c244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	2240      	movs	r2, #64	; 0x40
 800c24c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	2200      	movs	r2, #0
 800c254:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	6a3a      	ldr	r2, [r7, #32]
 800c25a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c260:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c266:	b29a      	uxth	r2, r3
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	4a4d      	ldr	r2, [pc, #308]	; (800c3a4 <HAL_I2C_Mem_Write+0x1f0>)
 800c270:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c272:	88f8      	ldrh	r0, [r7, #6]
 800c274:	893a      	ldrh	r2, [r7, #8]
 800c276:	8979      	ldrh	r1, [r7, #10]
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	9301      	str	r3, [sp, #4]
 800c27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27e:	9300      	str	r3, [sp, #0]
 800c280:	4603      	mov	r3, r0
 800c282:	68f8      	ldr	r0, [r7, #12]
 800c284:	f000 fac4 	bl	800c810 <I2C_RequestMemoryWrite>
 800c288:	4603      	mov	r3, r0
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d052      	beq.n	800c334 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800c28e:	2301      	movs	r3, #1
 800c290:	e081      	b.n	800c396 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c292:	697a      	ldr	r2, [r7, #20]
 800c294:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c296:	68f8      	ldr	r0, [r7, #12]
 800c298:	f000 fd0e 	bl	800ccb8 <I2C_WaitOnTXEFlagUntilTimeout>
 800c29c:	4603      	mov	r3, r0
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d00d      	beq.n	800c2be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2a6:	2b04      	cmp	r3, #4
 800c2a8:	d107      	bne.n	800c2ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c2b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	e06b      	b.n	800c396 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2c2:	781a      	ldrb	r2, [r3, #0]
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ce:	1c5a      	adds	r2, r3, #1
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2d8:	3b01      	subs	r3, #1
 800c2da:	b29a      	uxth	r2, r3
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2e4:	b29b      	uxth	r3, r3
 800c2e6:	3b01      	subs	r3, #1
 800c2e8:	b29a      	uxth	r2, r3
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	695b      	ldr	r3, [r3, #20]
 800c2f4:	f003 0304 	and.w	r3, r3, #4
 800c2f8:	2b04      	cmp	r3, #4
 800c2fa:	d11b      	bne.n	800c334 <HAL_I2C_Mem_Write+0x180>
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c300:	2b00      	cmp	r3, #0
 800c302:	d017      	beq.n	800c334 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c308:	781a      	ldrb	r2, [r3, #0]
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c314:	1c5a      	adds	r2, r3, #1
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c31e:	3b01      	subs	r3, #1
 800c320:	b29a      	uxth	r2, r3
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	3b01      	subs	r3, #1
 800c32e:	b29a      	uxth	r2, r3
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d1aa      	bne.n	800c292 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c33c:	697a      	ldr	r2, [r7, #20]
 800c33e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c340:	68f8      	ldr	r0, [r7, #12]
 800c342:	f000 fcfa 	bl	800cd3a <I2C_WaitOnBTFFlagUntilTimeout>
 800c346:	4603      	mov	r3, r0
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d00d      	beq.n	800c368 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c350:	2b04      	cmp	r3, #4
 800c352:	d107      	bne.n	800c364 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	681a      	ldr	r2, [r3, #0]
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c362:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c364:	2301      	movs	r3, #1
 800c366:	e016      	b.n	800c396 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	681a      	ldr	r2, [r3, #0]
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c376:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2220      	movs	r2, #32
 800c37c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	2200      	movs	r2, #0
 800c384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	2200      	movs	r2, #0
 800c38c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c390:	2300      	movs	r3, #0
 800c392:	e000      	b.n	800c396 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800c394:	2302      	movs	r3, #2
  }
}
 800c396:	4618      	mov	r0, r3
 800c398:	3718      	adds	r7, #24
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	00100002 	.word	0x00100002
 800c3a4:	ffff0000 	.word	0xffff0000

0800c3a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b08c      	sub	sp, #48	; 0x30
 800c3ac:	af02      	add	r7, sp, #8
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	4608      	mov	r0, r1
 800c3b2:	4611      	mov	r1, r2
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	817b      	strh	r3, [r7, #10]
 800c3ba:	460b      	mov	r3, r1
 800c3bc:	813b      	strh	r3, [r7, #8]
 800c3be:	4613      	mov	r3, r2
 800c3c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c3c2:	f7fe fd21 	bl	800ae08 <HAL_GetTick>
 800c3c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3ce:	b2db      	uxtb	r3, r3
 800c3d0:	2b20      	cmp	r3, #32
 800c3d2:	f040 8208 	bne.w	800c7e6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d8:	9300      	str	r3, [sp, #0]
 800c3da:	2319      	movs	r3, #25
 800c3dc:	2201      	movs	r2, #1
 800c3de:	497b      	ldr	r1, [pc, #492]	; (800c5cc <HAL_I2C_Mem_Read+0x224>)
 800c3e0:	68f8      	ldr	r0, [r7, #12]
 800c3e2:	f000 fb93 	bl	800cb0c <I2C_WaitOnFlagUntilTimeout>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d001      	beq.n	800c3f0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800c3ec:	2302      	movs	r3, #2
 800c3ee:	e1fb      	b.n	800c7e8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3f6:	2b01      	cmp	r3, #1
 800c3f8:	d101      	bne.n	800c3fe <HAL_I2C_Mem_Read+0x56>
 800c3fa:	2302      	movs	r3, #2
 800c3fc:	e1f4      	b.n	800c7e8 <HAL_I2C_Mem_Read+0x440>
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	2201      	movs	r2, #1
 800c402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f003 0301 	and.w	r3, r3, #1
 800c410:	2b01      	cmp	r3, #1
 800c412:	d007      	beq.n	800c424 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	681a      	ldr	r2, [r3, #0]
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f042 0201 	orr.w	r2, r2, #1
 800c422:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	681a      	ldr	r2, [r3, #0]
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c432:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	2222      	movs	r2, #34	; 0x22
 800c438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	2240      	movs	r2, #64	; 0x40
 800c440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	2200      	movs	r2, #0
 800c448:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c44e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800c454:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c45a:	b29a      	uxth	r2, r3
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	4a5b      	ldr	r2, [pc, #364]	; (800c5d0 <HAL_I2C_Mem_Read+0x228>)
 800c464:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c466:	88f8      	ldrh	r0, [r7, #6]
 800c468:	893a      	ldrh	r2, [r7, #8]
 800c46a:	8979      	ldrh	r1, [r7, #10]
 800c46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46e:	9301      	str	r3, [sp, #4]
 800c470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c472:	9300      	str	r3, [sp, #0]
 800c474:	4603      	mov	r3, r0
 800c476:	68f8      	ldr	r0, [r7, #12]
 800c478:	f000 fa60 	bl	800c93c <I2C_RequestMemoryRead>
 800c47c:	4603      	mov	r3, r0
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d001      	beq.n	800c486 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800c482:	2301      	movs	r3, #1
 800c484:	e1b0      	b.n	800c7e8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d113      	bne.n	800c4b6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c48e:	2300      	movs	r3, #0
 800c490:	623b      	str	r3, [r7, #32]
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	695b      	ldr	r3, [r3, #20]
 800c498:	623b      	str	r3, [r7, #32]
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	699b      	ldr	r3, [r3, #24]
 800c4a0:	623b      	str	r3, [r7, #32]
 800c4a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	681a      	ldr	r2, [r3, #0]
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c4b2:	601a      	str	r2, [r3, #0]
 800c4b4:	e184      	b.n	800c7c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4ba:	2b01      	cmp	r3, #1
 800c4bc:	d11b      	bne.n	800c4f6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	681a      	ldr	r2, [r3, #0]
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c4cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	61fb      	str	r3, [r7, #28]
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	695b      	ldr	r3, [r3, #20]
 800c4d8:	61fb      	str	r3, [r7, #28]
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	699b      	ldr	r3, [r3, #24]
 800c4e0:	61fb      	str	r3, [r7, #28]
 800c4e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	681a      	ldr	r2, [r3, #0]
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c4f2:	601a      	str	r2, [r3, #0]
 800c4f4:	e164      	b.n	800c7c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4fa:	2b02      	cmp	r3, #2
 800c4fc:	d11b      	bne.n	800c536 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	681a      	ldr	r2, [r3, #0]
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c50c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	681a      	ldr	r2, [r3, #0]
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c51c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c51e:	2300      	movs	r3, #0
 800c520:	61bb      	str	r3, [r7, #24]
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	695b      	ldr	r3, [r3, #20]
 800c528:	61bb      	str	r3, [r7, #24]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	699b      	ldr	r3, [r3, #24]
 800c530:	61bb      	str	r3, [r7, #24]
 800c532:	69bb      	ldr	r3, [r7, #24]
 800c534:	e144      	b.n	800c7c0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c536:	2300      	movs	r3, #0
 800c538:	617b      	str	r3, [r7, #20]
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	695b      	ldr	r3, [r3, #20]
 800c540:	617b      	str	r3, [r7, #20]
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	699b      	ldr	r3, [r3, #24]
 800c548:	617b      	str	r3, [r7, #20]
 800c54a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800c54c:	e138      	b.n	800c7c0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c552:	2b03      	cmp	r3, #3
 800c554:	f200 80f1 	bhi.w	800c73a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c55c:	2b01      	cmp	r3, #1
 800c55e:	d123      	bne.n	800c5a8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c562:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c564:	68f8      	ldr	r0, [r7, #12]
 800c566:	f000 fc29 	bl	800cdbc <I2C_WaitOnRXNEFlagUntilTimeout>
 800c56a:	4603      	mov	r3, r0
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d001      	beq.n	800c574 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800c570:	2301      	movs	r3, #1
 800c572:	e139      	b.n	800c7e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	691a      	ldr	r2, [r3, #16]
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c57e:	b2d2      	uxtb	r2, r2
 800c580:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c586:	1c5a      	adds	r2, r3, #1
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c590:	3b01      	subs	r3, #1
 800c592:	b29a      	uxth	r2, r3
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c59c:	b29b      	uxth	r3, r3
 800c59e:	3b01      	subs	r3, #1
 800c5a0:	b29a      	uxth	r2, r3
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c5a6:	e10b      	b.n	800c7c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5ac:	2b02      	cmp	r3, #2
 800c5ae:	d14e      	bne.n	800c64e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b2:	9300      	str	r3, [sp, #0]
 800c5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	4906      	ldr	r1, [pc, #24]	; (800c5d4 <HAL_I2C_Mem_Read+0x22c>)
 800c5ba:	68f8      	ldr	r0, [r7, #12]
 800c5bc:	f000 faa6 	bl	800cb0c <I2C_WaitOnFlagUntilTimeout>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d008      	beq.n	800c5d8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	e10e      	b.n	800c7e8 <HAL_I2C_Mem_Read+0x440>
 800c5ca:	bf00      	nop
 800c5cc:	00100002 	.word	0x00100002
 800c5d0:	ffff0000 	.word	0xffff0000
 800c5d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	681a      	ldr	r2, [r3, #0]
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c5e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	691a      	ldr	r2, [r3, #16]
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5f2:	b2d2      	uxtb	r2, r2
 800c5f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5fa:	1c5a      	adds	r2, r3, #1
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c604:	3b01      	subs	r3, #1
 800c606:	b29a      	uxth	r2, r3
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c610:	b29b      	uxth	r3, r3
 800c612:	3b01      	subs	r3, #1
 800c614:	b29a      	uxth	r2, r3
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	691a      	ldr	r2, [r3, #16]
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c624:	b2d2      	uxtb	r2, r2
 800c626:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c62c:	1c5a      	adds	r2, r3, #1
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c636:	3b01      	subs	r3, #1
 800c638:	b29a      	uxth	r2, r3
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c642:	b29b      	uxth	r3, r3
 800c644:	3b01      	subs	r3, #1
 800c646:	b29a      	uxth	r2, r3
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c64c:	e0b8      	b.n	800c7c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c650:	9300      	str	r3, [sp, #0]
 800c652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c654:	2200      	movs	r2, #0
 800c656:	4966      	ldr	r1, [pc, #408]	; (800c7f0 <HAL_I2C_Mem_Read+0x448>)
 800c658:	68f8      	ldr	r0, [r7, #12]
 800c65a:	f000 fa57 	bl	800cb0c <I2C_WaitOnFlagUntilTimeout>
 800c65e:	4603      	mov	r3, r0
 800c660:	2b00      	cmp	r3, #0
 800c662:	d001      	beq.n	800c668 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800c664:	2301      	movs	r3, #1
 800c666:	e0bf      	b.n	800c7e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	681a      	ldr	r2, [r3, #0]
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c676:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	691a      	ldr	r2, [r3, #16]
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c682:	b2d2      	uxtb	r2, r2
 800c684:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c68a:	1c5a      	adds	r2, r3, #1
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c694:	3b01      	subs	r3, #1
 800c696:	b29a      	uxth	r2, r3
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6a0:	b29b      	uxth	r3, r3
 800c6a2:	3b01      	subs	r3, #1
 800c6a4:	b29a      	uxth	r2, r3
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ac:	9300      	str	r3, [sp, #0]
 800c6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	494f      	ldr	r1, [pc, #316]	; (800c7f0 <HAL_I2C_Mem_Read+0x448>)
 800c6b4:	68f8      	ldr	r0, [r7, #12]
 800c6b6:	f000 fa29 	bl	800cb0c <I2C_WaitOnFlagUntilTimeout>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d001      	beq.n	800c6c4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	e091      	b.n	800c7e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	681a      	ldr	r2, [r3, #0]
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c6d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	691a      	ldr	r2, [r3, #16]
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6de:	b2d2      	uxtb	r2, r2
 800c6e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6e6:	1c5a      	adds	r2, r3, #1
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6f0:	3b01      	subs	r3, #1
 800c6f2:	b29a      	uxth	r2, r3
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6fc:	b29b      	uxth	r3, r3
 800c6fe:	3b01      	subs	r3, #1
 800c700:	b29a      	uxth	r2, r3
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	691a      	ldr	r2, [r3, #16]
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c710:	b2d2      	uxtb	r2, r2
 800c712:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c718:	1c5a      	adds	r2, r3, #1
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c722:	3b01      	subs	r3, #1
 800c724:	b29a      	uxth	r2, r3
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c72e:	b29b      	uxth	r3, r3
 800c730:	3b01      	subs	r3, #1
 800c732:	b29a      	uxth	r2, r3
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c738:	e042      	b.n	800c7c0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c73a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c73c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c73e:	68f8      	ldr	r0, [r7, #12]
 800c740:	f000 fb3c 	bl	800cdbc <I2C_WaitOnRXNEFlagUntilTimeout>
 800c744:	4603      	mov	r3, r0
 800c746:	2b00      	cmp	r3, #0
 800c748:	d001      	beq.n	800c74e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800c74a:	2301      	movs	r3, #1
 800c74c:	e04c      	b.n	800c7e8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	691a      	ldr	r2, [r3, #16]
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c758:	b2d2      	uxtb	r2, r2
 800c75a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c760:	1c5a      	adds	r2, r3, #1
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c76a:	3b01      	subs	r3, #1
 800c76c:	b29a      	uxth	r2, r3
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c776:	b29b      	uxth	r3, r3
 800c778:	3b01      	subs	r3, #1
 800c77a:	b29a      	uxth	r2, r3
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	695b      	ldr	r3, [r3, #20]
 800c786:	f003 0304 	and.w	r3, r3, #4
 800c78a:	2b04      	cmp	r3, #4
 800c78c:	d118      	bne.n	800c7c0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	691a      	ldr	r2, [r3, #16]
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c798:	b2d2      	uxtb	r2, r2
 800c79a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a0:	1c5a      	adds	r2, r3, #1
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c7aa:	3b01      	subs	r3, #1
 800c7ac:	b29a      	uxth	r2, r3
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7b6:	b29b      	uxth	r3, r3
 800c7b8:	3b01      	subs	r3, #1
 800c7ba:	b29a      	uxth	r2, r3
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	f47f aec2 	bne.w	800c54e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	2220      	movs	r2, #32
 800c7ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	e000      	b.n	800c7e8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800c7e6:	2302      	movs	r3, #2
  }
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3728      	adds	r7, #40	; 0x28
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}
 800c7f0:	00010004 	.word	0x00010004

0800c7f4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b083      	sub	sp, #12
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c802:	b2db      	uxtb	r3, r3
}
 800c804:	4618      	mov	r0, r3
 800c806:	370c      	adds	r7, #12
 800c808:	46bd      	mov	sp, r7
 800c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80e:	4770      	bx	lr

0800c810 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b088      	sub	sp, #32
 800c814:	af02      	add	r7, sp, #8
 800c816:	60f8      	str	r0, [r7, #12]
 800c818:	4608      	mov	r0, r1
 800c81a:	4611      	mov	r1, r2
 800c81c:	461a      	mov	r2, r3
 800c81e:	4603      	mov	r3, r0
 800c820:	817b      	strh	r3, [r7, #10]
 800c822:	460b      	mov	r3, r1
 800c824:	813b      	strh	r3, [r7, #8]
 800c826:	4613      	mov	r3, r2
 800c828:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	681a      	ldr	r2, [r3, #0]
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c838:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c83c:	9300      	str	r3, [sp, #0]
 800c83e:	6a3b      	ldr	r3, [r7, #32]
 800c840:	2200      	movs	r2, #0
 800c842:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c846:	68f8      	ldr	r0, [r7, #12]
 800c848:	f000 f960 	bl	800cb0c <I2C_WaitOnFlagUntilTimeout>
 800c84c:	4603      	mov	r3, r0
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d00d      	beq.n	800c86e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c85c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c860:	d103      	bne.n	800c86a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c868:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c86a:	2303      	movs	r3, #3
 800c86c:	e05f      	b.n	800c92e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c86e:	897b      	ldrh	r3, [r7, #10]
 800c870:	b2db      	uxtb	r3, r3
 800c872:	461a      	mov	r2, r3
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c87c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c880:	6a3a      	ldr	r2, [r7, #32]
 800c882:	492d      	ldr	r1, [pc, #180]	; (800c938 <I2C_RequestMemoryWrite+0x128>)
 800c884:	68f8      	ldr	r0, [r7, #12]
 800c886:	f000 f998 	bl	800cbba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c88a:	4603      	mov	r3, r0
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d001      	beq.n	800c894 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800c890:	2301      	movs	r3, #1
 800c892:	e04c      	b.n	800c92e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c894:	2300      	movs	r3, #0
 800c896:	617b      	str	r3, [r7, #20]
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	695b      	ldr	r3, [r3, #20]
 800c89e:	617b      	str	r3, [r7, #20]
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	699b      	ldr	r3, [r3, #24]
 800c8a6:	617b      	str	r3, [r7, #20]
 800c8a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c8aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8ac:	6a39      	ldr	r1, [r7, #32]
 800c8ae:	68f8      	ldr	r0, [r7, #12]
 800c8b0:	f000 fa02 	bl	800ccb8 <I2C_WaitOnTXEFlagUntilTimeout>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d00d      	beq.n	800c8d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8be:	2b04      	cmp	r3, #4
 800c8c0:	d107      	bne.n	800c8d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	681a      	ldr	r2, [r3, #0]
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c8d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	e02b      	b.n	800c92e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c8d6:	88fb      	ldrh	r3, [r7, #6]
 800c8d8:	2b01      	cmp	r3, #1
 800c8da:	d105      	bne.n	800c8e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c8dc:	893b      	ldrh	r3, [r7, #8]
 800c8de:	b2da      	uxtb	r2, r3
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	611a      	str	r2, [r3, #16]
 800c8e6:	e021      	b.n	800c92c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800c8e8:	893b      	ldrh	r3, [r7, #8]
 800c8ea:	0a1b      	lsrs	r3, r3, #8
 800c8ec:	b29b      	uxth	r3, r3
 800c8ee:	b2da      	uxtb	r2, r3
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c8f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8f8:	6a39      	ldr	r1, [r7, #32]
 800c8fa:	68f8      	ldr	r0, [r7, #12]
 800c8fc:	f000 f9dc 	bl	800ccb8 <I2C_WaitOnTXEFlagUntilTimeout>
 800c900:	4603      	mov	r3, r0
 800c902:	2b00      	cmp	r3, #0
 800c904:	d00d      	beq.n	800c922 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c90a:	2b04      	cmp	r3, #4
 800c90c:	d107      	bne.n	800c91e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	681a      	ldr	r2, [r3, #0]
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c91c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c91e:	2301      	movs	r3, #1
 800c920:	e005      	b.n	800c92e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c922:	893b      	ldrh	r3, [r7, #8]
 800c924:	b2da      	uxtb	r2, r3
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800c92c:	2300      	movs	r3, #0
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3718      	adds	r7, #24
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}
 800c936:	bf00      	nop
 800c938:	00010002 	.word	0x00010002

0800c93c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b088      	sub	sp, #32
 800c940:	af02      	add	r7, sp, #8
 800c942:	60f8      	str	r0, [r7, #12]
 800c944:	4608      	mov	r0, r1
 800c946:	4611      	mov	r1, r2
 800c948:	461a      	mov	r2, r3
 800c94a:	4603      	mov	r3, r0
 800c94c:	817b      	strh	r3, [r7, #10]
 800c94e:	460b      	mov	r3, r1
 800c950:	813b      	strh	r3, [r7, #8]
 800c952:	4613      	mov	r3, r2
 800c954:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	681a      	ldr	r2, [r3, #0]
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c964:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	681a      	ldr	r2, [r3, #0]
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c974:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c978:	9300      	str	r3, [sp, #0]
 800c97a:	6a3b      	ldr	r3, [r7, #32]
 800c97c:	2200      	movs	r2, #0
 800c97e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c982:	68f8      	ldr	r0, [r7, #12]
 800c984:	f000 f8c2 	bl	800cb0c <I2C_WaitOnFlagUntilTimeout>
 800c988:	4603      	mov	r3, r0
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d00d      	beq.n	800c9aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c99c:	d103      	bne.n	800c9a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c9a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c9a6:	2303      	movs	r3, #3
 800c9a8:	e0aa      	b.n	800cb00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c9aa:	897b      	ldrh	r3, [r7, #10]
 800c9ac:	b2db      	uxtb	r3, r3
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c9b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9bc:	6a3a      	ldr	r2, [r7, #32]
 800c9be:	4952      	ldr	r1, [pc, #328]	; (800cb08 <I2C_RequestMemoryRead+0x1cc>)
 800c9c0:	68f8      	ldr	r0, [r7, #12]
 800c9c2:	f000 f8fa 	bl	800cbba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d001      	beq.n	800c9d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	e097      	b.n	800cb00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	617b      	str	r3, [r7, #20]
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	695b      	ldr	r3, [r3, #20]
 800c9da:	617b      	str	r3, [r7, #20]
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	699b      	ldr	r3, [r3, #24]
 800c9e2:	617b      	str	r3, [r7, #20]
 800c9e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c9e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9e8:	6a39      	ldr	r1, [r7, #32]
 800c9ea:	68f8      	ldr	r0, [r7, #12]
 800c9ec:	f000 f964 	bl	800ccb8 <I2C_WaitOnTXEFlagUntilTimeout>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d00d      	beq.n	800ca12 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9fa:	2b04      	cmp	r3, #4
 800c9fc:	d107      	bne.n	800ca0e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	681a      	ldr	r2, [r3, #0]
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ca0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ca0e:	2301      	movs	r3, #1
 800ca10:	e076      	b.n	800cb00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ca12:	88fb      	ldrh	r3, [r7, #6]
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	d105      	bne.n	800ca24 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ca18:	893b      	ldrh	r3, [r7, #8]
 800ca1a:	b2da      	uxtb	r2, r3
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	611a      	str	r2, [r3, #16]
 800ca22:	e021      	b.n	800ca68 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ca24:	893b      	ldrh	r3, [r7, #8]
 800ca26:	0a1b      	lsrs	r3, r3, #8
 800ca28:	b29b      	uxth	r3, r3
 800ca2a:	b2da      	uxtb	r2, r3
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ca32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca34:	6a39      	ldr	r1, [r7, #32]
 800ca36:	68f8      	ldr	r0, [r7, #12]
 800ca38:	f000 f93e 	bl	800ccb8 <I2C_WaitOnTXEFlagUntilTimeout>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d00d      	beq.n	800ca5e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca46:	2b04      	cmp	r3, #4
 800ca48:	d107      	bne.n	800ca5a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	681a      	ldr	r2, [r3, #0]
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ca58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	e050      	b.n	800cb00 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ca5e:	893b      	ldrh	r3, [r7, #8]
 800ca60:	b2da      	uxtb	r2, r3
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ca68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca6a:	6a39      	ldr	r1, [r7, #32]
 800ca6c:	68f8      	ldr	r0, [r7, #12]
 800ca6e:	f000 f923 	bl	800ccb8 <I2C_WaitOnTXEFlagUntilTimeout>
 800ca72:	4603      	mov	r3, r0
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d00d      	beq.n	800ca94 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca7c:	2b04      	cmp	r3, #4
 800ca7e:	d107      	bne.n	800ca90 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	681a      	ldr	r2, [r3, #0]
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ca8e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ca90:	2301      	movs	r3, #1
 800ca92:	e035      	b.n	800cb00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	681a      	ldr	r2, [r3, #0]
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800caa2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800caa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa6:	9300      	str	r3, [sp, #0]
 800caa8:	6a3b      	ldr	r3, [r7, #32]
 800caaa:	2200      	movs	r2, #0
 800caac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800cab0:	68f8      	ldr	r0, [r7, #12]
 800cab2:	f000 f82b 	bl	800cb0c <I2C_WaitOnFlagUntilTimeout>
 800cab6:	4603      	mov	r3, r0
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d00d      	beq.n	800cad8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800caca:	d103      	bne.n	800cad4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cad2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800cad4:	2303      	movs	r3, #3
 800cad6:	e013      	b.n	800cb00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800cad8:	897b      	ldrh	r3, [r7, #10]
 800cada:	b2db      	uxtb	r3, r3
 800cadc:	f043 0301 	orr.w	r3, r3, #1
 800cae0:	b2da      	uxtb	r2, r3
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800cae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caea:	6a3a      	ldr	r2, [r7, #32]
 800caec:	4906      	ldr	r1, [pc, #24]	; (800cb08 <I2C_RequestMemoryRead+0x1cc>)
 800caee:	68f8      	ldr	r0, [r7, #12]
 800caf0:	f000 f863 	bl	800cbba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800caf4:	4603      	mov	r3, r0
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d001      	beq.n	800cafe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800cafa:	2301      	movs	r3, #1
 800cafc:	e000      	b.n	800cb00 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800cafe:	2300      	movs	r3, #0
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3718      	adds	r7, #24
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}
 800cb08:	00010002 	.word	0x00010002

0800cb0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b084      	sub	sp, #16
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	60f8      	str	r0, [r7, #12]
 800cb14:	60b9      	str	r1, [r7, #8]
 800cb16:	603b      	str	r3, [r7, #0]
 800cb18:	4613      	mov	r3, r2
 800cb1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cb1c:	e025      	b.n	800cb6a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb24:	d021      	beq.n	800cb6a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cb26:	f7fe f96f 	bl	800ae08 <HAL_GetTick>
 800cb2a:	4602      	mov	r2, r0
 800cb2c:	69bb      	ldr	r3, [r7, #24]
 800cb2e:	1ad3      	subs	r3, r2, r3
 800cb30:	683a      	ldr	r2, [r7, #0]
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d302      	bcc.n	800cb3c <I2C_WaitOnFlagUntilTimeout+0x30>
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d116      	bne.n	800cb6a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2220      	movs	r2, #32
 800cb46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb56:	f043 0220 	orr.w	r2, r3, #32
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	2200      	movs	r2, #0
 800cb62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cb66:	2301      	movs	r3, #1
 800cb68:	e023      	b.n	800cbb2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	0c1b      	lsrs	r3, r3, #16
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	d10d      	bne.n	800cb90 <I2C_WaitOnFlagUntilTimeout+0x84>
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	695b      	ldr	r3, [r3, #20]
 800cb7a:	43da      	mvns	r2, r3
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	4013      	ands	r3, r2
 800cb80:	b29b      	uxth	r3, r3
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	bf0c      	ite	eq
 800cb86:	2301      	moveq	r3, #1
 800cb88:	2300      	movne	r3, #0
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	e00c      	b.n	800cbaa <I2C_WaitOnFlagUntilTimeout+0x9e>
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	699b      	ldr	r3, [r3, #24]
 800cb96:	43da      	mvns	r2, r3
 800cb98:	68bb      	ldr	r3, [r7, #8]
 800cb9a:	4013      	ands	r3, r2
 800cb9c:	b29b      	uxth	r3, r3
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	bf0c      	ite	eq
 800cba2:	2301      	moveq	r3, #1
 800cba4:	2300      	movne	r3, #0
 800cba6:	b2db      	uxtb	r3, r3
 800cba8:	461a      	mov	r2, r3
 800cbaa:	79fb      	ldrb	r3, [r7, #7]
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d0b6      	beq.n	800cb1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cbb0:	2300      	movs	r3, #0
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3710      	adds	r7, #16
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}

0800cbba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800cbba:	b580      	push	{r7, lr}
 800cbbc:	b084      	sub	sp, #16
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	60f8      	str	r0, [r7, #12]
 800cbc2:	60b9      	str	r1, [r7, #8]
 800cbc4:	607a      	str	r2, [r7, #4]
 800cbc6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800cbc8:	e051      	b.n	800cc6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	695b      	ldr	r3, [r3, #20]
 800cbd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cbd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cbd8:	d123      	bne.n	800cc22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	681a      	ldr	r2, [r3, #0]
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cbe8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800cbf2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	2220      	movs	r2, #32
 800cbfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	2200      	movs	r2, #0
 800cc06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc0e:	f043 0204 	orr.w	r2, r3, #4
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800cc1e:	2301      	movs	r3, #1
 800cc20:	e046      	b.n	800ccb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc28:	d021      	beq.n	800cc6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc2a:	f7fe f8ed 	bl	800ae08 <HAL_GetTick>
 800cc2e:	4602      	mov	r2, r0
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	1ad3      	subs	r3, r2, r3
 800cc34:	687a      	ldr	r2, [r7, #4]
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d302      	bcc.n	800cc40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d116      	bne.n	800cc6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2200      	movs	r2, #0
 800cc44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	2220      	movs	r2, #32
 800cc4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	2200      	movs	r2, #0
 800cc52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc5a:	f043 0220 	orr.w	r2, r3, #32
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2200      	movs	r2, #0
 800cc66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	e020      	b.n	800ccb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	0c1b      	lsrs	r3, r3, #16
 800cc72:	b2db      	uxtb	r3, r3
 800cc74:	2b01      	cmp	r3, #1
 800cc76:	d10c      	bne.n	800cc92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	695b      	ldr	r3, [r3, #20]
 800cc7e:	43da      	mvns	r2, r3
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	4013      	ands	r3, r2
 800cc84:	b29b      	uxth	r3, r3
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	bf14      	ite	ne
 800cc8a:	2301      	movne	r3, #1
 800cc8c:	2300      	moveq	r3, #0
 800cc8e:	b2db      	uxtb	r3, r3
 800cc90:	e00b      	b.n	800ccaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	699b      	ldr	r3, [r3, #24]
 800cc98:	43da      	mvns	r2, r3
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	4013      	ands	r3, r2
 800cc9e:	b29b      	uxth	r3, r3
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	bf14      	ite	ne
 800cca4:	2301      	movne	r3, #1
 800cca6:	2300      	moveq	r3, #0
 800cca8:	b2db      	uxtb	r3, r3
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d18d      	bne.n	800cbca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800ccae:	2300      	movs	r3, #0
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3710      	adds	r7, #16
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}

0800ccb8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b084      	sub	sp, #16
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	60f8      	str	r0, [r7, #12]
 800ccc0:	60b9      	str	r1, [r7, #8]
 800ccc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ccc4:	e02d      	b.n	800cd22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ccc6:	68f8      	ldr	r0, [r7, #12]
 800ccc8:	f000 f8ce 	bl	800ce68 <I2C_IsAcknowledgeFailed>
 800cccc:	4603      	mov	r3, r0
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d001      	beq.n	800ccd6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	e02d      	b.n	800cd32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccdc:	d021      	beq.n	800cd22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ccde:	f7fe f893 	bl	800ae08 <HAL_GetTick>
 800cce2:	4602      	mov	r2, r0
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	1ad3      	subs	r3, r2, r3
 800cce8:	68ba      	ldr	r2, [r7, #8]
 800ccea:	429a      	cmp	r2, r3
 800ccec:	d302      	bcc.n	800ccf4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d116      	bne.n	800cd22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	2220      	movs	r2, #32
 800ccfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	2200      	movs	r2, #0
 800cd06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd0e:	f043 0220 	orr.w	r2, r3, #32
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cd1e:	2301      	movs	r3, #1
 800cd20:	e007      	b.n	800cd32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	695b      	ldr	r3, [r3, #20]
 800cd28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd2c:	2b80      	cmp	r3, #128	; 0x80
 800cd2e:	d1ca      	bne.n	800ccc6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800cd30:	2300      	movs	r3, #0
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3710      	adds	r7, #16
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}

0800cd3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cd3a:	b580      	push	{r7, lr}
 800cd3c:	b084      	sub	sp, #16
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	60f8      	str	r0, [r7, #12]
 800cd42:	60b9      	str	r1, [r7, #8]
 800cd44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800cd46:	e02d      	b.n	800cda4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800cd48:	68f8      	ldr	r0, [r7, #12]
 800cd4a:	f000 f88d 	bl	800ce68 <I2C_IsAcknowledgeFailed>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d001      	beq.n	800cd58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800cd54:	2301      	movs	r3, #1
 800cd56:	e02d      	b.n	800cdb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd5e:	d021      	beq.n	800cda4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd60:	f7fe f852 	bl	800ae08 <HAL_GetTick>
 800cd64:	4602      	mov	r2, r0
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	1ad3      	subs	r3, r2, r3
 800cd6a:	68ba      	ldr	r2, [r7, #8]
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d302      	bcc.n	800cd76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d116      	bne.n	800cda4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	2220      	movs	r2, #32
 800cd80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2200      	movs	r2, #0
 800cd88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd90:	f043 0220 	orr.w	r2, r3, #32
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cda0:	2301      	movs	r3, #1
 800cda2:	e007      	b.n	800cdb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	695b      	ldr	r3, [r3, #20]
 800cdaa:	f003 0304 	and.w	r3, r3, #4
 800cdae:	2b04      	cmp	r3, #4
 800cdb0:	d1ca      	bne.n	800cd48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800cdb2:	2300      	movs	r3, #0
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3710      	adds	r7, #16
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b084      	sub	sp, #16
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	60f8      	str	r0, [r7, #12]
 800cdc4:	60b9      	str	r1, [r7, #8]
 800cdc6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800cdc8:	e042      	b.n	800ce50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	695b      	ldr	r3, [r3, #20]
 800cdd0:	f003 0310 	and.w	r3, r3, #16
 800cdd4:	2b10      	cmp	r3, #16
 800cdd6:	d119      	bne.n	800ce0c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f06f 0210 	mvn.w	r2, #16
 800cde0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	2200      	movs	r2, #0
 800cde6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	2220      	movs	r2, #32
 800cdec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	2200      	movs	r2, #0
 800ce04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ce08:	2301      	movs	r3, #1
 800ce0a:	e029      	b.n	800ce60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce0c:	f7fd fffc 	bl	800ae08 <HAL_GetTick>
 800ce10:	4602      	mov	r2, r0
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	1ad3      	subs	r3, r2, r3
 800ce16:	68ba      	ldr	r2, [r7, #8]
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	d302      	bcc.n	800ce22 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d116      	bne.n	800ce50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	2200      	movs	r2, #0
 800ce26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	2220      	movs	r2, #32
 800ce2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	2200      	movs	r2, #0
 800ce34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce3c:	f043 0220 	orr.w	r2, r3, #32
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	2200      	movs	r2, #0
 800ce48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	e007      	b.n	800ce60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	695b      	ldr	r3, [r3, #20]
 800ce56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce5a:	2b40      	cmp	r3, #64	; 0x40
 800ce5c:	d1b5      	bne.n	800cdca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ce5e:	2300      	movs	r3, #0
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3710      	adds	r7, #16
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ce68:	b480      	push	{r7}
 800ce6a:	b083      	sub	sp, #12
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	695b      	ldr	r3, [r3, #20]
 800ce76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ce7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce7e:	d11b      	bne.n	800ceb8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ce88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2220      	movs	r2, #32
 800ce94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cea4:	f043 0204 	orr.w	r2, r3, #4
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2200      	movs	r2, #0
 800ceb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	e000      	b.n	800ceba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ceb8:	2300      	movs	r3, #0
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	370c      	adds	r7, #12
 800cebe:	46bd      	mov	sp, r7
 800cec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec4:	4770      	bx	lr

0800cec6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800cec6:	b480      	push	{r7}
 800cec8:	b083      	sub	sp, #12
 800ceca:	af00      	add	r7, sp, #0
 800cecc:	6078      	str	r0, [r7, #4]
 800cece:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ced6:	b2db      	uxtb	r3, r3
 800ced8:	2b20      	cmp	r3, #32
 800ceda:	d129      	bne.n	800cf30 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2224      	movs	r2, #36	; 0x24
 800cee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	681a      	ldr	r2, [r3, #0]
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f022 0201 	bic.w	r2, r2, #1
 800cef2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f022 0210 	bic.w	r2, r2, #16
 800cf02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	683a      	ldr	r2, [r7, #0]
 800cf10:	430a      	orrs	r2, r1
 800cf12:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	681a      	ldr	r2, [r3, #0]
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f042 0201 	orr.w	r2, r2, #1
 800cf22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2220      	movs	r2, #32
 800cf28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	e000      	b.n	800cf32 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800cf30:	2302      	movs	r3, #2
  }
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	370c      	adds	r7, #12
 800cf36:	46bd      	mov	sp, r7
 800cf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3c:	4770      	bx	lr

0800cf3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800cf3e:	b480      	push	{r7}
 800cf40:	b085      	sub	sp, #20
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	6078      	str	r0, [r7, #4]
 800cf46:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf52:	b2db      	uxtb	r3, r3
 800cf54:	2b20      	cmp	r3, #32
 800cf56:	d12a      	bne.n	800cfae <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2224      	movs	r2, #36	; 0x24
 800cf5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	681a      	ldr	r2, [r3, #0]
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f022 0201 	bic.w	r2, r2, #1
 800cf6e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf76:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800cf78:	89fb      	ldrh	r3, [r7, #14]
 800cf7a:	f023 030f 	bic.w	r3, r3, #15
 800cf7e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	b29a      	uxth	r2, r3
 800cf84:	89fb      	ldrh	r3, [r7, #14]
 800cf86:	4313      	orrs	r3, r2
 800cf88:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	89fa      	ldrh	r2, [r7, #14]
 800cf90:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	681a      	ldr	r2, [r3, #0]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f042 0201 	orr.w	r2, r2, #1
 800cfa0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2220      	movs	r2, #32
 800cfa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	e000      	b.n	800cfb0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800cfae:	2302      	movs	r3, #2
  }
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3714      	adds	r7, #20
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfba:	4770      	bx	lr

0800cfbc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b084      	sub	sp, #16
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d101      	bne.n	800cfce <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800cfca:	2301      	movs	r3, #1
 800cfcc:	e0bf      	b.n	800d14e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800cfd4:	b2db      	uxtb	r3, r3
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d106      	bne.n	800cfe8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2200      	movs	r2, #0
 800cfde:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f7fa fc56 	bl	8007894 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2202      	movs	r2, #2
 800cfec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	699a      	ldr	r2, [r3, #24]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800cffe:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	6999      	ldr	r1, [r3, #24]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	685a      	ldr	r2, [r3, #4]
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	689b      	ldr	r3, [r3, #8]
 800d00e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d014:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	691b      	ldr	r3, [r3, #16]
 800d01a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	430a      	orrs	r2, r1
 800d022:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	6899      	ldr	r1, [r3, #8]
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681a      	ldr	r2, [r3, #0]
 800d02e:	4b4a      	ldr	r3, [pc, #296]	; (800d158 <HAL_LTDC_Init+0x19c>)
 800d030:	400b      	ands	r3, r1
 800d032:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	695b      	ldr	r3, [r3, #20]
 800d038:	041b      	lsls	r3, r3, #16
 800d03a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	6899      	ldr	r1, [r3, #8]
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	699a      	ldr	r2, [r3, #24]
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	431a      	orrs	r2, r3
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	430a      	orrs	r2, r1
 800d050:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	68d9      	ldr	r1, [r3, #12]
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681a      	ldr	r2, [r3, #0]
 800d05c:	4b3e      	ldr	r3, [pc, #248]	; (800d158 <HAL_LTDC_Init+0x19c>)
 800d05e:	400b      	ands	r3, r1
 800d060:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	69db      	ldr	r3, [r3, #28]
 800d066:	041b      	lsls	r3, r3, #16
 800d068:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	68d9      	ldr	r1, [r3, #12]
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6a1a      	ldr	r2, [r3, #32]
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	431a      	orrs	r2, r3
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	430a      	orrs	r2, r1
 800d07e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	6919      	ldr	r1, [r3, #16]
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681a      	ldr	r2, [r3, #0]
 800d08a:	4b33      	ldr	r3, [pc, #204]	; (800d158 <HAL_LTDC_Init+0x19c>)
 800d08c:	400b      	ands	r3, r1
 800d08e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d094:	041b      	lsls	r3, r3, #16
 800d096:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	6919      	ldr	r1, [r3, #16]
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	431a      	orrs	r2, r3
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	430a      	orrs	r2, r1
 800d0ac:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	6959      	ldr	r1, [r3, #20]
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681a      	ldr	r2, [r3, #0]
 800d0b8:	4b27      	ldr	r3, [pc, #156]	; (800d158 <HAL_LTDC_Init+0x19c>)
 800d0ba:	400b      	ands	r3, r1
 800d0bc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0c2:	041b      	lsls	r3, r3, #16
 800d0c4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	6959      	ldr	r1, [r3, #20]
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	431a      	orrs	r2, r3
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	430a      	orrs	r2, r1
 800d0da:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d0e2:	021b      	lsls	r3, r3, #8
 800d0e4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d0ec:	041b      	lsls	r3, r3, #16
 800d0ee:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800d0fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800d106:	68ba      	ldr	r2, [r7, #8]
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	4313      	orrs	r3, r2
 800d10c:	687a      	ldr	r2, [r7, #4]
 800d10e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800d112:	431a      	orrs	r2, r3
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	430a      	orrs	r2, r1
 800d11a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f042 0206 	orr.w	r2, r2, #6
 800d12a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	699a      	ldr	r2, [r3, #24]
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	f042 0201 	orr.w	r2, r2, #1
 800d13a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2200      	movs	r2, #0
 800d140:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2201      	movs	r2, #1
 800d148:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800d14c:	2300      	movs	r3, #0
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3710      	adds	r7, #16
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}
 800d156:	bf00      	nop
 800d158:	f000f800 	.word	0xf000f800

0800d15c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800d15c:	b5b0      	push	{r4, r5, r7, lr}
 800d15e:	b084      	sub	sp, #16
 800d160:	af00      	add	r7, sp, #0
 800d162:	60f8      	str	r0, [r7, #12]
 800d164:	60b9      	str	r1, [r7, #8]
 800d166:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800d16e:	2b01      	cmp	r3, #1
 800d170:	d101      	bne.n	800d176 <HAL_LTDC_ConfigLayer+0x1a>
 800d172:	2302      	movs	r3, #2
 800d174:	e02c      	b.n	800d1d0 <HAL_LTDC_ConfigLayer+0x74>
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	2201      	movs	r2, #1
 800d17a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	2202      	movs	r2, #2
 800d182:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800d186:	68fa      	ldr	r2, [r7, #12]
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2134      	movs	r1, #52	; 0x34
 800d18c:	fb01 f303 	mul.w	r3, r1, r3
 800d190:	4413      	add	r3, r2
 800d192:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	4614      	mov	r4, r2
 800d19a:	461d      	mov	r5, r3
 800d19c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d19e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d1a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d1a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d1a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d1a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d1a8:	682b      	ldr	r3, [r5, #0]
 800d1aa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800d1ac:	687a      	ldr	r2, [r7, #4]
 800d1ae:	68b9      	ldr	r1, [r7, #8]
 800d1b0:	68f8      	ldr	r0, [r7, #12]
 800d1b2:	f000 f8b9 	bl	800d328 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	2201      	movs	r2, #1
 800d1c2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800d1ce:	2300      	movs	r3, #0
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	3710      	adds	r7, #16
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bdb0      	pop	{r4, r5, r7, pc}

0800d1d8 <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b085      	sub	sp, #20
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	60f8      	str	r0, [r7, #12]
 800d1e0:	60b9      	str	r1, [r7, #8]
 800d1e2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800d1ea:	2b01      	cmp	r3, #1
 800d1ec:	d101      	bne.n	800d1f2 <HAL_LTDC_ConfigColorKeying+0x1a>
 800d1ee:	2302      	movs	r3, #2
 800d1f0:	e030      	b.n	800d254 <HAL_LTDC_ConfigColorKeying+0x7c>
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	2201      	movs	r2, #1
 800d1f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	2202      	movs	r2, #2
 800d1fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	461a      	mov	r2, r3
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	01db      	lsls	r3, r3, #7
 800d20c:	4413      	add	r3, r2
 800d20e:	3384      	adds	r3, #132	; 0x84
 800d210:	68db      	ldr	r3, [r3, #12]
 800d212:	68fa      	ldr	r2, [r7, #12]
 800d214:	6812      	ldr	r2, [r2, #0]
 800d216:	4611      	mov	r1, r2
 800d218:	687a      	ldr	r2, [r7, #4]
 800d21a:	01d2      	lsls	r2, r2, #7
 800d21c:	440a      	add	r2, r1
 800d21e:	3284      	adds	r2, #132	; 0x84
 800d220:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d224:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	461a      	mov	r2, r3
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	01db      	lsls	r3, r3, #7
 800d230:	4413      	add	r3, r2
 800d232:	3384      	adds	r3, #132	; 0x84
 800d234:	461a      	mov	r2, r3
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	2201      	movs	r2, #1
 800d240:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	2201      	movs	r2, #1
 800d246:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	2200      	movs	r2, #0
 800d24e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800d252:	2300      	movs	r3, #0
}
 800d254:	4618      	mov	r0, r3
 800d256:	3714      	adds	r7, #20
 800d258:	46bd      	mov	sp, r7
 800d25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25e:	4770      	bx	lr

0800d260 <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 800d260:	b480      	push	{r7}
 800d262:	b083      	sub	sp, #12
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
 800d268:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800d270:	2b01      	cmp	r3, #1
 800d272:	d101      	bne.n	800d278 <HAL_LTDC_EnableColorKeying+0x18>
 800d274:	2302      	movs	r3, #2
 800d276:	e026      	b.n	800d2c6 <HAL_LTDC_EnableColorKeying+0x66>
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2201      	movs	r2, #1
 800d27c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2202      	movs	r2, #2
 800d284:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	461a      	mov	r2, r3
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	01db      	lsls	r3, r3, #7
 800d292:	4413      	add	r3, r2
 800d294:	3384      	adds	r3, #132	; 0x84
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	687a      	ldr	r2, [r7, #4]
 800d29a:	6812      	ldr	r2, [r2, #0]
 800d29c:	4611      	mov	r1, r2
 800d29e:	683a      	ldr	r2, [r7, #0]
 800d2a0:	01d2      	lsls	r2, r2, #7
 800d2a2:	440a      	add	r2, r1
 800d2a4:	3284      	adds	r2, #132	; 0x84
 800d2a6:	f043 0302 	orr.w	r3, r3, #2
 800d2aa:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	2201      	movs	r2, #1
 800d2b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2201      	movs	r2, #1
 800d2b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800d2c4:	2300      	movs	r3, #0
}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	370c      	adds	r7, #12
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d0:	4770      	bx	lr
	...

0800d2d4 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b083      	sub	sp, #12
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800d2e2:	2b01      	cmp	r3, #1
 800d2e4:	d101      	bne.n	800d2ea <HAL_LTDC_EnableDither+0x16>
 800d2e6:	2302      	movs	r3, #2
 800d2e8:	e016      	b.n	800d318 <HAL_LTDC_EnableDither+0x44>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2201      	movs	r2, #1
 800d2ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2202      	movs	r2, #2
 800d2f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800d2fa:	4b0a      	ldr	r3, [pc, #40]	; (800d324 <HAL_LTDC_EnableDither+0x50>)
 800d2fc:	699b      	ldr	r3, [r3, #24]
 800d2fe:	4a09      	ldr	r2, [pc, #36]	; (800d324 <HAL_LTDC_EnableDither+0x50>)
 800d300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d304:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2201      	movs	r2, #1
 800d30a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2200      	movs	r2, #0
 800d312:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800d316:	2300      	movs	r3, #0
}
 800d318:	4618      	mov	r0, r3
 800d31a:	370c      	adds	r7, #12
 800d31c:	46bd      	mov	sp, r7
 800d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d322:	4770      	bx	lr
 800d324:	40016800 	.word	0x40016800

0800d328 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800d328:	b480      	push	{r7}
 800d32a:	b089      	sub	sp, #36	; 0x24
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	60f8      	str	r0, [r7, #12]
 800d330:	60b9      	str	r1, [r7, #8]
 800d332:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	685a      	ldr	r2, [r3, #4]
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	68db      	ldr	r3, [r3, #12]
 800d33e:	0c1b      	lsrs	r3, r3, #16
 800d340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d344:	4413      	add	r3, r2
 800d346:	041b      	lsls	r3, r3, #16
 800d348:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	461a      	mov	r2, r3
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	01db      	lsls	r3, r3, #7
 800d354:	4413      	add	r3, r2
 800d356:	3384      	adds	r3, #132	; 0x84
 800d358:	685b      	ldr	r3, [r3, #4]
 800d35a:	68fa      	ldr	r2, [r7, #12]
 800d35c:	6812      	ldr	r2, [r2, #0]
 800d35e:	4611      	mov	r1, r2
 800d360:	687a      	ldr	r2, [r7, #4]
 800d362:	01d2      	lsls	r2, r2, #7
 800d364:	440a      	add	r2, r1
 800d366:	3284      	adds	r2, #132	; 0x84
 800d368:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800d36c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	68db      	ldr	r3, [r3, #12]
 800d378:	0c1b      	lsrs	r3, r3, #16
 800d37a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800d37e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800d380:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	4619      	mov	r1, r3
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	01db      	lsls	r3, r3, #7
 800d38c:	440b      	add	r3, r1
 800d38e:	3384      	adds	r3, #132	; 0x84
 800d390:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800d392:	69fb      	ldr	r3, [r7, #28]
 800d394:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800d396:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	68da      	ldr	r2, [r3, #12]
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	68db      	ldr	r3, [r3, #12]
 800d3a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d3a6:	4413      	add	r3, r2
 800d3a8:	041b      	lsls	r3, r3, #16
 800d3aa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	461a      	mov	r2, r3
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	01db      	lsls	r3, r3, #7
 800d3b6:	4413      	add	r3, r2
 800d3b8:	3384      	adds	r3, #132	; 0x84
 800d3ba:	689b      	ldr	r3, [r3, #8]
 800d3bc:	68fa      	ldr	r2, [r7, #12]
 800d3be:	6812      	ldr	r2, [r2, #0]
 800d3c0:	4611      	mov	r1, r2
 800d3c2:	687a      	ldr	r2, [r7, #4]
 800d3c4:	01d2      	lsls	r2, r2, #7
 800d3c6:	440a      	add	r2, r1
 800d3c8:	3284      	adds	r2, #132	; 0x84
 800d3ca:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800d3ce:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	689a      	ldr	r2, [r3, #8]
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	68db      	ldr	r3, [r3, #12]
 800d3da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d3de:	4413      	add	r3, r2
 800d3e0:	1c5a      	adds	r2, r3, #1
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	4619      	mov	r1, r3
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	01db      	lsls	r3, r3, #7
 800d3ec:	440b      	add	r3, r1
 800d3ee:	3384      	adds	r3, #132	; 0x84
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	69fb      	ldr	r3, [r7, #28]
 800d3f4:	4313      	orrs	r3, r2
 800d3f6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	01db      	lsls	r3, r3, #7
 800d402:	4413      	add	r3, r2
 800d404:	3384      	adds	r3, #132	; 0x84
 800d406:	691b      	ldr	r3, [r3, #16]
 800d408:	68fa      	ldr	r2, [r7, #12]
 800d40a:	6812      	ldr	r2, [r2, #0]
 800d40c:	4611      	mov	r1, r2
 800d40e:	687a      	ldr	r2, [r7, #4]
 800d410:	01d2      	lsls	r2, r2, #7
 800d412:	440a      	add	r2, r1
 800d414:	3284      	adds	r2, #132	; 0x84
 800d416:	f023 0307 	bic.w	r3, r3, #7
 800d41a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	461a      	mov	r2, r3
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	01db      	lsls	r3, r3, #7
 800d426:	4413      	add	r3, r2
 800d428:	3384      	adds	r3, #132	; 0x84
 800d42a:	461a      	mov	r2, r3
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	691b      	ldr	r3, [r3, #16]
 800d430:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d438:	021b      	lsls	r3, r3, #8
 800d43a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d442:	041b      	lsls	r3, r3, #16
 800d444:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	699b      	ldr	r3, [r3, #24]
 800d44a:	061b      	lsls	r3, r3, #24
 800d44c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	461a      	mov	r2, r3
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	01db      	lsls	r3, r3, #7
 800d458:	4413      	add	r3, r2
 800d45a:	3384      	adds	r3, #132	; 0x84
 800d45c:	699b      	ldr	r3, [r3, #24]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	461a      	mov	r2, r3
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	01db      	lsls	r3, r3, #7
 800d468:	4413      	add	r3, r2
 800d46a:	3384      	adds	r3, #132	; 0x84
 800d46c:	461a      	mov	r2, r3
 800d46e:	2300      	movs	r3, #0
 800d470:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d478:	461a      	mov	r2, r3
 800d47a:	69fb      	ldr	r3, [r7, #28]
 800d47c:	431a      	orrs	r2, r3
 800d47e:	69bb      	ldr	r3, [r7, #24]
 800d480:	431a      	orrs	r2, r3
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	4619      	mov	r1, r3
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	01db      	lsls	r3, r3, #7
 800d48c:	440b      	add	r3, r1
 800d48e:	3384      	adds	r3, #132	; 0x84
 800d490:	4619      	mov	r1, r3
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	4313      	orrs	r3, r2
 800d496:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	461a      	mov	r2, r3
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	01db      	lsls	r3, r3, #7
 800d4a2:	4413      	add	r3, r2
 800d4a4:	3384      	adds	r3, #132	; 0x84
 800d4a6:	695b      	ldr	r3, [r3, #20]
 800d4a8:	68fa      	ldr	r2, [r7, #12]
 800d4aa:	6812      	ldr	r2, [r2, #0]
 800d4ac:	4611      	mov	r1, r2
 800d4ae:	687a      	ldr	r2, [r7, #4]
 800d4b0:	01d2      	lsls	r2, r2, #7
 800d4b2:	440a      	add	r2, r1
 800d4b4:	3284      	adds	r2, #132	; 0x84
 800d4b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d4ba:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	01db      	lsls	r3, r3, #7
 800d4c6:	4413      	add	r3, r2
 800d4c8:	3384      	adds	r3, #132	; 0x84
 800d4ca:	461a      	mov	r2, r3
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	695b      	ldr	r3, [r3, #20]
 800d4d0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	461a      	mov	r2, r3
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	01db      	lsls	r3, r3, #7
 800d4dc:	4413      	add	r3, r2
 800d4de:	3384      	adds	r3, #132	; 0x84
 800d4e0:	69db      	ldr	r3, [r3, #28]
 800d4e2:	68fa      	ldr	r2, [r7, #12]
 800d4e4:	6812      	ldr	r2, [r2, #0]
 800d4e6:	4611      	mov	r1, r2
 800d4e8:	687a      	ldr	r2, [r7, #4]
 800d4ea:	01d2      	lsls	r2, r2, #7
 800d4ec:	440a      	add	r2, r1
 800d4ee:	3284      	adds	r2, #132	; 0x84
 800d4f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800d4f4:	f023 0307 	bic.w	r3, r3, #7
 800d4f8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	69da      	ldr	r2, [r3, #28]
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	6a1b      	ldr	r3, [r3, #32]
 800d502:	68f9      	ldr	r1, [r7, #12]
 800d504:	6809      	ldr	r1, [r1, #0]
 800d506:	4608      	mov	r0, r1
 800d508:	6879      	ldr	r1, [r7, #4]
 800d50a:	01c9      	lsls	r1, r1, #7
 800d50c:	4401      	add	r1, r0
 800d50e:	3184      	adds	r1, #132	; 0x84
 800d510:	4313      	orrs	r3, r2
 800d512:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	461a      	mov	r2, r3
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	01db      	lsls	r3, r3, #7
 800d51e:	4413      	add	r3, r2
 800d520:	3384      	adds	r3, #132	; 0x84
 800d522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	461a      	mov	r2, r3
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	01db      	lsls	r3, r3, #7
 800d52e:	4413      	add	r3, r2
 800d530:	3384      	adds	r3, #132	; 0x84
 800d532:	461a      	mov	r2, r3
 800d534:	2300      	movs	r3, #0
 800d536:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	461a      	mov	r2, r3
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	01db      	lsls	r3, r3, #7
 800d542:	4413      	add	r3, r2
 800d544:	3384      	adds	r3, #132	; 0x84
 800d546:	461a      	mov	r2, r3
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d54c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	691b      	ldr	r3, [r3, #16]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d102      	bne.n	800d55c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800d556:	2304      	movs	r3, #4
 800d558:	61fb      	str	r3, [r7, #28]
 800d55a:	e01b      	b.n	800d594 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	691b      	ldr	r3, [r3, #16]
 800d560:	2b01      	cmp	r3, #1
 800d562:	d102      	bne.n	800d56a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800d564:	2303      	movs	r3, #3
 800d566:	61fb      	str	r3, [r7, #28]
 800d568:	e014      	b.n	800d594 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	691b      	ldr	r3, [r3, #16]
 800d56e:	2b04      	cmp	r3, #4
 800d570:	d00b      	beq.n	800d58a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800d576:	2b02      	cmp	r3, #2
 800d578:	d007      	beq.n	800d58a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800d57e:	2b03      	cmp	r3, #3
 800d580:	d003      	beq.n	800d58a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800d586:	2b07      	cmp	r3, #7
 800d588:	d102      	bne.n	800d590 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800d58a:	2302      	movs	r3, #2
 800d58c:	61fb      	str	r3, [r7, #28]
 800d58e:	e001      	b.n	800d594 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800d590:	2301      	movs	r3, #1
 800d592:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	461a      	mov	r2, r3
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	01db      	lsls	r3, r3, #7
 800d59e:	4413      	add	r3, r2
 800d5a0:	3384      	adds	r3, #132	; 0x84
 800d5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5a4:	68fa      	ldr	r2, [r7, #12]
 800d5a6:	6812      	ldr	r2, [r2, #0]
 800d5a8:	4611      	mov	r1, r2
 800d5aa:	687a      	ldr	r2, [r7, #4]
 800d5ac:	01d2      	lsls	r2, r2, #7
 800d5ae:	440a      	add	r2, r1
 800d5b0:	3284      	adds	r2, #132	; 0x84
 800d5b2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800d5b6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5bc:	69fa      	ldr	r2, [r7, #28]
 800d5be:	fb02 f303 	mul.w	r3, r2, r3
 800d5c2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	6859      	ldr	r1, [r3, #4]
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	1acb      	subs	r3, r1, r3
 800d5ce:	69f9      	ldr	r1, [r7, #28]
 800d5d0:	fb01 f303 	mul.w	r3, r1, r3
 800d5d4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800d5d6:	68f9      	ldr	r1, [r7, #12]
 800d5d8:	6809      	ldr	r1, [r1, #0]
 800d5da:	4608      	mov	r0, r1
 800d5dc:	6879      	ldr	r1, [r7, #4]
 800d5de:	01c9      	lsls	r1, r1, #7
 800d5e0:	4401      	add	r1, r0
 800d5e2:	3184      	adds	r1, #132	; 0x84
 800d5e4:	4313      	orrs	r3, r2
 800d5e6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	461a      	mov	r2, r3
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	01db      	lsls	r3, r3, #7
 800d5f2:	4413      	add	r3, r2
 800d5f4:	3384      	adds	r3, #132	; 0x84
 800d5f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5f8:	68fa      	ldr	r2, [r7, #12]
 800d5fa:	6812      	ldr	r2, [r2, #0]
 800d5fc:	4611      	mov	r1, r2
 800d5fe:	687a      	ldr	r2, [r7, #4]
 800d600:	01d2      	lsls	r2, r2, #7
 800d602:	440a      	add	r2, r1
 800d604:	3284      	adds	r2, #132	; 0x84
 800d606:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d60a:	f023 0307 	bic.w	r3, r3, #7
 800d60e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	461a      	mov	r2, r3
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	01db      	lsls	r3, r3, #7
 800d61a:	4413      	add	r3, r2
 800d61c:	3384      	adds	r3, #132	; 0x84
 800d61e:	461a      	mov	r2, r3
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d624:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	461a      	mov	r2, r3
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	01db      	lsls	r3, r3, #7
 800d630:	4413      	add	r3, r2
 800d632:	3384      	adds	r3, #132	; 0x84
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	68fa      	ldr	r2, [r7, #12]
 800d638:	6812      	ldr	r2, [r2, #0]
 800d63a:	4611      	mov	r1, r2
 800d63c:	687a      	ldr	r2, [r7, #4]
 800d63e:	01d2      	lsls	r2, r2, #7
 800d640:	440a      	add	r2, r1
 800d642:	3284      	adds	r2, #132	; 0x84
 800d644:	f043 0301 	orr.w	r3, r3, #1
 800d648:	6013      	str	r3, [r2, #0]
}
 800d64a:	bf00      	nop
 800d64c:	3724      	adds	r7, #36	; 0x24
 800d64e:	46bd      	mov	sp, r7
 800d650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d654:	4770      	bx	lr
	...

0800d658 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b086      	sub	sp, #24
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d101      	bne.n	800d66a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d666:	2301      	movs	r3, #1
 800d668:	e267      	b.n	800db3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	f003 0301 	and.w	r3, r3, #1
 800d672:	2b00      	cmp	r3, #0
 800d674:	d075      	beq.n	800d762 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d676:	4b88      	ldr	r3, [pc, #544]	; (800d898 <HAL_RCC_OscConfig+0x240>)
 800d678:	689b      	ldr	r3, [r3, #8]
 800d67a:	f003 030c 	and.w	r3, r3, #12
 800d67e:	2b04      	cmp	r3, #4
 800d680:	d00c      	beq.n	800d69c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d682:	4b85      	ldr	r3, [pc, #532]	; (800d898 <HAL_RCC_OscConfig+0x240>)
 800d684:	689b      	ldr	r3, [r3, #8]
 800d686:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d68a:	2b08      	cmp	r3, #8
 800d68c:	d112      	bne.n	800d6b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d68e:	4b82      	ldr	r3, [pc, #520]	; (800d898 <HAL_RCC_OscConfig+0x240>)
 800d690:	685b      	ldr	r3, [r3, #4]
 800d692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d696:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d69a:	d10b      	bne.n	800d6b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d69c:	4b7e      	ldr	r3, [pc, #504]	; (800d898 <HAL_RCC_OscConfig+0x240>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d05b      	beq.n	800d760 <HAL_RCC_OscConfig+0x108>
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	685b      	ldr	r3, [r3, #4]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d157      	bne.n	800d760 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	e242      	b.n	800db3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	685b      	ldr	r3, [r3, #4]
 800d6b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6bc:	d106      	bne.n	800d6cc <HAL_RCC_OscConfig+0x74>
 800d6be:	4b76      	ldr	r3, [pc, #472]	; (800d898 <HAL_RCC_OscConfig+0x240>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	4a75      	ldr	r2, [pc, #468]	; (800d898 <HAL_RCC_OscConfig+0x240>)
 800d6c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d6c8:	6013      	str	r3, [r2, #0]
 800d6ca:	e01d      	b.n	800d708 <HAL_RCC_OscConfig+0xb0>
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	685b      	ldr	r3, [r3, #4]
 800d6d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d6d4:	d10c      	bne.n	800d6f0 <HAL_RCC_OscConfig+0x98>
 800d6d6:	4b70      	ldr	r3, [pc, #448]	; (800d898 <HAL_RCC_OscConfig+0x240>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	4a6f      	ldr	r2, [pc, #444]	; (800d898 <HAL_RCC_OscConfig+0x240>)
 800d6dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d6e0:	6013      	str	r3, [r2, #0]
 800d6e2:	4b6d      	ldr	r3, [pc, #436]	; (800d898 <HAL_RCC_OscConfig+0x240>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	4a6c      	ldr	r2, [pc, #432]	; (800d898 <HAL_RCC_OscConfig+0x240>)
 800d6e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d6ec:	6013      	str	r3, [r2, #0]
 800d6ee:	e00b      	b.n	800d708 <HAL_RCC_OscConfig+0xb0>
 800d6f0:	4b69      	ldr	r3, [pc, #420]	; (800d898 <HAL_RCC_OscConfig+0x240>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	4a68      	ldr	r2, [pc, #416]	; (800d898 <HAL_RCC_OscConfig+0x240>)
 800d6f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d6fa:	6013      	str	r3, [r2, #0]
 800d6fc:	4b66      	ldr	r3, [pc, #408]	; (800d898 <HAL_RCC_OscConfig+0x240>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	4a65      	ldr	r2, [pc, #404]	; (800d898 <HAL_RCC_OscConfig+0x240>)
 800d702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	685b      	ldr	r3, [r3, #4]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d013      	beq.n	800d738 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d710:	f7fd fb7a 	bl	800ae08 <HAL_GetTick>
 800d714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d716:	e008      	b.n	800d72a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d718:	f7fd fb76 	bl	800ae08 <HAL_GetTick>
 800d71c:	4602      	mov	r2, r0
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	1ad3      	subs	r3, r2, r3
 800d722:	2b64      	cmp	r3, #100	; 0x64
 800d724:	d901      	bls.n	800d72a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d726:	2303      	movs	r3, #3
 800d728:	e207      	b.n	800db3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d72a:	4b5b      	ldr	r3, [pc, #364]	; (800d898 <HAL_RCC_OscConfig+0x240>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d732:	2b00      	cmp	r3, #0
 800d734:	d0f0      	beq.n	800d718 <HAL_RCC_OscConfig+0xc0>
 800d736:	e014      	b.n	800d762 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d738:	f7fd fb66 	bl	800ae08 <HAL_GetTick>
 800d73c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d73e:	e008      	b.n	800d752 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d740:	f7fd fb62 	bl	800ae08 <HAL_GetTick>
 800d744:	4602      	mov	r2, r0
 800d746:	693b      	ldr	r3, [r7, #16]
 800d748:	1ad3      	subs	r3, r2, r3
 800d74a:	2b64      	cmp	r3, #100	; 0x64
 800d74c:	d901      	bls.n	800d752 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d74e:	2303      	movs	r3, #3
 800d750:	e1f3      	b.n	800db3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d752:	4b51      	ldr	r3, [pc, #324]	; (800d898 <HAL_RCC_OscConfig+0x240>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d1f0      	bne.n	800d740 <HAL_RCC_OscConfig+0xe8>
 800d75e:	e000      	b.n	800d762 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	f003 0302 	and.w	r3, r3, #2
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d063      	beq.n	800d836 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d76e:	4b4a      	ldr	r3, [pc, #296]	; (800d898 <HAL_RCC_OscConfig+0x240>)
 800d770:	689b      	ldr	r3, [r3, #8]
 800d772:	f003 030c 	and.w	r3, r3, #12
 800d776:	2b00      	cmp	r3, #0
 800d778:	d00b      	beq.n	800d792 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d77a:	4b47      	ldr	r3, [pc, #284]	; (800d898 <HAL_RCC_OscConfig+0x240>)
 800d77c:	689b      	ldr	r3, [r3, #8]
 800d77e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d782:	2b08      	cmp	r3, #8
 800d784:	d11c      	bne.n	800d7c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d786:	4b44      	ldr	r3, [pc, #272]	; (800d898 <HAL_RCC_OscConfig+0x240>)
 800d788:	685b      	ldr	r3, [r3, #4]
 800d78a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d116      	bne.n	800d7c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d792:	4b41      	ldr	r3, [pc, #260]	; (800d898 <HAL_RCC_OscConfig+0x240>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f003 0302 	and.w	r3, r3, #2
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d005      	beq.n	800d7aa <HAL_RCC_OscConfig+0x152>
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	68db      	ldr	r3, [r3, #12]
 800d7a2:	2b01      	cmp	r3, #1
 800d7a4:	d001      	beq.n	800d7aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	e1c7      	b.n	800db3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d7aa:	4b3b      	ldr	r3, [pc, #236]	; (800d898 <HAL_RCC_OscConfig+0x240>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	691b      	ldr	r3, [r3, #16]
 800d7b6:	00db      	lsls	r3, r3, #3
 800d7b8:	4937      	ldr	r1, [pc, #220]	; (800d898 <HAL_RCC_OscConfig+0x240>)
 800d7ba:	4313      	orrs	r3, r2
 800d7bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d7be:	e03a      	b.n	800d836 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	68db      	ldr	r3, [r3, #12]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d020      	beq.n	800d80a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d7c8:	4b34      	ldr	r3, [pc, #208]	; (800d89c <HAL_RCC_OscConfig+0x244>)
 800d7ca:	2201      	movs	r2, #1
 800d7cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d7ce:	f7fd fb1b 	bl	800ae08 <HAL_GetTick>
 800d7d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d7d4:	e008      	b.n	800d7e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d7d6:	f7fd fb17 	bl	800ae08 <HAL_GetTick>
 800d7da:	4602      	mov	r2, r0
 800d7dc:	693b      	ldr	r3, [r7, #16]
 800d7de:	1ad3      	subs	r3, r2, r3
 800d7e0:	2b02      	cmp	r3, #2
 800d7e2:	d901      	bls.n	800d7e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d7e4:	2303      	movs	r3, #3
 800d7e6:	e1a8      	b.n	800db3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d7e8:	4b2b      	ldr	r3, [pc, #172]	; (800d898 <HAL_RCC_OscConfig+0x240>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f003 0302 	and.w	r3, r3, #2
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d0f0      	beq.n	800d7d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d7f4:	4b28      	ldr	r3, [pc, #160]	; (800d898 <HAL_RCC_OscConfig+0x240>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	691b      	ldr	r3, [r3, #16]
 800d800:	00db      	lsls	r3, r3, #3
 800d802:	4925      	ldr	r1, [pc, #148]	; (800d898 <HAL_RCC_OscConfig+0x240>)
 800d804:	4313      	orrs	r3, r2
 800d806:	600b      	str	r3, [r1, #0]
 800d808:	e015      	b.n	800d836 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d80a:	4b24      	ldr	r3, [pc, #144]	; (800d89c <HAL_RCC_OscConfig+0x244>)
 800d80c:	2200      	movs	r2, #0
 800d80e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d810:	f7fd fafa 	bl	800ae08 <HAL_GetTick>
 800d814:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d816:	e008      	b.n	800d82a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d818:	f7fd faf6 	bl	800ae08 <HAL_GetTick>
 800d81c:	4602      	mov	r2, r0
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	1ad3      	subs	r3, r2, r3
 800d822:	2b02      	cmp	r3, #2
 800d824:	d901      	bls.n	800d82a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d826:	2303      	movs	r3, #3
 800d828:	e187      	b.n	800db3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d82a:	4b1b      	ldr	r3, [pc, #108]	; (800d898 <HAL_RCC_OscConfig+0x240>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	f003 0302 	and.w	r3, r3, #2
 800d832:	2b00      	cmp	r3, #0
 800d834:	d1f0      	bne.n	800d818 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	f003 0308 	and.w	r3, r3, #8
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d036      	beq.n	800d8b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	695b      	ldr	r3, [r3, #20]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d016      	beq.n	800d878 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d84a:	4b15      	ldr	r3, [pc, #84]	; (800d8a0 <HAL_RCC_OscConfig+0x248>)
 800d84c:	2201      	movs	r2, #1
 800d84e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d850:	f7fd fada 	bl	800ae08 <HAL_GetTick>
 800d854:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d856:	e008      	b.n	800d86a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d858:	f7fd fad6 	bl	800ae08 <HAL_GetTick>
 800d85c:	4602      	mov	r2, r0
 800d85e:	693b      	ldr	r3, [r7, #16]
 800d860:	1ad3      	subs	r3, r2, r3
 800d862:	2b02      	cmp	r3, #2
 800d864:	d901      	bls.n	800d86a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d866:	2303      	movs	r3, #3
 800d868:	e167      	b.n	800db3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d86a:	4b0b      	ldr	r3, [pc, #44]	; (800d898 <HAL_RCC_OscConfig+0x240>)
 800d86c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d86e:	f003 0302 	and.w	r3, r3, #2
 800d872:	2b00      	cmp	r3, #0
 800d874:	d0f0      	beq.n	800d858 <HAL_RCC_OscConfig+0x200>
 800d876:	e01b      	b.n	800d8b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d878:	4b09      	ldr	r3, [pc, #36]	; (800d8a0 <HAL_RCC_OscConfig+0x248>)
 800d87a:	2200      	movs	r2, #0
 800d87c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d87e:	f7fd fac3 	bl	800ae08 <HAL_GetTick>
 800d882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d884:	e00e      	b.n	800d8a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d886:	f7fd fabf 	bl	800ae08 <HAL_GetTick>
 800d88a:	4602      	mov	r2, r0
 800d88c:	693b      	ldr	r3, [r7, #16]
 800d88e:	1ad3      	subs	r3, r2, r3
 800d890:	2b02      	cmp	r3, #2
 800d892:	d907      	bls.n	800d8a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800d894:	2303      	movs	r3, #3
 800d896:	e150      	b.n	800db3a <HAL_RCC_OscConfig+0x4e2>
 800d898:	40023800 	.word	0x40023800
 800d89c:	42470000 	.word	0x42470000
 800d8a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d8a4:	4b88      	ldr	r3, [pc, #544]	; (800dac8 <HAL_RCC_OscConfig+0x470>)
 800d8a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8a8:	f003 0302 	and.w	r3, r3, #2
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d1ea      	bne.n	800d886 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	f003 0304 	and.w	r3, r3, #4
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	f000 8097 	beq.w	800d9ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d8c2:	4b81      	ldr	r3, [pc, #516]	; (800dac8 <HAL_RCC_OscConfig+0x470>)
 800d8c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d10f      	bne.n	800d8ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	60bb      	str	r3, [r7, #8]
 800d8d2:	4b7d      	ldr	r3, [pc, #500]	; (800dac8 <HAL_RCC_OscConfig+0x470>)
 800d8d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8d6:	4a7c      	ldr	r2, [pc, #496]	; (800dac8 <HAL_RCC_OscConfig+0x470>)
 800d8d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d8dc:	6413      	str	r3, [r2, #64]	; 0x40
 800d8de:	4b7a      	ldr	r3, [pc, #488]	; (800dac8 <HAL_RCC_OscConfig+0x470>)
 800d8e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8e6:	60bb      	str	r3, [r7, #8]
 800d8e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d8ee:	4b77      	ldr	r3, [pc, #476]	; (800dacc <HAL_RCC_OscConfig+0x474>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d118      	bne.n	800d92c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d8fa:	4b74      	ldr	r3, [pc, #464]	; (800dacc <HAL_RCC_OscConfig+0x474>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	4a73      	ldr	r2, [pc, #460]	; (800dacc <HAL_RCC_OscConfig+0x474>)
 800d900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d904:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d906:	f7fd fa7f 	bl	800ae08 <HAL_GetTick>
 800d90a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d90c:	e008      	b.n	800d920 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d90e:	f7fd fa7b 	bl	800ae08 <HAL_GetTick>
 800d912:	4602      	mov	r2, r0
 800d914:	693b      	ldr	r3, [r7, #16]
 800d916:	1ad3      	subs	r3, r2, r3
 800d918:	2b02      	cmp	r3, #2
 800d91a:	d901      	bls.n	800d920 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800d91c:	2303      	movs	r3, #3
 800d91e:	e10c      	b.n	800db3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d920:	4b6a      	ldr	r3, [pc, #424]	; (800dacc <HAL_RCC_OscConfig+0x474>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d0f0      	beq.n	800d90e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	689b      	ldr	r3, [r3, #8]
 800d930:	2b01      	cmp	r3, #1
 800d932:	d106      	bne.n	800d942 <HAL_RCC_OscConfig+0x2ea>
 800d934:	4b64      	ldr	r3, [pc, #400]	; (800dac8 <HAL_RCC_OscConfig+0x470>)
 800d936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d938:	4a63      	ldr	r2, [pc, #396]	; (800dac8 <HAL_RCC_OscConfig+0x470>)
 800d93a:	f043 0301 	orr.w	r3, r3, #1
 800d93e:	6713      	str	r3, [r2, #112]	; 0x70
 800d940:	e01c      	b.n	800d97c <HAL_RCC_OscConfig+0x324>
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	689b      	ldr	r3, [r3, #8]
 800d946:	2b05      	cmp	r3, #5
 800d948:	d10c      	bne.n	800d964 <HAL_RCC_OscConfig+0x30c>
 800d94a:	4b5f      	ldr	r3, [pc, #380]	; (800dac8 <HAL_RCC_OscConfig+0x470>)
 800d94c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d94e:	4a5e      	ldr	r2, [pc, #376]	; (800dac8 <HAL_RCC_OscConfig+0x470>)
 800d950:	f043 0304 	orr.w	r3, r3, #4
 800d954:	6713      	str	r3, [r2, #112]	; 0x70
 800d956:	4b5c      	ldr	r3, [pc, #368]	; (800dac8 <HAL_RCC_OscConfig+0x470>)
 800d958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d95a:	4a5b      	ldr	r2, [pc, #364]	; (800dac8 <HAL_RCC_OscConfig+0x470>)
 800d95c:	f043 0301 	orr.w	r3, r3, #1
 800d960:	6713      	str	r3, [r2, #112]	; 0x70
 800d962:	e00b      	b.n	800d97c <HAL_RCC_OscConfig+0x324>
 800d964:	4b58      	ldr	r3, [pc, #352]	; (800dac8 <HAL_RCC_OscConfig+0x470>)
 800d966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d968:	4a57      	ldr	r2, [pc, #348]	; (800dac8 <HAL_RCC_OscConfig+0x470>)
 800d96a:	f023 0301 	bic.w	r3, r3, #1
 800d96e:	6713      	str	r3, [r2, #112]	; 0x70
 800d970:	4b55      	ldr	r3, [pc, #340]	; (800dac8 <HAL_RCC_OscConfig+0x470>)
 800d972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d974:	4a54      	ldr	r2, [pc, #336]	; (800dac8 <HAL_RCC_OscConfig+0x470>)
 800d976:	f023 0304 	bic.w	r3, r3, #4
 800d97a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	689b      	ldr	r3, [r3, #8]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d015      	beq.n	800d9b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d984:	f7fd fa40 	bl	800ae08 <HAL_GetTick>
 800d988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d98a:	e00a      	b.n	800d9a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d98c:	f7fd fa3c 	bl	800ae08 <HAL_GetTick>
 800d990:	4602      	mov	r2, r0
 800d992:	693b      	ldr	r3, [r7, #16]
 800d994:	1ad3      	subs	r3, r2, r3
 800d996:	f241 3288 	movw	r2, #5000	; 0x1388
 800d99a:	4293      	cmp	r3, r2
 800d99c:	d901      	bls.n	800d9a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800d99e:	2303      	movs	r3, #3
 800d9a0:	e0cb      	b.n	800db3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d9a2:	4b49      	ldr	r3, [pc, #292]	; (800dac8 <HAL_RCC_OscConfig+0x470>)
 800d9a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9a6:	f003 0302 	and.w	r3, r3, #2
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d0ee      	beq.n	800d98c <HAL_RCC_OscConfig+0x334>
 800d9ae:	e014      	b.n	800d9da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d9b0:	f7fd fa2a 	bl	800ae08 <HAL_GetTick>
 800d9b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d9b6:	e00a      	b.n	800d9ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d9b8:	f7fd fa26 	bl	800ae08 <HAL_GetTick>
 800d9bc:	4602      	mov	r2, r0
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	1ad3      	subs	r3, r2, r3
 800d9c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9c6:	4293      	cmp	r3, r2
 800d9c8:	d901      	bls.n	800d9ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800d9ca:	2303      	movs	r3, #3
 800d9cc:	e0b5      	b.n	800db3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d9ce:	4b3e      	ldr	r3, [pc, #248]	; (800dac8 <HAL_RCC_OscConfig+0x470>)
 800d9d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9d2:	f003 0302 	and.w	r3, r3, #2
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d1ee      	bne.n	800d9b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d9da:	7dfb      	ldrb	r3, [r7, #23]
 800d9dc:	2b01      	cmp	r3, #1
 800d9de:	d105      	bne.n	800d9ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d9e0:	4b39      	ldr	r3, [pc, #228]	; (800dac8 <HAL_RCC_OscConfig+0x470>)
 800d9e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9e4:	4a38      	ldr	r2, [pc, #224]	; (800dac8 <HAL_RCC_OscConfig+0x470>)
 800d9e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d9ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	699b      	ldr	r3, [r3, #24]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	f000 80a1 	beq.w	800db38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d9f6:	4b34      	ldr	r3, [pc, #208]	; (800dac8 <HAL_RCC_OscConfig+0x470>)
 800d9f8:	689b      	ldr	r3, [r3, #8]
 800d9fa:	f003 030c 	and.w	r3, r3, #12
 800d9fe:	2b08      	cmp	r3, #8
 800da00:	d05c      	beq.n	800dabc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	699b      	ldr	r3, [r3, #24]
 800da06:	2b02      	cmp	r3, #2
 800da08:	d141      	bne.n	800da8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800da0a:	4b31      	ldr	r3, [pc, #196]	; (800dad0 <HAL_RCC_OscConfig+0x478>)
 800da0c:	2200      	movs	r2, #0
 800da0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800da10:	f7fd f9fa 	bl	800ae08 <HAL_GetTick>
 800da14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800da16:	e008      	b.n	800da2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800da18:	f7fd f9f6 	bl	800ae08 <HAL_GetTick>
 800da1c:	4602      	mov	r2, r0
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	1ad3      	subs	r3, r2, r3
 800da22:	2b02      	cmp	r3, #2
 800da24:	d901      	bls.n	800da2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800da26:	2303      	movs	r3, #3
 800da28:	e087      	b.n	800db3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800da2a:	4b27      	ldr	r3, [pc, #156]	; (800dac8 <HAL_RCC_OscConfig+0x470>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da32:	2b00      	cmp	r3, #0
 800da34:	d1f0      	bne.n	800da18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	69da      	ldr	r2, [r3, #28]
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6a1b      	ldr	r3, [r3, #32]
 800da3e:	431a      	orrs	r2, r3
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da44:	019b      	lsls	r3, r3, #6
 800da46:	431a      	orrs	r2, r3
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da4c:	085b      	lsrs	r3, r3, #1
 800da4e:	3b01      	subs	r3, #1
 800da50:	041b      	lsls	r3, r3, #16
 800da52:	431a      	orrs	r2, r3
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da58:	061b      	lsls	r3, r3, #24
 800da5a:	491b      	ldr	r1, [pc, #108]	; (800dac8 <HAL_RCC_OscConfig+0x470>)
 800da5c:	4313      	orrs	r3, r2
 800da5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800da60:	4b1b      	ldr	r3, [pc, #108]	; (800dad0 <HAL_RCC_OscConfig+0x478>)
 800da62:	2201      	movs	r2, #1
 800da64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800da66:	f7fd f9cf 	bl	800ae08 <HAL_GetTick>
 800da6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800da6c:	e008      	b.n	800da80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800da6e:	f7fd f9cb 	bl	800ae08 <HAL_GetTick>
 800da72:	4602      	mov	r2, r0
 800da74:	693b      	ldr	r3, [r7, #16]
 800da76:	1ad3      	subs	r3, r2, r3
 800da78:	2b02      	cmp	r3, #2
 800da7a:	d901      	bls.n	800da80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800da7c:	2303      	movs	r3, #3
 800da7e:	e05c      	b.n	800db3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800da80:	4b11      	ldr	r3, [pc, #68]	; (800dac8 <HAL_RCC_OscConfig+0x470>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d0f0      	beq.n	800da6e <HAL_RCC_OscConfig+0x416>
 800da8c:	e054      	b.n	800db38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800da8e:	4b10      	ldr	r3, [pc, #64]	; (800dad0 <HAL_RCC_OscConfig+0x478>)
 800da90:	2200      	movs	r2, #0
 800da92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800da94:	f7fd f9b8 	bl	800ae08 <HAL_GetTick>
 800da98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800da9a:	e008      	b.n	800daae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800da9c:	f7fd f9b4 	bl	800ae08 <HAL_GetTick>
 800daa0:	4602      	mov	r2, r0
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	1ad3      	subs	r3, r2, r3
 800daa6:	2b02      	cmp	r3, #2
 800daa8:	d901      	bls.n	800daae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800daaa:	2303      	movs	r3, #3
 800daac:	e045      	b.n	800db3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800daae:	4b06      	ldr	r3, [pc, #24]	; (800dac8 <HAL_RCC_OscConfig+0x470>)
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d1f0      	bne.n	800da9c <HAL_RCC_OscConfig+0x444>
 800daba:	e03d      	b.n	800db38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	699b      	ldr	r3, [r3, #24]
 800dac0:	2b01      	cmp	r3, #1
 800dac2:	d107      	bne.n	800dad4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800dac4:	2301      	movs	r3, #1
 800dac6:	e038      	b.n	800db3a <HAL_RCC_OscConfig+0x4e2>
 800dac8:	40023800 	.word	0x40023800
 800dacc:	40007000 	.word	0x40007000
 800dad0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800dad4:	4b1b      	ldr	r3, [pc, #108]	; (800db44 <HAL_RCC_OscConfig+0x4ec>)
 800dad6:	685b      	ldr	r3, [r3, #4]
 800dad8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	699b      	ldr	r3, [r3, #24]
 800dade:	2b01      	cmp	r3, #1
 800dae0:	d028      	beq.n	800db34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800daec:	429a      	cmp	r2, r3
 800daee:	d121      	bne.n	800db34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d11a      	bne.n	800db34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800dafe:	68fa      	ldr	r2, [r7, #12]
 800db00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800db04:	4013      	ands	r3, r2
 800db06:	687a      	ldr	r2, [r7, #4]
 800db08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800db0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d111      	bne.n	800db34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db1a:	085b      	lsrs	r3, r3, #1
 800db1c:	3b01      	subs	r3, #1
 800db1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800db20:	429a      	cmp	r2, r3
 800db22:	d107      	bne.n	800db34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800db30:	429a      	cmp	r2, r3
 800db32:	d001      	beq.n	800db38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800db34:	2301      	movs	r3, #1
 800db36:	e000      	b.n	800db3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800db38:	2300      	movs	r3, #0
}
 800db3a:	4618      	mov	r0, r3
 800db3c:	3718      	adds	r7, #24
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}
 800db42:	bf00      	nop
 800db44:	40023800 	.word	0x40023800

0800db48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b084      	sub	sp, #16
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
 800db50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d101      	bne.n	800db5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800db58:	2301      	movs	r3, #1
 800db5a:	e0cc      	b.n	800dcf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800db5c:	4b68      	ldr	r3, [pc, #416]	; (800dd00 <HAL_RCC_ClockConfig+0x1b8>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	f003 030f 	and.w	r3, r3, #15
 800db64:	683a      	ldr	r2, [r7, #0]
 800db66:	429a      	cmp	r2, r3
 800db68:	d90c      	bls.n	800db84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800db6a:	4b65      	ldr	r3, [pc, #404]	; (800dd00 <HAL_RCC_ClockConfig+0x1b8>)
 800db6c:	683a      	ldr	r2, [r7, #0]
 800db6e:	b2d2      	uxtb	r2, r2
 800db70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800db72:	4b63      	ldr	r3, [pc, #396]	; (800dd00 <HAL_RCC_ClockConfig+0x1b8>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	f003 030f 	and.w	r3, r3, #15
 800db7a:	683a      	ldr	r2, [r7, #0]
 800db7c:	429a      	cmp	r2, r3
 800db7e:	d001      	beq.n	800db84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800db80:	2301      	movs	r3, #1
 800db82:	e0b8      	b.n	800dcf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	f003 0302 	and.w	r3, r3, #2
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d020      	beq.n	800dbd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	f003 0304 	and.w	r3, r3, #4
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d005      	beq.n	800dba8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800db9c:	4b59      	ldr	r3, [pc, #356]	; (800dd04 <HAL_RCC_ClockConfig+0x1bc>)
 800db9e:	689b      	ldr	r3, [r3, #8]
 800dba0:	4a58      	ldr	r2, [pc, #352]	; (800dd04 <HAL_RCC_ClockConfig+0x1bc>)
 800dba2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800dba6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	f003 0308 	and.w	r3, r3, #8
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d005      	beq.n	800dbc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800dbb4:	4b53      	ldr	r3, [pc, #332]	; (800dd04 <HAL_RCC_ClockConfig+0x1bc>)
 800dbb6:	689b      	ldr	r3, [r3, #8]
 800dbb8:	4a52      	ldr	r2, [pc, #328]	; (800dd04 <HAL_RCC_ClockConfig+0x1bc>)
 800dbba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800dbbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dbc0:	4b50      	ldr	r3, [pc, #320]	; (800dd04 <HAL_RCC_ClockConfig+0x1bc>)
 800dbc2:	689b      	ldr	r3, [r3, #8]
 800dbc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	689b      	ldr	r3, [r3, #8]
 800dbcc:	494d      	ldr	r1, [pc, #308]	; (800dd04 <HAL_RCC_ClockConfig+0x1bc>)
 800dbce:	4313      	orrs	r3, r2
 800dbd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f003 0301 	and.w	r3, r3, #1
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d044      	beq.n	800dc68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	685b      	ldr	r3, [r3, #4]
 800dbe2:	2b01      	cmp	r3, #1
 800dbe4:	d107      	bne.n	800dbf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dbe6:	4b47      	ldr	r3, [pc, #284]	; (800dd04 <HAL_RCC_ClockConfig+0x1bc>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d119      	bne.n	800dc26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	e07f      	b.n	800dcf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	685b      	ldr	r3, [r3, #4]
 800dbfa:	2b02      	cmp	r3, #2
 800dbfc:	d003      	beq.n	800dc06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dc02:	2b03      	cmp	r3, #3
 800dc04:	d107      	bne.n	800dc16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dc06:	4b3f      	ldr	r3, [pc, #252]	; (800dd04 <HAL_RCC_ClockConfig+0x1bc>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d109      	bne.n	800dc26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dc12:	2301      	movs	r3, #1
 800dc14:	e06f      	b.n	800dcf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dc16:	4b3b      	ldr	r3, [pc, #236]	; (800dd04 <HAL_RCC_ClockConfig+0x1bc>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	f003 0302 	and.w	r3, r3, #2
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d101      	bne.n	800dc26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dc22:	2301      	movs	r3, #1
 800dc24:	e067      	b.n	800dcf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800dc26:	4b37      	ldr	r3, [pc, #220]	; (800dd04 <HAL_RCC_ClockConfig+0x1bc>)
 800dc28:	689b      	ldr	r3, [r3, #8]
 800dc2a:	f023 0203 	bic.w	r2, r3, #3
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	685b      	ldr	r3, [r3, #4]
 800dc32:	4934      	ldr	r1, [pc, #208]	; (800dd04 <HAL_RCC_ClockConfig+0x1bc>)
 800dc34:	4313      	orrs	r3, r2
 800dc36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800dc38:	f7fd f8e6 	bl	800ae08 <HAL_GetTick>
 800dc3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dc3e:	e00a      	b.n	800dc56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dc40:	f7fd f8e2 	bl	800ae08 <HAL_GetTick>
 800dc44:	4602      	mov	r2, r0
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	1ad3      	subs	r3, r2, r3
 800dc4a:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	d901      	bls.n	800dc56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800dc52:	2303      	movs	r3, #3
 800dc54:	e04f      	b.n	800dcf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dc56:	4b2b      	ldr	r3, [pc, #172]	; (800dd04 <HAL_RCC_ClockConfig+0x1bc>)
 800dc58:	689b      	ldr	r3, [r3, #8]
 800dc5a:	f003 020c 	and.w	r2, r3, #12
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	685b      	ldr	r3, [r3, #4]
 800dc62:	009b      	lsls	r3, r3, #2
 800dc64:	429a      	cmp	r2, r3
 800dc66:	d1eb      	bne.n	800dc40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800dc68:	4b25      	ldr	r3, [pc, #148]	; (800dd00 <HAL_RCC_ClockConfig+0x1b8>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	f003 030f 	and.w	r3, r3, #15
 800dc70:	683a      	ldr	r2, [r7, #0]
 800dc72:	429a      	cmp	r2, r3
 800dc74:	d20c      	bcs.n	800dc90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dc76:	4b22      	ldr	r3, [pc, #136]	; (800dd00 <HAL_RCC_ClockConfig+0x1b8>)
 800dc78:	683a      	ldr	r2, [r7, #0]
 800dc7a:	b2d2      	uxtb	r2, r2
 800dc7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800dc7e:	4b20      	ldr	r3, [pc, #128]	; (800dd00 <HAL_RCC_ClockConfig+0x1b8>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	f003 030f 	and.w	r3, r3, #15
 800dc86:	683a      	ldr	r2, [r7, #0]
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	d001      	beq.n	800dc90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	e032      	b.n	800dcf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	f003 0304 	and.w	r3, r3, #4
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d008      	beq.n	800dcae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800dc9c:	4b19      	ldr	r3, [pc, #100]	; (800dd04 <HAL_RCC_ClockConfig+0x1bc>)
 800dc9e:	689b      	ldr	r3, [r3, #8]
 800dca0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	68db      	ldr	r3, [r3, #12]
 800dca8:	4916      	ldr	r1, [pc, #88]	; (800dd04 <HAL_RCC_ClockConfig+0x1bc>)
 800dcaa:	4313      	orrs	r3, r2
 800dcac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	f003 0308 	and.w	r3, r3, #8
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d009      	beq.n	800dcce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800dcba:	4b12      	ldr	r3, [pc, #72]	; (800dd04 <HAL_RCC_ClockConfig+0x1bc>)
 800dcbc:	689b      	ldr	r3, [r3, #8]
 800dcbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	691b      	ldr	r3, [r3, #16]
 800dcc6:	00db      	lsls	r3, r3, #3
 800dcc8:	490e      	ldr	r1, [pc, #56]	; (800dd04 <HAL_RCC_ClockConfig+0x1bc>)
 800dcca:	4313      	orrs	r3, r2
 800dccc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800dcce:	f000 f821 	bl	800dd14 <HAL_RCC_GetSysClockFreq>
 800dcd2:	4602      	mov	r2, r0
 800dcd4:	4b0b      	ldr	r3, [pc, #44]	; (800dd04 <HAL_RCC_ClockConfig+0x1bc>)
 800dcd6:	689b      	ldr	r3, [r3, #8]
 800dcd8:	091b      	lsrs	r3, r3, #4
 800dcda:	f003 030f 	and.w	r3, r3, #15
 800dcde:	490a      	ldr	r1, [pc, #40]	; (800dd08 <HAL_RCC_ClockConfig+0x1c0>)
 800dce0:	5ccb      	ldrb	r3, [r1, r3]
 800dce2:	fa22 f303 	lsr.w	r3, r2, r3
 800dce6:	4a09      	ldr	r2, [pc, #36]	; (800dd0c <HAL_RCC_ClockConfig+0x1c4>)
 800dce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800dcea:	4b09      	ldr	r3, [pc, #36]	; (800dd10 <HAL_RCC_ClockConfig+0x1c8>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f7fa fbca 	bl	8008488 <HAL_InitTick>

  return HAL_OK;
 800dcf4:	2300      	movs	r3, #0
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	3710      	adds	r7, #16
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}
 800dcfe:	bf00      	nop
 800dd00:	40023c00 	.word	0x40023c00
 800dd04:	40023800 	.word	0x40023800
 800dd08:	080181c4 	.word	0x080181c4
 800dd0c:	20000000 	.word	0x20000000
 800dd10:	2000008c 	.word	0x2000008c

0800dd14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dd14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dd18:	b094      	sub	sp, #80	; 0x50
 800dd1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	647b      	str	r3, [r7, #68]	; 0x44
 800dd20:	2300      	movs	r3, #0
 800dd22:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dd24:	2300      	movs	r3, #0
 800dd26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800dd28:	2300      	movs	r3, #0
 800dd2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dd2c:	4b79      	ldr	r3, [pc, #484]	; (800df14 <HAL_RCC_GetSysClockFreq+0x200>)
 800dd2e:	689b      	ldr	r3, [r3, #8]
 800dd30:	f003 030c 	and.w	r3, r3, #12
 800dd34:	2b08      	cmp	r3, #8
 800dd36:	d00d      	beq.n	800dd54 <HAL_RCC_GetSysClockFreq+0x40>
 800dd38:	2b08      	cmp	r3, #8
 800dd3a:	f200 80e1 	bhi.w	800df00 <HAL_RCC_GetSysClockFreq+0x1ec>
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d002      	beq.n	800dd48 <HAL_RCC_GetSysClockFreq+0x34>
 800dd42:	2b04      	cmp	r3, #4
 800dd44:	d003      	beq.n	800dd4e <HAL_RCC_GetSysClockFreq+0x3a>
 800dd46:	e0db      	b.n	800df00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800dd48:	4b73      	ldr	r3, [pc, #460]	; (800df18 <HAL_RCC_GetSysClockFreq+0x204>)
 800dd4a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800dd4c:	e0db      	b.n	800df06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800dd4e:	4b73      	ldr	r3, [pc, #460]	; (800df1c <HAL_RCC_GetSysClockFreq+0x208>)
 800dd50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800dd52:	e0d8      	b.n	800df06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800dd54:	4b6f      	ldr	r3, [pc, #444]	; (800df14 <HAL_RCC_GetSysClockFreq+0x200>)
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd5c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800dd5e:	4b6d      	ldr	r3, [pc, #436]	; (800df14 <HAL_RCC_GetSysClockFreq+0x200>)
 800dd60:	685b      	ldr	r3, [r3, #4]
 800dd62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d063      	beq.n	800de32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dd6a:	4b6a      	ldr	r3, [pc, #424]	; (800df14 <HAL_RCC_GetSysClockFreq+0x200>)
 800dd6c:	685b      	ldr	r3, [r3, #4]
 800dd6e:	099b      	lsrs	r3, r3, #6
 800dd70:	2200      	movs	r2, #0
 800dd72:	63bb      	str	r3, [r7, #56]	; 0x38
 800dd74:	63fa      	str	r2, [r7, #60]	; 0x3c
 800dd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd7c:	633b      	str	r3, [r7, #48]	; 0x30
 800dd7e:	2300      	movs	r3, #0
 800dd80:	637b      	str	r3, [r7, #52]	; 0x34
 800dd82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800dd86:	4622      	mov	r2, r4
 800dd88:	462b      	mov	r3, r5
 800dd8a:	f04f 0000 	mov.w	r0, #0
 800dd8e:	f04f 0100 	mov.w	r1, #0
 800dd92:	0159      	lsls	r1, r3, #5
 800dd94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800dd98:	0150      	lsls	r0, r2, #5
 800dd9a:	4602      	mov	r2, r0
 800dd9c:	460b      	mov	r3, r1
 800dd9e:	4621      	mov	r1, r4
 800dda0:	1a51      	subs	r1, r2, r1
 800dda2:	6139      	str	r1, [r7, #16]
 800dda4:	4629      	mov	r1, r5
 800dda6:	eb63 0301 	sbc.w	r3, r3, r1
 800ddaa:	617b      	str	r3, [r7, #20]
 800ddac:	f04f 0200 	mov.w	r2, #0
 800ddb0:	f04f 0300 	mov.w	r3, #0
 800ddb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ddb8:	4659      	mov	r1, fp
 800ddba:	018b      	lsls	r3, r1, #6
 800ddbc:	4651      	mov	r1, sl
 800ddbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ddc2:	4651      	mov	r1, sl
 800ddc4:	018a      	lsls	r2, r1, #6
 800ddc6:	4651      	mov	r1, sl
 800ddc8:	ebb2 0801 	subs.w	r8, r2, r1
 800ddcc:	4659      	mov	r1, fp
 800ddce:	eb63 0901 	sbc.w	r9, r3, r1
 800ddd2:	f04f 0200 	mov.w	r2, #0
 800ddd6:	f04f 0300 	mov.w	r3, #0
 800ddda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ddde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800dde2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800dde6:	4690      	mov	r8, r2
 800dde8:	4699      	mov	r9, r3
 800ddea:	4623      	mov	r3, r4
 800ddec:	eb18 0303 	adds.w	r3, r8, r3
 800ddf0:	60bb      	str	r3, [r7, #8]
 800ddf2:	462b      	mov	r3, r5
 800ddf4:	eb49 0303 	adc.w	r3, r9, r3
 800ddf8:	60fb      	str	r3, [r7, #12]
 800ddfa:	f04f 0200 	mov.w	r2, #0
 800ddfe:	f04f 0300 	mov.w	r3, #0
 800de02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800de06:	4629      	mov	r1, r5
 800de08:	024b      	lsls	r3, r1, #9
 800de0a:	4621      	mov	r1, r4
 800de0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800de10:	4621      	mov	r1, r4
 800de12:	024a      	lsls	r2, r1, #9
 800de14:	4610      	mov	r0, r2
 800de16:	4619      	mov	r1, r3
 800de18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de1a:	2200      	movs	r2, #0
 800de1c:	62bb      	str	r3, [r7, #40]	; 0x28
 800de1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800de20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800de24:	f7f8 ffa8 	bl	8006d78 <__aeabi_uldivmod>
 800de28:	4602      	mov	r2, r0
 800de2a:	460b      	mov	r3, r1
 800de2c:	4613      	mov	r3, r2
 800de2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800de30:	e058      	b.n	800dee4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800de32:	4b38      	ldr	r3, [pc, #224]	; (800df14 <HAL_RCC_GetSysClockFreq+0x200>)
 800de34:	685b      	ldr	r3, [r3, #4]
 800de36:	099b      	lsrs	r3, r3, #6
 800de38:	2200      	movs	r2, #0
 800de3a:	4618      	mov	r0, r3
 800de3c:	4611      	mov	r1, r2
 800de3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800de42:	623b      	str	r3, [r7, #32]
 800de44:	2300      	movs	r3, #0
 800de46:	627b      	str	r3, [r7, #36]	; 0x24
 800de48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800de4c:	4642      	mov	r2, r8
 800de4e:	464b      	mov	r3, r9
 800de50:	f04f 0000 	mov.w	r0, #0
 800de54:	f04f 0100 	mov.w	r1, #0
 800de58:	0159      	lsls	r1, r3, #5
 800de5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800de5e:	0150      	lsls	r0, r2, #5
 800de60:	4602      	mov	r2, r0
 800de62:	460b      	mov	r3, r1
 800de64:	4641      	mov	r1, r8
 800de66:	ebb2 0a01 	subs.w	sl, r2, r1
 800de6a:	4649      	mov	r1, r9
 800de6c:	eb63 0b01 	sbc.w	fp, r3, r1
 800de70:	f04f 0200 	mov.w	r2, #0
 800de74:	f04f 0300 	mov.w	r3, #0
 800de78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800de7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800de80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800de84:	ebb2 040a 	subs.w	r4, r2, sl
 800de88:	eb63 050b 	sbc.w	r5, r3, fp
 800de8c:	f04f 0200 	mov.w	r2, #0
 800de90:	f04f 0300 	mov.w	r3, #0
 800de94:	00eb      	lsls	r3, r5, #3
 800de96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800de9a:	00e2      	lsls	r2, r4, #3
 800de9c:	4614      	mov	r4, r2
 800de9e:	461d      	mov	r5, r3
 800dea0:	4643      	mov	r3, r8
 800dea2:	18e3      	adds	r3, r4, r3
 800dea4:	603b      	str	r3, [r7, #0]
 800dea6:	464b      	mov	r3, r9
 800dea8:	eb45 0303 	adc.w	r3, r5, r3
 800deac:	607b      	str	r3, [r7, #4]
 800deae:	f04f 0200 	mov.w	r2, #0
 800deb2:	f04f 0300 	mov.w	r3, #0
 800deb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800deba:	4629      	mov	r1, r5
 800debc:	028b      	lsls	r3, r1, #10
 800debe:	4621      	mov	r1, r4
 800dec0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800dec4:	4621      	mov	r1, r4
 800dec6:	028a      	lsls	r2, r1, #10
 800dec8:	4610      	mov	r0, r2
 800deca:	4619      	mov	r1, r3
 800decc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dece:	2200      	movs	r2, #0
 800ded0:	61bb      	str	r3, [r7, #24]
 800ded2:	61fa      	str	r2, [r7, #28]
 800ded4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ded8:	f7f8 ff4e 	bl	8006d78 <__aeabi_uldivmod>
 800dedc:	4602      	mov	r2, r0
 800dede:	460b      	mov	r3, r1
 800dee0:	4613      	mov	r3, r2
 800dee2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800dee4:	4b0b      	ldr	r3, [pc, #44]	; (800df14 <HAL_RCC_GetSysClockFreq+0x200>)
 800dee6:	685b      	ldr	r3, [r3, #4]
 800dee8:	0c1b      	lsrs	r3, r3, #16
 800deea:	f003 0303 	and.w	r3, r3, #3
 800deee:	3301      	adds	r3, #1
 800def0:	005b      	lsls	r3, r3, #1
 800def2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800def4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800def6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800def8:	fbb2 f3f3 	udiv	r3, r2, r3
 800defc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800defe:	e002      	b.n	800df06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800df00:	4b05      	ldr	r3, [pc, #20]	; (800df18 <HAL_RCC_GetSysClockFreq+0x204>)
 800df02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800df04:	bf00      	nop
    }
  }
  return sysclockfreq;
 800df06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800df08:	4618      	mov	r0, r3
 800df0a:	3750      	adds	r7, #80	; 0x50
 800df0c:	46bd      	mov	sp, r7
 800df0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800df12:	bf00      	nop
 800df14:	40023800 	.word	0x40023800
 800df18:	00f42400 	.word	0x00f42400
 800df1c:	007a1200 	.word	0x007a1200

0800df20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800df20:	b480      	push	{r7}
 800df22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800df24:	4b03      	ldr	r3, [pc, #12]	; (800df34 <HAL_RCC_GetHCLKFreq+0x14>)
 800df26:	681b      	ldr	r3, [r3, #0]
}
 800df28:	4618      	mov	r0, r3
 800df2a:	46bd      	mov	sp, r7
 800df2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df30:	4770      	bx	lr
 800df32:	bf00      	nop
 800df34:	20000000 	.word	0x20000000

0800df38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800df3c:	f7ff fff0 	bl	800df20 <HAL_RCC_GetHCLKFreq>
 800df40:	4602      	mov	r2, r0
 800df42:	4b05      	ldr	r3, [pc, #20]	; (800df58 <HAL_RCC_GetPCLK1Freq+0x20>)
 800df44:	689b      	ldr	r3, [r3, #8]
 800df46:	0a9b      	lsrs	r3, r3, #10
 800df48:	f003 0307 	and.w	r3, r3, #7
 800df4c:	4903      	ldr	r1, [pc, #12]	; (800df5c <HAL_RCC_GetPCLK1Freq+0x24>)
 800df4e:	5ccb      	ldrb	r3, [r1, r3]
 800df50:	fa22 f303 	lsr.w	r3, r2, r3
}
 800df54:	4618      	mov	r0, r3
 800df56:	bd80      	pop	{r7, pc}
 800df58:	40023800 	.word	0x40023800
 800df5c:	080181d4 	.word	0x080181d4

0800df60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800df64:	f7ff ffdc 	bl	800df20 <HAL_RCC_GetHCLKFreq>
 800df68:	4602      	mov	r2, r0
 800df6a:	4b05      	ldr	r3, [pc, #20]	; (800df80 <HAL_RCC_GetPCLK2Freq+0x20>)
 800df6c:	689b      	ldr	r3, [r3, #8]
 800df6e:	0b5b      	lsrs	r3, r3, #13
 800df70:	f003 0307 	and.w	r3, r3, #7
 800df74:	4903      	ldr	r1, [pc, #12]	; (800df84 <HAL_RCC_GetPCLK2Freq+0x24>)
 800df76:	5ccb      	ldrb	r3, [r1, r3]
 800df78:	fa22 f303 	lsr.w	r3, r2, r3
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	bd80      	pop	{r7, pc}
 800df80:	40023800 	.word	0x40023800
 800df84:	080181d4 	.word	0x080181d4

0800df88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800df88:	b480      	push	{r7}
 800df8a:	b083      	sub	sp, #12
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	220f      	movs	r2, #15
 800df96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800df98:	4b12      	ldr	r3, [pc, #72]	; (800dfe4 <HAL_RCC_GetClockConfig+0x5c>)
 800df9a:	689b      	ldr	r3, [r3, #8]
 800df9c:	f003 0203 	and.w	r2, r3, #3
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800dfa4:	4b0f      	ldr	r3, [pc, #60]	; (800dfe4 <HAL_RCC_GetClockConfig+0x5c>)
 800dfa6:	689b      	ldr	r3, [r3, #8]
 800dfa8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800dfb0:	4b0c      	ldr	r3, [pc, #48]	; (800dfe4 <HAL_RCC_GetClockConfig+0x5c>)
 800dfb2:	689b      	ldr	r3, [r3, #8]
 800dfb4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800dfbc:	4b09      	ldr	r3, [pc, #36]	; (800dfe4 <HAL_RCC_GetClockConfig+0x5c>)
 800dfbe:	689b      	ldr	r3, [r3, #8]
 800dfc0:	08db      	lsrs	r3, r3, #3
 800dfc2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800dfca:	4b07      	ldr	r3, [pc, #28]	; (800dfe8 <HAL_RCC_GetClockConfig+0x60>)
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	f003 020f 	and.w	r2, r3, #15
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	601a      	str	r2, [r3, #0]
}
 800dfd6:	bf00      	nop
 800dfd8:	370c      	adds	r7, #12
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe0:	4770      	bx	lr
 800dfe2:	bf00      	nop
 800dfe4:	40023800 	.word	0x40023800
 800dfe8:	40023c00 	.word	0x40023c00

0800dfec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b086      	sub	sp, #24
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800dff4:	2300      	movs	r3, #0
 800dff6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800dff8:	2300      	movs	r3, #0
 800dffa:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	f003 0301 	and.w	r3, r3, #1
 800e004:	2b00      	cmp	r3, #0
 800e006:	d10b      	bne.n	800e020 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800e010:	2b00      	cmp	r3, #0
 800e012:	d105      	bne.n	800e020 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d075      	beq.n	800e10c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800e020:	4b91      	ldr	r3, [pc, #580]	; (800e268 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800e022:	2200      	movs	r2, #0
 800e024:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e026:	f7fc feef 	bl	800ae08 <HAL_GetTick>
 800e02a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e02c:	e008      	b.n	800e040 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800e02e:	f7fc feeb 	bl	800ae08 <HAL_GetTick>
 800e032:	4602      	mov	r2, r0
 800e034:	697b      	ldr	r3, [r7, #20]
 800e036:	1ad3      	subs	r3, r2, r3
 800e038:	2b02      	cmp	r3, #2
 800e03a:	d901      	bls.n	800e040 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e03c:	2303      	movs	r3, #3
 800e03e:	e189      	b.n	800e354 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e040:	4b8a      	ldr	r3, [pc, #552]	; (800e26c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d1f0      	bne.n	800e02e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	f003 0301 	and.w	r3, r3, #1
 800e054:	2b00      	cmp	r3, #0
 800e056:	d009      	beq.n	800e06c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	685b      	ldr	r3, [r3, #4]
 800e05c:	019a      	lsls	r2, r3, #6
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	689b      	ldr	r3, [r3, #8]
 800e062:	071b      	lsls	r3, r3, #28
 800e064:	4981      	ldr	r1, [pc, #516]	; (800e26c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e066:	4313      	orrs	r3, r2
 800e068:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	f003 0302 	and.w	r3, r3, #2
 800e074:	2b00      	cmp	r3, #0
 800e076:	d01f      	beq.n	800e0b8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e078:	4b7c      	ldr	r3, [pc, #496]	; (800e26c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e07a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e07e:	0f1b      	lsrs	r3, r3, #28
 800e080:	f003 0307 	and.w	r3, r3, #7
 800e084:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	685b      	ldr	r3, [r3, #4]
 800e08a:	019a      	lsls	r2, r3, #6
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	68db      	ldr	r3, [r3, #12]
 800e090:	061b      	lsls	r3, r3, #24
 800e092:	431a      	orrs	r2, r3
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	071b      	lsls	r3, r3, #28
 800e098:	4974      	ldr	r1, [pc, #464]	; (800e26c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e09a:	4313      	orrs	r3, r2
 800e09c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e0a0:	4b72      	ldr	r3, [pc, #456]	; (800e26c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e0a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0a6:	f023 021f 	bic.w	r2, r3, #31
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	69db      	ldr	r3, [r3, #28]
 800e0ae:	3b01      	subs	r3, #1
 800e0b0:	496e      	ldr	r1, [pc, #440]	; (800e26c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e0b2:	4313      	orrs	r3, r2
 800e0b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d00d      	beq.n	800e0e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	685b      	ldr	r3, [r3, #4]
 800e0c8:	019a      	lsls	r2, r3, #6
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	68db      	ldr	r3, [r3, #12]
 800e0ce:	061b      	lsls	r3, r3, #24
 800e0d0:	431a      	orrs	r2, r3
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	689b      	ldr	r3, [r3, #8]
 800e0d6:	071b      	lsls	r3, r3, #28
 800e0d8:	4964      	ldr	r1, [pc, #400]	; (800e26c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e0da:	4313      	orrs	r3, r2
 800e0dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800e0e0:	4b61      	ldr	r3, [pc, #388]	; (800e268 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800e0e2:	2201      	movs	r2, #1
 800e0e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e0e6:	f7fc fe8f 	bl	800ae08 <HAL_GetTick>
 800e0ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e0ec:	e008      	b.n	800e100 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800e0ee:	f7fc fe8b 	bl	800ae08 <HAL_GetTick>
 800e0f2:	4602      	mov	r2, r0
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	1ad3      	subs	r3, r2, r3
 800e0f8:	2b02      	cmp	r3, #2
 800e0fa:	d901      	bls.n	800e100 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e0fc:	2303      	movs	r3, #3
 800e0fe:	e129      	b.n	800e354 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e100:	4b5a      	ldr	r3, [pc, #360]	; (800e26c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d0f0      	beq.n	800e0ee <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	f003 0304 	and.w	r3, r3, #4
 800e114:	2b00      	cmp	r3, #0
 800e116:	d105      	bne.n	800e124 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800e120:	2b00      	cmp	r3, #0
 800e122:	d079      	beq.n	800e218 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800e124:	4b52      	ldr	r3, [pc, #328]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800e126:	2200      	movs	r2, #0
 800e128:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e12a:	f7fc fe6d 	bl	800ae08 <HAL_GetTick>
 800e12e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e130:	e008      	b.n	800e144 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800e132:	f7fc fe69 	bl	800ae08 <HAL_GetTick>
 800e136:	4602      	mov	r2, r0
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	1ad3      	subs	r3, r2, r3
 800e13c:	2b02      	cmp	r3, #2
 800e13e:	d901      	bls.n	800e144 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e140:	2303      	movs	r3, #3
 800e142:	e107      	b.n	800e354 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e144:	4b49      	ldr	r3, [pc, #292]	; (800e26c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e14c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e150:	d0ef      	beq.n	800e132 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	f003 0304 	and.w	r3, r3, #4
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d020      	beq.n	800e1a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e15e:	4b43      	ldr	r3, [pc, #268]	; (800e26c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e164:	0f1b      	lsrs	r3, r3, #28
 800e166:	f003 0307 	and.w	r3, r3, #7
 800e16a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	691b      	ldr	r3, [r3, #16]
 800e170:	019a      	lsls	r2, r3, #6
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	695b      	ldr	r3, [r3, #20]
 800e176:	061b      	lsls	r3, r3, #24
 800e178:	431a      	orrs	r2, r3
 800e17a:	693b      	ldr	r3, [r7, #16]
 800e17c:	071b      	lsls	r3, r3, #28
 800e17e:	493b      	ldr	r1, [pc, #236]	; (800e26c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e180:	4313      	orrs	r3, r2
 800e182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800e186:	4b39      	ldr	r3, [pc, #228]	; (800e26c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e18c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6a1b      	ldr	r3, [r3, #32]
 800e194:	3b01      	subs	r3, #1
 800e196:	021b      	lsls	r3, r3, #8
 800e198:	4934      	ldr	r1, [pc, #208]	; (800e26c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e19a:	4313      	orrs	r3, r2
 800e19c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	f003 0308 	and.w	r3, r3, #8
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d01e      	beq.n	800e1ea <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e1ac:	4b2f      	ldr	r3, [pc, #188]	; (800e26c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e1ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1b2:	0e1b      	lsrs	r3, r3, #24
 800e1b4:	f003 030f 	and.w	r3, r3, #15
 800e1b8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	691b      	ldr	r3, [r3, #16]
 800e1be:	019a      	lsls	r2, r3, #6
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	061b      	lsls	r3, r3, #24
 800e1c4:	431a      	orrs	r2, r3
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	699b      	ldr	r3, [r3, #24]
 800e1ca:	071b      	lsls	r3, r3, #28
 800e1cc:	4927      	ldr	r1, [pc, #156]	; (800e26c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e1ce:	4313      	orrs	r3, r2
 800e1d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800e1d4:	4b25      	ldr	r3, [pc, #148]	; (800e26c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e1d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1e2:	4922      	ldr	r1, [pc, #136]	; (800e26c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e1e4:	4313      	orrs	r3, r2
 800e1e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800e1ea:	4b21      	ldr	r3, [pc, #132]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800e1ec:	2201      	movs	r2, #1
 800e1ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e1f0:	f7fc fe0a 	bl	800ae08 <HAL_GetTick>
 800e1f4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e1f6:	e008      	b.n	800e20a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800e1f8:	f7fc fe06 	bl	800ae08 <HAL_GetTick>
 800e1fc:	4602      	mov	r2, r0
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	1ad3      	subs	r3, r2, r3
 800e202:	2b02      	cmp	r3, #2
 800e204:	d901      	bls.n	800e20a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e206:	2303      	movs	r3, #3
 800e208:	e0a4      	b.n	800e354 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e20a:	4b18      	ldr	r3, [pc, #96]	; (800e26c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e212:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e216:	d1ef      	bne.n	800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	f003 0320 	and.w	r3, r3, #32
 800e220:	2b00      	cmp	r3, #0
 800e222:	f000 808b 	beq.w	800e33c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800e226:	2300      	movs	r3, #0
 800e228:	60fb      	str	r3, [r7, #12]
 800e22a:	4b10      	ldr	r3, [pc, #64]	; (800e26c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e22e:	4a0f      	ldr	r2, [pc, #60]	; (800e26c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e234:	6413      	str	r3, [r2, #64]	; 0x40
 800e236:	4b0d      	ldr	r3, [pc, #52]	; (800e26c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e23a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e23e:	60fb      	str	r3, [r7, #12]
 800e240:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800e242:	4b0c      	ldr	r3, [pc, #48]	; (800e274 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	4a0b      	ldr	r2, [pc, #44]	; (800e274 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800e248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e24c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e24e:	f7fc fddb 	bl	800ae08 <HAL_GetTick>
 800e252:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800e254:	e010      	b.n	800e278 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800e256:	f7fc fdd7 	bl	800ae08 <HAL_GetTick>
 800e25a:	4602      	mov	r2, r0
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	1ad3      	subs	r3, r2, r3
 800e260:	2b02      	cmp	r3, #2
 800e262:	d909      	bls.n	800e278 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800e264:	2303      	movs	r3, #3
 800e266:	e075      	b.n	800e354 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800e268:	42470068 	.word	0x42470068
 800e26c:	40023800 	.word	0x40023800
 800e270:	42470070 	.word	0x42470070
 800e274:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800e278:	4b38      	ldr	r3, [pc, #224]	; (800e35c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e280:	2b00      	cmp	r3, #0
 800e282:	d0e8      	beq.n	800e256 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800e284:	4b36      	ldr	r3, [pc, #216]	; (800e360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e28c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800e28e:	693b      	ldr	r3, [r7, #16]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d02f      	beq.n	800e2f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e298:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e29c:	693a      	ldr	r2, [r7, #16]
 800e29e:	429a      	cmp	r2, r3
 800e2a0:	d028      	beq.n	800e2f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e2a2:	4b2f      	ldr	r3, [pc, #188]	; (800e360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e2a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e2aa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800e2ac:	4b2d      	ldr	r3, [pc, #180]	; (800e364 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800e2ae:	2201      	movs	r2, #1
 800e2b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800e2b2:	4b2c      	ldr	r3, [pc, #176]	; (800e364 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800e2b8:	4a29      	ldr	r2, [pc, #164]	; (800e360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800e2be:	4b28      	ldr	r3, [pc, #160]	; (800e360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e2c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2c2:	f003 0301 	and.w	r3, r3, #1
 800e2c6:	2b01      	cmp	r3, #1
 800e2c8:	d114      	bne.n	800e2f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800e2ca:	f7fc fd9d 	bl	800ae08 <HAL_GetTick>
 800e2ce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e2d0:	e00a      	b.n	800e2e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e2d2:	f7fc fd99 	bl	800ae08 <HAL_GetTick>
 800e2d6:	4602      	mov	r2, r0
 800e2d8:	697b      	ldr	r3, [r7, #20]
 800e2da:	1ad3      	subs	r3, r2, r3
 800e2dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2e0:	4293      	cmp	r3, r2
 800e2e2:	d901      	bls.n	800e2e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800e2e4:	2303      	movs	r3, #3
 800e2e6:	e035      	b.n	800e354 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e2e8:	4b1d      	ldr	r3, [pc, #116]	; (800e360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e2ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2ec:	f003 0302 	and.w	r3, r3, #2
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d0ee      	beq.n	800e2d2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e2fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e300:	d10d      	bne.n	800e31e <HAL_RCCEx_PeriphCLKConfig+0x332>
 800e302:	4b17      	ldr	r3, [pc, #92]	; (800e360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e304:	689b      	ldr	r3, [r3, #8]
 800e306:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e30e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e316:	4912      	ldr	r1, [pc, #72]	; (800e360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e318:	4313      	orrs	r3, r2
 800e31a:	608b      	str	r3, [r1, #8]
 800e31c:	e005      	b.n	800e32a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800e31e:	4b10      	ldr	r3, [pc, #64]	; (800e360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e320:	689b      	ldr	r3, [r3, #8]
 800e322:	4a0f      	ldr	r2, [pc, #60]	; (800e360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e324:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800e328:	6093      	str	r3, [r2, #8]
 800e32a:	4b0d      	ldr	r3, [pc, #52]	; (800e360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e32c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e336:	490a      	ldr	r1, [pc, #40]	; (800e360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e338:	4313      	orrs	r3, r2
 800e33a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	f003 0310 	and.w	r3, r3, #16
 800e344:	2b00      	cmp	r3, #0
 800e346:	d004      	beq.n	800e352 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800e34e:	4b06      	ldr	r3, [pc, #24]	; (800e368 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800e350:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800e352:	2300      	movs	r3, #0
}
 800e354:	4618      	mov	r0, r3
 800e356:	3718      	adds	r7, #24
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}
 800e35c:	40007000 	.word	0x40007000
 800e360:	40023800 	.word	0x40023800
 800e364:	42470e40 	.word	0x42470e40
 800e368:	424711e0 	.word	0x424711e0

0800e36c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b082      	sub	sp, #8
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
 800e374:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d101      	bne.n	800e380 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800e37c:	2301      	movs	r3, #1
 800e37e:	e025      	b.n	800e3cc <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e386:	b2db      	uxtb	r3, r3
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d106      	bne.n	800e39a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2200      	movs	r2, #0
 800e390:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f7f9 f813 	bl	80073c0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2202      	movs	r2, #2
 800e39e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681a      	ldr	r2, [r3, #0]
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	3304      	adds	r3, #4
 800e3aa:	4619      	mov	r1, r3
 800e3ac:	4610      	mov	r0, r2
 800e3ae:	f001 fe91 	bl	80100d4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	6818      	ldr	r0, [r3, #0]
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	685b      	ldr	r3, [r3, #4]
 800e3ba:	461a      	mov	r2, r3
 800e3bc:	6839      	ldr	r1, [r7, #0]
 800e3be:	f001 fee6 	bl	801018e <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2201      	movs	r2, #1
 800e3c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e3ca:	2300      	movs	r3, #0
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	3708      	adds	r7, #8
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}

0800e3d4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b086      	sub	sp, #24
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	60f8      	str	r0, [r7, #12]
 800e3dc:	60b9      	str	r1, [r7, #8]
 800e3de:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e3e6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800e3e8:	7dfb      	ldrb	r3, [r7, #23]
 800e3ea:	2b02      	cmp	r3, #2
 800e3ec:	d101      	bne.n	800e3f2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800e3ee:	2302      	movs	r3, #2
 800e3f0:	e021      	b.n	800e436 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800e3f2:	7dfb      	ldrb	r3, [r7, #23]
 800e3f4:	2b01      	cmp	r3, #1
 800e3f6:	d002      	beq.n	800e3fe <HAL_SDRAM_SendCommand+0x2a>
 800e3f8:	7dfb      	ldrb	r3, [r7, #23]
 800e3fa:	2b05      	cmp	r3, #5
 800e3fc:	d118      	bne.n	800e430 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	2202      	movs	r2, #2
 800e402:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	687a      	ldr	r2, [r7, #4]
 800e40c:	68b9      	ldr	r1, [r7, #8]
 800e40e:	4618      	mov	r0, r3
 800e410:	f001 ff26 	bl	8010260 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	2b02      	cmp	r3, #2
 800e41a:	d104      	bne.n	800e426 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	2205      	movs	r2, #5
 800e420:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800e424:	e006      	b.n	800e434 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	2201      	movs	r2, #1
 800e42a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800e42e:	e001      	b.n	800e434 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800e430:	2301      	movs	r3, #1
 800e432:	e000      	b.n	800e436 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800e434:	2300      	movs	r3, #0
}
 800e436:	4618      	mov	r0, r3
 800e438:	3718      	adds	r7, #24
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}

0800e43e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800e43e:	b580      	push	{r7, lr}
 800e440:	b082      	sub	sp, #8
 800e442:	af00      	add	r7, sp, #0
 800e444:	6078      	str	r0, [r7, #4]
 800e446:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e44e:	b2db      	uxtb	r3, r3
 800e450:	2b02      	cmp	r3, #2
 800e452:	d101      	bne.n	800e458 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800e454:	2302      	movs	r3, #2
 800e456:	e016      	b.n	800e486 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e45e:	b2db      	uxtb	r3, r3
 800e460:	2b01      	cmp	r3, #1
 800e462:	d10f      	bne.n	800e484 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2202      	movs	r2, #2
 800e468:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	6839      	ldr	r1, [r7, #0]
 800e472:	4618      	mov	r0, r3
 800e474:	f001 ff31 	bl	80102da <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	2201      	movs	r2, #1
 800e47c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800e480:	2300      	movs	r3, #0
 800e482:	e000      	b.n	800e486 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800e484:	2301      	movs	r3, #1
}
 800e486:	4618      	mov	r0, r3
 800e488:	3708      	adds	r7, #8
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}

0800e48e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e48e:	b580      	push	{r7, lr}
 800e490:	b082      	sub	sp, #8
 800e492:	af00      	add	r7, sp, #0
 800e494:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d101      	bne.n	800e4a0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e49c:	2301      	movs	r3, #1
 800e49e:	e07b      	b.n	800e598 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d108      	bne.n	800e4ba <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	685b      	ldr	r3, [r3, #4]
 800e4ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e4b0:	d009      	beq.n	800e4c6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	61da      	str	r2, [r3, #28]
 800e4b8:	e005      	b.n	800e4c6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2200      	movs	r2, #0
 800e4be:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e4d2:	b2db      	uxtb	r3, r3
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d106      	bne.n	800e4e6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2200      	movs	r2, #0
 800e4dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f7f9 ff43 	bl	800836c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2202      	movs	r2, #2
 800e4ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	681a      	ldr	r2, [r3, #0]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e4fc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	685b      	ldr	r3, [r3, #4]
 800e502:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	689b      	ldr	r3, [r3, #8]
 800e50a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800e50e:	431a      	orrs	r2, r3
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	68db      	ldr	r3, [r3, #12]
 800e514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e518:	431a      	orrs	r2, r3
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	691b      	ldr	r3, [r3, #16]
 800e51e:	f003 0302 	and.w	r3, r3, #2
 800e522:	431a      	orrs	r2, r3
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	695b      	ldr	r3, [r3, #20]
 800e528:	f003 0301 	and.w	r3, r3, #1
 800e52c:	431a      	orrs	r2, r3
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	699b      	ldr	r3, [r3, #24]
 800e532:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e536:	431a      	orrs	r2, r3
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	69db      	ldr	r3, [r3, #28]
 800e53c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e540:	431a      	orrs	r2, r3
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6a1b      	ldr	r3, [r3, #32]
 800e546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e54a:	ea42 0103 	orr.w	r1, r2, r3
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e552:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	430a      	orrs	r2, r1
 800e55c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	699b      	ldr	r3, [r3, #24]
 800e562:	0c1b      	lsrs	r3, r3, #16
 800e564:	f003 0104 	and.w	r1, r3, #4
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e56c:	f003 0210 	and.w	r2, r3, #16
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	430a      	orrs	r2, r1
 800e576:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	69da      	ldr	r2, [r3, #28]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e586:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2200      	movs	r2, #0
 800e58c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	2201      	movs	r2, #1
 800e592:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e596:	2300      	movs	r3, #0
}
 800e598:	4618      	mov	r0, r3
 800e59a:	3708      	adds	r7, #8
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}

0800e5a0 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b082      	sub	sp, #8
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d101      	bne.n	800e5b2 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	e01a      	b.n	800e5e8 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2202      	movs	r2, #2
 800e5b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	681a      	ldr	r2, [r3, #0]
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e5c8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f7f9 ff16 	bl	80083fc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800e5e6:	2300      	movs	r3, #0
}
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	3708      	adds	r7, #8
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	bd80      	pop	{r7, pc}

0800e5f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b088      	sub	sp, #32
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	60f8      	str	r0, [r7, #12]
 800e5f8:	60b9      	str	r1, [r7, #8]
 800e5fa:	603b      	str	r3, [r7, #0]
 800e5fc:	4613      	mov	r3, r2
 800e5fe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e600:	2300      	movs	r3, #0
 800e602:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e60a:	2b01      	cmp	r3, #1
 800e60c:	d101      	bne.n	800e612 <HAL_SPI_Transmit+0x22>
 800e60e:	2302      	movs	r3, #2
 800e610:	e126      	b.n	800e860 <HAL_SPI_Transmit+0x270>
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	2201      	movs	r2, #1
 800e616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e61a:	f7fc fbf5 	bl	800ae08 <HAL_GetTick>
 800e61e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e620:	88fb      	ldrh	r3, [r7, #6]
 800e622:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e62a:	b2db      	uxtb	r3, r3
 800e62c:	2b01      	cmp	r3, #1
 800e62e:	d002      	beq.n	800e636 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e630:	2302      	movs	r3, #2
 800e632:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e634:	e10b      	b.n	800e84e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d002      	beq.n	800e642 <HAL_SPI_Transmit+0x52>
 800e63c:	88fb      	ldrh	r3, [r7, #6]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d102      	bne.n	800e648 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e642:	2301      	movs	r3, #1
 800e644:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e646:	e102      	b.n	800e84e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	2203      	movs	r2, #3
 800e64c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	2200      	movs	r2, #0
 800e654:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	68ba      	ldr	r2, [r7, #8]
 800e65a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	88fa      	ldrh	r2, [r7, #6]
 800e660:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	88fa      	ldrh	r2, [r7, #6]
 800e666:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	2200      	movs	r2, #0
 800e66c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	2200      	movs	r2, #0
 800e672:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	2200      	movs	r2, #0
 800e678:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	2200      	movs	r2, #0
 800e67e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	2200      	movs	r2, #0
 800e684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	689b      	ldr	r3, [r3, #8]
 800e68a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e68e:	d10f      	bne.n	800e6b0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	681a      	ldr	r2, [r3, #0]
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e69e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	681a      	ldr	r2, [r3, #0]
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e6ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6ba:	2b40      	cmp	r3, #64	; 0x40
 800e6bc:	d007      	beq.n	800e6ce <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	681a      	ldr	r2, [r3, #0]
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e6cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	68db      	ldr	r3, [r3, #12]
 800e6d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e6d6:	d14b      	bne.n	800e770 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	685b      	ldr	r3, [r3, #4]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d002      	beq.n	800e6e6 <HAL_SPI_Transmit+0xf6>
 800e6e0:	8afb      	ldrh	r3, [r7, #22]
 800e6e2:	2b01      	cmp	r3, #1
 800e6e4:	d13e      	bne.n	800e764 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6ea:	881a      	ldrh	r2, [r3, #0]
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6f6:	1c9a      	adds	r2, r3, #2
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e700:	b29b      	uxth	r3, r3
 800e702:	3b01      	subs	r3, #1
 800e704:	b29a      	uxth	r2, r3
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e70a:	e02b      	b.n	800e764 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	689b      	ldr	r3, [r3, #8]
 800e712:	f003 0302 	and.w	r3, r3, #2
 800e716:	2b02      	cmp	r3, #2
 800e718:	d112      	bne.n	800e740 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e71e:	881a      	ldrh	r2, [r3, #0]
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e72a:	1c9a      	adds	r2, r3, #2
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e734:	b29b      	uxth	r3, r3
 800e736:	3b01      	subs	r3, #1
 800e738:	b29a      	uxth	r2, r3
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	86da      	strh	r2, [r3, #54]	; 0x36
 800e73e:	e011      	b.n	800e764 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e740:	f7fc fb62 	bl	800ae08 <HAL_GetTick>
 800e744:	4602      	mov	r2, r0
 800e746:	69bb      	ldr	r3, [r7, #24]
 800e748:	1ad3      	subs	r3, r2, r3
 800e74a:	683a      	ldr	r2, [r7, #0]
 800e74c:	429a      	cmp	r2, r3
 800e74e:	d803      	bhi.n	800e758 <HAL_SPI_Transmit+0x168>
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e756:	d102      	bne.n	800e75e <HAL_SPI_Transmit+0x16e>
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d102      	bne.n	800e764 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800e75e:	2303      	movs	r3, #3
 800e760:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e762:	e074      	b.n	800e84e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e768:	b29b      	uxth	r3, r3
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d1ce      	bne.n	800e70c <HAL_SPI_Transmit+0x11c>
 800e76e:	e04c      	b.n	800e80a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	685b      	ldr	r3, [r3, #4]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d002      	beq.n	800e77e <HAL_SPI_Transmit+0x18e>
 800e778:	8afb      	ldrh	r3, [r7, #22]
 800e77a:	2b01      	cmp	r3, #1
 800e77c:	d140      	bne.n	800e800 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	330c      	adds	r3, #12
 800e788:	7812      	ldrb	r2, [r2, #0]
 800e78a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e790:	1c5a      	adds	r2, r3, #1
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e79a:	b29b      	uxth	r3, r3
 800e79c:	3b01      	subs	r3, #1
 800e79e:	b29a      	uxth	r2, r3
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e7a4:	e02c      	b.n	800e800 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	689b      	ldr	r3, [r3, #8]
 800e7ac:	f003 0302 	and.w	r3, r3, #2
 800e7b0:	2b02      	cmp	r3, #2
 800e7b2:	d113      	bne.n	800e7dc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	330c      	adds	r3, #12
 800e7be:	7812      	ldrb	r2, [r2, #0]
 800e7c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7c6:	1c5a      	adds	r2, r3, #1
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e7d0:	b29b      	uxth	r3, r3
 800e7d2:	3b01      	subs	r3, #1
 800e7d4:	b29a      	uxth	r2, r3
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	86da      	strh	r2, [r3, #54]	; 0x36
 800e7da:	e011      	b.n	800e800 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e7dc:	f7fc fb14 	bl	800ae08 <HAL_GetTick>
 800e7e0:	4602      	mov	r2, r0
 800e7e2:	69bb      	ldr	r3, [r7, #24]
 800e7e4:	1ad3      	subs	r3, r2, r3
 800e7e6:	683a      	ldr	r2, [r7, #0]
 800e7e8:	429a      	cmp	r2, r3
 800e7ea:	d803      	bhi.n	800e7f4 <HAL_SPI_Transmit+0x204>
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7f2:	d102      	bne.n	800e7fa <HAL_SPI_Transmit+0x20a>
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d102      	bne.n	800e800 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800e7fa:	2303      	movs	r3, #3
 800e7fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e7fe:	e026      	b.n	800e84e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e804:	b29b      	uxth	r3, r3
 800e806:	2b00      	cmp	r3, #0
 800e808:	d1cd      	bne.n	800e7a6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e80a:	69ba      	ldr	r2, [r7, #24]
 800e80c:	6839      	ldr	r1, [r7, #0]
 800e80e:	68f8      	ldr	r0, [r7, #12]
 800e810:	f000 fbda 	bl	800efc8 <SPI_EndRxTxTransaction>
 800e814:	4603      	mov	r3, r0
 800e816:	2b00      	cmp	r3, #0
 800e818:	d002      	beq.n	800e820 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	2220      	movs	r2, #32
 800e81e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	689b      	ldr	r3, [r3, #8]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d10a      	bne.n	800e83e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e828:	2300      	movs	r3, #0
 800e82a:	613b      	str	r3, [r7, #16]
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	68db      	ldr	r3, [r3, #12]
 800e832:	613b      	str	r3, [r7, #16]
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	689b      	ldr	r3, [r3, #8]
 800e83a:	613b      	str	r3, [r7, #16]
 800e83c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e842:	2b00      	cmp	r3, #0
 800e844:	d002      	beq.n	800e84c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800e846:	2301      	movs	r3, #1
 800e848:	77fb      	strb	r3, [r7, #31]
 800e84a:	e000      	b.n	800e84e <HAL_SPI_Transmit+0x25e>
  }

error:
 800e84c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	2201      	movs	r2, #1
 800e852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	2200      	movs	r2, #0
 800e85a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e85e:	7ffb      	ldrb	r3, [r7, #31]
}
 800e860:	4618      	mov	r0, r3
 800e862:	3720      	adds	r7, #32
 800e864:	46bd      	mov	sp, r7
 800e866:	bd80      	pop	{r7, pc}

0800e868 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b088      	sub	sp, #32
 800e86c:	af02      	add	r7, sp, #8
 800e86e:	60f8      	str	r0, [r7, #12]
 800e870:	60b9      	str	r1, [r7, #8]
 800e872:	603b      	str	r3, [r7, #0]
 800e874:	4613      	mov	r3, r2
 800e876:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e878:	2300      	movs	r3, #0
 800e87a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	685b      	ldr	r3, [r3, #4]
 800e880:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e884:	d112      	bne.n	800e8ac <HAL_SPI_Receive+0x44>
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	689b      	ldr	r3, [r3, #8]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d10e      	bne.n	800e8ac <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	2204      	movs	r2, #4
 800e892:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e896:	88fa      	ldrh	r2, [r7, #6]
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	9300      	str	r3, [sp, #0]
 800e89c:	4613      	mov	r3, r2
 800e89e:	68ba      	ldr	r2, [r7, #8]
 800e8a0:	68b9      	ldr	r1, [r7, #8]
 800e8a2:	68f8      	ldr	r0, [r7, #12]
 800e8a4:	f000 f8f1 	bl	800ea8a <HAL_SPI_TransmitReceive>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	e0ea      	b.n	800ea82 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e8b2:	2b01      	cmp	r3, #1
 800e8b4:	d101      	bne.n	800e8ba <HAL_SPI_Receive+0x52>
 800e8b6:	2302      	movs	r3, #2
 800e8b8:	e0e3      	b.n	800ea82 <HAL_SPI_Receive+0x21a>
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	2201      	movs	r2, #1
 800e8be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e8c2:	f7fc faa1 	bl	800ae08 <HAL_GetTick>
 800e8c6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e8ce:	b2db      	uxtb	r3, r3
 800e8d0:	2b01      	cmp	r3, #1
 800e8d2:	d002      	beq.n	800e8da <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e8d4:	2302      	movs	r3, #2
 800e8d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e8d8:	e0ca      	b.n	800ea70 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800e8da:	68bb      	ldr	r3, [r7, #8]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d002      	beq.n	800e8e6 <HAL_SPI_Receive+0x7e>
 800e8e0:	88fb      	ldrh	r3, [r7, #6]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d102      	bne.n	800e8ec <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e8e6:	2301      	movs	r3, #1
 800e8e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e8ea:	e0c1      	b.n	800ea70 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	2204      	movs	r2, #4
 800e8f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	68ba      	ldr	r2, [r7, #8]
 800e8fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	88fa      	ldrh	r2, [r7, #6]
 800e904:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	88fa      	ldrh	r2, [r7, #6]
 800e90a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	2200      	movs	r2, #0
 800e910:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	2200      	movs	r2, #0
 800e916:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	2200      	movs	r2, #0
 800e91c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	2200      	movs	r2, #0
 800e922:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	2200      	movs	r2, #0
 800e928:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	689b      	ldr	r3, [r3, #8]
 800e92e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e932:	d10f      	bne.n	800e954 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	681a      	ldr	r2, [r3, #0]
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e942:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	681a      	ldr	r2, [r3, #0]
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e952:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e95e:	2b40      	cmp	r3, #64	; 0x40
 800e960:	d007      	beq.n	800e972 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	681a      	ldr	r2, [r3, #0]
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e970:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	68db      	ldr	r3, [r3, #12]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d162      	bne.n	800ea40 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e97a:	e02e      	b.n	800e9da <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	689b      	ldr	r3, [r3, #8]
 800e982:	f003 0301 	and.w	r3, r3, #1
 800e986:	2b01      	cmp	r3, #1
 800e988:	d115      	bne.n	800e9b6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	f103 020c 	add.w	r2, r3, #12
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e996:	7812      	ldrb	r2, [r2, #0]
 800e998:	b2d2      	uxtb	r2, r2
 800e99a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9a0:	1c5a      	adds	r2, r3, #1
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e9aa:	b29b      	uxth	r3, r3
 800e9ac:	3b01      	subs	r3, #1
 800e9ae:	b29a      	uxth	r2, r3
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e9b4:	e011      	b.n	800e9da <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e9b6:	f7fc fa27 	bl	800ae08 <HAL_GetTick>
 800e9ba:	4602      	mov	r2, r0
 800e9bc:	693b      	ldr	r3, [r7, #16]
 800e9be:	1ad3      	subs	r3, r2, r3
 800e9c0:	683a      	ldr	r2, [r7, #0]
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	d803      	bhi.n	800e9ce <HAL_SPI_Receive+0x166>
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9cc:	d102      	bne.n	800e9d4 <HAL_SPI_Receive+0x16c>
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d102      	bne.n	800e9da <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800e9d4:	2303      	movs	r3, #3
 800e9d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e9d8:	e04a      	b.n	800ea70 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e9de:	b29b      	uxth	r3, r3
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d1cb      	bne.n	800e97c <HAL_SPI_Receive+0x114>
 800e9e4:	e031      	b.n	800ea4a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	689b      	ldr	r3, [r3, #8]
 800e9ec:	f003 0301 	and.w	r3, r3, #1
 800e9f0:	2b01      	cmp	r3, #1
 800e9f2:	d113      	bne.n	800ea1c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	68da      	ldr	r2, [r3, #12]
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9fe:	b292      	uxth	r2, r2
 800ea00:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea06:	1c9a      	adds	r2, r3, #2
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea10:	b29b      	uxth	r3, r3
 800ea12:	3b01      	subs	r3, #1
 800ea14:	b29a      	uxth	r2, r3
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ea1a:	e011      	b.n	800ea40 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ea1c:	f7fc f9f4 	bl	800ae08 <HAL_GetTick>
 800ea20:	4602      	mov	r2, r0
 800ea22:	693b      	ldr	r3, [r7, #16]
 800ea24:	1ad3      	subs	r3, r2, r3
 800ea26:	683a      	ldr	r2, [r7, #0]
 800ea28:	429a      	cmp	r2, r3
 800ea2a:	d803      	bhi.n	800ea34 <HAL_SPI_Receive+0x1cc>
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea32:	d102      	bne.n	800ea3a <HAL_SPI_Receive+0x1d2>
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d102      	bne.n	800ea40 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800ea3a:	2303      	movs	r3, #3
 800ea3c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ea3e:	e017      	b.n	800ea70 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea44:	b29b      	uxth	r3, r3
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d1cd      	bne.n	800e9e6 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ea4a:	693a      	ldr	r2, [r7, #16]
 800ea4c:	6839      	ldr	r1, [r7, #0]
 800ea4e:	68f8      	ldr	r0, [r7, #12]
 800ea50:	f000 fa54 	bl	800eefc <SPI_EndRxTransaction>
 800ea54:	4603      	mov	r3, r0
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d002      	beq.n	800ea60 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	2220      	movs	r2, #32
 800ea5e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d002      	beq.n	800ea6e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800ea68:	2301      	movs	r3, #1
 800ea6a:	75fb      	strb	r3, [r7, #23]
 800ea6c:	e000      	b.n	800ea70 <HAL_SPI_Receive+0x208>
  }

error :
 800ea6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	2201      	movs	r2, #1
 800ea74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ea80:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea82:	4618      	mov	r0, r3
 800ea84:	3718      	adds	r7, #24
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}

0800ea8a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ea8a:	b580      	push	{r7, lr}
 800ea8c:	b08c      	sub	sp, #48	; 0x30
 800ea8e:	af00      	add	r7, sp, #0
 800ea90:	60f8      	str	r0, [r7, #12]
 800ea92:	60b9      	str	r1, [r7, #8]
 800ea94:	607a      	str	r2, [r7, #4]
 800ea96:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ea98:	2301      	movs	r3, #1
 800ea9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800eaa8:	2b01      	cmp	r3, #1
 800eaaa:	d101      	bne.n	800eab0 <HAL_SPI_TransmitReceive+0x26>
 800eaac:	2302      	movs	r3, #2
 800eaae:	e18a      	b.n	800edc6 <HAL_SPI_TransmitReceive+0x33c>
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	2201      	movs	r2, #1
 800eab4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eab8:	f7fc f9a6 	bl	800ae08 <HAL_GetTick>
 800eabc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eac4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	685b      	ldr	r3, [r3, #4]
 800eacc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800eace:	887b      	ldrh	r3, [r7, #2]
 800ead0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ead2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ead6:	2b01      	cmp	r3, #1
 800ead8:	d00f      	beq.n	800eafa <HAL_SPI_TransmitReceive+0x70>
 800eada:	69fb      	ldr	r3, [r7, #28]
 800eadc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eae0:	d107      	bne.n	800eaf2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	689b      	ldr	r3, [r3, #8]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d103      	bne.n	800eaf2 <HAL_SPI_TransmitReceive+0x68>
 800eaea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eaee:	2b04      	cmp	r3, #4
 800eaf0:	d003      	beq.n	800eafa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800eaf2:	2302      	movs	r3, #2
 800eaf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800eaf8:	e15b      	b.n	800edb2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800eafa:	68bb      	ldr	r3, [r7, #8]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d005      	beq.n	800eb0c <HAL_SPI_TransmitReceive+0x82>
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d002      	beq.n	800eb0c <HAL_SPI_TransmitReceive+0x82>
 800eb06:	887b      	ldrh	r3, [r7, #2]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d103      	bne.n	800eb14 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800eb0c:	2301      	movs	r3, #1
 800eb0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800eb12:	e14e      	b.n	800edb2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eb1a:	b2db      	uxtb	r3, r3
 800eb1c:	2b04      	cmp	r3, #4
 800eb1e:	d003      	beq.n	800eb28 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	2205      	movs	r2, #5
 800eb24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	687a      	ldr	r2, [r7, #4]
 800eb32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	887a      	ldrh	r2, [r7, #2]
 800eb38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	887a      	ldrh	r2, [r7, #2]
 800eb3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	68ba      	ldr	r2, [r7, #8]
 800eb44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	887a      	ldrh	r2, [r7, #2]
 800eb4a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	887a      	ldrh	r2, [r7, #2]
 800eb50:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	2200      	movs	r2, #0
 800eb56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb68:	2b40      	cmp	r3, #64	; 0x40
 800eb6a:	d007      	beq.n	800eb7c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	681a      	ldr	r2, [r3, #0]
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eb7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	68db      	ldr	r3, [r3, #12]
 800eb80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eb84:	d178      	bne.n	800ec78 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	685b      	ldr	r3, [r3, #4]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d002      	beq.n	800eb94 <HAL_SPI_TransmitReceive+0x10a>
 800eb8e:	8b7b      	ldrh	r3, [r7, #26]
 800eb90:	2b01      	cmp	r3, #1
 800eb92:	d166      	bne.n	800ec62 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb98:	881a      	ldrh	r2, [r3, #0]
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eba4:	1c9a      	adds	r2, r3, #2
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ebae:	b29b      	uxth	r3, r3
 800ebb0:	3b01      	subs	r3, #1
 800ebb2:	b29a      	uxth	r2, r3
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ebb8:	e053      	b.n	800ec62 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	689b      	ldr	r3, [r3, #8]
 800ebc0:	f003 0302 	and.w	r3, r3, #2
 800ebc4:	2b02      	cmp	r3, #2
 800ebc6:	d11b      	bne.n	800ec00 <HAL_SPI_TransmitReceive+0x176>
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ebcc:	b29b      	uxth	r3, r3
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d016      	beq.n	800ec00 <HAL_SPI_TransmitReceive+0x176>
 800ebd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebd4:	2b01      	cmp	r3, #1
 800ebd6:	d113      	bne.n	800ec00 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebdc:	881a      	ldrh	r2, [r3, #0]
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebe8:	1c9a      	adds	r2, r3, #2
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ebf2:	b29b      	uxth	r3, r3
 800ebf4:	3b01      	subs	r3, #1
 800ebf6:	b29a      	uxth	r2, r3
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	689b      	ldr	r3, [r3, #8]
 800ec06:	f003 0301 	and.w	r3, r3, #1
 800ec0a:	2b01      	cmp	r3, #1
 800ec0c:	d119      	bne.n	800ec42 <HAL_SPI_TransmitReceive+0x1b8>
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec12:	b29b      	uxth	r3, r3
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d014      	beq.n	800ec42 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	68da      	ldr	r2, [r3, #12]
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec22:	b292      	uxth	r2, r2
 800ec24:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec2a:	1c9a      	adds	r2, r3, #2
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec34:	b29b      	uxth	r3, r3
 800ec36:	3b01      	subs	r3, #1
 800ec38:	b29a      	uxth	r2, r3
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ec3e:	2301      	movs	r3, #1
 800ec40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ec42:	f7fc f8e1 	bl	800ae08 <HAL_GetTick>
 800ec46:	4602      	mov	r2, r0
 800ec48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec4a:	1ad3      	subs	r3, r2, r3
 800ec4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	d807      	bhi.n	800ec62 <HAL_SPI_TransmitReceive+0x1d8>
 800ec52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec58:	d003      	beq.n	800ec62 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ec5a:	2303      	movs	r3, #3
 800ec5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ec60:	e0a7      	b.n	800edb2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec66:	b29b      	uxth	r3, r3
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d1a6      	bne.n	800ebba <HAL_SPI_TransmitReceive+0x130>
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec70:	b29b      	uxth	r3, r3
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d1a1      	bne.n	800ebba <HAL_SPI_TransmitReceive+0x130>
 800ec76:	e07c      	b.n	800ed72 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	685b      	ldr	r3, [r3, #4]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d002      	beq.n	800ec86 <HAL_SPI_TransmitReceive+0x1fc>
 800ec80:	8b7b      	ldrh	r3, [r7, #26]
 800ec82:	2b01      	cmp	r3, #1
 800ec84:	d16b      	bne.n	800ed5e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	330c      	adds	r3, #12
 800ec90:	7812      	ldrb	r2, [r2, #0]
 800ec92:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec98:	1c5a      	adds	r2, r3, #1
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eca2:	b29b      	uxth	r3, r3
 800eca4:	3b01      	subs	r3, #1
 800eca6:	b29a      	uxth	r2, r3
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ecac:	e057      	b.n	800ed5e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	689b      	ldr	r3, [r3, #8]
 800ecb4:	f003 0302 	and.w	r3, r3, #2
 800ecb8:	2b02      	cmp	r3, #2
 800ecba:	d11c      	bne.n	800ecf6 <HAL_SPI_TransmitReceive+0x26c>
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ecc0:	b29b      	uxth	r3, r3
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d017      	beq.n	800ecf6 <HAL_SPI_TransmitReceive+0x26c>
 800ecc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc8:	2b01      	cmp	r3, #1
 800ecca:	d114      	bne.n	800ecf6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	330c      	adds	r3, #12
 800ecd6:	7812      	ldrb	r2, [r2, #0]
 800ecd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecde:	1c5a      	adds	r2, r3, #1
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ece8:	b29b      	uxth	r3, r3
 800ecea:	3b01      	subs	r3, #1
 800ecec:	b29a      	uxth	r2, r3
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	689b      	ldr	r3, [r3, #8]
 800ecfc:	f003 0301 	and.w	r3, r3, #1
 800ed00:	2b01      	cmp	r3, #1
 800ed02:	d119      	bne.n	800ed38 <HAL_SPI_TransmitReceive+0x2ae>
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed08:	b29b      	uxth	r3, r3
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d014      	beq.n	800ed38 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	68da      	ldr	r2, [r3, #12]
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed18:	b2d2      	uxtb	r2, r2
 800ed1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed20:	1c5a      	adds	r2, r3, #1
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed2a:	b29b      	uxth	r3, r3
 800ed2c:	3b01      	subs	r3, #1
 800ed2e:	b29a      	uxth	r2, r3
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ed34:	2301      	movs	r3, #1
 800ed36:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ed38:	f7fc f866 	bl	800ae08 <HAL_GetTick>
 800ed3c:	4602      	mov	r2, r0
 800ed3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed40:	1ad3      	subs	r3, r2, r3
 800ed42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed44:	429a      	cmp	r2, r3
 800ed46:	d803      	bhi.n	800ed50 <HAL_SPI_TransmitReceive+0x2c6>
 800ed48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed4e:	d102      	bne.n	800ed56 <HAL_SPI_TransmitReceive+0x2cc>
 800ed50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d103      	bne.n	800ed5e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ed56:	2303      	movs	r3, #3
 800ed58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ed5c:	e029      	b.n	800edb2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed62:	b29b      	uxth	r3, r3
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d1a2      	bne.n	800ecae <HAL_SPI_TransmitReceive+0x224>
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed6c:	b29b      	uxth	r3, r3
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d19d      	bne.n	800ecae <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ed72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ed76:	68f8      	ldr	r0, [r7, #12]
 800ed78:	f000 f926 	bl	800efc8 <SPI_EndRxTxTransaction>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d006      	beq.n	800ed90 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ed82:	2301      	movs	r3, #1
 800ed84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	2220      	movs	r2, #32
 800ed8c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ed8e:	e010      	b.n	800edb2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	689b      	ldr	r3, [r3, #8]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d10b      	bne.n	800edb0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ed98:	2300      	movs	r3, #0
 800ed9a:	617b      	str	r3, [r7, #20]
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	68db      	ldr	r3, [r3, #12]
 800eda2:	617b      	str	r3, [r7, #20]
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	689b      	ldr	r3, [r3, #8]
 800edaa:	617b      	str	r3, [r7, #20]
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	e000      	b.n	800edb2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800edb0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	2201      	movs	r2, #1
 800edb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	2200      	movs	r2, #0
 800edbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800edc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	3730      	adds	r7, #48	; 0x30
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}

0800edce <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800edce:	b480      	push	{r7}
 800edd0:	b083      	sub	sp, #12
 800edd2:	af00      	add	r7, sp, #0
 800edd4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eddc:	b2db      	uxtb	r3, r3
}
 800edde:	4618      	mov	r0, r3
 800ede0:	370c      	adds	r7, #12
 800ede2:	46bd      	mov	sp, r7
 800ede4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede8:	4770      	bx	lr
	...

0800edec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b088      	sub	sp, #32
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	60f8      	str	r0, [r7, #12]
 800edf4:	60b9      	str	r1, [r7, #8]
 800edf6:	603b      	str	r3, [r7, #0]
 800edf8:	4613      	mov	r3, r2
 800edfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800edfc:	f7fc f804 	bl	800ae08 <HAL_GetTick>
 800ee00:	4602      	mov	r2, r0
 800ee02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee04:	1a9b      	subs	r3, r3, r2
 800ee06:	683a      	ldr	r2, [r7, #0]
 800ee08:	4413      	add	r3, r2
 800ee0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ee0c:	f7fb fffc 	bl	800ae08 <HAL_GetTick>
 800ee10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ee12:	4b39      	ldr	r3, [pc, #228]	; (800eef8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	015b      	lsls	r3, r3, #5
 800ee18:	0d1b      	lsrs	r3, r3, #20
 800ee1a:	69fa      	ldr	r2, [r7, #28]
 800ee1c:	fb02 f303 	mul.w	r3, r2, r3
 800ee20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ee22:	e054      	b.n	800eece <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee2a:	d050      	beq.n	800eece <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ee2c:	f7fb ffec 	bl	800ae08 <HAL_GetTick>
 800ee30:	4602      	mov	r2, r0
 800ee32:	69bb      	ldr	r3, [r7, #24]
 800ee34:	1ad3      	subs	r3, r2, r3
 800ee36:	69fa      	ldr	r2, [r7, #28]
 800ee38:	429a      	cmp	r2, r3
 800ee3a:	d902      	bls.n	800ee42 <SPI_WaitFlagStateUntilTimeout+0x56>
 800ee3c:	69fb      	ldr	r3, [r7, #28]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d13d      	bne.n	800eebe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	685a      	ldr	r2, [r3, #4]
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ee50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	685b      	ldr	r3, [r3, #4]
 800ee56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ee5a:	d111      	bne.n	800ee80 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	689b      	ldr	r3, [r3, #8]
 800ee60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee64:	d004      	beq.n	800ee70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	689b      	ldr	r3, [r3, #8]
 800ee6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee6e:	d107      	bne.n	800ee80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	681a      	ldr	r2, [r3, #0]
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ee7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ee88:	d10f      	bne.n	800eeaa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	681a      	ldr	r2, [r3, #0]
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ee98:	601a      	str	r2, [r3, #0]
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	681a      	ldr	r2, [r3, #0]
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800eea8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	2201      	movs	r2, #1
 800eeae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800eeba:	2303      	movs	r3, #3
 800eebc:	e017      	b.n	800eeee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800eebe:	697b      	ldr	r3, [r7, #20]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d101      	bne.n	800eec8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800eec4:	2300      	movs	r3, #0
 800eec6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800eec8:	697b      	ldr	r3, [r7, #20]
 800eeca:	3b01      	subs	r3, #1
 800eecc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	689a      	ldr	r2, [r3, #8]
 800eed4:	68bb      	ldr	r3, [r7, #8]
 800eed6:	4013      	ands	r3, r2
 800eed8:	68ba      	ldr	r2, [r7, #8]
 800eeda:	429a      	cmp	r2, r3
 800eedc:	bf0c      	ite	eq
 800eede:	2301      	moveq	r3, #1
 800eee0:	2300      	movne	r3, #0
 800eee2:	b2db      	uxtb	r3, r3
 800eee4:	461a      	mov	r2, r3
 800eee6:	79fb      	ldrb	r3, [r7, #7]
 800eee8:	429a      	cmp	r2, r3
 800eeea:	d19b      	bne.n	800ee24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800eeec:	2300      	movs	r3, #0
}
 800eeee:	4618      	mov	r0, r3
 800eef0:	3720      	adds	r7, #32
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}
 800eef6:	bf00      	nop
 800eef8:	20000000 	.word	0x20000000

0800eefc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b086      	sub	sp, #24
 800ef00:	af02      	add	r7, sp, #8
 800ef02:	60f8      	str	r0, [r7, #12]
 800ef04:	60b9      	str	r1, [r7, #8]
 800ef06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	685b      	ldr	r3, [r3, #4]
 800ef0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ef10:	d111      	bne.n	800ef36 <SPI_EndRxTransaction+0x3a>
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	689b      	ldr	r3, [r3, #8]
 800ef16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef1a:	d004      	beq.n	800ef26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	689b      	ldr	r3, [r3, #8]
 800ef20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef24:	d107      	bne.n	800ef36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	681a      	ldr	r2, [r3, #0]
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ef34:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	685b      	ldr	r3, [r3, #4]
 800ef3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ef3e:	d12a      	bne.n	800ef96 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	689b      	ldr	r3, [r3, #8]
 800ef44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef48:	d012      	beq.n	800ef70 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	9300      	str	r3, [sp, #0]
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	2200      	movs	r2, #0
 800ef52:	2180      	movs	r1, #128	; 0x80
 800ef54:	68f8      	ldr	r0, [r7, #12]
 800ef56:	f7ff ff49 	bl	800edec <SPI_WaitFlagStateUntilTimeout>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d02d      	beq.n	800efbc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef64:	f043 0220 	orr.w	r2, r3, #32
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ef6c:	2303      	movs	r3, #3
 800ef6e:	e026      	b.n	800efbe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	9300      	str	r3, [sp, #0]
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	2200      	movs	r2, #0
 800ef78:	2101      	movs	r1, #1
 800ef7a:	68f8      	ldr	r0, [r7, #12]
 800ef7c:	f7ff ff36 	bl	800edec <SPI_WaitFlagStateUntilTimeout>
 800ef80:	4603      	mov	r3, r0
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d01a      	beq.n	800efbc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef8a:	f043 0220 	orr.w	r2, r3, #32
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ef92:	2303      	movs	r3, #3
 800ef94:	e013      	b.n	800efbe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	9300      	str	r3, [sp, #0]
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	2101      	movs	r1, #1
 800efa0:	68f8      	ldr	r0, [r7, #12]
 800efa2:	f7ff ff23 	bl	800edec <SPI_WaitFlagStateUntilTimeout>
 800efa6:	4603      	mov	r3, r0
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d007      	beq.n	800efbc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efb0:	f043 0220 	orr.w	r2, r3, #32
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800efb8:	2303      	movs	r3, #3
 800efba:	e000      	b.n	800efbe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800efbc:	2300      	movs	r3, #0
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	3710      	adds	r7, #16
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd80      	pop	{r7, pc}
	...

0800efc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b088      	sub	sp, #32
 800efcc:	af02      	add	r7, sp, #8
 800efce:	60f8      	str	r0, [r7, #12]
 800efd0:	60b9      	str	r1, [r7, #8]
 800efd2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800efd4:	4b1b      	ldr	r3, [pc, #108]	; (800f044 <SPI_EndRxTxTransaction+0x7c>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	4a1b      	ldr	r2, [pc, #108]	; (800f048 <SPI_EndRxTxTransaction+0x80>)
 800efda:	fba2 2303 	umull	r2, r3, r2, r3
 800efde:	0d5b      	lsrs	r3, r3, #21
 800efe0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800efe4:	fb02 f303 	mul.w	r3, r2, r3
 800efe8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	685b      	ldr	r3, [r3, #4]
 800efee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eff2:	d112      	bne.n	800f01a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	9300      	str	r3, [sp, #0]
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	2200      	movs	r2, #0
 800effc:	2180      	movs	r1, #128	; 0x80
 800effe:	68f8      	ldr	r0, [r7, #12]
 800f000:	f7ff fef4 	bl	800edec <SPI_WaitFlagStateUntilTimeout>
 800f004:	4603      	mov	r3, r0
 800f006:	2b00      	cmp	r3, #0
 800f008:	d016      	beq.n	800f038 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f00e:	f043 0220 	orr.w	r2, r3, #32
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f016:	2303      	movs	r3, #3
 800f018:	e00f      	b.n	800f03a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f01a:	697b      	ldr	r3, [r7, #20]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d00a      	beq.n	800f036 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f020:	697b      	ldr	r3, [r7, #20]
 800f022:	3b01      	subs	r3, #1
 800f024:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	689b      	ldr	r3, [r3, #8]
 800f02c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f030:	2b80      	cmp	r3, #128	; 0x80
 800f032:	d0f2      	beq.n	800f01a <SPI_EndRxTxTransaction+0x52>
 800f034:	e000      	b.n	800f038 <SPI_EndRxTxTransaction+0x70>
        break;
 800f036:	bf00      	nop
  }

  return HAL_OK;
 800f038:	2300      	movs	r3, #0
}
 800f03a:	4618      	mov	r0, r3
 800f03c:	3718      	adds	r7, #24
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd80      	pop	{r7, pc}
 800f042:	bf00      	nop
 800f044:	20000000 	.word	0x20000000
 800f048:	165e9f81 	.word	0x165e9f81

0800f04c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b082      	sub	sp, #8
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d101      	bne.n	800f05e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f05a:	2301      	movs	r3, #1
 800f05c:	e041      	b.n	800f0e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f064:	b2db      	uxtb	r3, r3
 800f066:	2b00      	cmp	r3, #0
 800f068:	d106      	bne.n	800f078 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	2200      	movs	r2, #0
 800f06e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f072:	6878      	ldr	r0, [r7, #4]
 800f074:	f7f9 fbc6 	bl	8008804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2202      	movs	r2, #2
 800f07c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681a      	ldr	r2, [r3, #0]
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	3304      	adds	r3, #4
 800f088:	4619      	mov	r1, r3
 800f08a:	4610      	mov	r0, r2
 800f08c:	f000 fa96 	bl	800f5bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2201      	movs	r2, #1
 800f094:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2201      	movs	r2, #1
 800f09c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2201      	movs	r2, #1
 800f0a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2201      	movs	r2, #1
 800f0ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2201      	movs	r2, #1
 800f0b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2201      	movs	r2, #1
 800f0bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2201      	movs	r2, #1
 800f0c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2201      	movs	r2, #1
 800f0cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2201      	movs	r2, #1
 800f0d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2201      	movs	r2, #1
 800f0dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f0e0:	2300      	movs	r3, #0
}
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	3708      	adds	r7, #8
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}
	...

0800f0ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b085      	sub	sp, #20
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f0fa:	b2db      	uxtb	r3, r3
 800f0fc:	2b01      	cmp	r3, #1
 800f0fe:	d001      	beq.n	800f104 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f100:	2301      	movs	r3, #1
 800f102:	e04e      	b.n	800f1a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2202      	movs	r2, #2
 800f108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	68da      	ldr	r2, [r3, #12]
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	f042 0201 	orr.w	r2, r2, #1
 800f11a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	4a23      	ldr	r2, [pc, #140]	; (800f1b0 <HAL_TIM_Base_Start_IT+0xc4>)
 800f122:	4293      	cmp	r3, r2
 800f124:	d022      	beq.n	800f16c <HAL_TIM_Base_Start_IT+0x80>
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f12e:	d01d      	beq.n	800f16c <HAL_TIM_Base_Start_IT+0x80>
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	4a1f      	ldr	r2, [pc, #124]	; (800f1b4 <HAL_TIM_Base_Start_IT+0xc8>)
 800f136:	4293      	cmp	r3, r2
 800f138:	d018      	beq.n	800f16c <HAL_TIM_Base_Start_IT+0x80>
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	4a1e      	ldr	r2, [pc, #120]	; (800f1b8 <HAL_TIM_Base_Start_IT+0xcc>)
 800f140:	4293      	cmp	r3, r2
 800f142:	d013      	beq.n	800f16c <HAL_TIM_Base_Start_IT+0x80>
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	4a1c      	ldr	r2, [pc, #112]	; (800f1bc <HAL_TIM_Base_Start_IT+0xd0>)
 800f14a:	4293      	cmp	r3, r2
 800f14c:	d00e      	beq.n	800f16c <HAL_TIM_Base_Start_IT+0x80>
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	4a1b      	ldr	r2, [pc, #108]	; (800f1c0 <HAL_TIM_Base_Start_IT+0xd4>)
 800f154:	4293      	cmp	r3, r2
 800f156:	d009      	beq.n	800f16c <HAL_TIM_Base_Start_IT+0x80>
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	4a19      	ldr	r2, [pc, #100]	; (800f1c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800f15e:	4293      	cmp	r3, r2
 800f160:	d004      	beq.n	800f16c <HAL_TIM_Base_Start_IT+0x80>
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	4a18      	ldr	r2, [pc, #96]	; (800f1c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800f168:	4293      	cmp	r3, r2
 800f16a:	d111      	bne.n	800f190 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	689b      	ldr	r3, [r3, #8]
 800f172:	f003 0307 	and.w	r3, r3, #7
 800f176:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	2b06      	cmp	r3, #6
 800f17c:	d010      	beq.n	800f1a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	681a      	ldr	r2, [r3, #0]
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	f042 0201 	orr.w	r2, r2, #1
 800f18c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f18e:	e007      	b.n	800f1a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	681a      	ldr	r2, [r3, #0]
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	f042 0201 	orr.w	r2, r2, #1
 800f19e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f1a0:	2300      	movs	r3, #0
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3714      	adds	r7, #20
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ac:	4770      	bx	lr
 800f1ae:	bf00      	nop
 800f1b0:	40010000 	.word	0x40010000
 800f1b4:	40000400 	.word	0x40000400
 800f1b8:	40000800 	.word	0x40000800
 800f1bc:	40000c00 	.word	0x40000c00
 800f1c0:	40010400 	.word	0x40010400
 800f1c4:	40014000 	.word	0x40014000
 800f1c8:	40001800 	.word	0x40001800

0800f1cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b082      	sub	sp, #8
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	691b      	ldr	r3, [r3, #16]
 800f1da:	f003 0302 	and.w	r3, r3, #2
 800f1de:	2b02      	cmp	r3, #2
 800f1e0:	d122      	bne.n	800f228 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	68db      	ldr	r3, [r3, #12]
 800f1e8:	f003 0302 	and.w	r3, r3, #2
 800f1ec:	2b02      	cmp	r3, #2
 800f1ee:	d11b      	bne.n	800f228 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	f06f 0202 	mvn.w	r2, #2
 800f1f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2201      	movs	r2, #1
 800f1fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	699b      	ldr	r3, [r3, #24]
 800f206:	f003 0303 	and.w	r3, r3, #3
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d003      	beq.n	800f216 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f20e:	6878      	ldr	r0, [r7, #4]
 800f210:	f000 f9b5 	bl	800f57e <HAL_TIM_IC_CaptureCallback>
 800f214:	e005      	b.n	800f222 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f216:	6878      	ldr	r0, [r7, #4]
 800f218:	f000 f9a7 	bl	800f56a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f21c:	6878      	ldr	r0, [r7, #4]
 800f21e:	f000 f9b8 	bl	800f592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	2200      	movs	r2, #0
 800f226:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	691b      	ldr	r3, [r3, #16]
 800f22e:	f003 0304 	and.w	r3, r3, #4
 800f232:	2b04      	cmp	r3, #4
 800f234:	d122      	bne.n	800f27c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	68db      	ldr	r3, [r3, #12]
 800f23c:	f003 0304 	and.w	r3, r3, #4
 800f240:	2b04      	cmp	r3, #4
 800f242:	d11b      	bne.n	800f27c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	f06f 0204 	mvn.w	r2, #4
 800f24c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2202      	movs	r2, #2
 800f252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	699b      	ldr	r3, [r3, #24]
 800f25a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d003      	beq.n	800f26a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	f000 f98b 	bl	800f57e <HAL_TIM_IC_CaptureCallback>
 800f268:	e005      	b.n	800f276 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f26a:	6878      	ldr	r0, [r7, #4]
 800f26c:	f000 f97d 	bl	800f56a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f270:	6878      	ldr	r0, [r7, #4]
 800f272:	f000 f98e 	bl	800f592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2200      	movs	r2, #0
 800f27a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	691b      	ldr	r3, [r3, #16]
 800f282:	f003 0308 	and.w	r3, r3, #8
 800f286:	2b08      	cmp	r3, #8
 800f288:	d122      	bne.n	800f2d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	68db      	ldr	r3, [r3, #12]
 800f290:	f003 0308 	and.w	r3, r3, #8
 800f294:	2b08      	cmp	r3, #8
 800f296:	d11b      	bne.n	800f2d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	f06f 0208 	mvn.w	r2, #8
 800f2a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	2204      	movs	r2, #4
 800f2a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	69db      	ldr	r3, [r3, #28]
 800f2ae:	f003 0303 	and.w	r3, r3, #3
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d003      	beq.n	800f2be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	f000 f961 	bl	800f57e <HAL_TIM_IC_CaptureCallback>
 800f2bc:	e005      	b.n	800f2ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f2be:	6878      	ldr	r0, [r7, #4]
 800f2c0:	f000 f953 	bl	800f56a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	f000 f964 	bl	800f592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	691b      	ldr	r3, [r3, #16]
 800f2d6:	f003 0310 	and.w	r3, r3, #16
 800f2da:	2b10      	cmp	r3, #16
 800f2dc:	d122      	bne.n	800f324 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	68db      	ldr	r3, [r3, #12]
 800f2e4:	f003 0310 	and.w	r3, r3, #16
 800f2e8:	2b10      	cmp	r3, #16
 800f2ea:	d11b      	bne.n	800f324 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	f06f 0210 	mvn.w	r2, #16
 800f2f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	2208      	movs	r2, #8
 800f2fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	69db      	ldr	r3, [r3, #28]
 800f302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f306:	2b00      	cmp	r3, #0
 800f308:	d003      	beq.n	800f312 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f000 f937 	bl	800f57e <HAL_TIM_IC_CaptureCallback>
 800f310:	e005      	b.n	800f31e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f000 f929 	bl	800f56a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f318:	6878      	ldr	r0, [r7, #4]
 800f31a:	f000 f93a 	bl	800f592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	2200      	movs	r2, #0
 800f322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	691b      	ldr	r3, [r3, #16]
 800f32a:	f003 0301 	and.w	r3, r3, #1
 800f32e:	2b01      	cmp	r3, #1
 800f330:	d10e      	bne.n	800f350 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	68db      	ldr	r3, [r3, #12]
 800f338:	f003 0301 	and.w	r3, r3, #1
 800f33c:	2b01      	cmp	r3, #1
 800f33e:	d107      	bne.n	800f350 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	f06f 0201 	mvn.w	r2, #1
 800f348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f34a:	6878      	ldr	r0, [r7, #4]
 800f34c:	f7f8 ffc0 	bl	80082d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	691b      	ldr	r3, [r3, #16]
 800f356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f35a:	2b80      	cmp	r3, #128	; 0x80
 800f35c:	d10e      	bne.n	800f37c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	68db      	ldr	r3, [r3, #12]
 800f364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f368:	2b80      	cmp	r3, #128	; 0x80
 800f36a:	d107      	bne.n	800f37c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f376:	6878      	ldr	r0, [r7, #4]
 800f378:	f000 fae0 	bl	800f93c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	691b      	ldr	r3, [r3, #16]
 800f382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f386:	2b40      	cmp	r3, #64	; 0x40
 800f388:	d10e      	bne.n	800f3a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	68db      	ldr	r3, [r3, #12]
 800f390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f394:	2b40      	cmp	r3, #64	; 0x40
 800f396:	d107      	bne.n	800f3a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f3a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f000 f8ff 	bl	800f5a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	691b      	ldr	r3, [r3, #16]
 800f3ae:	f003 0320 	and.w	r3, r3, #32
 800f3b2:	2b20      	cmp	r3, #32
 800f3b4:	d10e      	bne.n	800f3d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	68db      	ldr	r3, [r3, #12]
 800f3bc:	f003 0320 	and.w	r3, r3, #32
 800f3c0:	2b20      	cmp	r3, #32
 800f3c2:	d107      	bne.n	800f3d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	f06f 0220 	mvn.w	r2, #32
 800f3cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f000 faaa 	bl	800f928 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f3d4:	bf00      	nop
 800f3d6:	3708      	adds	r7, #8
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	bd80      	pop	{r7, pc}

0800f3dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b084      	sub	sp, #16
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
 800f3e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f3f0:	2b01      	cmp	r3, #1
 800f3f2:	d101      	bne.n	800f3f8 <HAL_TIM_ConfigClockSource+0x1c>
 800f3f4:	2302      	movs	r3, #2
 800f3f6:	e0b4      	b.n	800f562 <HAL_TIM_ConfigClockSource+0x186>
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2201      	movs	r2, #1
 800f3fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2202      	movs	r2, #2
 800f404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	689b      	ldr	r3, [r3, #8]
 800f40e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800f416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f41e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	68ba      	ldr	r2, [r7, #8]
 800f426:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f430:	d03e      	beq.n	800f4b0 <HAL_TIM_ConfigClockSource+0xd4>
 800f432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f436:	f200 8087 	bhi.w	800f548 <HAL_TIM_ConfigClockSource+0x16c>
 800f43a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f43e:	f000 8086 	beq.w	800f54e <HAL_TIM_ConfigClockSource+0x172>
 800f442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f446:	d87f      	bhi.n	800f548 <HAL_TIM_ConfigClockSource+0x16c>
 800f448:	2b70      	cmp	r3, #112	; 0x70
 800f44a:	d01a      	beq.n	800f482 <HAL_TIM_ConfigClockSource+0xa6>
 800f44c:	2b70      	cmp	r3, #112	; 0x70
 800f44e:	d87b      	bhi.n	800f548 <HAL_TIM_ConfigClockSource+0x16c>
 800f450:	2b60      	cmp	r3, #96	; 0x60
 800f452:	d050      	beq.n	800f4f6 <HAL_TIM_ConfigClockSource+0x11a>
 800f454:	2b60      	cmp	r3, #96	; 0x60
 800f456:	d877      	bhi.n	800f548 <HAL_TIM_ConfigClockSource+0x16c>
 800f458:	2b50      	cmp	r3, #80	; 0x50
 800f45a:	d03c      	beq.n	800f4d6 <HAL_TIM_ConfigClockSource+0xfa>
 800f45c:	2b50      	cmp	r3, #80	; 0x50
 800f45e:	d873      	bhi.n	800f548 <HAL_TIM_ConfigClockSource+0x16c>
 800f460:	2b40      	cmp	r3, #64	; 0x40
 800f462:	d058      	beq.n	800f516 <HAL_TIM_ConfigClockSource+0x13a>
 800f464:	2b40      	cmp	r3, #64	; 0x40
 800f466:	d86f      	bhi.n	800f548 <HAL_TIM_ConfigClockSource+0x16c>
 800f468:	2b30      	cmp	r3, #48	; 0x30
 800f46a:	d064      	beq.n	800f536 <HAL_TIM_ConfigClockSource+0x15a>
 800f46c:	2b30      	cmp	r3, #48	; 0x30
 800f46e:	d86b      	bhi.n	800f548 <HAL_TIM_ConfigClockSource+0x16c>
 800f470:	2b20      	cmp	r3, #32
 800f472:	d060      	beq.n	800f536 <HAL_TIM_ConfigClockSource+0x15a>
 800f474:	2b20      	cmp	r3, #32
 800f476:	d867      	bhi.n	800f548 <HAL_TIM_ConfigClockSource+0x16c>
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d05c      	beq.n	800f536 <HAL_TIM_ConfigClockSource+0x15a>
 800f47c:	2b10      	cmp	r3, #16
 800f47e:	d05a      	beq.n	800f536 <HAL_TIM_ConfigClockSource+0x15a>
 800f480:	e062      	b.n	800f548 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	6818      	ldr	r0, [r3, #0]
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	6899      	ldr	r1, [r3, #8]
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	685a      	ldr	r2, [r3, #4]
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	68db      	ldr	r3, [r3, #12]
 800f492:	f000 f9ad 	bl	800f7f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	689b      	ldr	r3, [r3, #8]
 800f49c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f4a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	68ba      	ldr	r2, [r7, #8]
 800f4ac:	609a      	str	r2, [r3, #8]
      break;
 800f4ae:	e04f      	b.n	800f550 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	6818      	ldr	r0, [r3, #0]
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	6899      	ldr	r1, [r3, #8]
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	685a      	ldr	r2, [r3, #4]
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	68db      	ldr	r3, [r3, #12]
 800f4c0:	f000 f996 	bl	800f7f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	689a      	ldr	r2, [r3, #8]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f4d2:	609a      	str	r2, [r3, #8]
      break;
 800f4d4:	e03c      	b.n	800f550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	6818      	ldr	r0, [r3, #0]
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	6859      	ldr	r1, [r3, #4]
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	68db      	ldr	r3, [r3, #12]
 800f4e2:	461a      	mov	r2, r3
 800f4e4:	f000 f90a 	bl	800f6fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	2150      	movs	r1, #80	; 0x50
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f000 f963 	bl	800f7ba <TIM_ITRx_SetConfig>
      break;
 800f4f4:	e02c      	b.n	800f550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	6818      	ldr	r0, [r3, #0]
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	6859      	ldr	r1, [r3, #4]
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	68db      	ldr	r3, [r3, #12]
 800f502:	461a      	mov	r2, r3
 800f504:	f000 f929 	bl	800f75a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	2160      	movs	r1, #96	; 0x60
 800f50e:	4618      	mov	r0, r3
 800f510:	f000 f953 	bl	800f7ba <TIM_ITRx_SetConfig>
      break;
 800f514:	e01c      	b.n	800f550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	6818      	ldr	r0, [r3, #0]
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	6859      	ldr	r1, [r3, #4]
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	68db      	ldr	r3, [r3, #12]
 800f522:	461a      	mov	r2, r3
 800f524:	f000 f8ea 	bl	800f6fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	2140      	movs	r1, #64	; 0x40
 800f52e:	4618      	mov	r0, r3
 800f530:	f000 f943 	bl	800f7ba <TIM_ITRx_SetConfig>
      break;
 800f534:	e00c      	b.n	800f550 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	681a      	ldr	r2, [r3, #0]
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	4619      	mov	r1, r3
 800f540:	4610      	mov	r0, r2
 800f542:	f000 f93a 	bl	800f7ba <TIM_ITRx_SetConfig>
      break;
 800f546:	e003      	b.n	800f550 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800f548:	2301      	movs	r3, #1
 800f54a:	73fb      	strb	r3, [r7, #15]
      break;
 800f54c:	e000      	b.n	800f550 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800f54e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2201      	movs	r2, #1
 800f554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2200      	movs	r2, #0
 800f55c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f560:	7bfb      	ldrb	r3, [r7, #15]
}
 800f562:	4618      	mov	r0, r3
 800f564:	3710      	adds	r7, #16
 800f566:	46bd      	mov	sp, r7
 800f568:	bd80      	pop	{r7, pc}

0800f56a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f56a:	b480      	push	{r7}
 800f56c:	b083      	sub	sp, #12
 800f56e:	af00      	add	r7, sp, #0
 800f570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f572:	bf00      	nop
 800f574:	370c      	adds	r7, #12
 800f576:	46bd      	mov	sp, r7
 800f578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57c:	4770      	bx	lr

0800f57e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f57e:	b480      	push	{r7}
 800f580:	b083      	sub	sp, #12
 800f582:	af00      	add	r7, sp, #0
 800f584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f586:	bf00      	nop
 800f588:	370c      	adds	r7, #12
 800f58a:	46bd      	mov	sp, r7
 800f58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f590:	4770      	bx	lr

0800f592 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f592:	b480      	push	{r7}
 800f594:	b083      	sub	sp, #12
 800f596:	af00      	add	r7, sp, #0
 800f598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f59a:	bf00      	nop
 800f59c:	370c      	adds	r7, #12
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a4:	4770      	bx	lr

0800f5a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f5a6:	b480      	push	{r7}
 800f5a8:	b083      	sub	sp, #12
 800f5aa:	af00      	add	r7, sp, #0
 800f5ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f5ae:	bf00      	nop
 800f5b0:	370c      	adds	r7, #12
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b8:	4770      	bx	lr
	...

0800f5bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f5bc:	b480      	push	{r7}
 800f5be:	b085      	sub	sp, #20
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	4a40      	ldr	r2, [pc, #256]	; (800f6d0 <TIM_Base_SetConfig+0x114>)
 800f5d0:	4293      	cmp	r3, r2
 800f5d2:	d013      	beq.n	800f5fc <TIM_Base_SetConfig+0x40>
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f5da:	d00f      	beq.n	800f5fc <TIM_Base_SetConfig+0x40>
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	4a3d      	ldr	r2, [pc, #244]	; (800f6d4 <TIM_Base_SetConfig+0x118>)
 800f5e0:	4293      	cmp	r3, r2
 800f5e2:	d00b      	beq.n	800f5fc <TIM_Base_SetConfig+0x40>
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	4a3c      	ldr	r2, [pc, #240]	; (800f6d8 <TIM_Base_SetConfig+0x11c>)
 800f5e8:	4293      	cmp	r3, r2
 800f5ea:	d007      	beq.n	800f5fc <TIM_Base_SetConfig+0x40>
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	4a3b      	ldr	r2, [pc, #236]	; (800f6dc <TIM_Base_SetConfig+0x120>)
 800f5f0:	4293      	cmp	r3, r2
 800f5f2:	d003      	beq.n	800f5fc <TIM_Base_SetConfig+0x40>
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	4a3a      	ldr	r2, [pc, #232]	; (800f6e0 <TIM_Base_SetConfig+0x124>)
 800f5f8:	4293      	cmp	r3, r2
 800f5fa:	d108      	bne.n	800f60e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f602:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f604:	683b      	ldr	r3, [r7, #0]
 800f606:	685b      	ldr	r3, [r3, #4]
 800f608:	68fa      	ldr	r2, [r7, #12]
 800f60a:	4313      	orrs	r3, r2
 800f60c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	4a2f      	ldr	r2, [pc, #188]	; (800f6d0 <TIM_Base_SetConfig+0x114>)
 800f612:	4293      	cmp	r3, r2
 800f614:	d02b      	beq.n	800f66e <TIM_Base_SetConfig+0xb2>
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f61c:	d027      	beq.n	800f66e <TIM_Base_SetConfig+0xb2>
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	4a2c      	ldr	r2, [pc, #176]	; (800f6d4 <TIM_Base_SetConfig+0x118>)
 800f622:	4293      	cmp	r3, r2
 800f624:	d023      	beq.n	800f66e <TIM_Base_SetConfig+0xb2>
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	4a2b      	ldr	r2, [pc, #172]	; (800f6d8 <TIM_Base_SetConfig+0x11c>)
 800f62a:	4293      	cmp	r3, r2
 800f62c:	d01f      	beq.n	800f66e <TIM_Base_SetConfig+0xb2>
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	4a2a      	ldr	r2, [pc, #168]	; (800f6dc <TIM_Base_SetConfig+0x120>)
 800f632:	4293      	cmp	r3, r2
 800f634:	d01b      	beq.n	800f66e <TIM_Base_SetConfig+0xb2>
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	4a29      	ldr	r2, [pc, #164]	; (800f6e0 <TIM_Base_SetConfig+0x124>)
 800f63a:	4293      	cmp	r3, r2
 800f63c:	d017      	beq.n	800f66e <TIM_Base_SetConfig+0xb2>
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	4a28      	ldr	r2, [pc, #160]	; (800f6e4 <TIM_Base_SetConfig+0x128>)
 800f642:	4293      	cmp	r3, r2
 800f644:	d013      	beq.n	800f66e <TIM_Base_SetConfig+0xb2>
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	4a27      	ldr	r2, [pc, #156]	; (800f6e8 <TIM_Base_SetConfig+0x12c>)
 800f64a:	4293      	cmp	r3, r2
 800f64c:	d00f      	beq.n	800f66e <TIM_Base_SetConfig+0xb2>
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	4a26      	ldr	r2, [pc, #152]	; (800f6ec <TIM_Base_SetConfig+0x130>)
 800f652:	4293      	cmp	r3, r2
 800f654:	d00b      	beq.n	800f66e <TIM_Base_SetConfig+0xb2>
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	4a25      	ldr	r2, [pc, #148]	; (800f6f0 <TIM_Base_SetConfig+0x134>)
 800f65a:	4293      	cmp	r3, r2
 800f65c:	d007      	beq.n	800f66e <TIM_Base_SetConfig+0xb2>
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	4a24      	ldr	r2, [pc, #144]	; (800f6f4 <TIM_Base_SetConfig+0x138>)
 800f662:	4293      	cmp	r3, r2
 800f664:	d003      	beq.n	800f66e <TIM_Base_SetConfig+0xb2>
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	4a23      	ldr	r2, [pc, #140]	; (800f6f8 <TIM_Base_SetConfig+0x13c>)
 800f66a:	4293      	cmp	r3, r2
 800f66c:	d108      	bne.n	800f680 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f676:	683b      	ldr	r3, [r7, #0]
 800f678:	68db      	ldr	r3, [r3, #12]
 800f67a:	68fa      	ldr	r2, [r7, #12]
 800f67c:	4313      	orrs	r3, r2
 800f67e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f686:	683b      	ldr	r3, [r7, #0]
 800f688:	695b      	ldr	r3, [r3, #20]
 800f68a:	4313      	orrs	r3, r2
 800f68c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	68fa      	ldr	r2, [r7, #12]
 800f692:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	689a      	ldr	r2, [r3, #8]
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	681a      	ldr	r2, [r3, #0]
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	4a0a      	ldr	r2, [pc, #40]	; (800f6d0 <TIM_Base_SetConfig+0x114>)
 800f6a8:	4293      	cmp	r3, r2
 800f6aa:	d003      	beq.n	800f6b4 <TIM_Base_SetConfig+0xf8>
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	4a0c      	ldr	r2, [pc, #48]	; (800f6e0 <TIM_Base_SetConfig+0x124>)
 800f6b0:	4293      	cmp	r3, r2
 800f6b2:	d103      	bne.n	800f6bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	691a      	ldr	r2, [r3, #16]
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	2201      	movs	r2, #1
 800f6c0:	615a      	str	r2, [r3, #20]
}
 800f6c2:	bf00      	nop
 800f6c4:	3714      	adds	r7, #20
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6cc:	4770      	bx	lr
 800f6ce:	bf00      	nop
 800f6d0:	40010000 	.word	0x40010000
 800f6d4:	40000400 	.word	0x40000400
 800f6d8:	40000800 	.word	0x40000800
 800f6dc:	40000c00 	.word	0x40000c00
 800f6e0:	40010400 	.word	0x40010400
 800f6e4:	40014000 	.word	0x40014000
 800f6e8:	40014400 	.word	0x40014400
 800f6ec:	40014800 	.word	0x40014800
 800f6f0:	40001800 	.word	0x40001800
 800f6f4:	40001c00 	.word	0x40001c00
 800f6f8:	40002000 	.word	0x40002000

0800f6fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f6fc:	b480      	push	{r7}
 800f6fe:	b087      	sub	sp, #28
 800f700:	af00      	add	r7, sp, #0
 800f702:	60f8      	str	r0, [r7, #12]
 800f704:	60b9      	str	r1, [r7, #8]
 800f706:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	6a1b      	ldr	r3, [r3, #32]
 800f70c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	6a1b      	ldr	r3, [r3, #32]
 800f712:	f023 0201 	bic.w	r2, r3, #1
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	699b      	ldr	r3, [r3, #24]
 800f71e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f720:	693b      	ldr	r3, [r7, #16]
 800f722:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f726:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	011b      	lsls	r3, r3, #4
 800f72c:	693a      	ldr	r2, [r7, #16]
 800f72e:	4313      	orrs	r3, r2
 800f730:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	f023 030a 	bic.w	r3, r3, #10
 800f738:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f73a:	697a      	ldr	r2, [r7, #20]
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	4313      	orrs	r3, r2
 800f740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	693a      	ldr	r2, [r7, #16]
 800f746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	697a      	ldr	r2, [r7, #20]
 800f74c:	621a      	str	r2, [r3, #32]
}
 800f74e:	bf00      	nop
 800f750:	371c      	adds	r7, #28
 800f752:	46bd      	mov	sp, r7
 800f754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f758:	4770      	bx	lr

0800f75a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f75a:	b480      	push	{r7}
 800f75c:	b087      	sub	sp, #28
 800f75e:	af00      	add	r7, sp, #0
 800f760:	60f8      	str	r0, [r7, #12]
 800f762:	60b9      	str	r1, [r7, #8]
 800f764:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	6a1b      	ldr	r3, [r3, #32]
 800f76a:	f023 0210 	bic.w	r2, r3, #16
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	699b      	ldr	r3, [r3, #24]
 800f776:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	6a1b      	ldr	r3, [r3, #32]
 800f77c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f77e:	697b      	ldr	r3, [r7, #20]
 800f780:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f784:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	031b      	lsls	r3, r3, #12
 800f78a:	697a      	ldr	r2, [r7, #20]
 800f78c:	4313      	orrs	r3, r2
 800f78e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f790:	693b      	ldr	r3, [r7, #16]
 800f792:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f796:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	011b      	lsls	r3, r3, #4
 800f79c:	693a      	ldr	r2, [r7, #16]
 800f79e:	4313      	orrs	r3, r2
 800f7a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	697a      	ldr	r2, [r7, #20]
 800f7a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	693a      	ldr	r2, [r7, #16]
 800f7ac:	621a      	str	r2, [r3, #32]
}
 800f7ae:	bf00      	nop
 800f7b0:	371c      	adds	r7, #28
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b8:	4770      	bx	lr

0800f7ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f7ba:	b480      	push	{r7}
 800f7bc:	b085      	sub	sp, #20
 800f7be:	af00      	add	r7, sp, #0
 800f7c0:	6078      	str	r0, [r7, #4]
 800f7c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	689b      	ldr	r3, [r3, #8]
 800f7c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f7d2:	683a      	ldr	r2, [r7, #0]
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	4313      	orrs	r3, r2
 800f7d8:	f043 0307 	orr.w	r3, r3, #7
 800f7dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	68fa      	ldr	r2, [r7, #12]
 800f7e2:	609a      	str	r2, [r3, #8]
}
 800f7e4:	bf00      	nop
 800f7e6:	3714      	adds	r7, #20
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ee:	4770      	bx	lr

0800f7f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f7f0:	b480      	push	{r7}
 800f7f2:	b087      	sub	sp, #28
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	60f8      	str	r0, [r7, #12]
 800f7f8:	60b9      	str	r1, [r7, #8]
 800f7fa:	607a      	str	r2, [r7, #4]
 800f7fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	689b      	ldr	r3, [r3, #8]
 800f802:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f804:	697b      	ldr	r3, [r7, #20]
 800f806:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f80a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f80c:	683b      	ldr	r3, [r7, #0]
 800f80e:	021a      	lsls	r2, r3, #8
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	431a      	orrs	r2, r3
 800f814:	68bb      	ldr	r3, [r7, #8]
 800f816:	4313      	orrs	r3, r2
 800f818:	697a      	ldr	r2, [r7, #20]
 800f81a:	4313      	orrs	r3, r2
 800f81c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	697a      	ldr	r2, [r7, #20]
 800f822:	609a      	str	r2, [r3, #8]
}
 800f824:	bf00      	nop
 800f826:	371c      	adds	r7, #28
 800f828:	46bd      	mov	sp, r7
 800f82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82e:	4770      	bx	lr

0800f830 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f830:	b480      	push	{r7}
 800f832:	b085      	sub	sp, #20
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
 800f838:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f840:	2b01      	cmp	r3, #1
 800f842:	d101      	bne.n	800f848 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f844:	2302      	movs	r3, #2
 800f846:	e05a      	b.n	800f8fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	2201      	movs	r2, #1
 800f84c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	2202      	movs	r2, #2
 800f854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	685b      	ldr	r3, [r3, #4]
 800f85e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	689b      	ldr	r3, [r3, #8]
 800f866:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f86e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	68fa      	ldr	r2, [r7, #12]
 800f876:	4313      	orrs	r3, r2
 800f878:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	68fa      	ldr	r2, [r7, #12]
 800f880:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	4a21      	ldr	r2, [pc, #132]	; (800f90c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f888:	4293      	cmp	r3, r2
 800f88a:	d022      	beq.n	800f8d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f894:	d01d      	beq.n	800f8d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	4a1d      	ldr	r2, [pc, #116]	; (800f910 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f89c:	4293      	cmp	r3, r2
 800f89e:	d018      	beq.n	800f8d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	4a1b      	ldr	r2, [pc, #108]	; (800f914 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f8a6:	4293      	cmp	r3, r2
 800f8a8:	d013      	beq.n	800f8d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	4a1a      	ldr	r2, [pc, #104]	; (800f918 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f8b0:	4293      	cmp	r3, r2
 800f8b2:	d00e      	beq.n	800f8d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	4a18      	ldr	r2, [pc, #96]	; (800f91c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	d009      	beq.n	800f8d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	4a17      	ldr	r2, [pc, #92]	; (800f920 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f8c4:	4293      	cmp	r3, r2
 800f8c6:	d004      	beq.n	800f8d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	4a15      	ldr	r2, [pc, #84]	; (800f924 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f8ce:	4293      	cmp	r3, r2
 800f8d0:	d10c      	bne.n	800f8ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f8d2:	68bb      	ldr	r3, [r7, #8]
 800f8d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f8d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f8da:	683b      	ldr	r3, [r7, #0]
 800f8dc:	685b      	ldr	r3, [r3, #4]
 800f8de:	68ba      	ldr	r2, [r7, #8]
 800f8e0:	4313      	orrs	r3, r2
 800f8e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	68ba      	ldr	r2, [r7, #8]
 800f8ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	2201      	movs	r2, #1
 800f8f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f8fc:	2300      	movs	r3, #0
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	3714      	adds	r7, #20
 800f902:	46bd      	mov	sp, r7
 800f904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f908:	4770      	bx	lr
 800f90a:	bf00      	nop
 800f90c:	40010000 	.word	0x40010000
 800f910:	40000400 	.word	0x40000400
 800f914:	40000800 	.word	0x40000800
 800f918:	40000c00 	.word	0x40000c00
 800f91c:	40010400 	.word	0x40010400
 800f920:	40014000 	.word	0x40014000
 800f924:	40001800 	.word	0x40001800

0800f928 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f928:	b480      	push	{r7}
 800f92a:	b083      	sub	sp, #12
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f930:	bf00      	nop
 800f932:	370c      	adds	r7, #12
 800f934:	46bd      	mov	sp, r7
 800f936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93a:	4770      	bx	lr

0800f93c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f93c:	b480      	push	{r7}
 800f93e:	b083      	sub	sp, #12
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f944:	bf00      	nop
 800f946:	370c      	adds	r7, #12
 800f948:	46bd      	mov	sp, r7
 800f94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94e:	4770      	bx	lr

0800f950 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b082      	sub	sp, #8
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d101      	bne.n	800f962 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f95e:	2301      	movs	r3, #1
 800f960:	e03f      	b.n	800f9e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f968:	b2db      	uxtb	r3, r3
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d106      	bne.n	800f97c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	2200      	movs	r2, #0
 800f972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f7f8 ff90 	bl	800889c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2224      	movs	r2, #36	; 0x24
 800f980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	68da      	ldr	r2, [r3, #12]
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f992:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f994:	6878      	ldr	r0, [r7, #4]
 800f996:	f000 f929 	bl	800fbec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	691a      	ldr	r2, [r3, #16]
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f9a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	695a      	ldr	r2, [r3, #20]
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f9b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	68da      	ldr	r2, [r3, #12]
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f9c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2220      	movs	r2, #32
 800f9d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	2220      	movs	r2, #32
 800f9dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800f9e0:	2300      	movs	r3, #0
}
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	3708      	adds	r7, #8
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}

0800f9ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f9ea:	b580      	push	{r7, lr}
 800f9ec:	b08a      	sub	sp, #40	; 0x28
 800f9ee:	af02      	add	r7, sp, #8
 800f9f0:	60f8      	str	r0, [r7, #12]
 800f9f2:	60b9      	str	r1, [r7, #8]
 800f9f4:	603b      	str	r3, [r7, #0]
 800f9f6:	4613      	mov	r3, r2
 800f9f8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fa04:	b2db      	uxtb	r3, r3
 800fa06:	2b20      	cmp	r3, #32
 800fa08:	d17c      	bne.n	800fb04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800fa0a:	68bb      	ldr	r3, [r7, #8]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d002      	beq.n	800fa16 <HAL_UART_Transmit+0x2c>
 800fa10:	88fb      	ldrh	r3, [r7, #6]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d101      	bne.n	800fa1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800fa16:	2301      	movs	r3, #1
 800fa18:	e075      	b.n	800fb06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fa20:	2b01      	cmp	r3, #1
 800fa22:	d101      	bne.n	800fa28 <HAL_UART_Transmit+0x3e>
 800fa24:	2302      	movs	r3, #2
 800fa26:	e06e      	b.n	800fb06 <HAL_UART_Transmit+0x11c>
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	2201      	movs	r2, #1
 800fa2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	2200      	movs	r2, #0
 800fa34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	2221      	movs	r2, #33	; 0x21
 800fa3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fa3e:	f7fb f9e3 	bl	800ae08 <HAL_GetTick>
 800fa42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	88fa      	ldrh	r2, [r7, #6]
 800fa48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	88fa      	ldrh	r2, [r7, #6]
 800fa4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	689b      	ldr	r3, [r3, #8]
 800fa54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fa58:	d108      	bne.n	800fa6c <HAL_UART_Transmit+0x82>
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	691b      	ldr	r3, [r3, #16]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d104      	bne.n	800fa6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800fa62:	2300      	movs	r3, #0
 800fa64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800fa66:	68bb      	ldr	r3, [r7, #8]
 800fa68:	61bb      	str	r3, [r7, #24]
 800fa6a:	e003      	b.n	800fa74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800fa6c:	68bb      	ldr	r3, [r7, #8]
 800fa6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fa70:	2300      	movs	r3, #0
 800fa72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	2200      	movs	r2, #0
 800fa78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800fa7c:	e02a      	b.n	800fad4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	9300      	str	r3, [sp, #0]
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	2200      	movs	r2, #0
 800fa86:	2180      	movs	r1, #128	; 0x80
 800fa88:	68f8      	ldr	r0, [r7, #12]
 800fa8a:	f000 f840 	bl	800fb0e <UART_WaitOnFlagUntilTimeout>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d001      	beq.n	800fa98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800fa94:	2303      	movs	r3, #3
 800fa96:	e036      	b.n	800fb06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800fa98:	69fb      	ldr	r3, [r7, #28]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d10b      	bne.n	800fab6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fa9e:	69bb      	ldr	r3, [r7, #24]
 800faa0:	881b      	ldrh	r3, [r3, #0]
 800faa2:	461a      	mov	r2, r3
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800faac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800faae:	69bb      	ldr	r3, [r7, #24]
 800fab0:	3302      	adds	r3, #2
 800fab2:	61bb      	str	r3, [r7, #24]
 800fab4:	e007      	b.n	800fac6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800fab6:	69fb      	ldr	r3, [r7, #28]
 800fab8:	781a      	ldrb	r2, [r3, #0]
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800fac0:	69fb      	ldr	r3, [r7, #28]
 800fac2:	3301      	adds	r3, #1
 800fac4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800faca:	b29b      	uxth	r3, r3
 800facc:	3b01      	subs	r3, #1
 800face:	b29a      	uxth	r2, r3
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800fad8:	b29b      	uxth	r3, r3
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d1cf      	bne.n	800fa7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fade:	683b      	ldr	r3, [r7, #0]
 800fae0:	9300      	str	r3, [sp, #0]
 800fae2:	697b      	ldr	r3, [r7, #20]
 800fae4:	2200      	movs	r2, #0
 800fae6:	2140      	movs	r1, #64	; 0x40
 800fae8:	68f8      	ldr	r0, [r7, #12]
 800faea:	f000 f810 	bl	800fb0e <UART_WaitOnFlagUntilTimeout>
 800faee:	4603      	mov	r3, r0
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d001      	beq.n	800faf8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800faf4:	2303      	movs	r3, #3
 800faf6:	e006      	b.n	800fb06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	2220      	movs	r2, #32
 800fafc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800fb00:	2300      	movs	r3, #0
 800fb02:	e000      	b.n	800fb06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800fb04:	2302      	movs	r3, #2
  }
}
 800fb06:	4618      	mov	r0, r3
 800fb08:	3720      	adds	r7, #32
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}

0800fb0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800fb0e:	b580      	push	{r7, lr}
 800fb10:	b090      	sub	sp, #64	; 0x40
 800fb12:	af00      	add	r7, sp, #0
 800fb14:	60f8      	str	r0, [r7, #12]
 800fb16:	60b9      	str	r1, [r7, #8]
 800fb18:	603b      	str	r3, [r7, #0]
 800fb1a:	4613      	mov	r3, r2
 800fb1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fb1e:	e050      	b.n	800fbc2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fb20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb26:	d04c      	beq.n	800fbc2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800fb28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d007      	beq.n	800fb3e <UART_WaitOnFlagUntilTimeout+0x30>
 800fb2e:	f7fb f96b 	bl	800ae08 <HAL_GetTick>
 800fb32:	4602      	mov	r2, r0
 800fb34:	683b      	ldr	r3, [r7, #0]
 800fb36:	1ad3      	subs	r3, r2, r3
 800fb38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fb3a:	429a      	cmp	r2, r3
 800fb3c:	d241      	bcs.n	800fbc2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	330c      	adds	r3, #12
 800fb44:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb48:	e853 3f00 	ldrex	r3, [r3]
 800fb4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800fb54:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	330c      	adds	r3, #12
 800fb5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fb5e:	637a      	str	r2, [r7, #52]	; 0x34
 800fb60:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fb64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb66:	e841 2300 	strex	r3, r2, [r1]
 800fb6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fb6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d1e5      	bne.n	800fb3e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	3314      	adds	r3, #20
 800fb78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb7a:	697b      	ldr	r3, [r7, #20]
 800fb7c:	e853 3f00 	ldrex	r3, [r3]
 800fb80:	613b      	str	r3, [r7, #16]
   return(result);
 800fb82:	693b      	ldr	r3, [r7, #16]
 800fb84:	f023 0301 	bic.w	r3, r3, #1
 800fb88:	63bb      	str	r3, [r7, #56]	; 0x38
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	3314      	adds	r3, #20
 800fb90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb92:	623a      	str	r2, [r7, #32]
 800fb94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb96:	69f9      	ldr	r1, [r7, #28]
 800fb98:	6a3a      	ldr	r2, [r7, #32]
 800fb9a:	e841 2300 	strex	r3, r2, [r1]
 800fb9e:	61bb      	str	r3, [r7, #24]
   return(result);
 800fba0:	69bb      	ldr	r3, [r7, #24]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d1e5      	bne.n	800fb72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	2220      	movs	r2, #32
 800fbaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	2220      	movs	r2, #32
 800fbb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	2200      	movs	r2, #0
 800fbba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800fbbe:	2303      	movs	r3, #3
 800fbc0:	e00f      	b.n	800fbe2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	681a      	ldr	r2, [r3, #0]
 800fbc8:	68bb      	ldr	r3, [r7, #8]
 800fbca:	4013      	ands	r3, r2
 800fbcc:	68ba      	ldr	r2, [r7, #8]
 800fbce:	429a      	cmp	r2, r3
 800fbd0:	bf0c      	ite	eq
 800fbd2:	2301      	moveq	r3, #1
 800fbd4:	2300      	movne	r3, #0
 800fbd6:	b2db      	uxtb	r3, r3
 800fbd8:	461a      	mov	r2, r3
 800fbda:	79fb      	ldrb	r3, [r7, #7]
 800fbdc:	429a      	cmp	r2, r3
 800fbde:	d09f      	beq.n	800fb20 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800fbe0:	2300      	movs	r3, #0
}
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	3740      	adds	r7, #64	; 0x40
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}
	...

0800fbec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fbec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fbf0:	b0c0      	sub	sp, #256	; 0x100
 800fbf2:	af00      	add	r7, sp, #0
 800fbf4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fbf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	691b      	ldr	r3, [r3, #16]
 800fc00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800fc04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fc08:	68d9      	ldr	r1, [r3, #12]
 800fc0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fc0e:	681a      	ldr	r2, [r3, #0]
 800fc10:	ea40 0301 	orr.w	r3, r0, r1
 800fc14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800fc16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fc1a:	689a      	ldr	r2, [r3, #8]
 800fc1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fc20:	691b      	ldr	r3, [r3, #16]
 800fc22:	431a      	orrs	r2, r3
 800fc24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fc28:	695b      	ldr	r3, [r3, #20]
 800fc2a:	431a      	orrs	r2, r3
 800fc2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fc30:	69db      	ldr	r3, [r3, #28]
 800fc32:	4313      	orrs	r3, r2
 800fc34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800fc38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	68db      	ldr	r3, [r3, #12]
 800fc40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800fc44:	f021 010c 	bic.w	r1, r1, #12
 800fc48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fc4c:	681a      	ldr	r2, [r3, #0]
 800fc4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800fc52:	430b      	orrs	r3, r1
 800fc54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800fc56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	695b      	ldr	r3, [r3, #20]
 800fc5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800fc62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fc66:	6999      	ldr	r1, [r3, #24]
 800fc68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fc6c:	681a      	ldr	r2, [r3, #0]
 800fc6e:	ea40 0301 	orr.w	r3, r0, r1
 800fc72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fc74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fc78:	681a      	ldr	r2, [r3, #0]
 800fc7a:	4b8f      	ldr	r3, [pc, #572]	; (800feb8 <UART_SetConfig+0x2cc>)
 800fc7c:	429a      	cmp	r2, r3
 800fc7e:	d005      	beq.n	800fc8c <UART_SetConfig+0xa0>
 800fc80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fc84:	681a      	ldr	r2, [r3, #0]
 800fc86:	4b8d      	ldr	r3, [pc, #564]	; (800febc <UART_SetConfig+0x2d0>)
 800fc88:	429a      	cmp	r2, r3
 800fc8a:	d104      	bne.n	800fc96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800fc8c:	f7fe f968 	bl	800df60 <HAL_RCC_GetPCLK2Freq>
 800fc90:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800fc94:	e003      	b.n	800fc9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800fc96:	f7fe f94f 	bl	800df38 <HAL_RCC_GetPCLK1Freq>
 800fc9a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fc9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fca2:	69db      	ldr	r3, [r3, #28]
 800fca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fca8:	f040 810c 	bne.w	800fec4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fcac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fcb6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800fcba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800fcbe:	4622      	mov	r2, r4
 800fcc0:	462b      	mov	r3, r5
 800fcc2:	1891      	adds	r1, r2, r2
 800fcc4:	65b9      	str	r1, [r7, #88]	; 0x58
 800fcc6:	415b      	adcs	r3, r3
 800fcc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fcca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800fcce:	4621      	mov	r1, r4
 800fcd0:	eb12 0801 	adds.w	r8, r2, r1
 800fcd4:	4629      	mov	r1, r5
 800fcd6:	eb43 0901 	adc.w	r9, r3, r1
 800fcda:	f04f 0200 	mov.w	r2, #0
 800fcde:	f04f 0300 	mov.w	r3, #0
 800fce2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800fce6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800fcea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800fcee:	4690      	mov	r8, r2
 800fcf0:	4699      	mov	r9, r3
 800fcf2:	4623      	mov	r3, r4
 800fcf4:	eb18 0303 	adds.w	r3, r8, r3
 800fcf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800fcfc:	462b      	mov	r3, r5
 800fcfe:	eb49 0303 	adc.w	r3, r9, r3
 800fd02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800fd06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fd0a:	685b      	ldr	r3, [r3, #4]
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800fd12:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800fd16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800fd1a:	460b      	mov	r3, r1
 800fd1c:	18db      	adds	r3, r3, r3
 800fd1e:	653b      	str	r3, [r7, #80]	; 0x50
 800fd20:	4613      	mov	r3, r2
 800fd22:	eb42 0303 	adc.w	r3, r2, r3
 800fd26:	657b      	str	r3, [r7, #84]	; 0x54
 800fd28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800fd2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800fd30:	f7f7 f822 	bl	8006d78 <__aeabi_uldivmod>
 800fd34:	4602      	mov	r2, r0
 800fd36:	460b      	mov	r3, r1
 800fd38:	4b61      	ldr	r3, [pc, #388]	; (800fec0 <UART_SetConfig+0x2d4>)
 800fd3a:	fba3 2302 	umull	r2, r3, r3, r2
 800fd3e:	095b      	lsrs	r3, r3, #5
 800fd40:	011c      	lsls	r4, r3, #4
 800fd42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fd46:	2200      	movs	r2, #0
 800fd48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800fd4c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800fd50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800fd54:	4642      	mov	r2, r8
 800fd56:	464b      	mov	r3, r9
 800fd58:	1891      	adds	r1, r2, r2
 800fd5a:	64b9      	str	r1, [r7, #72]	; 0x48
 800fd5c:	415b      	adcs	r3, r3
 800fd5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fd60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800fd64:	4641      	mov	r1, r8
 800fd66:	eb12 0a01 	adds.w	sl, r2, r1
 800fd6a:	4649      	mov	r1, r9
 800fd6c:	eb43 0b01 	adc.w	fp, r3, r1
 800fd70:	f04f 0200 	mov.w	r2, #0
 800fd74:	f04f 0300 	mov.w	r3, #0
 800fd78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800fd7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800fd80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fd84:	4692      	mov	sl, r2
 800fd86:	469b      	mov	fp, r3
 800fd88:	4643      	mov	r3, r8
 800fd8a:	eb1a 0303 	adds.w	r3, sl, r3
 800fd8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800fd92:	464b      	mov	r3, r9
 800fd94:	eb4b 0303 	adc.w	r3, fp, r3
 800fd98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800fd9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fda0:	685b      	ldr	r3, [r3, #4]
 800fda2:	2200      	movs	r2, #0
 800fda4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fda8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800fdac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800fdb0:	460b      	mov	r3, r1
 800fdb2:	18db      	adds	r3, r3, r3
 800fdb4:	643b      	str	r3, [r7, #64]	; 0x40
 800fdb6:	4613      	mov	r3, r2
 800fdb8:	eb42 0303 	adc.w	r3, r2, r3
 800fdbc:	647b      	str	r3, [r7, #68]	; 0x44
 800fdbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800fdc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800fdc6:	f7f6 ffd7 	bl	8006d78 <__aeabi_uldivmod>
 800fdca:	4602      	mov	r2, r0
 800fdcc:	460b      	mov	r3, r1
 800fdce:	4611      	mov	r1, r2
 800fdd0:	4b3b      	ldr	r3, [pc, #236]	; (800fec0 <UART_SetConfig+0x2d4>)
 800fdd2:	fba3 2301 	umull	r2, r3, r3, r1
 800fdd6:	095b      	lsrs	r3, r3, #5
 800fdd8:	2264      	movs	r2, #100	; 0x64
 800fdda:	fb02 f303 	mul.w	r3, r2, r3
 800fdde:	1acb      	subs	r3, r1, r3
 800fde0:	00db      	lsls	r3, r3, #3
 800fde2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800fde6:	4b36      	ldr	r3, [pc, #216]	; (800fec0 <UART_SetConfig+0x2d4>)
 800fde8:	fba3 2302 	umull	r2, r3, r3, r2
 800fdec:	095b      	lsrs	r3, r3, #5
 800fdee:	005b      	lsls	r3, r3, #1
 800fdf0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800fdf4:	441c      	add	r4, r3
 800fdf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fe00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800fe04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800fe08:	4642      	mov	r2, r8
 800fe0a:	464b      	mov	r3, r9
 800fe0c:	1891      	adds	r1, r2, r2
 800fe0e:	63b9      	str	r1, [r7, #56]	; 0x38
 800fe10:	415b      	adcs	r3, r3
 800fe12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800fe18:	4641      	mov	r1, r8
 800fe1a:	1851      	adds	r1, r2, r1
 800fe1c:	6339      	str	r1, [r7, #48]	; 0x30
 800fe1e:	4649      	mov	r1, r9
 800fe20:	414b      	adcs	r3, r1
 800fe22:	637b      	str	r3, [r7, #52]	; 0x34
 800fe24:	f04f 0200 	mov.w	r2, #0
 800fe28:	f04f 0300 	mov.w	r3, #0
 800fe2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800fe30:	4659      	mov	r1, fp
 800fe32:	00cb      	lsls	r3, r1, #3
 800fe34:	4651      	mov	r1, sl
 800fe36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800fe3a:	4651      	mov	r1, sl
 800fe3c:	00ca      	lsls	r2, r1, #3
 800fe3e:	4610      	mov	r0, r2
 800fe40:	4619      	mov	r1, r3
 800fe42:	4603      	mov	r3, r0
 800fe44:	4642      	mov	r2, r8
 800fe46:	189b      	adds	r3, r3, r2
 800fe48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fe4c:	464b      	mov	r3, r9
 800fe4e:	460a      	mov	r2, r1
 800fe50:	eb42 0303 	adc.w	r3, r2, r3
 800fe54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fe58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fe5c:	685b      	ldr	r3, [r3, #4]
 800fe5e:	2200      	movs	r2, #0
 800fe60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800fe64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800fe68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800fe6c:	460b      	mov	r3, r1
 800fe6e:	18db      	adds	r3, r3, r3
 800fe70:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe72:	4613      	mov	r3, r2
 800fe74:	eb42 0303 	adc.w	r3, r2, r3
 800fe78:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800fe7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800fe82:	f7f6 ff79 	bl	8006d78 <__aeabi_uldivmod>
 800fe86:	4602      	mov	r2, r0
 800fe88:	460b      	mov	r3, r1
 800fe8a:	4b0d      	ldr	r3, [pc, #52]	; (800fec0 <UART_SetConfig+0x2d4>)
 800fe8c:	fba3 1302 	umull	r1, r3, r3, r2
 800fe90:	095b      	lsrs	r3, r3, #5
 800fe92:	2164      	movs	r1, #100	; 0x64
 800fe94:	fb01 f303 	mul.w	r3, r1, r3
 800fe98:	1ad3      	subs	r3, r2, r3
 800fe9a:	00db      	lsls	r3, r3, #3
 800fe9c:	3332      	adds	r3, #50	; 0x32
 800fe9e:	4a08      	ldr	r2, [pc, #32]	; (800fec0 <UART_SetConfig+0x2d4>)
 800fea0:	fba2 2303 	umull	r2, r3, r2, r3
 800fea4:	095b      	lsrs	r3, r3, #5
 800fea6:	f003 0207 	and.w	r2, r3, #7
 800feaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	4422      	add	r2, r4
 800feb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800feb4:	e105      	b.n	80100c2 <UART_SetConfig+0x4d6>
 800feb6:	bf00      	nop
 800feb8:	40011000 	.word	0x40011000
 800febc:	40011400 	.word	0x40011400
 800fec0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fec4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fec8:	2200      	movs	r2, #0
 800feca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800fece:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800fed2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800fed6:	4642      	mov	r2, r8
 800fed8:	464b      	mov	r3, r9
 800feda:	1891      	adds	r1, r2, r2
 800fedc:	6239      	str	r1, [r7, #32]
 800fede:	415b      	adcs	r3, r3
 800fee0:	627b      	str	r3, [r7, #36]	; 0x24
 800fee2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800fee6:	4641      	mov	r1, r8
 800fee8:	1854      	adds	r4, r2, r1
 800feea:	4649      	mov	r1, r9
 800feec:	eb43 0501 	adc.w	r5, r3, r1
 800fef0:	f04f 0200 	mov.w	r2, #0
 800fef4:	f04f 0300 	mov.w	r3, #0
 800fef8:	00eb      	lsls	r3, r5, #3
 800fefa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800fefe:	00e2      	lsls	r2, r4, #3
 800ff00:	4614      	mov	r4, r2
 800ff02:	461d      	mov	r5, r3
 800ff04:	4643      	mov	r3, r8
 800ff06:	18e3      	adds	r3, r4, r3
 800ff08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ff0c:	464b      	mov	r3, r9
 800ff0e:	eb45 0303 	adc.w	r3, r5, r3
 800ff12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ff16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ff1a:	685b      	ldr	r3, [r3, #4]
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ff22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ff26:	f04f 0200 	mov.w	r2, #0
 800ff2a:	f04f 0300 	mov.w	r3, #0
 800ff2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ff32:	4629      	mov	r1, r5
 800ff34:	008b      	lsls	r3, r1, #2
 800ff36:	4621      	mov	r1, r4
 800ff38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ff3c:	4621      	mov	r1, r4
 800ff3e:	008a      	lsls	r2, r1, #2
 800ff40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ff44:	f7f6 ff18 	bl	8006d78 <__aeabi_uldivmod>
 800ff48:	4602      	mov	r2, r0
 800ff4a:	460b      	mov	r3, r1
 800ff4c:	4b60      	ldr	r3, [pc, #384]	; (80100d0 <UART_SetConfig+0x4e4>)
 800ff4e:	fba3 2302 	umull	r2, r3, r3, r2
 800ff52:	095b      	lsrs	r3, r3, #5
 800ff54:	011c      	lsls	r4, r3, #4
 800ff56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ff60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ff64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ff68:	4642      	mov	r2, r8
 800ff6a:	464b      	mov	r3, r9
 800ff6c:	1891      	adds	r1, r2, r2
 800ff6e:	61b9      	str	r1, [r7, #24]
 800ff70:	415b      	adcs	r3, r3
 800ff72:	61fb      	str	r3, [r7, #28]
 800ff74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ff78:	4641      	mov	r1, r8
 800ff7a:	1851      	adds	r1, r2, r1
 800ff7c:	6139      	str	r1, [r7, #16]
 800ff7e:	4649      	mov	r1, r9
 800ff80:	414b      	adcs	r3, r1
 800ff82:	617b      	str	r3, [r7, #20]
 800ff84:	f04f 0200 	mov.w	r2, #0
 800ff88:	f04f 0300 	mov.w	r3, #0
 800ff8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ff90:	4659      	mov	r1, fp
 800ff92:	00cb      	lsls	r3, r1, #3
 800ff94:	4651      	mov	r1, sl
 800ff96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ff9a:	4651      	mov	r1, sl
 800ff9c:	00ca      	lsls	r2, r1, #3
 800ff9e:	4610      	mov	r0, r2
 800ffa0:	4619      	mov	r1, r3
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	4642      	mov	r2, r8
 800ffa6:	189b      	adds	r3, r3, r2
 800ffa8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ffac:	464b      	mov	r3, r9
 800ffae:	460a      	mov	r2, r1
 800ffb0:	eb42 0303 	adc.w	r3, r2, r3
 800ffb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ffb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ffbc:	685b      	ldr	r3, [r3, #4]
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	67bb      	str	r3, [r7, #120]	; 0x78
 800ffc2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ffc4:	f04f 0200 	mov.w	r2, #0
 800ffc8:	f04f 0300 	mov.w	r3, #0
 800ffcc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ffd0:	4649      	mov	r1, r9
 800ffd2:	008b      	lsls	r3, r1, #2
 800ffd4:	4641      	mov	r1, r8
 800ffd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ffda:	4641      	mov	r1, r8
 800ffdc:	008a      	lsls	r2, r1, #2
 800ffde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ffe2:	f7f6 fec9 	bl	8006d78 <__aeabi_uldivmod>
 800ffe6:	4602      	mov	r2, r0
 800ffe8:	460b      	mov	r3, r1
 800ffea:	4b39      	ldr	r3, [pc, #228]	; (80100d0 <UART_SetConfig+0x4e4>)
 800ffec:	fba3 1302 	umull	r1, r3, r3, r2
 800fff0:	095b      	lsrs	r3, r3, #5
 800fff2:	2164      	movs	r1, #100	; 0x64
 800fff4:	fb01 f303 	mul.w	r3, r1, r3
 800fff8:	1ad3      	subs	r3, r2, r3
 800fffa:	011b      	lsls	r3, r3, #4
 800fffc:	3332      	adds	r3, #50	; 0x32
 800fffe:	4a34      	ldr	r2, [pc, #208]	; (80100d0 <UART_SetConfig+0x4e4>)
 8010000:	fba2 2303 	umull	r2, r3, r2, r3
 8010004:	095b      	lsrs	r3, r3, #5
 8010006:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801000a:	441c      	add	r4, r3
 801000c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010010:	2200      	movs	r2, #0
 8010012:	673b      	str	r3, [r7, #112]	; 0x70
 8010014:	677a      	str	r2, [r7, #116]	; 0x74
 8010016:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 801001a:	4642      	mov	r2, r8
 801001c:	464b      	mov	r3, r9
 801001e:	1891      	adds	r1, r2, r2
 8010020:	60b9      	str	r1, [r7, #8]
 8010022:	415b      	adcs	r3, r3
 8010024:	60fb      	str	r3, [r7, #12]
 8010026:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801002a:	4641      	mov	r1, r8
 801002c:	1851      	adds	r1, r2, r1
 801002e:	6039      	str	r1, [r7, #0]
 8010030:	4649      	mov	r1, r9
 8010032:	414b      	adcs	r3, r1
 8010034:	607b      	str	r3, [r7, #4]
 8010036:	f04f 0200 	mov.w	r2, #0
 801003a:	f04f 0300 	mov.w	r3, #0
 801003e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8010042:	4659      	mov	r1, fp
 8010044:	00cb      	lsls	r3, r1, #3
 8010046:	4651      	mov	r1, sl
 8010048:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801004c:	4651      	mov	r1, sl
 801004e:	00ca      	lsls	r2, r1, #3
 8010050:	4610      	mov	r0, r2
 8010052:	4619      	mov	r1, r3
 8010054:	4603      	mov	r3, r0
 8010056:	4642      	mov	r2, r8
 8010058:	189b      	adds	r3, r3, r2
 801005a:	66bb      	str	r3, [r7, #104]	; 0x68
 801005c:	464b      	mov	r3, r9
 801005e:	460a      	mov	r2, r1
 8010060:	eb42 0303 	adc.w	r3, r2, r3
 8010064:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801006a:	685b      	ldr	r3, [r3, #4]
 801006c:	2200      	movs	r2, #0
 801006e:	663b      	str	r3, [r7, #96]	; 0x60
 8010070:	667a      	str	r2, [r7, #100]	; 0x64
 8010072:	f04f 0200 	mov.w	r2, #0
 8010076:	f04f 0300 	mov.w	r3, #0
 801007a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801007e:	4649      	mov	r1, r9
 8010080:	008b      	lsls	r3, r1, #2
 8010082:	4641      	mov	r1, r8
 8010084:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010088:	4641      	mov	r1, r8
 801008a:	008a      	lsls	r2, r1, #2
 801008c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8010090:	f7f6 fe72 	bl	8006d78 <__aeabi_uldivmod>
 8010094:	4602      	mov	r2, r0
 8010096:	460b      	mov	r3, r1
 8010098:	4b0d      	ldr	r3, [pc, #52]	; (80100d0 <UART_SetConfig+0x4e4>)
 801009a:	fba3 1302 	umull	r1, r3, r3, r2
 801009e:	095b      	lsrs	r3, r3, #5
 80100a0:	2164      	movs	r1, #100	; 0x64
 80100a2:	fb01 f303 	mul.w	r3, r1, r3
 80100a6:	1ad3      	subs	r3, r2, r3
 80100a8:	011b      	lsls	r3, r3, #4
 80100aa:	3332      	adds	r3, #50	; 0x32
 80100ac:	4a08      	ldr	r2, [pc, #32]	; (80100d0 <UART_SetConfig+0x4e4>)
 80100ae:	fba2 2303 	umull	r2, r3, r2, r3
 80100b2:	095b      	lsrs	r3, r3, #5
 80100b4:	f003 020f 	and.w	r2, r3, #15
 80100b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	4422      	add	r2, r4
 80100c0:	609a      	str	r2, [r3, #8]
}
 80100c2:	bf00      	nop
 80100c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80100c8:	46bd      	mov	sp, r7
 80100ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80100ce:	bf00      	nop
 80100d0:	51eb851f 	.word	0x51eb851f

080100d4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80100d4:	b480      	push	{r7}
 80100d6:	b083      	sub	sp, #12
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
 80100dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d123      	bne.n	801012e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80100ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80100f2:	683a      	ldr	r2, [r7, #0]
 80100f4:	6851      	ldr	r1, [r2, #4]
 80100f6:	683a      	ldr	r2, [r7, #0]
 80100f8:	6892      	ldr	r2, [r2, #8]
 80100fa:	4311      	orrs	r1, r2
 80100fc:	683a      	ldr	r2, [r7, #0]
 80100fe:	68d2      	ldr	r2, [r2, #12]
 8010100:	4311      	orrs	r1, r2
 8010102:	683a      	ldr	r2, [r7, #0]
 8010104:	6912      	ldr	r2, [r2, #16]
 8010106:	4311      	orrs	r1, r2
 8010108:	683a      	ldr	r2, [r7, #0]
 801010a:	6952      	ldr	r2, [r2, #20]
 801010c:	4311      	orrs	r1, r2
 801010e:	683a      	ldr	r2, [r7, #0]
 8010110:	6992      	ldr	r2, [r2, #24]
 8010112:	4311      	orrs	r1, r2
 8010114:	683a      	ldr	r2, [r7, #0]
 8010116:	69d2      	ldr	r2, [r2, #28]
 8010118:	4311      	orrs	r1, r2
 801011a:	683a      	ldr	r2, [r7, #0]
 801011c:	6a12      	ldr	r2, [r2, #32]
 801011e:	4311      	orrs	r1, r2
 8010120:	683a      	ldr	r2, [r7, #0]
 8010122:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010124:	430a      	orrs	r2, r1
 8010126:	431a      	orrs	r2, r3
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	601a      	str	r2, [r3, #0]
 801012c:	e028      	b.n	8010180 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8010136:	683b      	ldr	r3, [r7, #0]
 8010138:	69d9      	ldr	r1, [r3, #28]
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	6a1b      	ldr	r3, [r3, #32]
 801013e:	4319      	orrs	r1, r3
 8010140:	683b      	ldr	r3, [r7, #0]
 8010142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010144:	430b      	orrs	r3, r1
 8010146:	431a      	orrs	r2, r3
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	685b      	ldr	r3, [r3, #4]
 8010150:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8010154:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010158:	683a      	ldr	r2, [r7, #0]
 801015a:	6851      	ldr	r1, [r2, #4]
 801015c:	683a      	ldr	r2, [r7, #0]
 801015e:	6892      	ldr	r2, [r2, #8]
 8010160:	4311      	orrs	r1, r2
 8010162:	683a      	ldr	r2, [r7, #0]
 8010164:	68d2      	ldr	r2, [r2, #12]
 8010166:	4311      	orrs	r1, r2
 8010168:	683a      	ldr	r2, [r7, #0]
 801016a:	6912      	ldr	r2, [r2, #16]
 801016c:	4311      	orrs	r1, r2
 801016e:	683a      	ldr	r2, [r7, #0]
 8010170:	6952      	ldr	r2, [r2, #20]
 8010172:	4311      	orrs	r1, r2
 8010174:	683a      	ldr	r2, [r7, #0]
 8010176:	6992      	ldr	r2, [r2, #24]
 8010178:	430a      	orrs	r2, r1
 801017a:	431a      	orrs	r2, r3
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8010180:	2300      	movs	r3, #0
}
 8010182:	4618      	mov	r0, r3
 8010184:	370c      	adds	r7, #12
 8010186:	46bd      	mov	sp, r7
 8010188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018c:	4770      	bx	lr

0801018e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 801018e:	b480      	push	{r7}
 8010190:	b085      	sub	sp, #20
 8010192:	af00      	add	r7, sp, #0
 8010194:	60f8      	str	r0, [r7, #12]
 8010196:	60b9      	str	r1, [r7, #8]
 8010198:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d128      	bne.n	80101f2 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	689b      	ldr	r3, [r3, #8]
 80101a4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	1e59      	subs	r1, r3, #1
 80101ae:	68bb      	ldr	r3, [r7, #8]
 80101b0:	685b      	ldr	r3, [r3, #4]
 80101b2:	3b01      	subs	r3, #1
 80101b4:	011b      	lsls	r3, r3, #4
 80101b6:	4319      	orrs	r1, r3
 80101b8:	68bb      	ldr	r3, [r7, #8]
 80101ba:	689b      	ldr	r3, [r3, #8]
 80101bc:	3b01      	subs	r3, #1
 80101be:	021b      	lsls	r3, r3, #8
 80101c0:	4319      	orrs	r1, r3
 80101c2:	68bb      	ldr	r3, [r7, #8]
 80101c4:	68db      	ldr	r3, [r3, #12]
 80101c6:	3b01      	subs	r3, #1
 80101c8:	031b      	lsls	r3, r3, #12
 80101ca:	4319      	orrs	r1, r3
 80101cc:	68bb      	ldr	r3, [r7, #8]
 80101ce:	691b      	ldr	r3, [r3, #16]
 80101d0:	3b01      	subs	r3, #1
 80101d2:	041b      	lsls	r3, r3, #16
 80101d4:	4319      	orrs	r1, r3
 80101d6:	68bb      	ldr	r3, [r7, #8]
 80101d8:	695b      	ldr	r3, [r3, #20]
 80101da:	3b01      	subs	r3, #1
 80101dc:	051b      	lsls	r3, r3, #20
 80101de:	4319      	orrs	r1, r3
 80101e0:	68bb      	ldr	r3, [r7, #8]
 80101e2:	699b      	ldr	r3, [r3, #24]
 80101e4:	3b01      	subs	r3, #1
 80101e6:	061b      	lsls	r3, r3, #24
 80101e8:	430b      	orrs	r3, r1
 80101ea:	431a      	orrs	r2, r3
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	609a      	str	r2, [r3, #8]
 80101f0:	e02f      	b.n	8010252 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	689b      	ldr	r3, [r3, #8]
 80101f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80101fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80101fe:	68ba      	ldr	r2, [r7, #8]
 8010200:	68d2      	ldr	r2, [r2, #12]
 8010202:	3a01      	subs	r2, #1
 8010204:	0311      	lsls	r1, r2, #12
 8010206:	68ba      	ldr	r2, [r7, #8]
 8010208:	6952      	ldr	r2, [r2, #20]
 801020a:	3a01      	subs	r2, #1
 801020c:	0512      	lsls	r2, r2, #20
 801020e:	430a      	orrs	r2, r1
 8010210:	431a      	orrs	r2, r3
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	68db      	ldr	r3, [r3, #12]
 801021a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 801021e:	68bb      	ldr	r3, [r7, #8]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	1e59      	subs	r1, r3, #1
 8010224:	68bb      	ldr	r3, [r7, #8]
 8010226:	685b      	ldr	r3, [r3, #4]
 8010228:	3b01      	subs	r3, #1
 801022a:	011b      	lsls	r3, r3, #4
 801022c:	4319      	orrs	r1, r3
 801022e:	68bb      	ldr	r3, [r7, #8]
 8010230:	689b      	ldr	r3, [r3, #8]
 8010232:	3b01      	subs	r3, #1
 8010234:	021b      	lsls	r3, r3, #8
 8010236:	4319      	orrs	r1, r3
 8010238:	68bb      	ldr	r3, [r7, #8]
 801023a:	691b      	ldr	r3, [r3, #16]
 801023c:	3b01      	subs	r3, #1
 801023e:	041b      	lsls	r3, r3, #16
 8010240:	4319      	orrs	r1, r3
 8010242:	68bb      	ldr	r3, [r7, #8]
 8010244:	699b      	ldr	r3, [r3, #24]
 8010246:	3b01      	subs	r3, #1
 8010248:	061b      	lsls	r3, r3, #24
 801024a:	430b      	orrs	r3, r1
 801024c:	431a      	orrs	r2, r3
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8010252:	2300      	movs	r3, #0
}
 8010254:	4618      	mov	r0, r3
 8010256:	3714      	adds	r7, #20
 8010258:	46bd      	mov	sp, r7
 801025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025e:	4770      	bx	lr

08010260 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b086      	sub	sp, #24
 8010264:	af00      	add	r7, sp, #0
 8010266:	60f8      	str	r0, [r7, #12]
 8010268:	60b9      	str	r1, [r7, #8]
 801026a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 801026c:	2300      	movs	r3, #0
 801026e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	691b      	ldr	r3, [r3, #16]
 8010274:	0d9b      	lsrs	r3, r3, #22
 8010276:	059b      	lsls	r3, r3, #22
 8010278:	68ba      	ldr	r2, [r7, #8]
 801027a:	6811      	ldr	r1, [r2, #0]
 801027c:	68ba      	ldr	r2, [r7, #8]
 801027e:	6852      	ldr	r2, [r2, #4]
 8010280:	4311      	orrs	r1, r2
 8010282:	68ba      	ldr	r2, [r7, #8]
 8010284:	6892      	ldr	r2, [r2, #8]
 8010286:	3a01      	subs	r2, #1
 8010288:	0152      	lsls	r2, r2, #5
 801028a:	4311      	orrs	r1, r2
 801028c:	68ba      	ldr	r2, [r7, #8]
 801028e:	68d2      	ldr	r2, [r2, #12]
 8010290:	0252      	lsls	r2, r2, #9
 8010292:	430a      	orrs	r2, r1
 8010294:	431a      	orrs	r2, r3
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 801029a:	f7fa fdb5 	bl	800ae08 <HAL_GetTick>
 801029e:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80102a0:	e010      	b.n	80102c4 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102a8:	d00c      	beq.n	80102c4 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d007      	beq.n	80102c0 <FMC_SDRAM_SendCommand+0x60>
 80102b0:	f7fa fdaa 	bl	800ae08 <HAL_GetTick>
 80102b4:	4602      	mov	r2, r0
 80102b6:	697b      	ldr	r3, [r7, #20]
 80102b8:	1ad3      	subs	r3, r2, r3
 80102ba:	687a      	ldr	r2, [r7, #4]
 80102bc:	429a      	cmp	r2, r3
 80102be:	d201      	bcs.n	80102c4 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80102c0:	2303      	movs	r3, #3
 80102c2:	e006      	b.n	80102d2 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	699b      	ldr	r3, [r3, #24]
 80102c8:	f003 0320 	and.w	r3, r3, #32
 80102cc:	2b20      	cmp	r3, #32
 80102ce:	d0e8      	beq.n	80102a2 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 80102d0:	2300      	movs	r3, #0
}
 80102d2:	4618      	mov	r0, r3
 80102d4:	3718      	adds	r7, #24
 80102d6:	46bd      	mov	sp, r7
 80102d8:	bd80      	pop	{r7, pc}

080102da <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80102da:	b480      	push	{r7}
 80102dc:	b083      	sub	sp, #12
 80102de:	af00      	add	r7, sp, #0
 80102e0:	6078      	str	r0, [r7, #4]
 80102e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	695b      	ldr	r3, [r3, #20]
 80102e8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80102ec:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80102f0:	683a      	ldr	r2, [r7, #0]
 80102f2:	0052      	lsls	r2, r2, #1
 80102f4:	431a      	orrs	r2, r3
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80102fa:	2300      	movs	r3, #0
}
 80102fc:	4618      	mov	r0, r3
 80102fe:	370c      	adds	r7, #12
 8010300:	46bd      	mov	sp, r7
 8010302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010306:	4770      	bx	lr

08010308 <aiInit>:

/*
 * Init function to create and initialize a NN.
 */
int aiInit(const ai_u8 *activations)
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b090      	sub	sp, #64	; 0x40
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* 1 - Specific AI data structure to provide the references of the
   * activation/working memory chunk and the weights/bias parameters */
  const ai_network_params params = {
 8010310:	4b2e      	ldr	r3, [pc, #184]	; (80103cc <aiInit+0xc4>)
 8010312:	60fb      	str	r3, [r7, #12]
 8010314:	2301      	movs	r3, #1
 8010316:	823b      	strh	r3, [r7, #16]
 8010318:	2301      	movs	r3, #1
 801031a:	827b      	strh	r3, [r7, #18]
 801031c:	2301      	movs	r3, #1
 801031e:	82bb      	strh	r3, [r7, #20]
 8010320:	4b2b      	ldr	r3, [pc, #172]	; (80103d0 <aiInit+0xc8>)
 8010322:	61bb      	str	r3, [r7, #24]
  AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 8010324:	f000 fa3a 	bl	801079c <ai_network_data_weights_get>
 8010328:	4603      	mov	r3, r0
  const ai_network_params params = {
 801032a:	61fb      	str	r3, [r7, #28]
 801032c:	2300      	movs	r3, #0
 801032e:	623b      	str	r3, [r7, #32]
 8010330:	4b28      	ldr	r3, [pc, #160]	; (80103d4 <aiInit+0xcc>)
 8010332:	627b      	str	r3, [r7, #36]	; 0x24
 8010334:	2301      	movs	r3, #1
 8010336:	853b      	strh	r3, [r7, #40]	; 0x28
 8010338:	2301      	movs	r3, #1
 801033a:	857b      	strh	r3, [r7, #42]	; 0x2a
 801033c:	2301      	movs	r3, #1
 801033e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010340:	4b25      	ldr	r3, [pc, #148]	; (80103d8 <aiInit+0xd0>)
 8010342:	633b      	str	r3, [r7, #48]	; 0x30
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	637b      	str	r3, [r7, #52]	; 0x34
 8010348:	2300      	movs	r3, #0
 801034a:	63bb      	str	r3, [r7, #56]	; 0x38
  AI_NETWORK_DATA_ACTIVATIONS(activations) };

  /* 2 - Create an instance of the NN */
  err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 801034c:	2100      	movs	r1, #0
 801034e:	4823      	ldr	r0, [pc, #140]	; (80103dc <aiInit+0xd4>)
 8010350:	f000 f9be 	bl	80106d0 <ai_network_create>
 8010354:	4603      	mov	r3, r0
 8010356:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (err.type != AI_ERROR_NONE)
 8010358:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801035c:	2b00      	cmp	r3, #0
 801035e:	d002      	beq.n	8010366 <aiInit+0x5e>
  {
    return -1;
 8010360:	f04f 33ff 	mov.w	r3, #4294967295
 8010364:	e02e      	b.n	80103c4 <aiInit+0xbc>
  }

  /* 3 - Initialize the NN - Ready to be used */
  if (!ai_network_init(network, &params))
 8010366:	4b1d      	ldr	r3, [pc, #116]	; (80103dc <aiInit+0xd4>)
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	f107 020c 	add.w	r2, r7, #12
 801036e:	4611      	mov	r1, r2
 8010370:	4618      	mov	r0, r3
 8010372:	f000 f9cf 	bl	8010714 <ai_network_init>
 8010376:	4603      	mov	r3, r0
 8010378:	f083 0301 	eor.w	r3, r3, #1
 801037c:	b2db      	uxtb	r3, r3
 801037e:	2b00      	cmp	r3, #0
 8010380:	d01f      	beq.n	80103c2 <aiInit+0xba>
  {
    err = ai_network_get_error(network);
 8010382:	4b16      	ldr	r3, [pc, #88]	; (80103dc <aiInit+0xd4>)
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	4618      	mov	r0, r3
 8010388:	f000 f996 	bl	80106b8 <ai_network_get_error>
 801038c:	4603      	mov	r3, r0
 801038e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (err.type != AI_ERROR_NONE)
 8010390:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010394:	2b00      	cmp	r3, #0
 8010396:	d009      	beq.n	80103ac <aiInit+0xa4>
    {
      printf("ERROR : type=%d code=%d\r\n", err.type, err.code);
 8010398:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801039c:	4619      	mov	r1, r3
 801039e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103a0:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80103a4:	461a      	mov	r2, r3
 80103a6:	480e      	ldr	r0, [pc, #56]	; (80103e0 <aiInit+0xd8>)
 80103a8:	f001 f8d2 	bl	8011550 <iprintf>
    }
    ai_network_destroy(network);
 80103ac:	4b0b      	ldr	r3, [pc, #44]	; (80103dc <aiInit+0xd4>)
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	4618      	mov	r0, r3
 80103b2:	f000 f9a3 	bl	80106fc <ai_network_destroy>
    network = AI_HANDLE_NULL;
 80103b6:	4b09      	ldr	r3, [pc, #36]	; (80103dc <aiInit+0xd4>)
 80103b8:	2200      	movs	r2, #0
 80103ba:	601a      	str	r2, [r3, #0]
    return -2;
 80103bc:	f06f 0301 	mvn.w	r3, #1
 80103c0:	e000      	b.n	80103c4 <aiInit+0xbc>
  }

  return 0;
 80103c2:	2300      	movs	r3, #0
}
 80103c4:	4618      	mov	r0, r3
 80103c6:	3740      	adds	r7, #64	; 0x40
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd80      	pop	{r7, pc}
 80103cc:	40040440 	.word	0x40040440
 80103d0:	00134028 	.word	0x00134028
 80103d4:	00040440 	.word	0x00040440
 80103d8:	00018f00 	.word	0x00018f00
 80103dc:	2000102c 	.word	0x2000102c
 80103e0:	080180f0 	.word	0x080180f0

080103e4 <aiRun>:

/*
 * Run function to execute an inference.
 */
int aiRun(const void *in_data, void *out_data)
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b084      	sub	sp, #16
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
 80103ec:	6039      	str	r1, [r7, #0]
  ai_error err;

  /* Initialize input/output buffer handlers */
  ai_input[0].n_batches = 1;
 80103ee:	4b14      	ldr	r3, [pc, #80]	; (8010440 <aiRun+0x5c>)
 80103f0:	2201      	movs	r2, #1
 80103f2:	809a      	strh	r2, [r3, #4]
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 80103f4:	4a12      	ldr	r2, [pc, #72]	; (8010440 <aiRun+0x5c>)
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	6113      	str	r3, [r2, #16]
  ai_output[0].n_batches = 1;
 80103fa:	4b12      	ldr	r3, [pc, #72]	; (8010444 <aiRun+0x60>)
 80103fc:	2201      	movs	r2, #1
 80103fe:	809a      	strh	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8010400:	4a10      	ldr	r2, [pc, #64]	; (8010444 <aiRun+0x60>)
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	6113      	str	r3, [r2, #16]

  /* 2 - Perform the inference */
  ai_network_run(network, &ai_input[0], &ai_output[0]);
 8010406:	4b10      	ldr	r3, [pc, #64]	; (8010448 <aiRun+0x64>)
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	4a0e      	ldr	r2, [pc, #56]	; (8010444 <aiRun+0x60>)
 801040c:	490c      	ldr	r1, [pc, #48]	; (8010440 <aiRun+0x5c>)
 801040e:	4618      	mov	r0, r3
 8010410:	f000 f9b3 	bl	801077a <ai_network_run>
  err = ai_network_get_error(network);
 8010414:	4b0c      	ldr	r3, [pc, #48]	; (8010448 <aiRun+0x64>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	4618      	mov	r0, r3
 801041a:	f000 f94d 	bl	80106b8 <ai_network_get_error>
 801041e:	4603      	mov	r3, r0
 8010420:	60fb      	str	r3, [r7, #12]
  printf("ERROR : type=%d code=%d", err.type, err.code);
 8010422:	7b3b      	ldrb	r3, [r7, #12]
 8010424:	4619      	mov	r1, r3
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801042c:	461a      	mov	r2, r3
 801042e:	4807      	ldr	r0, [pc, #28]	; (801044c <aiRun+0x68>)
 8010430:	f001 f88e 	bl	8011550 <iprintf>
  return 0;
 8010434:	2300      	movs	r3, #0
}
 8010436:	4618      	mov	r0, r3
 8010438:	3710      	adds	r7, #16
 801043a:	46bd      	mov	sp, r7
 801043c:	bd80      	pop	{r7, pc}
 801043e:	bf00      	nop
 8010440:	20000094 	.word	0x20000094
 8010444:	200000ac 	.word	0x200000ac
 8010448:	2000102c 	.word	0x2000102c
 801044c:	0801810c 	.word	0x0801810c

08010450 <MX_X_CUBE_AI_Init>:

/*************************************************************************
 *
 */
void MX_X_CUBE_AI_Init(void)
{
 8010450:	b580      	push	{r7, lr}
 8010452:	af00      	add	r7, sp, #0
  /* Activation/working buffer is allocated as a static memory chunk
   * (bss section) */
  AI_ALIGNED(4)
  static ai_u8 activations[AI_NETWORK_DATA_ACTIVATIONS_SIZE];

  aiInit(activations);
 8010454:	4802      	ldr	r0, [pc, #8]	; (8010460 <MX_X_CUBE_AI_Init+0x10>)
 8010456:	f7ff ff57 	bl	8010308 <aiInit>
  /* USER CODE END 0 */
}
 801045a:	bf00      	nop
 801045c:	bd80      	pop	{r7, pc}
 801045e:	bf00      	nop
 8010460:	20001030 	.word	0x20001030

08010464 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(ai_float *nn_input_data, ai_float *nn_output_data)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b082      	sub	sp, #8
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
 801046c:	6039      	str	r1, [r7, #0]
  aiRun(nn_input_data, nn_output_data);
 801046e:	6839      	ldr	r1, [r7, #0]
 8010470:	6878      	ldr	r0, [r7, #4]
 8010472:	f7ff ffb7 	bl	80103e4 <aiRun>

}
 8010476:	bf00      	nop
 8010478:	3708      	adds	r7, #8
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}
	...

08010480 <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8010480:	b480      	push	{r7}
 8010482:	b085      	sub	sp, #20
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
 8010488:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 801048a:	683b      	ldr	r3, [r7, #0]
 801048c:	691b      	ldr	r3, [r3, #16]
 801048e:	3303      	adds	r3, #3
 8010490:	f023 0303 	bic.w	r3, r3, #3
 8010494:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    conv2d_2_scratch0_array.data = AI_PTR(activations + 89856);
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 801049c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80104a0:	4a29      	ldr	r2, [pc, #164]	; (8010548 <network_configure_activations+0xc8>)
 80104a2:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch0_array.data_start = AI_PTR(activations + 89856);
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 80104aa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80104ae:	4a26      	ldr	r2, [pc, #152]	; (8010548 <network_configure_activations+0xc8>)
 80104b0:	60d3      	str	r3, [r2, #12]
    input_0_output_array.data = AI_PTR(NULL);
 80104b2:	4b26      	ldr	r3, [pc, #152]	; (801054c <network_configure_activations+0xcc>)
 80104b4:	2200      	movs	r2, #0
 80104b6:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 80104b8:	4b24      	ldr	r3, [pc, #144]	; (801054c <network_configure_activations+0xcc>)
 80104ba:	2200      	movs	r2, #0
 80104bc:	60da      	str	r2, [r3, #12]
    conv2d_1_output_array.data = AI_PTR(activations + 3328);
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	f503 6350 	add.w	r3, r3, #3328	; 0xd00
 80104c4:	4a22      	ldr	r2, [pc, #136]	; (8010550 <network_configure_activations+0xd0>)
 80104c6:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(activations + 3328);
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	f503 6350 	add.w	r3, r3, #3328	; 0xd00
 80104ce:	4a20      	ldr	r2, [pc, #128]	; (8010550 <network_configure_activations+0xd0>)
 80104d0:	60d3      	str	r3, [r2, #12]
    conv2d_2_output_array.data = AI_PTR(activations + 0);
 80104d2:	4a20      	ldr	r2, [pc, #128]	; (8010554 <network_configure_activations+0xd4>)
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(activations + 0);
 80104d8:	4a1e      	ldr	r2, [pc, #120]	; (8010554 <network_configure_activations+0xd4>)
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 89344);
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	f503 33ae 	add.w	r3, r3, #89088	; 0x15c00
 80104e4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80104e8:	4a1b      	ldr	r2, [pc, #108]	; (8010558 <network_configure_activations+0xd8>)
 80104ea:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 89344);
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	f503 33ae 	add.w	r3, r3, #89088	; 0x15c00
 80104f2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80104f6:	4a18      	ldr	r2, [pc, #96]	; (8010558 <network_configure_activations+0xd8>)
 80104f8:	60d3      	str	r3, [r2, #12]
    dense_1_nl_output_array.data = AI_PTR(activations + 89344);
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	f503 33ae 	add.w	r3, r3, #89088	; 0x15c00
 8010500:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8010504:	4a15      	ldr	r2, [pc, #84]	; (801055c <network_configure_activations+0xdc>)
 8010506:	6093      	str	r3, [r2, #8]
    dense_1_nl_output_array.data_start = AI_PTR(activations + 89344);
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	f503 33ae 	add.w	r3, r3, #89088	; 0x15c00
 801050e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8010512:	4a12      	ldr	r2, [pc, #72]	; (801055c <network_configure_activations+0xdc>)
 8010514:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(activations + 89304);
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	f503 33ae 	add.w	r3, r3, #89088	; 0x15c00
 801051c:	33d8      	adds	r3, #216	; 0xd8
 801051e:	4a10      	ldr	r2, [pc, #64]	; (8010560 <network_configure_activations+0xe0>)
 8010520:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(activations + 89304);
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	f503 33ae 	add.w	r3, r3, #89088	; 0x15c00
 8010528:	33d8      	adds	r3, #216	; 0xd8
 801052a:	4a0d      	ldr	r2, [pc, #52]	; (8010560 <network_configure_activations+0xe0>)
 801052c:	60d3      	str	r3, [r2, #12]
    dense_2_nl_output_array.data = AI_PTR(NULL);
 801052e:	4b0d      	ldr	r3, [pc, #52]	; (8010564 <network_configure_activations+0xe4>)
 8010530:	2200      	movs	r2, #0
 8010532:	609a      	str	r2, [r3, #8]
    dense_2_nl_output_array.data_start = AI_PTR(NULL);
 8010534:	4b0b      	ldr	r3, [pc, #44]	; (8010564 <network_configure_activations+0xe4>)
 8010536:	2200      	movs	r2, #0
 8010538:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 801053a:	2301      	movs	r3, #1
}
 801053c:	4618      	mov	r0, r3
 801053e:	3714      	adds	r7, #20
 8010540:	46bd      	mov	sp, r7
 8010542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010546:	4770      	bx	lr
 8010548:	2000011c 	.word	0x2000011c
 801054c:	200001ac 	.word	0x200001ac
 8010550:	200001bc 	.word	0x200001bc
 8010554:	200001cc 	.word	0x200001cc
 8010558:	200001dc 	.word	0x200001dc
 801055c:	200001ec 	.word	0x200001ec
 8010560:	200001fc 	.word	0x200001fc
 8010564:	2000020c 	.word	0x2000020c

08010568 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8010568:	b480      	push	{r7}
 801056a:	b085      	sub	sp, #20
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
 8010570:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 8010572:	683b      	ldr	r3, [r7, #0]
 8010574:	691b      	ldr	r3, [r3, #16]
 8010576:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8010578:	4b47      	ldr	r3, [pc, #284]	; (8010698 <network_configure_weights+0x130>)
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010580:	4a45      	ldr	r2, [pc, #276]	; (8010698 <network_configure_weights+0x130>)
 8010582:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 1261568);
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	f503 139a 	add.w	r3, r3, #1261568	; 0x134000
 801058a:	4a43      	ldr	r2, [pc, #268]	; (8010698 <network_configure_weights+0x130>)
 801058c:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 1261568);
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	f503 139a 	add.w	r3, r3, #1261568	; 0x134000
 8010594:	4a40      	ldr	r2, [pc, #256]	; (8010698 <network_configure_weights+0x130>)
 8010596:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8010598:	4b40      	ldr	r3, [pc, #256]	; (801069c <network_configure_weights+0x134>)
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80105a0:	4a3e      	ldr	r2, [pc, #248]	; (801069c <network_configure_weights+0x134>)
 80105a2:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 1256448);
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	f503 1399 	add.w	r3, r3, #1253376	; 0x132000
 80105aa:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80105ae:	4a3b      	ldr	r2, [pc, #236]	; (801069c <network_configure_weights+0x134>)
 80105b0:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 1256448);
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	f503 1399 	add.w	r3, r3, #1253376	; 0x132000
 80105b8:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80105bc:	4a37      	ldr	r2, [pc, #220]	; (801069c <network_configure_weights+0x134>)
 80105be:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80105c0:	4b37      	ldr	r3, [pc, #220]	; (80106a0 <network_configure_weights+0x138>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80105c8:	4a35      	ldr	r2, [pc, #212]	; (80106a0 <network_configure_weights+0x138>)
 80105ca:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 1255936);
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	f503 1399 	add.w	r3, r3, #1253376	; 0x132000
 80105d2:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 80105d6:	4a32      	ldr	r2, [pc, #200]	; (80106a0 <network_configure_weights+0x138>)
 80105d8:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 1255936);
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	f503 1399 	add.w	r3, r3, #1253376	; 0x132000
 80105e0:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 80105e4:	4a2e      	ldr	r2, [pc, #184]	; (80106a0 <network_configure_weights+0x138>)
 80105e6:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80105e8:	4b2e      	ldr	r3, [pc, #184]	; (80106a4 <network_configure_weights+0x13c>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80105f0:	4a2c      	ldr	r2, [pc, #176]	; (80106a4 <network_configure_weights+0x13c>)
 80105f2:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 76288);
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	f503 3395 	add.w	r3, r3, #76288	; 0x12a00
 80105fa:	4a2a      	ldr	r2, [pc, #168]	; (80106a4 <network_configure_weights+0x13c>)
 80105fc:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 75264);
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	f503 3393 	add.w	r3, r3, #75264	; 0x12600
 8010604:	4a27      	ldr	r2, [pc, #156]	; (80106a4 <network_configure_weights+0x13c>)
 8010606:	60d3      	str	r3, [r2, #12]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8010608:	4b27      	ldr	r3, [pc, #156]	; (80106a8 <network_configure_weights+0x140>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010610:	4a25      	ldr	r2, [pc, #148]	; (80106a8 <network_configure_weights+0x140>)
 8010612:	6013      	str	r3, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(weights + 75008);
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 801061a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801061e:	4a22      	ldr	r2, [pc, #136]	; (80106a8 <network_configure_weights+0x140>)
 8010620:	6093      	str	r3, [r2, #8]
    conv2d_2_bias_array.data_start = AI_PTR(weights + 75008);
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 8010628:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801062c:	4a1e      	ldr	r2, [pc, #120]	; (80106a8 <network_configure_weights+0x140>)
 801062e:	60d3      	str	r3, [r2, #12]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8010630:	4b1e      	ldr	r3, [pc, #120]	; (80106ac <network_configure_weights+0x144>)
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010638:	4a1c      	ldr	r2, [pc, #112]	; (80106ac <network_configure_weights+0x144>)
 801063a:	6013      	str	r3, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(weights + 1280);
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010642:	4a1a      	ldr	r2, [pc, #104]	; (80106ac <network_configure_weights+0x144>)
 8010644:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.data_start = AI_PTR(weights + 1280);
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801064c:	4a17      	ldr	r2, [pc, #92]	; (80106ac <network_configure_weights+0x144>)
 801064e:	60d3      	str	r3, [r2, #12]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8010650:	4b17      	ldr	r3, [pc, #92]	; (80106b0 <network_configure_weights+0x148>)
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010658:	4a15      	ldr	r2, [pc, #84]	; (80106b0 <network_configure_weights+0x148>)
 801065a:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(weights + 1152);
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8010662:	4a13      	ldr	r2, [pc, #76]	; (80106b0 <network_configure_weights+0x148>)
 8010664:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(weights + 1152);
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801066c:	4a10      	ldr	r2, [pc, #64]	; (80106b0 <network_configure_weights+0x148>)
 801066e:	60d3      	str	r3, [r2, #12]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8010670:	4b10      	ldr	r3, [pc, #64]	; (80106b4 <network_configure_weights+0x14c>)
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010678:	4a0e      	ldr	r2, [pc, #56]	; (80106b4 <network_configure_weights+0x14c>)
 801067a:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(weights + 0);
 801067c:	4a0d      	ldr	r2, [pc, #52]	; (80106b4 <network_configure_weights+0x14c>)
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(weights + 0);
 8010682:	4a0c      	ldr	r2, [pc, #48]	; (80106b4 <network_configure_weights+0x14c>)
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8010688:	2301      	movs	r3, #1
}
 801068a:	4618      	mov	r0, r3
 801068c:	3714      	adds	r7, #20
 801068e:	46bd      	mov	sp, r7
 8010690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010694:	4770      	bx	lr
 8010696:	bf00      	nop
 8010698:	2000012c 	.word	0x2000012c
 801069c:	2000013c 	.word	0x2000013c
 80106a0:	2000014c 	.word	0x2000014c
 80106a4:	2000015c 	.word	0x2000015c
 80106a8:	2000016c 	.word	0x2000016c
 80106ac:	2000017c 	.word	0x2000017c
 80106b0:	2000018c 	.word	0x2000018c
 80106b4:	2000019c 	.word	0x2000019c

080106b8 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b082      	sub	sp, #8
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80106c0:	6878      	ldr	r0, [r7, #4]
 80106c2:	f7ef fe90 	bl	80003e6 <ai_platform_network_get_error>
 80106c6:	4603      	mov	r3, r0
}
 80106c8:	4618      	mov	r0, r3
 80106ca:	3708      	adds	r7, #8
 80106cc:	46bd      	mov	sp, r7
 80106ce:	bd80      	pop	{r7, pc}

080106d0 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b084      	sub	sp, #16
 80106d4:	af02      	add	r7, sp, #8
 80106d6:	6078      	str	r0, [r7, #4]
 80106d8:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80106da:	2300      	movs	r3, #0
 80106dc:	9301      	str	r3, [sp, #4]
 80106de:	2303      	movs	r3, #3
 80106e0:	9300      	str	r3, [sp, #0]
 80106e2:	2301      	movs	r3, #1
 80106e4:	4a04      	ldr	r2, [pc, #16]	; (80106f8 <ai_network_create+0x28>)
 80106e6:	6839      	ldr	r1, [r7, #0]
 80106e8:	6878      	ldr	r0, [r7, #4]
 80106ea:	f7ef ff67 	bl	80005bc <ai_platform_network_create>
 80106ee:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80106f0:	4618      	mov	r0, r3
 80106f2:	3708      	adds	r7, #8
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bd80      	pop	{r7, pc}
 80106f8:	200000c4 	.word	0x200000c4

080106fc <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b082      	sub	sp, #8
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 8010704:	6878      	ldr	r0, [r7, #4]
 8010706:	f7ef ff9e 	bl	8000646 <ai_platform_network_destroy>
 801070a:	4603      	mov	r3, r0
}
 801070c:	4618      	mov	r0, r3
 801070e:	3708      	adds	r7, #8
 8010710:	46bd      	mov	sp, r7
 8010712:	bd80      	pop	{r7, pc}

08010714 <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b084      	sub	sp, #16
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
 801071c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 801071e:	6839      	ldr	r1, [r7, #0]
 8010720:	6878      	ldr	r0, [r7, #4]
 8010722:	f7ef ffb3 	bl	800068c <ai_platform_network_init>
 8010726:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d101      	bne.n	8010732 <ai_network_init+0x1e>
 801072e:	2300      	movs	r3, #0
 8010730:	e01f      	b.n	8010772 <ai_network_init+0x5e>

  ai_bool ok = true;
 8010732:	2301      	movs	r3, #1
 8010734:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 8010736:	683b      	ldr	r3, [r7, #0]
 8010738:	4619      	mov	r1, r3
 801073a:	68f8      	ldr	r0, [r7, #12]
 801073c:	f7ff ff14 	bl	8010568 <network_configure_weights>
 8010740:	4603      	mov	r3, r0
 8010742:	461a      	mov	r2, r3
 8010744:	7afb      	ldrb	r3, [r7, #11]
 8010746:	4013      	ands	r3, r2
 8010748:	2b00      	cmp	r3, #0
 801074a:	bf14      	ite	ne
 801074c:	2301      	movne	r3, #1
 801074e:	2300      	moveq	r3, #0
 8010750:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 8010752:	683b      	ldr	r3, [r7, #0]
 8010754:	3318      	adds	r3, #24
 8010756:	4619      	mov	r1, r3
 8010758:	68f8      	ldr	r0, [r7, #12]
 801075a:	f7ff fe91 	bl	8010480 <network_configure_activations>
 801075e:	4603      	mov	r3, r0
 8010760:	461a      	mov	r2, r3
 8010762:	7afb      	ldrb	r3, [r7, #11]
 8010764:	4013      	ands	r3, r2
 8010766:	2b00      	cmp	r3, #0
 8010768:	bf14      	ite	ne
 801076a:	2301      	movne	r3, #1
 801076c:	2300      	moveq	r3, #0
 801076e:	72fb      	strb	r3, [r7, #11]

  return ok;
 8010770:	7afb      	ldrb	r3, [r7, #11]
}
 8010772:	4618      	mov	r0, r3
 8010774:	3710      	adds	r7, #16
 8010776:	46bd      	mov	sp, r7
 8010778:	bd80      	pop	{r7, pc}

0801077a <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 801077a:	b580      	push	{r7, lr}
 801077c:	b084      	sub	sp, #16
 801077e:	af00      	add	r7, sp, #0
 8010780:	60f8      	str	r0, [r7, #12]
 8010782:	60b9      	str	r1, [r7, #8]
 8010784:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8010786:	687a      	ldr	r2, [r7, #4]
 8010788:	68b9      	ldr	r1, [r7, #8]
 801078a:	68f8      	ldr	r0, [r7, #12]
 801078c:	f7ef ffda 	bl	8000744 <ai_platform_network_process>
 8010790:	4603      	mov	r3, r0
}
 8010792:	4618      	mov	r0, r3
 8010794:	3710      	adds	r7, #16
 8010796:	46bd      	mov	sp, r7
 8010798:	bd80      	pop	{r7, pc}
	...

0801079c <ai_network_data_weights_get>:
#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 801079c:	b480      	push	{r7}
 801079e:	af00      	add	r7, sp, #0
    0x96, 0xb4, 0x8d, 0xbd, 0x82, 0xc2, 0x18, 0xbe, 0xb8, 0x5b,
    0x4c, 0xbc, 0x6c, 0x24, 0xa1, 0xbd, 0x85, 0x58, 0x81,
    0x3c, 0x6f, 0xde, 0xdb, 0xbd, 0xd7, 0xd2, 0xb3, 0xbd
  };

  return AI_HANDLE_PTR(s_network_weights);
 80107a0:	4b02      	ldr	r3, [pc, #8]	; (80107ac <ai_network_data_weights_get+0x10>)

}
 80107a2:	4618      	mov	r0, r3
 80107a4:	46bd      	mov	sp, r7
 80107a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107aa:	4770      	bx	lr
 80107ac:	0801b784 	.word	0x0801b784

080107b0 <__aeabi_memclr>:
 80107b0:	2200      	movs	r2, #0
 80107b2:	f7f5 bd31 	b.w	8006218 <__aeabi_memset>

080107b6 <__aeabi_memcpy>:
 80107b6:	f000 b83b 	b.w	8010830 <memcpy>
	...

080107bc <__errno>:
 80107bc:	4b01      	ldr	r3, [pc, #4]	; (80107c4 <__errno+0x8>)
 80107be:	6818      	ldr	r0, [r3, #0]
 80107c0:	4770      	bx	lr
 80107c2:	bf00      	nop
 80107c4:	200008c8 	.word	0x200008c8

080107c8 <__libc_init_array>:
 80107c8:	b570      	push	{r4, r5, r6, lr}
 80107ca:	4d0d      	ldr	r5, [pc, #52]	; (8010800 <__libc_init_array+0x38>)
 80107cc:	4c0d      	ldr	r4, [pc, #52]	; (8010804 <__libc_init_array+0x3c>)
 80107ce:	1b64      	subs	r4, r4, r5
 80107d0:	10a4      	asrs	r4, r4, #2
 80107d2:	2600      	movs	r6, #0
 80107d4:	42a6      	cmp	r6, r4
 80107d6:	d109      	bne.n	80107ec <__libc_init_array+0x24>
 80107d8:	4d0b      	ldr	r5, [pc, #44]	; (8010808 <__libc_init_array+0x40>)
 80107da:	4c0c      	ldr	r4, [pc, #48]	; (801080c <__libc_init_array+0x44>)
 80107dc:	f007 fc40 	bl	8018060 <_init>
 80107e0:	1b64      	subs	r4, r4, r5
 80107e2:	10a4      	asrs	r4, r4, #2
 80107e4:	2600      	movs	r6, #0
 80107e6:	42a6      	cmp	r6, r4
 80107e8:	d105      	bne.n	80107f6 <__libc_init_array+0x2e>
 80107ea:	bd70      	pop	{r4, r5, r6, pc}
 80107ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80107f0:	4798      	blx	r3
 80107f2:	3601      	adds	r6, #1
 80107f4:	e7ee      	b.n	80107d4 <__libc_init_array+0xc>
 80107f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80107fa:	4798      	blx	r3
 80107fc:	3601      	adds	r6, #1
 80107fe:	e7f2      	b.n	80107e6 <__libc_init_array+0x1e>
 8010800:	0815008c 	.word	0x0815008c
 8010804:	0815008c 	.word	0x0815008c
 8010808:	0815008c 	.word	0x0815008c
 801080c:	08150090 	.word	0x08150090

08010810 <memcmp>:
 8010810:	b510      	push	{r4, lr}
 8010812:	3901      	subs	r1, #1
 8010814:	4402      	add	r2, r0
 8010816:	4290      	cmp	r0, r2
 8010818:	d101      	bne.n	801081e <memcmp+0xe>
 801081a:	2000      	movs	r0, #0
 801081c:	e005      	b.n	801082a <memcmp+0x1a>
 801081e:	7803      	ldrb	r3, [r0, #0]
 8010820:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010824:	42a3      	cmp	r3, r4
 8010826:	d001      	beq.n	801082c <memcmp+0x1c>
 8010828:	1b18      	subs	r0, r3, r4
 801082a:	bd10      	pop	{r4, pc}
 801082c:	3001      	adds	r0, #1
 801082e:	e7f2      	b.n	8010816 <memcmp+0x6>

08010830 <memcpy>:
 8010830:	440a      	add	r2, r1
 8010832:	4291      	cmp	r1, r2
 8010834:	f100 33ff 	add.w	r3, r0, #4294967295
 8010838:	d100      	bne.n	801083c <memcpy+0xc>
 801083a:	4770      	bx	lr
 801083c:	b510      	push	{r4, lr}
 801083e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010842:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010846:	4291      	cmp	r1, r2
 8010848:	d1f9      	bne.n	801083e <memcpy+0xe>
 801084a:	bd10      	pop	{r4, pc}

0801084c <memset>:
 801084c:	4402      	add	r2, r0
 801084e:	4603      	mov	r3, r0
 8010850:	4293      	cmp	r3, r2
 8010852:	d100      	bne.n	8010856 <memset+0xa>
 8010854:	4770      	bx	lr
 8010856:	f803 1b01 	strb.w	r1, [r3], #1
 801085a:	e7f9      	b.n	8010850 <memset+0x4>

0801085c <__cvt>:
 801085c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010860:	ec55 4b10 	vmov	r4, r5, d0
 8010864:	2d00      	cmp	r5, #0
 8010866:	460e      	mov	r6, r1
 8010868:	4619      	mov	r1, r3
 801086a:	462b      	mov	r3, r5
 801086c:	bfbb      	ittet	lt
 801086e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010872:	461d      	movlt	r5, r3
 8010874:	2300      	movge	r3, #0
 8010876:	232d      	movlt	r3, #45	; 0x2d
 8010878:	700b      	strb	r3, [r1, #0]
 801087a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801087c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010880:	4691      	mov	r9, r2
 8010882:	f023 0820 	bic.w	r8, r3, #32
 8010886:	bfbc      	itt	lt
 8010888:	4622      	movlt	r2, r4
 801088a:	4614      	movlt	r4, r2
 801088c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010890:	d005      	beq.n	801089e <__cvt+0x42>
 8010892:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010896:	d100      	bne.n	801089a <__cvt+0x3e>
 8010898:	3601      	adds	r6, #1
 801089a:	2102      	movs	r1, #2
 801089c:	e000      	b.n	80108a0 <__cvt+0x44>
 801089e:	2103      	movs	r1, #3
 80108a0:	ab03      	add	r3, sp, #12
 80108a2:	9301      	str	r3, [sp, #4]
 80108a4:	ab02      	add	r3, sp, #8
 80108a6:	9300      	str	r3, [sp, #0]
 80108a8:	ec45 4b10 	vmov	d0, r4, r5
 80108ac:	4653      	mov	r3, sl
 80108ae:	4632      	mov	r2, r6
 80108b0:	f001 fefa 	bl	80126a8 <_dtoa_r>
 80108b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80108b8:	4607      	mov	r7, r0
 80108ba:	d102      	bne.n	80108c2 <__cvt+0x66>
 80108bc:	f019 0f01 	tst.w	r9, #1
 80108c0:	d022      	beq.n	8010908 <__cvt+0xac>
 80108c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80108c6:	eb07 0906 	add.w	r9, r7, r6
 80108ca:	d110      	bne.n	80108ee <__cvt+0x92>
 80108cc:	783b      	ldrb	r3, [r7, #0]
 80108ce:	2b30      	cmp	r3, #48	; 0x30
 80108d0:	d10a      	bne.n	80108e8 <__cvt+0x8c>
 80108d2:	2200      	movs	r2, #0
 80108d4:	2300      	movs	r3, #0
 80108d6:	4620      	mov	r0, r4
 80108d8:	4629      	mov	r1, r5
 80108da:	f7f6 f96d 	bl	8006bb8 <__aeabi_dcmpeq>
 80108de:	b918      	cbnz	r0, 80108e8 <__cvt+0x8c>
 80108e0:	f1c6 0601 	rsb	r6, r6, #1
 80108e4:	f8ca 6000 	str.w	r6, [sl]
 80108e8:	f8da 3000 	ldr.w	r3, [sl]
 80108ec:	4499      	add	r9, r3
 80108ee:	2200      	movs	r2, #0
 80108f0:	2300      	movs	r3, #0
 80108f2:	4620      	mov	r0, r4
 80108f4:	4629      	mov	r1, r5
 80108f6:	f7f6 f95f 	bl	8006bb8 <__aeabi_dcmpeq>
 80108fa:	b108      	cbz	r0, 8010900 <__cvt+0xa4>
 80108fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8010900:	2230      	movs	r2, #48	; 0x30
 8010902:	9b03      	ldr	r3, [sp, #12]
 8010904:	454b      	cmp	r3, r9
 8010906:	d307      	bcc.n	8010918 <__cvt+0xbc>
 8010908:	9b03      	ldr	r3, [sp, #12]
 801090a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801090c:	1bdb      	subs	r3, r3, r7
 801090e:	4638      	mov	r0, r7
 8010910:	6013      	str	r3, [r2, #0]
 8010912:	b004      	add	sp, #16
 8010914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010918:	1c59      	adds	r1, r3, #1
 801091a:	9103      	str	r1, [sp, #12]
 801091c:	701a      	strb	r2, [r3, #0]
 801091e:	e7f0      	b.n	8010902 <__cvt+0xa6>

08010920 <__exponent>:
 8010920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010922:	4603      	mov	r3, r0
 8010924:	2900      	cmp	r1, #0
 8010926:	bfb8      	it	lt
 8010928:	4249      	neglt	r1, r1
 801092a:	f803 2b02 	strb.w	r2, [r3], #2
 801092e:	bfb4      	ite	lt
 8010930:	222d      	movlt	r2, #45	; 0x2d
 8010932:	222b      	movge	r2, #43	; 0x2b
 8010934:	2909      	cmp	r1, #9
 8010936:	7042      	strb	r2, [r0, #1]
 8010938:	dd2a      	ble.n	8010990 <__exponent+0x70>
 801093a:	f10d 0407 	add.w	r4, sp, #7
 801093e:	46a4      	mov	ip, r4
 8010940:	270a      	movs	r7, #10
 8010942:	46a6      	mov	lr, r4
 8010944:	460a      	mov	r2, r1
 8010946:	fb91 f6f7 	sdiv	r6, r1, r7
 801094a:	fb07 1516 	mls	r5, r7, r6, r1
 801094e:	3530      	adds	r5, #48	; 0x30
 8010950:	2a63      	cmp	r2, #99	; 0x63
 8010952:	f104 34ff 	add.w	r4, r4, #4294967295
 8010956:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801095a:	4631      	mov	r1, r6
 801095c:	dcf1      	bgt.n	8010942 <__exponent+0x22>
 801095e:	3130      	adds	r1, #48	; 0x30
 8010960:	f1ae 0502 	sub.w	r5, lr, #2
 8010964:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010968:	1c44      	adds	r4, r0, #1
 801096a:	4629      	mov	r1, r5
 801096c:	4561      	cmp	r1, ip
 801096e:	d30a      	bcc.n	8010986 <__exponent+0x66>
 8010970:	f10d 0209 	add.w	r2, sp, #9
 8010974:	eba2 020e 	sub.w	r2, r2, lr
 8010978:	4565      	cmp	r5, ip
 801097a:	bf88      	it	hi
 801097c:	2200      	movhi	r2, #0
 801097e:	4413      	add	r3, r2
 8010980:	1a18      	subs	r0, r3, r0
 8010982:	b003      	add	sp, #12
 8010984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010986:	f811 2b01 	ldrb.w	r2, [r1], #1
 801098a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801098e:	e7ed      	b.n	801096c <__exponent+0x4c>
 8010990:	2330      	movs	r3, #48	; 0x30
 8010992:	3130      	adds	r1, #48	; 0x30
 8010994:	7083      	strb	r3, [r0, #2]
 8010996:	70c1      	strb	r1, [r0, #3]
 8010998:	1d03      	adds	r3, r0, #4
 801099a:	e7f1      	b.n	8010980 <__exponent+0x60>

0801099c <_printf_float>:
 801099c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109a0:	ed2d 8b02 	vpush	{d8}
 80109a4:	b08d      	sub	sp, #52	; 0x34
 80109a6:	460c      	mov	r4, r1
 80109a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80109ac:	4616      	mov	r6, r2
 80109ae:	461f      	mov	r7, r3
 80109b0:	4605      	mov	r5, r0
 80109b2:	f003 f98d 	bl	8013cd0 <_localeconv_r>
 80109b6:	f8d0 a000 	ldr.w	sl, [r0]
 80109ba:	4650      	mov	r0, sl
 80109bc:	f7f5 fc79 	bl	80062b2 <strlen>
 80109c0:	2300      	movs	r3, #0
 80109c2:	930a      	str	r3, [sp, #40]	; 0x28
 80109c4:	6823      	ldr	r3, [r4, #0]
 80109c6:	9305      	str	r3, [sp, #20]
 80109c8:	f8d8 3000 	ldr.w	r3, [r8]
 80109cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80109d0:	3307      	adds	r3, #7
 80109d2:	f023 0307 	bic.w	r3, r3, #7
 80109d6:	f103 0208 	add.w	r2, r3, #8
 80109da:	f8c8 2000 	str.w	r2, [r8]
 80109de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80109e6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80109ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80109ee:	9307      	str	r3, [sp, #28]
 80109f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80109f4:	ee08 0a10 	vmov	s16, r0
 80109f8:	4b9f      	ldr	r3, [pc, #636]	; (8010c78 <_printf_float+0x2dc>)
 80109fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80109fe:	f04f 32ff 	mov.w	r2, #4294967295
 8010a02:	f7f6 f90b 	bl	8006c1c <__aeabi_dcmpun>
 8010a06:	bb88      	cbnz	r0, 8010a6c <_printf_float+0xd0>
 8010a08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010a0c:	4b9a      	ldr	r3, [pc, #616]	; (8010c78 <_printf_float+0x2dc>)
 8010a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8010a12:	f7f6 f8e5 	bl	8006be0 <__aeabi_dcmple>
 8010a16:	bb48      	cbnz	r0, 8010a6c <_printf_float+0xd0>
 8010a18:	2200      	movs	r2, #0
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	4640      	mov	r0, r8
 8010a1e:	4649      	mov	r1, r9
 8010a20:	f7f6 f8d4 	bl	8006bcc <__aeabi_dcmplt>
 8010a24:	b110      	cbz	r0, 8010a2c <_printf_float+0x90>
 8010a26:	232d      	movs	r3, #45	; 0x2d
 8010a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a2c:	4b93      	ldr	r3, [pc, #588]	; (8010c7c <_printf_float+0x2e0>)
 8010a2e:	4894      	ldr	r0, [pc, #592]	; (8010c80 <_printf_float+0x2e4>)
 8010a30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010a34:	bf94      	ite	ls
 8010a36:	4698      	movls	r8, r3
 8010a38:	4680      	movhi	r8, r0
 8010a3a:	2303      	movs	r3, #3
 8010a3c:	6123      	str	r3, [r4, #16]
 8010a3e:	9b05      	ldr	r3, [sp, #20]
 8010a40:	f023 0204 	bic.w	r2, r3, #4
 8010a44:	6022      	str	r2, [r4, #0]
 8010a46:	f04f 0900 	mov.w	r9, #0
 8010a4a:	9700      	str	r7, [sp, #0]
 8010a4c:	4633      	mov	r3, r6
 8010a4e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010a50:	4621      	mov	r1, r4
 8010a52:	4628      	mov	r0, r5
 8010a54:	f000 f9d8 	bl	8010e08 <_printf_common>
 8010a58:	3001      	adds	r0, #1
 8010a5a:	f040 8090 	bne.w	8010b7e <_printf_float+0x1e2>
 8010a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8010a62:	b00d      	add	sp, #52	; 0x34
 8010a64:	ecbd 8b02 	vpop	{d8}
 8010a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a6c:	4642      	mov	r2, r8
 8010a6e:	464b      	mov	r3, r9
 8010a70:	4640      	mov	r0, r8
 8010a72:	4649      	mov	r1, r9
 8010a74:	f7f6 f8d2 	bl	8006c1c <__aeabi_dcmpun>
 8010a78:	b140      	cbz	r0, 8010a8c <_printf_float+0xf0>
 8010a7a:	464b      	mov	r3, r9
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	bfbc      	itt	lt
 8010a80:	232d      	movlt	r3, #45	; 0x2d
 8010a82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010a86:	487f      	ldr	r0, [pc, #508]	; (8010c84 <_printf_float+0x2e8>)
 8010a88:	4b7f      	ldr	r3, [pc, #508]	; (8010c88 <_printf_float+0x2ec>)
 8010a8a:	e7d1      	b.n	8010a30 <_printf_float+0x94>
 8010a8c:	6863      	ldr	r3, [r4, #4]
 8010a8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010a92:	9206      	str	r2, [sp, #24]
 8010a94:	1c5a      	adds	r2, r3, #1
 8010a96:	d13f      	bne.n	8010b18 <_printf_float+0x17c>
 8010a98:	2306      	movs	r3, #6
 8010a9a:	6063      	str	r3, [r4, #4]
 8010a9c:	9b05      	ldr	r3, [sp, #20]
 8010a9e:	6861      	ldr	r1, [r4, #4]
 8010aa0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	9303      	str	r3, [sp, #12]
 8010aa8:	ab0a      	add	r3, sp, #40	; 0x28
 8010aaa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010aae:	ab09      	add	r3, sp, #36	; 0x24
 8010ab0:	ec49 8b10 	vmov	d0, r8, r9
 8010ab4:	9300      	str	r3, [sp, #0]
 8010ab6:	6022      	str	r2, [r4, #0]
 8010ab8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010abc:	4628      	mov	r0, r5
 8010abe:	f7ff fecd 	bl	801085c <__cvt>
 8010ac2:	9b06      	ldr	r3, [sp, #24]
 8010ac4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010ac6:	2b47      	cmp	r3, #71	; 0x47
 8010ac8:	4680      	mov	r8, r0
 8010aca:	d108      	bne.n	8010ade <_printf_float+0x142>
 8010acc:	1cc8      	adds	r0, r1, #3
 8010ace:	db02      	blt.n	8010ad6 <_printf_float+0x13a>
 8010ad0:	6863      	ldr	r3, [r4, #4]
 8010ad2:	4299      	cmp	r1, r3
 8010ad4:	dd41      	ble.n	8010b5a <_printf_float+0x1be>
 8010ad6:	f1ab 0b02 	sub.w	fp, fp, #2
 8010ada:	fa5f fb8b 	uxtb.w	fp, fp
 8010ade:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010ae2:	d820      	bhi.n	8010b26 <_printf_float+0x18a>
 8010ae4:	3901      	subs	r1, #1
 8010ae6:	465a      	mov	r2, fp
 8010ae8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010aec:	9109      	str	r1, [sp, #36]	; 0x24
 8010aee:	f7ff ff17 	bl	8010920 <__exponent>
 8010af2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010af4:	1813      	adds	r3, r2, r0
 8010af6:	2a01      	cmp	r2, #1
 8010af8:	4681      	mov	r9, r0
 8010afa:	6123      	str	r3, [r4, #16]
 8010afc:	dc02      	bgt.n	8010b04 <_printf_float+0x168>
 8010afe:	6822      	ldr	r2, [r4, #0]
 8010b00:	07d2      	lsls	r2, r2, #31
 8010b02:	d501      	bpl.n	8010b08 <_printf_float+0x16c>
 8010b04:	3301      	adds	r3, #1
 8010b06:	6123      	str	r3, [r4, #16]
 8010b08:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d09c      	beq.n	8010a4a <_printf_float+0xae>
 8010b10:	232d      	movs	r3, #45	; 0x2d
 8010b12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b16:	e798      	b.n	8010a4a <_printf_float+0xae>
 8010b18:	9a06      	ldr	r2, [sp, #24]
 8010b1a:	2a47      	cmp	r2, #71	; 0x47
 8010b1c:	d1be      	bne.n	8010a9c <_printf_float+0x100>
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d1bc      	bne.n	8010a9c <_printf_float+0x100>
 8010b22:	2301      	movs	r3, #1
 8010b24:	e7b9      	b.n	8010a9a <_printf_float+0xfe>
 8010b26:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010b2a:	d118      	bne.n	8010b5e <_printf_float+0x1c2>
 8010b2c:	2900      	cmp	r1, #0
 8010b2e:	6863      	ldr	r3, [r4, #4]
 8010b30:	dd0b      	ble.n	8010b4a <_printf_float+0x1ae>
 8010b32:	6121      	str	r1, [r4, #16]
 8010b34:	b913      	cbnz	r3, 8010b3c <_printf_float+0x1a0>
 8010b36:	6822      	ldr	r2, [r4, #0]
 8010b38:	07d0      	lsls	r0, r2, #31
 8010b3a:	d502      	bpl.n	8010b42 <_printf_float+0x1a6>
 8010b3c:	3301      	adds	r3, #1
 8010b3e:	440b      	add	r3, r1
 8010b40:	6123      	str	r3, [r4, #16]
 8010b42:	65a1      	str	r1, [r4, #88]	; 0x58
 8010b44:	f04f 0900 	mov.w	r9, #0
 8010b48:	e7de      	b.n	8010b08 <_printf_float+0x16c>
 8010b4a:	b913      	cbnz	r3, 8010b52 <_printf_float+0x1b6>
 8010b4c:	6822      	ldr	r2, [r4, #0]
 8010b4e:	07d2      	lsls	r2, r2, #31
 8010b50:	d501      	bpl.n	8010b56 <_printf_float+0x1ba>
 8010b52:	3302      	adds	r3, #2
 8010b54:	e7f4      	b.n	8010b40 <_printf_float+0x1a4>
 8010b56:	2301      	movs	r3, #1
 8010b58:	e7f2      	b.n	8010b40 <_printf_float+0x1a4>
 8010b5a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b60:	4299      	cmp	r1, r3
 8010b62:	db05      	blt.n	8010b70 <_printf_float+0x1d4>
 8010b64:	6823      	ldr	r3, [r4, #0]
 8010b66:	6121      	str	r1, [r4, #16]
 8010b68:	07d8      	lsls	r0, r3, #31
 8010b6a:	d5ea      	bpl.n	8010b42 <_printf_float+0x1a6>
 8010b6c:	1c4b      	adds	r3, r1, #1
 8010b6e:	e7e7      	b.n	8010b40 <_printf_float+0x1a4>
 8010b70:	2900      	cmp	r1, #0
 8010b72:	bfd4      	ite	le
 8010b74:	f1c1 0202 	rsble	r2, r1, #2
 8010b78:	2201      	movgt	r2, #1
 8010b7a:	4413      	add	r3, r2
 8010b7c:	e7e0      	b.n	8010b40 <_printf_float+0x1a4>
 8010b7e:	6823      	ldr	r3, [r4, #0]
 8010b80:	055a      	lsls	r2, r3, #21
 8010b82:	d407      	bmi.n	8010b94 <_printf_float+0x1f8>
 8010b84:	6923      	ldr	r3, [r4, #16]
 8010b86:	4642      	mov	r2, r8
 8010b88:	4631      	mov	r1, r6
 8010b8a:	4628      	mov	r0, r5
 8010b8c:	47b8      	blx	r7
 8010b8e:	3001      	adds	r0, #1
 8010b90:	d12c      	bne.n	8010bec <_printf_float+0x250>
 8010b92:	e764      	b.n	8010a5e <_printf_float+0xc2>
 8010b94:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010b98:	f240 80e0 	bls.w	8010d5c <_printf_float+0x3c0>
 8010b9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	f7f6 f808 	bl	8006bb8 <__aeabi_dcmpeq>
 8010ba8:	2800      	cmp	r0, #0
 8010baa:	d034      	beq.n	8010c16 <_printf_float+0x27a>
 8010bac:	4a37      	ldr	r2, [pc, #220]	; (8010c8c <_printf_float+0x2f0>)
 8010bae:	2301      	movs	r3, #1
 8010bb0:	4631      	mov	r1, r6
 8010bb2:	4628      	mov	r0, r5
 8010bb4:	47b8      	blx	r7
 8010bb6:	3001      	adds	r0, #1
 8010bb8:	f43f af51 	beq.w	8010a5e <_printf_float+0xc2>
 8010bbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010bc0:	429a      	cmp	r2, r3
 8010bc2:	db02      	blt.n	8010bca <_printf_float+0x22e>
 8010bc4:	6823      	ldr	r3, [r4, #0]
 8010bc6:	07d8      	lsls	r0, r3, #31
 8010bc8:	d510      	bpl.n	8010bec <_printf_float+0x250>
 8010bca:	ee18 3a10 	vmov	r3, s16
 8010bce:	4652      	mov	r2, sl
 8010bd0:	4631      	mov	r1, r6
 8010bd2:	4628      	mov	r0, r5
 8010bd4:	47b8      	blx	r7
 8010bd6:	3001      	adds	r0, #1
 8010bd8:	f43f af41 	beq.w	8010a5e <_printf_float+0xc2>
 8010bdc:	f04f 0800 	mov.w	r8, #0
 8010be0:	f104 091a 	add.w	r9, r4, #26
 8010be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010be6:	3b01      	subs	r3, #1
 8010be8:	4543      	cmp	r3, r8
 8010bea:	dc09      	bgt.n	8010c00 <_printf_float+0x264>
 8010bec:	6823      	ldr	r3, [r4, #0]
 8010bee:	079b      	lsls	r3, r3, #30
 8010bf0:	f100 8105 	bmi.w	8010dfe <_printf_float+0x462>
 8010bf4:	68e0      	ldr	r0, [r4, #12]
 8010bf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010bf8:	4298      	cmp	r0, r3
 8010bfa:	bfb8      	it	lt
 8010bfc:	4618      	movlt	r0, r3
 8010bfe:	e730      	b.n	8010a62 <_printf_float+0xc6>
 8010c00:	2301      	movs	r3, #1
 8010c02:	464a      	mov	r2, r9
 8010c04:	4631      	mov	r1, r6
 8010c06:	4628      	mov	r0, r5
 8010c08:	47b8      	blx	r7
 8010c0a:	3001      	adds	r0, #1
 8010c0c:	f43f af27 	beq.w	8010a5e <_printf_float+0xc2>
 8010c10:	f108 0801 	add.w	r8, r8, #1
 8010c14:	e7e6      	b.n	8010be4 <_printf_float+0x248>
 8010c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	dc39      	bgt.n	8010c90 <_printf_float+0x2f4>
 8010c1c:	4a1b      	ldr	r2, [pc, #108]	; (8010c8c <_printf_float+0x2f0>)
 8010c1e:	2301      	movs	r3, #1
 8010c20:	4631      	mov	r1, r6
 8010c22:	4628      	mov	r0, r5
 8010c24:	47b8      	blx	r7
 8010c26:	3001      	adds	r0, #1
 8010c28:	f43f af19 	beq.w	8010a5e <_printf_float+0xc2>
 8010c2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010c30:	4313      	orrs	r3, r2
 8010c32:	d102      	bne.n	8010c3a <_printf_float+0x29e>
 8010c34:	6823      	ldr	r3, [r4, #0]
 8010c36:	07d9      	lsls	r1, r3, #31
 8010c38:	d5d8      	bpl.n	8010bec <_printf_float+0x250>
 8010c3a:	ee18 3a10 	vmov	r3, s16
 8010c3e:	4652      	mov	r2, sl
 8010c40:	4631      	mov	r1, r6
 8010c42:	4628      	mov	r0, r5
 8010c44:	47b8      	blx	r7
 8010c46:	3001      	adds	r0, #1
 8010c48:	f43f af09 	beq.w	8010a5e <_printf_float+0xc2>
 8010c4c:	f04f 0900 	mov.w	r9, #0
 8010c50:	f104 0a1a 	add.w	sl, r4, #26
 8010c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c56:	425b      	negs	r3, r3
 8010c58:	454b      	cmp	r3, r9
 8010c5a:	dc01      	bgt.n	8010c60 <_printf_float+0x2c4>
 8010c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c5e:	e792      	b.n	8010b86 <_printf_float+0x1ea>
 8010c60:	2301      	movs	r3, #1
 8010c62:	4652      	mov	r2, sl
 8010c64:	4631      	mov	r1, r6
 8010c66:	4628      	mov	r0, r5
 8010c68:	47b8      	blx	r7
 8010c6a:	3001      	adds	r0, #1
 8010c6c:	f43f aef7 	beq.w	8010a5e <_printf_float+0xc2>
 8010c70:	f109 0901 	add.w	r9, r9, #1
 8010c74:	e7ee      	b.n	8010c54 <_printf_float+0x2b8>
 8010c76:	bf00      	nop
 8010c78:	7fefffff 	.word	0x7fefffff
 8010c7c:	0814f7b0 	.word	0x0814f7b0
 8010c80:	0814f7b4 	.word	0x0814f7b4
 8010c84:	0814f7bc 	.word	0x0814f7bc
 8010c88:	0814f7b8 	.word	0x0814f7b8
 8010c8c:	0814f7c0 	.word	0x0814f7c0
 8010c90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010c92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010c94:	429a      	cmp	r2, r3
 8010c96:	bfa8      	it	ge
 8010c98:	461a      	movge	r2, r3
 8010c9a:	2a00      	cmp	r2, #0
 8010c9c:	4691      	mov	r9, r2
 8010c9e:	dc37      	bgt.n	8010d10 <_printf_float+0x374>
 8010ca0:	f04f 0b00 	mov.w	fp, #0
 8010ca4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010ca8:	f104 021a 	add.w	r2, r4, #26
 8010cac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010cae:	9305      	str	r3, [sp, #20]
 8010cb0:	eba3 0309 	sub.w	r3, r3, r9
 8010cb4:	455b      	cmp	r3, fp
 8010cb6:	dc33      	bgt.n	8010d20 <_printf_float+0x384>
 8010cb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010cbc:	429a      	cmp	r2, r3
 8010cbe:	db3b      	blt.n	8010d38 <_printf_float+0x39c>
 8010cc0:	6823      	ldr	r3, [r4, #0]
 8010cc2:	07da      	lsls	r2, r3, #31
 8010cc4:	d438      	bmi.n	8010d38 <_printf_float+0x39c>
 8010cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010cc8:	9a05      	ldr	r2, [sp, #20]
 8010cca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010ccc:	1a9a      	subs	r2, r3, r2
 8010cce:	eba3 0901 	sub.w	r9, r3, r1
 8010cd2:	4591      	cmp	r9, r2
 8010cd4:	bfa8      	it	ge
 8010cd6:	4691      	movge	r9, r2
 8010cd8:	f1b9 0f00 	cmp.w	r9, #0
 8010cdc:	dc35      	bgt.n	8010d4a <_printf_float+0x3ae>
 8010cde:	f04f 0800 	mov.w	r8, #0
 8010ce2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010ce6:	f104 0a1a 	add.w	sl, r4, #26
 8010cea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010cee:	1a9b      	subs	r3, r3, r2
 8010cf0:	eba3 0309 	sub.w	r3, r3, r9
 8010cf4:	4543      	cmp	r3, r8
 8010cf6:	f77f af79 	ble.w	8010bec <_printf_float+0x250>
 8010cfa:	2301      	movs	r3, #1
 8010cfc:	4652      	mov	r2, sl
 8010cfe:	4631      	mov	r1, r6
 8010d00:	4628      	mov	r0, r5
 8010d02:	47b8      	blx	r7
 8010d04:	3001      	adds	r0, #1
 8010d06:	f43f aeaa 	beq.w	8010a5e <_printf_float+0xc2>
 8010d0a:	f108 0801 	add.w	r8, r8, #1
 8010d0e:	e7ec      	b.n	8010cea <_printf_float+0x34e>
 8010d10:	4613      	mov	r3, r2
 8010d12:	4631      	mov	r1, r6
 8010d14:	4642      	mov	r2, r8
 8010d16:	4628      	mov	r0, r5
 8010d18:	47b8      	blx	r7
 8010d1a:	3001      	adds	r0, #1
 8010d1c:	d1c0      	bne.n	8010ca0 <_printf_float+0x304>
 8010d1e:	e69e      	b.n	8010a5e <_printf_float+0xc2>
 8010d20:	2301      	movs	r3, #1
 8010d22:	4631      	mov	r1, r6
 8010d24:	4628      	mov	r0, r5
 8010d26:	9205      	str	r2, [sp, #20]
 8010d28:	47b8      	blx	r7
 8010d2a:	3001      	adds	r0, #1
 8010d2c:	f43f ae97 	beq.w	8010a5e <_printf_float+0xc2>
 8010d30:	9a05      	ldr	r2, [sp, #20]
 8010d32:	f10b 0b01 	add.w	fp, fp, #1
 8010d36:	e7b9      	b.n	8010cac <_printf_float+0x310>
 8010d38:	ee18 3a10 	vmov	r3, s16
 8010d3c:	4652      	mov	r2, sl
 8010d3e:	4631      	mov	r1, r6
 8010d40:	4628      	mov	r0, r5
 8010d42:	47b8      	blx	r7
 8010d44:	3001      	adds	r0, #1
 8010d46:	d1be      	bne.n	8010cc6 <_printf_float+0x32a>
 8010d48:	e689      	b.n	8010a5e <_printf_float+0xc2>
 8010d4a:	9a05      	ldr	r2, [sp, #20]
 8010d4c:	464b      	mov	r3, r9
 8010d4e:	4442      	add	r2, r8
 8010d50:	4631      	mov	r1, r6
 8010d52:	4628      	mov	r0, r5
 8010d54:	47b8      	blx	r7
 8010d56:	3001      	adds	r0, #1
 8010d58:	d1c1      	bne.n	8010cde <_printf_float+0x342>
 8010d5a:	e680      	b.n	8010a5e <_printf_float+0xc2>
 8010d5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d5e:	2a01      	cmp	r2, #1
 8010d60:	dc01      	bgt.n	8010d66 <_printf_float+0x3ca>
 8010d62:	07db      	lsls	r3, r3, #31
 8010d64:	d538      	bpl.n	8010dd8 <_printf_float+0x43c>
 8010d66:	2301      	movs	r3, #1
 8010d68:	4642      	mov	r2, r8
 8010d6a:	4631      	mov	r1, r6
 8010d6c:	4628      	mov	r0, r5
 8010d6e:	47b8      	blx	r7
 8010d70:	3001      	adds	r0, #1
 8010d72:	f43f ae74 	beq.w	8010a5e <_printf_float+0xc2>
 8010d76:	ee18 3a10 	vmov	r3, s16
 8010d7a:	4652      	mov	r2, sl
 8010d7c:	4631      	mov	r1, r6
 8010d7e:	4628      	mov	r0, r5
 8010d80:	47b8      	blx	r7
 8010d82:	3001      	adds	r0, #1
 8010d84:	f43f ae6b 	beq.w	8010a5e <_printf_float+0xc2>
 8010d88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	2300      	movs	r3, #0
 8010d90:	f7f5 ff12 	bl	8006bb8 <__aeabi_dcmpeq>
 8010d94:	b9d8      	cbnz	r0, 8010dce <_printf_float+0x432>
 8010d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d98:	f108 0201 	add.w	r2, r8, #1
 8010d9c:	3b01      	subs	r3, #1
 8010d9e:	4631      	mov	r1, r6
 8010da0:	4628      	mov	r0, r5
 8010da2:	47b8      	blx	r7
 8010da4:	3001      	adds	r0, #1
 8010da6:	d10e      	bne.n	8010dc6 <_printf_float+0x42a>
 8010da8:	e659      	b.n	8010a5e <_printf_float+0xc2>
 8010daa:	2301      	movs	r3, #1
 8010dac:	4652      	mov	r2, sl
 8010dae:	4631      	mov	r1, r6
 8010db0:	4628      	mov	r0, r5
 8010db2:	47b8      	blx	r7
 8010db4:	3001      	adds	r0, #1
 8010db6:	f43f ae52 	beq.w	8010a5e <_printf_float+0xc2>
 8010dba:	f108 0801 	add.w	r8, r8, #1
 8010dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010dc0:	3b01      	subs	r3, #1
 8010dc2:	4543      	cmp	r3, r8
 8010dc4:	dcf1      	bgt.n	8010daa <_printf_float+0x40e>
 8010dc6:	464b      	mov	r3, r9
 8010dc8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010dcc:	e6dc      	b.n	8010b88 <_printf_float+0x1ec>
 8010dce:	f04f 0800 	mov.w	r8, #0
 8010dd2:	f104 0a1a 	add.w	sl, r4, #26
 8010dd6:	e7f2      	b.n	8010dbe <_printf_float+0x422>
 8010dd8:	2301      	movs	r3, #1
 8010dda:	4642      	mov	r2, r8
 8010ddc:	e7df      	b.n	8010d9e <_printf_float+0x402>
 8010dde:	2301      	movs	r3, #1
 8010de0:	464a      	mov	r2, r9
 8010de2:	4631      	mov	r1, r6
 8010de4:	4628      	mov	r0, r5
 8010de6:	47b8      	blx	r7
 8010de8:	3001      	adds	r0, #1
 8010dea:	f43f ae38 	beq.w	8010a5e <_printf_float+0xc2>
 8010dee:	f108 0801 	add.w	r8, r8, #1
 8010df2:	68e3      	ldr	r3, [r4, #12]
 8010df4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010df6:	1a5b      	subs	r3, r3, r1
 8010df8:	4543      	cmp	r3, r8
 8010dfa:	dcf0      	bgt.n	8010dde <_printf_float+0x442>
 8010dfc:	e6fa      	b.n	8010bf4 <_printf_float+0x258>
 8010dfe:	f04f 0800 	mov.w	r8, #0
 8010e02:	f104 0919 	add.w	r9, r4, #25
 8010e06:	e7f4      	b.n	8010df2 <_printf_float+0x456>

08010e08 <_printf_common>:
 8010e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e0c:	4616      	mov	r6, r2
 8010e0e:	4699      	mov	r9, r3
 8010e10:	688a      	ldr	r2, [r1, #8]
 8010e12:	690b      	ldr	r3, [r1, #16]
 8010e14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010e18:	4293      	cmp	r3, r2
 8010e1a:	bfb8      	it	lt
 8010e1c:	4613      	movlt	r3, r2
 8010e1e:	6033      	str	r3, [r6, #0]
 8010e20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010e24:	4607      	mov	r7, r0
 8010e26:	460c      	mov	r4, r1
 8010e28:	b10a      	cbz	r2, 8010e2e <_printf_common+0x26>
 8010e2a:	3301      	adds	r3, #1
 8010e2c:	6033      	str	r3, [r6, #0]
 8010e2e:	6823      	ldr	r3, [r4, #0]
 8010e30:	0699      	lsls	r1, r3, #26
 8010e32:	bf42      	ittt	mi
 8010e34:	6833      	ldrmi	r3, [r6, #0]
 8010e36:	3302      	addmi	r3, #2
 8010e38:	6033      	strmi	r3, [r6, #0]
 8010e3a:	6825      	ldr	r5, [r4, #0]
 8010e3c:	f015 0506 	ands.w	r5, r5, #6
 8010e40:	d106      	bne.n	8010e50 <_printf_common+0x48>
 8010e42:	f104 0a19 	add.w	sl, r4, #25
 8010e46:	68e3      	ldr	r3, [r4, #12]
 8010e48:	6832      	ldr	r2, [r6, #0]
 8010e4a:	1a9b      	subs	r3, r3, r2
 8010e4c:	42ab      	cmp	r3, r5
 8010e4e:	dc26      	bgt.n	8010e9e <_printf_common+0x96>
 8010e50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010e54:	1e13      	subs	r3, r2, #0
 8010e56:	6822      	ldr	r2, [r4, #0]
 8010e58:	bf18      	it	ne
 8010e5a:	2301      	movne	r3, #1
 8010e5c:	0692      	lsls	r2, r2, #26
 8010e5e:	d42b      	bmi.n	8010eb8 <_printf_common+0xb0>
 8010e60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010e64:	4649      	mov	r1, r9
 8010e66:	4638      	mov	r0, r7
 8010e68:	47c0      	blx	r8
 8010e6a:	3001      	adds	r0, #1
 8010e6c:	d01e      	beq.n	8010eac <_printf_common+0xa4>
 8010e6e:	6823      	ldr	r3, [r4, #0]
 8010e70:	68e5      	ldr	r5, [r4, #12]
 8010e72:	6832      	ldr	r2, [r6, #0]
 8010e74:	f003 0306 	and.w	r3, r3, #6
 8010e78:	2b04      	cmp	r3, #4
 8010e7a:	bf08      	it	eq
 8010e7c:	1aad      	subeq	r5, r5, r2
 8010e7e:	68a3      	ldr	r3, [r4, #8]
 8010e80:	6922      	ldr	r2, [r4, #16]
 8010e82:	bf0c      	ite	eq
 8010e84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010e88:	2500      	movne	r5, #0
 8010e8a:	4293      	cmp	r3, r2
 8010e8c:	bfc4      	itt	gt
 8010e8e:	1a9b      	subgt	r3, r3, r2
 8010e90:	18ed      	addgt	r5, r5, r3
 8010e92:	2600      	movs	r6, #0
 8010e94:	341a      	adds	r4, #26
 8010e96:	42b5      	cmp	r5, r6
 8010e98:	d11a      	bne.n	8010ed0 <_printf_common+0xc8>
 8010e9a:	2000      	movs	r0, #0
 8010e9c:	e008      	b.n	8010eb0 <_printf_common+0xa8>
 8010e9e:	2301      	movs	r3, #1
 8010ea0:	4652      	mov	r2, sl
 8010ea2:	4649      	mov	r1, r9
 8010ea4:	4638      	mov	r0, r7
 8010ea6:	47c0      	blx	r8
 8010ea8:	3001      	adds	r0, #1
 8010eaa:	d103      	bne.n	8010eb4 <_printf_common+0xac>
 8010eac:	f04f 30ff 	mov.w	r0, #4294967295
 8010eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010eb4:	3501      	adds	r5, #1
 8010eb6:	e7c6      	b.n	8010e46 <_printf_common+0x3e>
 8010eb8:	18e1      	adds	r1, r4, r3
 8010eba:	1c5a      	adds	r2, r3, #1
 8010ebc:	2030      	movs	r0, #48	; 0x30
 8010ebe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010ec2:	4422      	add	r2, r4
 8010ec4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010ec8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010ecc:	3302      	adds	r3, #2
 8010ece:	e7c7      	b.n	8010e60 <_printf_common+0x58>
 8010ed0:	2301      	movs	r3, #1
 8010ed2:	4622      	mov	r2, r4
 8010ed4:	4649      	mov	r1, r9
 8010ed6:	4638      	mov	r0, r7
 8010ed8:	47c0      	blx	r8
 8010eda:	3001      	adds	r0, #1
 8010edc:	d0e6      	beq.n	8010eac <_printf_common+0xa4>
 8010ede:	3601      	adds	r6, #1
 8010ee0:	e7d9      	b.n	8010e96 <_printf_common+0x8e>
	...

08010ee4 <_printf_i>:
 8010ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010ee8:	7e0f      	ldrb	r7, [r1, #24]
 8010eea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010eec:	2f78      	cmp	r7, #120	; 0x78
 8010eee:	4691      	mov	r9, r2
 8010ef0:	4680      	mov	r8, r0
 8010ef2:	460c      	mov	r4, r1
 8010ef4:	469a      	mov	sl, r3
 8010ef6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010efa:	d807      	bhi.n	8010f0c <_printf_i+0x28>
 8010efc:	2f62      	cmp	r7, #98	; 0x62
 8010efe:	d80a      	bhi.n	8010f16 <_printf_i+0x32>
 8010f00:	2f00      	cmp	r7, #0
 8010f02:	f000 80d8 	beq.w	80110b6 <_printf_i+0x1d2>
 8010f06:	2f58      	cmp	r7, #88	; 0x58
 8010f08:	f000 80a3 	beq.w	8011052 <_printf_i+0x16e>
 8010f0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010f10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010f14:	e03a      	b.n	8010f8c <_printf_i+0xa8>
 8010f16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010f1a:	2b15      	cmp	r3, #21
 8010f1c:	d8f6      	bhi.n	8010f0c <_printf_i+0x28>
 8010f1e:	a101      	add	r1, pc, #4	; (adr r1, 8010f24 <_printf_i+0x40>)
 8010f20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010f24:	08010f7d 	.word	0x08010f7d
 8010f28:	08010f91 	.word	0x08010f91
 8010f2c:	08010f0d 	.word	0x08010f0d
 8010f30:	08010f0d 	.word	0x08010f0d
 8010f34:	08010f0d 	.word	0x08010f0d
 8010f38:	08010f0d 	.word	0x08010f0d
 8010f3c:	08010f91 	.word	0x08010f91
 8010f40:	08010f0d 	.word	0x08010f0d
 8010f44:	08010f0d 	.word	0x08010f0d
 8010f48:	08010f0d 	.word	0x08010f0d
 8010f4c:	08010f0d 	.word	0x08010f0d
 8010f50:	0801109d 	.word	0x0801109d
 8010f54:	08010fc1 	.word	0x08010fc1
 8010f58:	0801107f 	.word	0x0801107f
 8010f5c:	08010f0d 	.word	0x08010f0d
 8010f60:	08010f0d 	.word	0x08010f0d
 8010f64:	080110bf 	.word	0x080110bf
 8010f68:	08010f0d 	.word	0x08010f0d
 8010f6c:	08010fc1 	.word	0x08010fc1
 8010f70:	08010f0d 	.word	0x08010f0d
 8010f74:	08010f0d 	.word	0x08010f0d
 8010f78:	08011087 	.word	0x08011087
 8010f7c:	682b      	ldr	r3, [r5, #0]
 8010f7e:	1d1a      	adds	r2, r3, #4
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	602a      	str	r2, [r5, #0]
 8010f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010f88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010f8c:	2301      	movs	r3, #1
 8010f8e:	e0a3      	b.n	80110d8 <_printf_i+0x1f4>
 8010f90:	6820      	ldr	r0, [r4, #0]
 8010f92:	6829      	ldr	r1, [r5, #0]
 8010f94:	0606      	lsls	r6, r0, #24
 8010f96:	f101 0304 	add.w	r3, r1, #4
 8010f9a:	d50a      	bpl.n	8010fb2 <_printf_i+0xce>
 8010f9c:	680e      	ldr	r6, [r1, #0]
 8010f9e:	602b      	str	r3, [r5, #0]
 8010fa0:	2e00      	cmp	r6, #0
 8010fa2:	da03      	bge.n	8010fac <_printf_i+0xc8>
 8010fa4:	232d      	movs	r3, #45	; 0x2d
 8010fa6:	4276      	negs	r6, r6
 8010fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010fac:	485e      	ldr	r0, [pc, #376]	; (8011128 <_printf_i+0x244>)
 8010fae:	230a      	movs	r3, #10
 8010fb0:	e019      	b.n	8010fe6 <_printf_i+0x102>
 8010fb2:	680e      	ldr	r6, [r1, #0]
 8010fb4:	602b      	str	r3, [r5, #0]
 8010fb6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010fba:	bf18      	it	ne
 8010fbc:	b236      	sxthne	r6, r6
 8010fbe:	e7ef      	b.n	8010fa0 <_printf_i+0xbc>
 8010fc0:	682b      	ldr	r3, [r5, #0]
 8010fc2:	6820      	ldr	r0, [r4, #0]
 8010fc4:	1d19      	adds	r1, r3, #4
 8010fc6:	6029      	str	r1, [r5, #0]
 8010fc8:	0601      	lsls	r1, r0, #24
 8010fca:	d501      	bpl.n	8010fd0 <_printf_i+0xec>
 8010fcc:	681e      	ldr	r6, [r3, #0]
 8010fce:	e002      	b.n	8010fd6 <_printf_i+0xf2>
 8010fd0:	0646      	lsls	r6, r0, #25
 8010fd2:	d5fb      	bpl.n	8010fcc <_printf_i+0xe8>
 8010fd4:	881e      	ldrh	r6, [r3, #0]
 8010fd6:	4854      	ldr	r0, [pc, #336]	; (8011128 <_printf_i+0x244>)
 8010fd8:	2f6f      	cmp	r7, #111	; 0x6f
 8010fda:	bf0c      	ite	eq
 8010fdc:	2308      	moveq	r3, #8
 8010fde:	230a      	movne	r3, #10
 8010fe0:	2100      	movs	r1, #0
 8010fe2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010fe6:	6865      	ldr	r5, [r4, #4]
 8010fe8:	60a5      	str	r5, [r4, #8]
 8010fea:	2d00      	cmp	r5, #0
 8010fec:	bfa2      	ittt	ge
 8010fee:	6821      	ldrge	r1, [r4, #0]
 8010ff0:	f021 0104 	bicge.w	r1, r1, #4
 8010ff4:	6021      	strge	r1, [r4, #0]
 8010ff6:	b90e      	cbnz	r6, 8010ffc <_printf_i+0x118>
 8010ff8:	2d00      	cmp	r5, #0
 8010ffa:	d04d      	beq.n	8011098 <_printf_i+0x1b4>
 8010ffc:	4615      	mov	r5, r2
 8010ffe:	fbb6 f1f3 	udiv	r1, r6, r3
 8011002:	fb03 6711 	mls	r7, r3, r1, r6
 8011006:	5dc7      	ldrb	r7, [r0, r7]
 8011008:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801100c:	4637      	mov	r7, r6
 801100e:	42bb      	cmp	r3, r7
 8011010:	460e      	mov	r6, r1
 8011012:	d9f4      	bls.n	8010ffe <_printf_i+0x11a>
 8011014:	2b08      	cmp	r3, #8
 8011016:	d10b      	bne.n	8011030 <_printf_i+0x14c>
 8011018:	6823      	ldr	r3, [r4, #0]
 801101a:	07de      	lsls	r6, r3, #31
 801101c:	d508      	bpl.n	8011030 <_printf_i+0x14c>
 801101e:	6923      	ldr	r3, [r4, #16]
 8011020:	6861      	ldr	r1, [r4, #4]
 8011022:	4299      	cmp	r1, r3
 8011024:	bfde      	ittt	le
 8011026:	2330      	movle	r3, #48	; 0x30
 8011028:	f805 3c01 	strble.w	r3, [r5, #-1]
 801102c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011030:	1b52      	subs	r2, r2, r5
 8011032:	6122      	str	r2, [r4, #16]
 8011034:	f8cd a000 	str.w	sl, [sp]
 8011038:	464b      	mov	r3, r9
 801103a:	aa03      	add	r2, sp, #12
 801103c:	4621      	mov	r1, r4
 801103e:	4640      	mov	r0, r8
 8011040:	f7ff fee2 	bl	8010e08 <_printf_common>
 8011044:	3001      	adds	r0, #1
 8011046:	d14c      	bne.n	80110e2 <_printf_i+0x1fe>
 8011048:	f04f 30ff 	mov.w	r0, #4294967295
 801104c:	b004      	add	sp, #16
 801104e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011052:	4835      	ldr	r0, [pc, #212]	; (8011128 <_printf_i+0x244>)
 8011054:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011058:	6829      	ldr	r1, [r5, #0]
 801105a:	6823      	ldr	r3, [r4, #0]
 801105c:	f851 6b04 	ldr.w	r6, [r1], #4
 8011060:	6029      	str	r1, [r5, #0]
 8011062:	061d      	lsls	r5, r3, #24
 8011064:	d514      	bpl.n	8011090 <_printf_i+0x1ac>
 8011066:	07df      	lsls	r7, r3, #31
 8011068:	bf44      	itt	mi
 801106a:	f043 0320 	orrmi.w	r3, r3, #32
 801106e:	6023      	strmi	r3, [r4, #0]
 8011070:	b91e      	cbnz	r6, 801107a <_printf_i+0x196>
 8011072:	6823      	ldr	r3, [r4, #0]
 8011074:	f023 0320 	bic.w	r3, r3, #32
 8011078:	6023      	str	r3, [r4, #0]
 801107a:	2310      	movs	r3, #16
 801107c:	e7b0      	b.n	8010fe0 <_printf_i+0xfc>
 801107e:	6823      	ldr	r3, [r4, #0]
 8011080:	f043 0320 	orr.w	r3, r3, #32
 8011084:	6023      	str	r3, [r4, #0]
 8011086:	2378      	movs	r3, #120	; 0x78
 8011088:	4828      	ldr	r0, [pc, #160]	; (801112c <_printf_i+0x248>)
 801108a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801108e:	e7e3      	b.n	8011058 <_printf_i+0x174>
 8011090:	0659      	lsls	r1, r3, #25
 8011092:	bf48      	it	mi
 8011094:	b2b6      	uxthmi	r6, r6
 8011096:	e7e6      	b.n	8011066 <_printf_i+0x182>
 8011098:	4615      	mov	r5, r2
 801109a:	e7bb      	b.n	8011014 <_printf_i+0x130>
 801109c:	682b      	ldr	r3, [r5, #0]
 801109e:	6826      	ldr	r6, [r4, #0]
 80110a0:	6961      	ldr	r1, [r4, #20]
 80110a2:	1d18      	adds	r0, r3, #4
 80110a4:	6028      	str	r0, [r5, #0]
 80110a6:	0635      	lsls	r5, r6, #24
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	d501      	bpl.n	80110b0 <_printf_i+0x1cc>
 80110ac:	6019      	str	r1, [r3, #0]
 80110ae:	e002      	b.n	80110b6 <_printf_i+0x1d2>
 80110b0:	0670      	lsls	r0, r6, #25
 80110b2:	d5fb      	bpl.n	80110ac <_printf_i+0x1c8>
 80110b4:	8019      	strh	r1, [r3, #0]
 80110b6:	2300      	movs	r3, #0
 80110b8:	6123      	str	r3, [r4, #16]
 80110ba:	4615      	mov	r5, r2
 80110bc:	e7ba      	b.n	8011034 <_printf_i+0x150>
 80110be:	682b      	ldr	r3, [r5, #0]
 80110c0:	1d1a      	adds	r2, r3, #4
 80110c2:	602a      	str	r2, [r5, #0]
 80110c4:	681d      	ldr	r5, [r3, #0]
 80110c6:	6862      	ldr	r2, [r4, #4]
 80110c8:	2100      	movs	r1, #0
 80110ca:	4628      	mov	r0, r5
 80110cc:	f7f5 f900 	bl	80062d0 <memchr>
 80110d0:	b108      	cbz	r0, 80110d6 <_printf_i+0x1f2>
 80110d2:	1b40      	subs	r0, r0, r5
 80110d4:	6060      	str	r0, [r4, #4]
 80110d6:	6863      	ldr	r3, [r4, #4]
 80110d8:	6123      	str	r3, [r4, #16]
 80110da:	2300      	movs	r3, #0
 80110dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80110e0:	e7a8      	b.n	8011034 <_printf_i+0x150>
 80110e2:	6923      	ldr	r3, [r4, #16]
 80110e4:	462a      	mov	r2, r5
 80110e6:	4649      	mov	r1, r9
 80110e8:	4640      	mov	r0, r8
 80110ea:	47d0      	blx	sl
 80110ec:	3001      	adds	r0, #1
 80110ee:	d0ab      	beq.n	8011048 <_printf_i+0x164>
 80110f0:	6823      	ldr	r3, [r4, #0]
 80110f2:	079b      	lsls	r3, r3, #30
 80110f4:	d413      	bmi.n	801111e <_printf_i+0x23a>
 80110f6:	68e0      	ldr	r0, [r4, #12]
 80110f8:	9b03      	ldr	r3, [sp, #12]
 80110fa:	4298      	cmp	r0, r3
 80110fc:	bfb8      	it	lt
 80110fe:	4618      	movlt	r0, r3
 8011100:	e7a4      	b.n	801104c <_printf_i+0x168>
 8011102:	2301      	movs	r3, #1
 8011104:	4632      	mov	r2, r6
 8011106:	4649      	mov	r1, r9
 8011108:	4640      	mov	r0, r8
 801110a:	47d0      	blx	sl
 801110c:	3001      	adds	r0, #1
 801110e:	d09b      	beq.n	8011048 <_printf_i+0x164>
 8011110:	3501      	adds	r5, #1
 8011112:	68e3      	ldr	r3, [r4, #12]
 8011114:	9903      	ldr	r1, [sp, #12]
 8011116:	1a5b      	subs	r3, r3, r1
 8011118:	42ab      	cmp	r3, r5
 801111a:	dcf2      	bgt.n	8011102 <_printf_i+0x21e>
 801111c:	e7eb      	b.n	80110f6 <_printf_i+0x212>
 801111e:	2500      	movs	r5, #0
 8011120:	f104 0619 	add.w	r6, r4, #25
 8011124:	e7f5      	b.n	8011112 <_printf_i+0x22e>
 8011126:	bf00      	nop
 8011128:	0814f7c2 	.word	0x0814f7c2
 801112c:	0814f7d3 	.word	0x0814f7d3

08011130 <_scanf_float>:
 8011130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011134:	b087      	sub	sp, #28
 8011136:	4617      	mov	r7, r2
 8011138:	9303      	str	r3, [sp, #12]
 801113a:	688b      	ldr	r3, [r1, #8]
 801113c:	1e5a      	subs	r2, r3, #1
 801113e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011142:	bf83      	ittte	hi
 8011144:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011148:	195b      	addhi	r3, r3, r5
 801114a:	9302      	strhi	r3, [sp, #8]
 801114c:	2300      	movls	r3, #0
 801114e:	bf86      	itte	hi
 8011150:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011154:	608b      	strhi	r3, [r1, #8]
 8011156:	9302      	strls	r3, [sp, #8]
 8011158:	680b      	ldr	r3, [r1, #0]
 801115a:	468b      	mov	fp, r1
 801115c:	2500      	movs	r5, #0
 801115e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011162:	f84b 3b1c 	str.w	r3, [fp], #28
 8011166:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801116a:	4680      	mov	r8, r0
 801116c:	460c      	mov	r4, r1
 801116e:	465e      	mov	r6, fp
 8011170:	46aa      	mov	sl, r5
 8011172:	46a9      	mov	r9, r5
 8011174:	9501      	str	r5, [sp, #4]
 8011176:	68a2      	ldr	r2, [r4, #8]
 8011178:	b152      	cbz	r2, 8011190 <_scanf_float+0x60>
 801117a:	683b      	ldr	r3, [r7, #0]
 801117c:	781b      	ldrb	r3, [r3, #0]
 801117e:	2b4e      	cmp	r3, #78	; 0x4e
 8011180:	d864      	bhi.n	801124c <_scanf_float+0x11c>
 8011182:	2b40      	cmp	r3, #64	; 0x40
 8011184:	d83c      	bhi.n	8011200 <_scanf_float+0xd0>
 8011186:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801118a:	b2c8      	uxtb	r0, r1
 801118c:	280e      	cmp	r0, #14
 801118e:	d93a      	bls.n	8011206 <_scanf_float+0xd6>
 8011190:	f1b9 0f00 	cmp.w	r9, #0
 8011194:	d003      	beq.n	801119e <_scanf_float+0x6e>
 8011196:	6823      	ldr	r3, [r4, #0]
 8011198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801119c:	6023      	str	r3, [r4, #0]
 801119e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80111a2:	f1ba 0f01 	cmp.w	sl, #1
 80111a6:	f200 8113 	bhi.w	80113d0 <_scanf_float+0x2a0>
 80111aa:	455e      	cmp	r6, fp
 80111ac:	f200 8105 	bhi.w	80113ba <_scanf_float+0x28a>
 80111b0:	2501      	movs	r5, #1
 80111b2:	4628      	mov	r0, r5
 80111b4:	b007      	add	sp, #28
 80111b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111ba:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80111be:	2a0d      	cmp	r2, #13
 80111c0:	d8e6      	bhi.n	8011190 <_scanf_float+0x60>
 80111c2:	a101      	add	r1, pc, #4	; (adr r1, 80111c8 <_scanf_float+0x98>)
 80111c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80111c8:	08011307 	.word	0x08011307
 80111cc:	08011191 	.word	0x08011191
 80111d0:	08011191 	.word	0x08011191
 80111d4:	08011191 	.word	0x08011191
 80111d8:	08011367 	.word	0x08011367
 80111dc:	0801133f 	.word	0x0801133f
 80111e0:	08011191 	.word	0x08011191
 80111e4:	08011191 	.word	0x08011191
 80111e8:	08011315 	.word	0x08011315
 80111ec:	08011191 	.word	0x08011191
 80111f0:	08011191 	.word	0x08011191
 80111f4:	08011191 	.word	0x08011191
 80111f8:	08011191 	.word	0x08011191
 80111fc:	080112cd 	.word	0x080112cd
 8011200:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8011204:	e7db      	b.n	80111be <_scanf_float+0x8e>
 8011206:	290e      	cmp	r1, #14
 8011208:	d8c2      	bhi.n	8011190 <_scanf_float+0x60>
 801120a:	a001      	add	r0, pc, #4	; (adr r0, 8011210 <_scanf_float+0xe0>)
 801120c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011210:	080112bf 	.word	0x080112bf
 8011214:	08011191 	.word	0x08011191
 8011218:	080112bf 	.word	0x080112bf
 801121c:	08011353 	.word	0x08011353
 8011220:	08011191 	.word	0x08011191
 8011224:	0801126d 	.word	0x0801126d
 8011228:	080112a9 	.word	0x080112a9
 801122c:	080112a9 	.word	0x080112a9
 8011230:	080112a9 	.word	0x080112a9
 8011234:	080112a9 	.word	0x080112a9
 8011238:	080112a9 	.word	0x080112a9
 801123c:	080112a9 	.word	0x080112a9
 8011240:	080112a9 	.word	0x080112a9
 8011244:	080112a9 	.word	0x080112a9
 8011248:	080112a9 	.word	0x080112a9
 801124c:	2b6e      	cmp	r3, #110	; 0x6e
 801124e:	d809      	bhi.n	8011264 <_scanf_float+0x134>
 8011250:	2b60      	cmp	r3, #96	; 0x60
 8011252:	d8b2      	bhi.n	80111ba <_scanf_float+0x8a>
 8011254:	2b54      	cmp	r3, #84	; 0x54
 8011256:	d077      	beq.n	8011348 <_scanf_float+0x218>
 8011258:	2b59      	cmp	r3, #89	; 0x59
 801125a:	d199      	bne.n	8011190 <_scanf_float+0x60>
 801125c:	2d07      	cmp	r5, #7
 801125e:	d197      	bne.n	8011190 <_scanf_float+0x60>
 8011260:	2508      	movs	r5, #8
 8011262:	e029      	b.n	80112b8 <_scanf_float+0x188>
 8011264:	2b74      	cmp	r3, #116	; 0x74
 8011266:	d06f      	beq.n	8011348 <_scanf_float+0x218>
 8011268:	2b79      	cmp	r3, #121	; 0x79
 801126a:	e7f6      	b.n	801125a <_scanf_float+0x12a>
 801126c:	6821      	ldr	r1, [r4, #0]
 801126e:	05c8      	lsls	r0, r1, #23
 8011270:	d51a      	bpl.n	80112a8 <_scanf_float+0x178>
 8011272:	9b02      	ldr	r3, [sp, #8]
 8011274:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8011278:	6021      	str	r1, [r4, #0]
 801127a:	f109 0901 	add.w	r9, r9, #1
 801127e:	b11b      	cbz	r3, 8011288 <_scanf_float+0x158>
 8011280:	3b01      	subs	r3, #1
 8011282:	3201      	adds	r2, #1
 8011284:	9302      	str	r3, [sp, #8]
 8011286:	60a2      	str	r2, [r4, #8]
 8011288:	68a3      	ldr	r3, [r4, #8]
 801128a:	3b01      	subs	r3, #1
 801128c:	60a3      	str	r3, [r4, #8]
 801128e:	6923      	ldr	r3, [r4, #16]
 8011290:	3301      	adds	r3, #1
 8011292:	6123      	str	r3, [r4, #16]
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	3b01      	subs	r3, #1
 8011298:	2b00      	cmp	r3, #0
 801129a:	607b      	str	r3, [r7, #4]
 801129c:	f340 8084 	ble.w	80113a8 <_scanf_float+0x278>
 80112a0:	683b      	ldr	r3, [r7, #0]
 80112a2:	3301      	adds	r3, #1
 80112a4:	603b      	str	r3, [r7, #0]
 80112a6:	e766      	b.n	8011176 <_scanf_float+0x46>
 80112a8:	eb1a 0f05 	cmn.w	sl, r5
 80112ac:	f47f af70 	bne.w	8011190 <_scanf_float+0x60>
 80112b0:	6822      	ldr	r2, [r4, #0]
 80112b2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80112b6:	6022      	str	r2, [r4, #0]
 80112b8:	f806 3b01 	strb.w	r3, [r6], #1
 80112bc:	e7e4      	b.n	8011288 <_scanf_float+0x158>
 80112be:	6822      	ldr	r2, [r4, #0]
 80112c0:	0610      	lsls	r0, r2, #24
 80112c2:	f57f af65 	bpl.w	8011190 <_scanf_float+0x60>
 80112c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80112ca:	e7f4      	b.n	80112b6 <_scanf_float+0x186>
 80112cc:	f1ba 0f00 	cmp.w	sl, #0
 80112d0:	d10e      	bne.n	80112f0 <_scanf_float+0x1c0>
 80112d2:	f1b9 0f00 	cmp.w	r9, #0
 80112d6:	d10e      	bne.n	80112f6 <_scanf_float+0x1c6>
 80112d8:	6822      	ldr	r2, [r4, #0]
 80112da:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80112de:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80112e2:	d108      	bne.n	80112f6 <_scanf_float+0x1c6>
 80112e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80112e8:	6022      	str	r2, [r4, #0]
 80112ea:	f04f 0a01 	mov.w	sl, #1
 80112ee:	e7e3      	b.n	80112b8 <_scanf_float+0x188>
 80112f0:	f1ba 0f02 	cmp.w	sl, #2
 80112f4:	d055      	beq.n	80113a2 <_scanf_float+0x272>
 80112f6:	2d01      	cmp	r5, #1
 80112f8:	d002      	beq.n	8011300 <_scanf_float+0x1d0>
 80112fa:	2d04      	cmp	r5, #4
 80112fc:	f47f af48 	bne.w	8011190 <_scanf_float+0x60>
 8011300:	3501      	adds	r5, #1
 8011302:	b2ed      	uxtb	r5, r5
 8011304:	e7d8      	b.n	80112b8 <_scanf_float+0x188>
 8011306:	f1ba 0f01 	cmp.w	sl, #1
 801130a:	f47f af41 	bne.w	8011190 <_scanf_float+0x60>
 801130e:	f04f 0a02 	mov.w	sl, #2
 8011312:	e7d1      	b.n	80112b8 <_scanf_float+0x188>
 8011314:	b97d      	cbnz	r5, 8011336 <_scanf_float+0x206>
 8011316:	f1b9 0f00 	cmp.w	r9, #0
 801131a:	f47f af3c 	bne.w	8011196 <_scanf_float+0x66>
 801131e:	6822      	ldr	r2, [r4, #0]
 8011320:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011324:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011328:	f47f af39 	bne.w	801119e <_scanf_float+0x6e>
 801132c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011330:	6022      	str	r2, [r4, #0]
 8011332:	2501      	movs	r5, #1
 8011334:	e7c0      	b.n	80112b8 <_scanf_float+0x188>
 8011336:	2d03      	cmp	r5, #3
 8011338:	d0e2      	beq.n	8011300 <_scanf_float+0x1d0>
 801133a:	2d05      	cmp	r5, #5
 801133c:	e7de      	b.n	80112fc <_scanf_float+0x1cc>
 801133e:	2d02      	cmp	r5, #2
 8011340:	f47f af26 	bne.w	8011190 <_scanf_float+0x60>
 8011344:	2503      	movs	r5, #3
 8011346:	e7b7      	b.n	80112b8 <_scanf_float+0x188>
 8011348:	2d06      	cmp	r5, #6
 801134a:	f47f af21 	bne.w	8011190 <_scanf_float+0x60>
 801134e:	2507      	movs	r5, #7
 8011350:	e7b2      	b.n	80112b8 <_scanf_float+0x188>
 8011352:	6822      	ldr	r2, [r4, #0]
 8011354:	0591      	lsls	r1, r2, #22
 8011356:	f57f af1b 	bpl.w	8011190 <_scanf_float+0x60>
 801135a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801135e:	6022      	str	r2, [r4, #0]
 8011360:	f8cd 9004 	str.w	r9, [sp, #4]
 8011364:	e7a8      	b.n	80112b8 <_scanf_float+0x188>
 8011366:	6822      	ldr	r2, [r4, #0]
 8011368:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801136c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8011370:	d006      	beq.n	8011380 <_scanf_float+0x250>
 8011372:	0550      	lsls	r0, r2, #21
 8011374:	f57f af0c 	bpl.w	8011190 <_scanf_float+0x60>
 8011378:	f1b9 0f00 	cmp.w	r9, #0
 801137c:	f43f af0f 	beq.w	801119e <_scanf_float+0x6e>
 8011380:	0591      	lsls	r1, r2, #22
 8011382:	bf58      	it	pl
 8011384:	9901      	ldrpl	r1, [sp, #4]
 8011386:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801138a:	bf58      	it	pl
 801138c:	eba9 0101 	subpl.w	r1, r9, r1
 8011390:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8011394:	bf58      	it	pl
 8011396:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801139a:	6022      	str	r2, [r4, #0]
 801139c:	f04f 0900 	mov.w	r9, #0
 80113a0:	e78a      	b.n	80112b8 <_scanf_float+0x188>
 80113a2:	f04f 0a03 	mov.w	sl, #3
 80113a6:	e787      	b.n	80112b8 <_scanf_float+0x188>
 80113a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80113ac:	4639      	mov	r1, r7
 80113ae:	4640      	mov	r0, r8
 80113b0:	4798      	blx	r3
 80113b2:	2800      	cmp	r0, #0
 80113b4:	f43f aedf 	beq.w	8011176 <_scanf_float+0x46>
 80113b8:	e6ea      	b.n	8011190 <_scanf_float+0x60>
 80113ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80113be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80113c2:	463a      	mov	r2, r7
 80113c4:	4640      	mov	r0, r8
 80113c6:	4798      	blx	r3
 80113c8:	6923      	ldr	r3, [r4, #16]
 80113ca:	3b01      	subs	r3, #1
 80113cc:	6123      	str	r3, [r4, #16]
 80113ce:	e6ec      	b.n	80111aa <_scanf_float+0x7a>
 80113d0:	1e6b      	subs	r3, r5, #1
 80113d2:	2b06      	cmp	r3, #6
 80113d4:	d825      	bhi.n	8011422 <_scanf_float+0x2f2>
 80113d6:	2d02      	cmp	r5, #2
 80113d8:	d836      	bhi.n	8011448 <_scanf_float+0x318>
 80113da:	455e      	cmp	r6, fp
 80113dc:	f67f aee8 	bls.w	80111b0 <_scanf_float+0x80>
 80113e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80113e4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80113e8:	463a      	mov	r2, r7
 80113ea:	4640      	mov	r0, r8
 80113ec:	4798      	blx	r3
 80113ee:	6923      	ldr	r3, [r4, #16]
 80113f0:	3b01      	subs	r3, #1
 80113f2:	6123      	str	r3, [r4, #16]
 80113f4:	e7f1      	b.n	80113da <_scanf_float+0x2aa>
 80113f6:	9802      	ldr	r0, [sp, #8]
 80113f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80113fc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8011400:	9002      	str	r0, [sp, #8]
 8011402:	463a      	mov	r2, r7
 8011404:	4640      	mov	r0, r8
 8011406:	4798      	blx	r3
 8011408:	6923      	ldr	r3, [r4, #16]
 801140a:	3b01      	subs	r3, #1
 801140c:	6123      	str	r3, [r4, #16]
 801140e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011412:	fa5f fa8a 	uxtb.w	sl, sl
 8011416:	f1ba 0f02 	cmp.w	sl, #2
 801141a:	d1ec      	bne.n	80113f6 <_scanf_float+0x2c6>
 801141c:	3d03      	subs	r5, #3
 801141e:	b2ed      	uxtb	r5, r5
 8011420:	1b76      	subs	r6, r6, r5
 8011422:	6823      	ldr	r3, [r4, #0]
 8011424:	05da      	lsls	r2, r3, #23
 8011426:	d52f      	bpl.n	8011488 <_scanf_float+0x358>
 8011428:	055b      	lsls	r3, r3, #21
 801142a:	d510      	bpl.n	801144e <_scanf_float+0x31e>
 801142c:	455e      	cmp	r6, fp
 801142e:	f67f aebf 	bls.w	80111b0 <_scanf_float+0x80>
 8011432:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011436:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801143a:	463a      	mov	r2, r7
 801143c:	4640      	mov	r0, r8
 801143e:	4798      	blx	r3
 8011440:	6923      	ldr	r3, [r4, #16]
 8011442:	3b01      	subs	r3, #1
 8011444:	6123      	str	r3, [r4, #16]
 8011446:	e7f1      	b.n	801142c <_scanf_float+0x2fc>
 8011448:	46aa      	mov	sl, r5
 801144a:	9602      	str	r6, [sp, #8]
 801144c:	e7df      	b.n	801140e <_scanf_float+0x2de>
 801144e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011452:	6923      	ldr	r3, [r4, #16]
 8011454:	2965      	cmp	r1, #101	; 0x65
 8011456:	f103 33ff 	add.w	r3, r3, #4294967295
 801145a:	f106 35ff 	add.w	r5, r6, #4294967295
 801145e:	6123      	str	r3, [r4, #16]
 8011460:	d00c      	beq.n	801147c <_scanf_float+0x34c>
 8011462:	2945      	cmp	r1, #69	; 0x45
 8011464:	d00a      	beq.n	801147c <_scanf_float+0x34c>
 8011466:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801146a:	463a      	mov	r2, r7
 801146c:	4640      	mov	r0, r8
 801146e:	4798      	blx	r3
 8011470:	6923      	ldr	r3, [r4, #16]
 8011472:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011476:	3b01      	subs	r3, #1
 8011478:	1eb5      	subs	r5, r6, #2
 801147a:	6123      	str	r3, [r4, #16]
 801147c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011480:	463a      	mov	r2, r7
 8011482:	4640      	mov	r0, r8
 8011484:	4798      	blx	r3
 8011486:	462e      	mov	r6, r5
 8011488:	6825      	ldr	r5, [r4, #0]
 801148a:	f015 0510 	ands.w	r5, r5, #16
 801148e:	d159      	bne.n	8011544 <_scanf_float+0x414>
 8011490:	7035      	strb	r5, [r6, #0]
 8011492:	6823      	ldr	r3, [r4, #0]
 8011494:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801149c:	d11b      	bne.n	80114d6 <_scanf_float+0x3a6>
 801149e:	9b01      	ldr	r3, [sp, #4]
 80114a0:	454b      	cmp	r3, r9
 80114a2:	eba3 0209 	sub.w	r2, r3, r9
 80114a6:	d123      	bne.n	80114f0 <_scanf_float+0x3c0>
 80114a8:	2200      	movs	r2, #0
 80114aa:	4659      	mov	r1, fp
 80114ac:	4640      	mov	r0, r8
 80114ae:	f000 ff25 	bl	80122fc <_strtod_r>
 80114b2:	6822      	ldr	r2, [r4, #0]
 80114b4:	9b03      	ldr	r3, [sp, #12]
 80114b6:	f012 0f02 	tst.w	r2, #2
 80114ba:	ec57 6b10 	vmov	r6, r7, d0
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	d021      	beq.n	8011506 <_scanf_float+0x3d6>
 80114c2:	9903      	ldr	r1, [sp, #12]
 80114c4:	1d1a      	adds	r2, r3, #4
 80114c6:	600a      	str	r2, [r1, #0]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	e9c3 6700 	strd	r6, r7, [r3]
 80114ce:	68e3      	ldr	r3, [r4, #12]
 80114d0:	3301      	adds	r3, #1
 80114d2:	60e3      	str	r3, [r4, #12]
 80114d4:	e66d      	b.n	80111b2 <_scanf_float+0x82>
 80114d6:	9b04      	ldr	r3, [sp, #16]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d0e5      	beq.n	80114a8 <_scanf_float+0x378>
 80114dc:	9905      	ldr	r1, [sp, #20]
 80114de:	230a      	movs	r3, #10
 80114e0:	462a      	mov	r2, r5
 80114e2:	3101      	adds	r1, #1
 80114e4:	4640      	mov	r0, r8
 80114e6:	f000 ff91 	bl	801240c <_strtol_r>
 80114ea:	9b04      	ldr	r3, [sp, #16]
 80114ec:	9e05      	ldr	r6, [sp, #20]
 80114ee:	1ac2      	subs	r2, r0, r3
 80114f0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80114f4:	429e      	cmp	r6, r3
 80114f6:	bf28      	it	cs
 80114f8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80114fc:	4912      	ldr	r1, [pc, #72]	; (8011548 <_scanf_float+0x418>)
 80114fe:	4630      	mov	r0, r6
 8011500:	f000 f8ba 	bl	8011678 <siprintf>
 8011504:	e7d0      	b.n	80114a8 <_scanf_float+0x378>
 8011506:	9903      	ldr	r1, [sp, #12]
 8011508:	f012 0f04 	tst.w	r2, #4
 801150c:	f103 0204 	add.w	r2, r3, #4
 8011510:	600a      	str	r2, [r1, #0]
 8011512:	d1d9      	bne.n	80114c8 <_scanf_float+0x398>
 8011514:	f8d3 8000 	ldr.w	r8, [r3]
 8011518:	ee10 2a10 	vmov	r2, s0
 801151c:	ee10 0a10 	vmov	r0, s0
 8011520:	463b      	mov	r3, r7
 8011522:	4639      	mov	r1, r7
 8011524:	f7f5 fb7a 	bl	8006c1c <__aeabi_dcmpun>
 8011528:	b128      	cbz	r0, 8011536 <_scanf_float+0x406>
 801152a:	4808      	ldr	r0, [pc, #32]	; (801154c <_scanf_float+0x41c>)
 801152c:	f000 f89e 	bl	801166c <nanf>
 8011530:	ed88 0a00 	vstr	s0, [r8]
 8011534:	e7cb      	b.n	80114ce <_scanf_float+0x39e>
 8011536:	4630      	mov	r0, r6
 8011538:	4639      	mov	r1, r7
 801153a:	f7f5 fbcd 	bl	8006cd8 <__aeabi_d2f>
 801153e:	f8c8 0000 	str.w	r0, [r8]
 8011542:	e7c4      	b.n	80114ce <_scanf_float+0x39e>
 8011544:	2500      	movs	r5, #0
 8011546:	e634      	b.n	80111b2 <_scanf_float+0x82>
 8011548:	0814f7e4 	.word	0x0814f7e4
 801154c:	0814fc58 	.word	0x0814fc58

08011550 <iprintf>:
 8011550:	b40f      	push	{r0, r1, r2, r3}
 8011552:	4b0a      	ldr	r3, [pc, #40]	; (801157c <iprintf+0x2c>)
 8011554:	b513      	push	{r0, r1, r4, lr}
 8011556:	681c      	ldr	r4, [r3, #0]
 8011558:	b124      	cbz	r4, 8011564 <iprintf+0x14>
 801155a:	69a3      	ldr	r3, [r4, #24]
 801155c:	b913      	cbnz	r3, 8011564 <iprintf+0x14>
 801155e:	4620      	mov	r0, r4
 8011560:	f001 ffaa 	bl	80134b8 <__sinit>
 8011564:	ab05      	add	r3, sp, #20
 8011566:	9a04      	ldr	r2, [sp, #16]
 8011568:	68a1      	ldr	r1, [r4, #8]
 801156a:	9301      	str	r3, [sp, #4]
 801156c:	4620      	mov	r0, r4
 801156e:	f003 fb73 	bl	8014c58 <_vfiprintf_r>
 8011572:	b002      	add	sp, #8
 8011574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011578:	b004      	add	sp, #16
 801157a:	4770      	bx	lr
 801157c:	200008c8 	.word	0x200008c8

08011580 <_puts_r>:
 8011580:	b570      	push	{r4, r5, r6, lr}
 8011582:	460e      	mov	r6, r1
 8011584:	4605      	mov	r5, r0
 8011586:	b118      	cbz	r0, 8011590 <_puts_r+0x10>
 8011588:	6983      	ldr	r3, [r0, #24]
 801158a:	b90b      	cbnz	r3, 8011590 <_puts_r+0x10>
 801158c:	f001 ff94 	bl	80134b8 <__sinit>
 8011590:	69ab      	ldr	r3, [r5, #24]
 8011592:	68ac      	ldr	r4, [r5, #8]
 8011594:	b913      	cbnz	r3, 801159c <_puts_r+0x1c>
 8011596:	4628      	mov	r0, r5
 8011598:	f001 ff8e 	bl	80134b8 <__sinit>
 801159c:	4b2c      	ldr	r3, [pc, #176]	; (8011650 <_puts_r+0xd0>)
 801159e:	429c      	cmp	r4, r3
 80115a0:	d120      	bne.n	80115e4 <_puts_r+0x64>
 80115a2:	686c      	ldr	r4, [r5, #4]
 80115a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80115a6:	07db      	lsls	r3, r3, #31
 80115a8:	d405      	bmi.n	80115b6 <_puts_r+0x36>
 80115aa:	89a3      	ldrh	r3, [r4, #12]
 80115ac:	0598      	lsls	r0, r3, #22
 80115ae:	d402      	bmi.n	80115b6 <_puts_r+0x36>
 80115b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80115b2:	f002 fb92 	bl	8013cda <__retarget_lock_acquire_recursive>
 80115b6:	89a3      	ldrh	r3, [r4, #12]
 80115b8:	0719      	lsls	r1, r3, #28
 80115ba:	d51d      	bpl.n	80115f8 <_puts_r+0x78>
 80115bc:	6923      	ldr	r3, [r4, #16]
 80115be:	b1db      	cbz	r3, 80115f8 <_puts_r+0x78>
 80115c0:	3e01      	subs	r6, #1
 80115c2:	68a3      	ldr	r3, [r4, #8]
 80115c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80115c8:	3b01      	subs	r3, #1
 80115ca:	60a3      	str	r3, [r4, #8]
 80115cc:	bb39      	cbnz	r1, 801161e <_puts_r+0x9e>
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	da38      	bge.n	8011644 <_puts_r+0xc4>
 80115d2:	4622      	mov	r2, r4
 80115d4:	210a      	movs	r1, #10
 80115d6:	4628      	mov	r0, r5
 80115d8:	f000 ff1a 	bl	8012410 <__swbuf_r>
 80115dc:	3001      	adds	r0, #1
 80115de:	d011      	beq.n	8011604 <_puts_r+0x84>
 80115e0:	250a      	movs	r5, #10
 80115e2:	e011      	b.n	8011608 <_puts_r+0x88>
 80115e4:	4b1b      	ldr	r3, [pc, #108]	; (8011654 <_puts_r+0xd4>)
 80115e6:	429c      	cmp	r4, r3
 80115e8:	d101      	bne.n	80115ee <_puts_r+0x6e>
 80115ea:	68ac      	ldr	r4, [r5, #8]
 80115ec:	e7da      	b.n	80115a4 <_puts_r+0x24>
 80115ee:	4b1a      	ldr	r3, [pc, #104]	; (8011658 <_puts_r+0xd8>)
 80115f0:	429c      	cmp	r4, r3
 80115f2:	bf08      	it	eq
 80115f4:	68ec      	ldreq	r4, [r5, #12]
 80115f6:	e7d5      	b.n	80115a4 <_puts_r+0x24>
 80115f8:	4621      	mov	r1, r4
 80115fa:	4628      	mov	r0, r5
 80115fc:	f000 ff5a 	bl	80124b4 <__swsetup_r>
 8011600:	2800      	cmp	r0, #0
 8011602:	d0dd      	beq.n	80115c0 <_puts_r+0x40>
 8011604:	f04f 35ff 	mov.w	r5, #4294967295
 8011608:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801160a:	07da      	lsls	r2, r3, #31
 801160c:	d405      	bmi.n	801161a <_puts_r+0x9a>
 801160e:	89a3      	ldrh	r3, [r4, #12]
 8011610:	059b      	lsls	r3, r3, #22
 8011612:	d402      	bmi.n	801161a <_puts_r+0x9a>
 8011614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011616:	f002 fb61 	bl	8013cdc <__retarget_lock_release_recursive>
 801161a:	4628      	mov	r0, r5
 801161c:	bd70      	pop	{r4, r5, r6, pc}
 801161e:	2b00      	cmp	r3, #0
 8011620:	da04      	bge.n	801162c <_puts_r+0xac>
 8011622:	69a2      	ldr	r2, [r4, #24]
 8011624:	429a      	cmp	r2, r3
 8011626:	dc06      	bgt.n	8011636 <_puts_r+0xb6>
 8011628:	290a      	cmp	r1, #10
 801162a:	d004      	beq.n	8011636 <_puts_r+0xb6>
 801162c:	6823      	ldr	r3, [r4, #0]
 801162e:	1c5a      	adds	r2, r3, #1
 8011630:	6022      	str	r2, [r4, #0]
 8011632:	7019      	strb	r1, [r3, #0]
 8011634:	e7c5      	b.n	80115c2 <_puts_r+0x42>
 8011636:	4622      	mov	r2, r4
 8011638:	4628      	mov	r0, r5
 801163a:	f000 fee9 	bl	8012410 <__swbuf_r>
 801163e:	3001      	adds	r0, #1
 8011640:	d1bf      	bne.n	80115c2 <_puts_r+0x42>
 8011642:	e7df      	b.n	8011604 <_puts_r+0x84>
 8011644:	6823      	ldr	r3, [r4, #0]
 8011646:	250a      	movs	r5, #10
 8011648:	1c5a      	adds	r2, r3, #1
 801164a:	6022      	str	r2, [r4, #0]
 801164c:	701d      	strb	r5, [r3, #0]
 801164e:	e7db      	b.n	8011608 <_puts_r+0x88>
 8011650:	0814f9f4 	.word	0x0814f9f4
 8011654:	0814fa14 	.word	0x0814fa14
 8011658:	0814f9d4 	.word	0x0814f9d4

0801165c <puts>:
 801165c:	4b02      	ldr	r3, [pc, #8]	; (8011668 <puts+0xc>)
 801165e:	4601      	mov	r1, r0
 8011660:	6818      	ldr	r0, [r3, #0]
 8011662:	f7ff bf8d 	b.w	8011580 <_puts_r>
 8011666:	bf00      	nop
 8011668:	200008c8 	.word	0x200008c8

0801166c <nanf>:
 801166c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011674 <nanf+0x8>
 8011670:	4770      	bx	lr
 8011672:	bf00      	nop
 8011674:	7fc00000 	.word	0x7fc00000

08011678 <siprintf>:
 8011678:	b40e      	push	{r1, r2, r3}
 801167a:	b500      	push	{lr}
 801167c:	b09c      	sub	sp, #112	; 0x70
 801167e:	ab1d      	add	r3, sp, #116	; 0x74
 8011680:	9002      	str	r0, [sp, #8]
 8011682:	9006      	str	r0, [sp, #24]
 8011684:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011688:	4809      	ldr	r0, [pc, #36]	; (80116b0 <siprintf+0x38>)
 801168a:	9107      	str	r1, [sp, #28]
 801168c:	9104      	str	r1, [sp, #16]
 801168e:	4909      	ldr	r1, [pc, #36]	; (80116b4 <siprintf+0x3c>)
 8011690:	f853 2b04 	ldr.w	r2, [r3], #4
 8011694:	9105      	str	r1, [sp, #20]
 8011696:	6800      	ldr	r0, [r0, #0]
 8011698:	9301      	str	r3, [sp, #4]
 801169a:	a902      	add	r1, sp, #8
 801169c:	f003 f9b2 	bl	8014a04 <_svfiprintf_r>
 80116a0:	9b02      	ldr	r3, [sp, #8]
 80116a2:	2200      	movs	r2, #0
 80116a4:	701a      	strb	r2, [r3, #0]
 80116a6:	b01c      	add	sp, #112	; 0x70
 80116a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80116ac:	b003      	add	sp, #12
 80116ae:	4770      	bx	lr
 80116b0:	200008c8 	.word	0x200008c8
 80116b4:	ffff0208 	.word	0xffff0208

080116b8 <sulp>:
 80116b8:	b570      	push	{r4, r5, r6, lr}
 80116ba:	4604      	mov	r4, r0
 80116bc:	460d      	mov	r5, r1
 80116be:	ec45 4b10 	vmov	d0, r4, r5
 80116c2:	4616      	mov	r6, r2
 80116c4:	f002 fefc 	bl	80144c0 <__ulp>
 80116c8:	ec51 0b10 	vmov	r0, r1, d0
 80116cc:	b17e      	cbz	r6, 80116ee <sulp+0x36>
 80116ce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80116d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	dd09      	ble.n	80116ee <sulp+0x36>
 80116da:	051b      	lsls	r3, r3, #20
 80116dc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80116e0:	2400      	movs	r4, #0
 80116e2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80116e6:	4622      	mov	r2, r4
 80116e8:	462b      	mov	r3, r5
 80116ea:	f7f4 fffd 	bl	80066e8 <__aeabi_dmul>
 80116ee:	bd70      	pop	{r4, r5, r6, pc}

080116f0 <_strtod_l>:
 80116f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116f4:	ed2d 8b02 	vpush	{d8}
 80116f8:	b09d      	sub	sp, #116	; 0x74
 80116fa:	461f      	mov	r7, r3
 80116fc:	2300      	movs	r3, #0
 80116fe:	9318      	str	r3, [sp, #96]	; 0x60
 8011700:	4ba2      	ldr	r3, [pc, #648]	; (801198c <_strtod_l+0x29c>)
 8011702:	9213      	str	r2, [sp, #76]	; 0x4c
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	9305      	str	r3, [sp, #20]
 8011708:	4604      	mov	r4, r0
 801170a:	4618      	mov	r0, r3
 801170c:	4688      	mov	r8, r1
 801170e:	f7f4 fdd0 	bl	80062b2 <strlen>
 8011712:	f04f 0a00 	mov.w	sl, #0
 8011716:	4605      	mov	r5, r0
 8011718:	f04f 0b00 	mov.w	fp, #0
 801171c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8011720:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011722:	781a      	ldrb	r2, [r3, #0]
 8011724:	2a2b      	cmp	r2, #43	; 0x2b
 8011726:	d04e      	beq.n	80117c6 <_strtod_l+0xd6>
 8011728:	d83b      	bhi.n	80117a2 <_strtod_l+0xb2>
 801172a:	2a0d      	cmp	r2, #13
 801172c:	d834      	bhi.n	8011798 <_strtod_l+0xa8>
 801172e:	2a08      	cmp	r2, #8
 8011730:	d834      	bhi.n	801179c <_strtod_l+0xac>
 8011732:	2a00      	cmp	r2, #0
 8011734:	d03e      	beq.n	80117b4 <_strtod_l+0xc4>
 8011736:	2300      	movs	r3, #0
 8011738:	930a      	str	r3, [sp, #40]	; 0x28
 801173a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801173c:	7833      	ldrb	r3, [r6, #0]
 801173e:	2b30      	cmp	r3, #48	; 0x30
 8011740:	f040 80b0 	bne.w	80118a4 <_strtod_l+0x1b4>
 8011744:	7873      	ldrb	r3, [r6, #1]
 8011746:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801174a:	2b58      	cmp	r3, #88	; 0x58
 801174c:	d168      	bne.n	8011820 <_strtod_l+0x130>
 801174e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011750:	9301      	str	r3, [sp, #4]
 8011752:	ab18      	add	r3, sp, #96	; 0x60
 8011754:	9702      	str	r7, [sp, #8]
 8011756:	9300      	str	r3, [sp, #0]
 8011758:	4a8d      	ldr	r2, [pc, #564]	; (8011990 <_strtod_l+0x2a0>)
 801175a:	ab19      	add	r3, sp, #100	; 0x64
 801175c:	a917      	add	r1, sp, #92	; 0x5c
 801175e:	4620      	mov	r0, r4
 8011760:	f001 ffae 	bl	80136c0 <__gethex>
 8011764:	f010 0707 	ands.w	r7, r0, #7
 8011768:	4605      	mov	r5, r0
 801176a:	d005      	beq.n	8011778 <_strtod_l+0x88>
 801176c:	2f06      	cmp	r7, #6
 801176e:	d12c      	bne.n	80117ca <_strtod_l+0xda>
 8011770:	3601      	adds	r6, #1
 8011772:	2300      	movs	r3, #0
 8011774:	9617      	str	r6, [sp, #92]	; 0x5c
 8011776:	930a      	str	r3, [sp, #40]	; 0x28
 8011778:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801177a:	2b00      	cmp	r3, #0
 801177c:	f040 8590 	bne.w	80122a0 <_strtod_l+0xbb0>
 8011780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011782:	b1eb      	cbz	r3, 80117c0 <_strtod_l+0xd0>
 8011784:	4652      	mov	r2, sl
 8011786:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801178a:	ec43 2b10 	vmov	d0, r2, r3
 801178e:	b01d      	add	sp, #116	; 0x74
 8011790:	ecbd 8b02 	vpop	{d8}
 8011794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011798:	2a20      	cmp	r2, #32
 801179a:	d1cc      	bne.n	8011736 <_strtod_l+0x46>
 801179c:	3301      	adds	r3, #1
 801179e:	9317      	str	r3, [sp, #92]	; 0x5c
 80117a0:	e7be      	b.n	8011720 <_strtod_l+0x30>
 80117a2:	2a2d      	cmp	r2, #45	; 0x2d
 80117a4:	d1c7      	bne.n	8011736 <_strtod_l+0x46>
 80117a6:	2201      	movs	r2, #1
 80117a8:	920a      	str	r2, [sp, #40]	; 0x28
 80117aa:	1c5a      	adds	r2, r3, #1
 80117ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80117ae:	785b      	ldrb	r3, [r3, #1]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d1c2      	bne.n	801173a <_strtod_l+0x4a>
 80117b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80117b6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	f040 856e 	bne.w	801229c <_strtod_l+0xbac>
 80117c0:	4652      	mov	r2, sl
 80117c2:	465b      	mov	r3, fp
 80117c4:	e7e1      	b.n	801178a <_strtod_l+0x9a>
 80117c6:	2200      	movs	r2, #0
 80117c8:	e7ee      	b.n	80117a8 <_strtod_l+0xb8>
 80117ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80117cc:	b13a      	cbz	r2, 80117de <_strtod_l+0xee>
 80117ce:	2135      	movs	r1, #53	; 0x35
 80117d0:	a81a      	add	r0, sp, #104	; 0x68
 80117d2:	f002 ff80 	bl	80146d6 <__copybits>
 80117d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80117d8:	4620      	mov	r0, r4
 80117da:	f002 fb3f 	bl	8013e5c <_Bfree>
 80117de:	3f01      	subs	r7, #1
 80117e0:	2f04      	cmp	r7, #4
 80117e2:	d806      	bhi.n	80117f2 <_strtod_l+0x102>
 80117e4:	e8df f007 	tbb	[pc, r7]
 80117e8:	1714030a 	.word	0x1714030a
 80117ec:	0a          	.byte	0x0a
 80117ed:	00          	.byte	0x00
 80117ee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80117f2:	0728      	lsls	r0, r5, #28
 80117f4:	d5c0      	bpl.n	8011778 <_strtod_l+0x88>
 80117f6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80117fa:	e7bd      	b.n	8011778 <_strtod_l+0x88>
 80117fc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8011800:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011802:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011806:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801180a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801180e:	e7f0      	b.n	80117f2 <_strtod_l+0x102>
 8011810:	f8df b180 	ldr.w	fp, [pc, #384]	; 8011994 <_strtod_l+0x2a4>
 8011814:	e7ed      	b.n	80117f2 <_strtod_l+0x102>
 8011816:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801181a:	f04f 3aff 	mov.w	sl, #4294967295
 801181e:	e7e8      	b.n	80117f2 <_strtod_l+0x102>
 8011820:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011822:	1c5a      	adds	r2, r3, #1
 8011824:	9217      	str	r2, [sp, #92]	; 0x5c
 8011826:	785b      	ldrb	r3, [r3, #1]
 8011828:	2b30      	cmp	r3, #48	; 0x30
 801182a:	d0f9      	beq.n	8011820 <_strtod_l+0x130>
 801182c:	2b00      	cmp	r3, #0
 801182e:	d0a3      	beq.n	8011778 <_strtod_l+0x88>
 8011830:	2301      	movs	r3, #1
 8011832:	f04f 0900 	mov.w	r9, #0
 8011836:	9304      	str	r3, [sp, #16]
 8011838:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801183a:	9308      	str	r3, [sp, #32]
 801183c:	f8cd 901c 	str.w	r9, [sp, #28]
 8011840:	464f      	mov	r7, r9
 8011842:	220a      	movs	r2, #10
 8011844:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8011846:	7806      	ldrb	r6, [r0, #0]
 8011848:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801184c:	b2d9      	uxtb	r1, r3
 801184e:	2909      	cmp	r1, #9
 8011850:	d92a      	bls.n	80118a8 <_strtod_l+0x1b8>
 8011852:	9905      	ldr	r1, [sp, #20]
 8011854:	462a      	mov	r2, r5
 8011856:	f003 fb8a 	bl	8014f6e <strncmp>
 801185a:	b398      	cbz	r0, 80118c4 <_strtod_l+0x1d4>
 801185c:	2000      	movs	r0, #0
 801185e:	4632      	mov	r2, r6
 8011860:	463d      	mov	r5, r7
 8011862:	9005      	str	r0, [sp, #20]
 8011864:	4603      	mov	r3, r0
 8011866:	2a65      	cmp	r2, #101	; 0x65
 8011868:	d001      	beq.n	801186e <_strtod_l+0x17e>
 801186a:	2a45      	cmp	r2, #69	; 0x45
 801186c:	d118      	bne.n	80118a0 <_strtod_l+0x1b0>
 801186e:	b91d      	cbnz	r5, 8011878 <_strtod_l+0x188>
 8011870:	9a04      	ldr	r2, [sp, #16]
 8011872:	4302      	orrs	r2, r0
 8011874:	d09e      	beq.n	80117b4 <_strtod_l+0xc4>
 8011876:	2500      	movs	r5, #0
 8011878:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801187c:	f108 0201 	add.w	r2, r8, #1
 8011880:	9217      	str	r2, [sp, #92]	; 0x5c
 8011882:	f898 2001 	ldrb.w	r2, [r8, #1]
 8011886:	2a2b      	cmp	r2, #43	; 0x2b
 8011888:	d075      	beq.n	8011976 <_strtod_l+0x286>
 801188a:	2a2d      	cmp	r2, #45	; 0x2d
 801188c:	d07b      	beq.n	8011986 <_strtod_l+0x296>
 801188e:	f04f 0c00 	mov.w	ip, #0
 8011892:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8011896:	2909      	cmp	r1, #9
 8011898:	f240 8082 	bls.w	80119a0 <_strtod_l+0x2b0>
 801189c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80118a0:	2600      	movs	r6, #0
 80118a2:	e09d      	b.n	80119e0 <_strtod_l+0x2f0>
 80118a4:	2300      	movs	r3, #0
 80118a6:	e7c4      	b.n	8011832 <_strtod_l+0x142>
 80118a8:	2f08      	cmp	r7, #8
 80118aa:	bfd8      	it	le
 80118ac:	9907      	ldrle	r1, [sp, #28]
 80118ae:	f100 0001 	add.w	r0, r0, #1
 80118b2:	bfda      	itte	le
 80118b4:	fb02 3301 	mlale	r3, r2, r1, r3
 80118b8:	9307      	strle	r3, [sp, #28]
 80118ba:	fb02 3909 	mlagt	r9, r2, r9, r3
 80118be:	3701      	adds	r7, #1
 80118c0:	9017      	str	r0, [sp, #92]	; 0x5c
 80118c2:	e7bf      	b.n	8011844 <_strtod_l+0x154>
 80118c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80118c6:	195a      	adds	r2, r3, r5
 80118c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80118ca:	5d5a      	ldrb	r2, [r3, r5]
 80118cc:	2f00      	cmp	r7, #0
 80118ce:	d037      	beq.n	8011940 <_strtod_l+0x250>
 80118d0:	9005      	str	r0, [sp, #20]
 80118d2:	463d      	mov	r5, r7
 80118d4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80118d8:	2b09      	cmp	r3, #9
 80118da:	d912      	bls.n	8011902 <_strtod_l+0x212>
 80118dc:	2301      	movs	r3, #1
 80118de:	e7c2      	b.n	8011866 <_strtod_l+0x176>
 80118e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80118e2:	1c5a      	adds	r2, r3, #1
 80118e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80118e6:	785a      	ldrb	r2, [r3, #1]
 80118e8:	3001      	adds	r0, #1
 80118ea:	2a30      	cmp	r2, #48	; 0x30
 80118ec:	d0f8      	beq.n	80118e0 <_strtod_l+0x1f0>
 80118ee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80118f2:	2b08      	cmp	r3, #8
 80118f4:	f200 84d9 	bhi.w	80122aa <_strtod_l+0xbba>
 80118f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80118fa:	9005      	str	r0, [sp, #20]
 80118fc:	2000      	movs	r0, #0
 80118fe:	9308      	str	r3, [sp, #32]
 8011900:	4605      	mov	r5, r0
 8011902:	3a30      	subs	r2, #48	; 0x30
 8011904:	f100 0301 	add.w	r3, r0, #1
 8011908:	d014      	beq.n	8011934 <_strtod_l+0x244>
 801190a:	9905      	ldr	r1, [sp, #20]
 801190c:	4419      	add	r1, r3
 801190e:	9105      	str	r1, [sp, #20]
 8011910:	462b      	mov	r3, r5
 8011912:	eb00 0e05 	add.w	lr, r0, r5
 8011916:	210a      	movs	r1, #10
 8011918:	4573      	cmp	r3, lr
 801191a:	d113      	bne.n	8011944 <_strtod_l+0x254>
 801191c:	182b      	adds	r3, r5, r0
 801191e:	2b08      	cmp	r3, #8
 8011920:	f105 0501 	add.w	r5, r5, #1
 8011924:	4405      	add	r5, r0
 8011926:	dc1c      	bgt.n	8011962 <_strtod_l+0x272>
 8011928:	9907      	ldr	r1, [sp, #28]
 801192a:	230a      	movs	r3, #10
 801192c:	fb03 2301 	mla	r3, r3, r1, r2
 8011930:	9307      	str	r3, [sp, #28]
 8011932:	2300      	movs	r3, #0
 8011934:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011936:	1c51      	adds	r1, r2, #1
 8011938:	9117      	str	r1, [sp, #92]	; 0x5c
 801193a:	7852      	ldrb	r2, [r2, #1]
 801193c:	4618      	mov	r0, r3
 801193e:	e7c9      	b.n	80118d4 <_strtod_l+0x1e4>
 8011940:	4638      	mov	r0, r7
 8011942:	e7d2      	b.n	80118ea <_strtod_l+0x1fa>
 8011944:	2b08      	cmp	r3, #8
 8011946:	dc04      	bgt.n	8011952 <_strtod_l+0x262>
 8011948:	9e07      	ldr	r6, [sp, #28]
 801194a:	434e      	muls	r6, r1
 801194c:	9607      	str	r6, [sp, #28]
 801194e:	3301      	adds	r3, #1
 8011950:	e7e2      	b.n	8011918 <_strtod_l+0x228>
 8011952:	f103 0c01 	add.w	ip, r3, #1
 8011956:	f1bc 0f10 	cmp.w	ip, #16
 801195a:	bfd8      	it	le
 801195c:	fb01 f909 	mulle.w	r9, r1, r9
 8011960:	e7f5      	b.n	801194e <_strtod_l+0x25e>
 8011962:	2d10      	cmp	r5, #16
 8011964:	bfdc      	itt	le
 8011966:	230a      	movle	r3, #10
 8011968:	fb03 2909 	mlale	r9, r3, r9, r2
 801196c:	e7e1      	b.n	8011932 <_strtod_l+0x242>
 801196e:	2300      	movs	r3, #0
 8011970:	9305      	str	r3, [sp, #20]
 8011972:	2301      	movs	r3, #1
 8011974:	e77c      	b.n	8011870 <_strtod_l+0x180>
 8011976:	f04f 0c00 	mov.w	ip, #0
 801197a:	f108 0202 	add.w	r2, r8, #2
 801197e:	9217      	str	r2, [sp, #92]	; 0x5c
 8011980:	f898 2002 	ldrb.w	r2, [r8, #2]
 8011984:	e785      	b.n	8011892 <_strtod_l+0x1a2>
 8011986:	f04f 0c01 	mov.w	ip, #1
 801198a:	e7f6      	b.n	801197a <_strtod_l+0x28a>
 801198c:	0814fa9c 	.word	0x0814fa9c
 8011990:	0814f7ec 	.word	0x0814f7ec
 8011994:	7ff00000 	.word	0x7ff00000
 8011998:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801199a:	1c51      	adds	r1, r2, #1
 801199c:	9117      	str	r1, [sp, #92]	; 0x5c
 801199e:	7852      	ldrb	r2, [r2, #1]
 80119a0:	2a30      	cmp	r2, #48	; 0x30
 80119a2:	d0f9      	beq.n	8011998 <_strtod_l+0x2a8>
 80119a4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80119a8:	2908      	cmp	r1, #8
 80119aa:	f63f af79 	bhi.w	80118a0 <_strtod_l+0x1b0>
 80119ae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80119b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80119b4:	9206      	str	r2, [sp, #24]
 80119b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80119b8:	1c51      	adds	r1, r2, #1
 80119ba:	9117      	str	r1, [sp, #92]	; 0x5c
 80119bc:	7852      	ldrb	r2, [r2, #1]
 80119be:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80119c2:	2e09      	cmp	r6, #9
 80119c4:	d937      	bls.n	8011a36 <_strtod_l+0x346>
 80119c6:	9e06      	ldr	r6, [sp, #24]
 80119c8:	1b89      	subs	r1, r1, r6
 80119ca:	2908      	cmp	r1, #8
 80119cc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80119d0:	dc02      	bgt.n	80119d8 <_strtod_l+0x2e8>
 80119d2:	4576      	cmp	r6, lr
 80119d4:	bfa8      	it	ge
 80119d6:	4676      	movge	r6, lr
 80119d8:	f1bc 0f00 	cmp.w	ip, #0
 80119dc:	d000      	beq.n	80119e0 <_strtod_l+0x2f0>
 80119de:	4276      	negs	r6, r6
 80119e0:	2d00      	cmp	r5, #0
 80119e2:	d14d      	bne.n	8011a80 <_strtod_l+0x390>
 80119e4:	9904      	ldr	r1, [sp, #16]
 80119e6:	4301      	orrs	r1, r0
 80119e8:	f47f aec6 	bne.w	8011778 <_strtod_l+0x88>
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	f47f aee1 	bne.w	80117b4 <_strtod_l+0xc4>
 80119f2:	2a69      	cmp	r2, #105	; 0x69
 80119f4:	d027      	beq.n	8011a46 <_strtod_l+0x356>
 80119f6:	dc24      	bgt.n	8011a42 <_strtod_l+0x352>
 80119f8:	2a49      	cmp	r2, #73	; 0x49
 80119fa:	d024      	beq.n	8011a46 <_strtod_l+0x356>
 80119fc:	2a4e      	cmp	r2, #78	; 0x4e
 80119fe:	f47f aed9 	bne.w	80117b4 <_strtod_l+0xc4>
 8011a02:	499f      	ldr	r1, [pc, #636]	; (8011c80 <_strtod_l+0x590>)
 8011a04:	a817      	add	r0, sp, #92	; 0x5c
 8011a06:	f002 f8b3 	bl	8013b70 <__match>
 8011a0a:	2800      	cmp	r0, #0
 8011a0c:	f43f aed2 	beq.w	80117b4 <_strtod_l+0xc4>
 8011a10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011a12:	781b      	ldrb	r3, [r3, #0]
 8011a14:	2b28      	cmp	r3, #40	; 0x28
 8011a16:	d12d      	bne.n	8011a74 <_strtod_l+0x384>
 8011a18:	499a      	ldr	r1, [pc, #616]	; (8011c84 <_strtod_l+0x594>)
 8011a1a:	aa1a      	add	r2, sp, #104	; 0x68
 8011a1c:	a817      	add	r0, sp, #92	; 0x5c
 8011a1e:	f002 f8bb 	bl	8013b98 <__hexnan>
 8011a22:	2805      	cmp	r0, #5
 8011a24:	d126      	bne.n	8011a74 <_strtod_l+0x384>
 8011a26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011a28:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8011a2c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011a30:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011a34:	e6a0      	b.n	8011778 <_strtod_l+0x88>
 8011a36:	210a      	movs	r1, #10
 8011a38:	fb01 2e0e 	mla	lr, r1, lr, r2
 8011a3c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011a40:	e7b9      	b.n	80119b6 <_strtod_l+0x2c6>
 8011a42:	2a6e      	cmp	r2, #110	; 0x6e
 8011a44:	e7db      	b.n	80119fe <_strtod_l+0x30e>
 8011a46:	4990      	ldr	r1, [pc, #576]	; (8011c88 <_strtod_l+0x598>)
 8011a48:	a817      	add	r0, sp, #92	; 0x5c
 8011a4a:	f002 f891 	bl	8013b70 <__match>
 8011a4e:	2800      	cmp	r0, #0
 8011a50:	f43f aeb0 	beq.w	80117b4 <_strtod_l+0xc4>
 8011a54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011a56:	498d      	ldr	r1, [pc, #564]	; (8011c8c <_strtod_l+0x59c>)
 8011a58:	3b01      	subs	r3, #1
 8011a5a:	a817      	add	r0, sp, #92	; 0x5c
 8011a5c:	9317      	str	r3, [sp, #92]	; 0x5c
 8011a5e:	f002 f887 	bl	8013b70 <__match>
 8011a62:	b910      	cbnz	r0, 8011a6a <_strtod_l+0x37a>
 8011a64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011a66:	3301      	adds	r3, #1
 8011a68:	9317      	str	r3, [sp, #92]	; 0x5c
 8011a6a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8011c9c <_strtod_l+0x5ac>
 8011a6e:	f04f 0a00 	mov.w	sl, #0
 8011a72:	e681      	b.n	8011778 <_strtod_l+0x88>
 8011a74:	4886      	ldr	r0, [pc, #536]	; (8011c90 <_strtod_l+0x5a0>)
 8011a76:	f003 fa1f 	bl	8014eb8 <nan>
 8011a7a:	ec5b ab10 	vmov	sl, fp, d0
 8011a7e:	e67b      	b.n	8011778 <_strtod_l+0x88>
 8011a80:	9b05      	ldr	r3, [sp, #20]
 8011a82:	9807      	ldr	r0, [sp, #28]
 8011a84:	1af3      	subs	r3, r6, r3
 8011a86:	2f00      	cmp	r7, #0
 8011a88:	bf08      	it	eq
 8011a8a:	462f      	moveq	r7, r5
 8011a8c:	2d10      	cmp	r5, #16
 8011a8e:	9306      	str	r3, [sp, #24]
 8011a90:	46a8      	mov	r8, r5
 8011a92:	bfa8      	it	ge
 8011a94:	f04f 0810 	movge.w	r8, #16
 8011a98:	f7f4 fdac 	bl	80065f4 <__aeabi_ui2d>
 8011a9c:	2d09      	cmp	r5, #9
 8011a9e:	4682      	mov	sl, r0
 8011aa0:	468b      	mov	fp, r1
 8011aa2:	dd13      	ble.n	8011acc <_strtod_l+0x3dc>
 8011aa4:	4b7b      	ldr	r3, [pc, #492]	; (8011c94 <_strtod_l+0x5a4>)
 8011aa6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011aaa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011aae:	f7f4 fe1b 	bl	80066e8 <__aeabi_dmul>
 8011ab2:	4682      	mov	sl, r0
 8011ab4:	4648      	mov	r0, r9
 8011ab6:	468b      	mov	fp, r1
 8011ab8:	f7f4 fd9c 	bl	80065f4 <__aeabi_ui2d>
 8011abc:	4602      	mov	r2, r0
 8011abe:	460b      	mov	r3, r1
 8011ac0:	4650      	mov	r0, sl
 8011ac2:	4659      	mov	r1, fp
 8011ac4:	f7f4 fc5a 	bl	800637c <__adddf3>
 8011ac8:	4682      	mov	sl, r0
 8011aca:	468b      	mov	fp, r1
 8011acc:	2d0f      	cmp	r5, #15
 8011ace:	dc38      	bgt.n	8011b42 <_strtod_l+0x452>
 8011ad0:	9b06      	ldr	r3, [sp, #24]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	f43f ae50 	beq.w	8011778 <_strtod_l+0x88>
 8011ad8:	dd24      	ble.n	8011b24 <_strtod_l+0x434>
 8011ada:	2b16      	cmp	r3, #22
 8011adc:	dc0b      	bgt.n	8011af6 <_strtod_l+0x406>
 8011ade:	496d      	ldr	r1, [pc, #436]	; (8011c94 <_strtod_l+0x5a4>)
 8011ae0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011ae4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ae8:	4652      	mov	r2, sl
 8011aea:	465b      	mov	r3, fp
 8011aec:	f7f4 fdfc 	bl	80066e8 <__aeabi_dmul>
 8011af0:	4682      	mov	sl, r0
 8011af2:	468b      	mov	fp, r1
 8011af4:	e640      	b.n	8011778 <_strtod_l+0x88>
 8011af6:	9a06      	ldr	r2, [sp, #24]
 8011af8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8011afc:	4293      	cmp	r3, r2
 8011afe:	db20      	blt.n	8011b42 <_strtod_l+0x452>
 8011b00:	4c64      	ldr	r4, [pc, #400]	; (8011c94 <_strtod_l+0x5a4>)
 8011b02:	f1c5 050f 	rsb	r5, r5, #15
 8011b06:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011b0a:	4652      	mov	r2, sl
 8011b0c:	465b      	mov	r3, fp
 8011b0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b12:	f7f4 fde9 	bl	80066e8 <__aeabi_dmul>
 8011b16:	9b06      	ldr	r3, [sp, #24]
 8011b18:	1b5d      	subs	r5, r3, r5
 8011b1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011b1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011b22:	e7e3      	b.n	8011aec <_strtod_l+0x3fc>
 8011b24:	9b06      	ldr	r3, [sp, #24]
 8011b26:	3316      	adds	r3, #22
 8011b28:	db0b      	blt.n	8011b42 <_strtod_l+0x452>
 8011b2a:	9b05      	ldr	r3, [sp, #20]
 8011b2c:	1b9e      	subs	r6, r3, r6
 8011b2e:	4b59      	ldr	r3, [pc, #356]	; (8011c94 <_strtod_l+0x5a4>)
 8011b30:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8011b34:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011b38:	4650      	mov	r0, sl
 8011b3a:	4659      	mov	r1, fp
 8011b3c:	f7f4 fefe 	bl	800693c <__aeabi_ddiv>
 8011b40:	e7d6      	b.n	8011af0 <_strtod_l+0x400>
 8011b42:	9b06      	ldr	r3, [sp, #24]
 8011b44:	eba5 0808 	sub.w	r8, r5, r8
 8011b48:	4498      	add	r8, r3
 8011b4a:	f1b8 0f00 	cmp.w	r8, #0
 8011b4e:	dd74      	ble.n	8011c3a <_strtod_l+0x54a>
 8011b50:	f018 030f 	ands.w	r3, r8, #15
 8011b54:	d00a      	beq.n	8011b6c <_strtod_l+0x47c>
 8011b56:	494f      	ldr	r1, [pc, #316]	; (8011c94 <_strtod_l+0x5a4>)
 8011b58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011b5c:	4652      	mov	r2, sl
 8011b5e:	465b      	mov	r3, fp
 8011b60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b64:	f7f4 fdc0 	bl	80066e8 <__aeabi_dmul>
 8011b68:	4682      	mov	sl, r0
 8011b6a:	468b      	mov	fp, r1
 8011b6c:	f038 080f 	bics.w	r8, r8, #15
 8011b70:	d04f      	beq.n	8011c12 <_strtod_l+0x522>
 8011b72:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011b76:	dd22      	ble.n	8011bbe <_strtod_l+0x4ce>
 8011b78:	2500      	movs	r5, #0
 8011b7a:	462e      	mov	r6, r5
 8011b7c:	9507      	str	r5, [sp, #28]
 8011b7e:	9505      	str	r5, [sp, #20]
 8011b80:	2322      	movs	r3, #34	; 0x22
 8011b82:	f8df b118 	ldr.w	fp, [pc, #280]	; 8011c9c <_strtod_l+0x5ac>
 8011b86:	6023      	str	r3, [r4, #0]
 8011b88:	f04f 0a00 	mov.w	sl, #0
 8011b8c:	9b07      	ldr	r3, [sp, #28]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	f43f adf2 	beq.w	8011778 <_strtod_l+0x88>
 8011b94:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011b96:	4620      	mov	r0, r4
 8011b98:	f002 f960 	bl	8013e5c <_Bfree>
 8011b9c:	9905      	ldr	r1, [sp, #20]
 8011b9e:	4620      	mov	r0, r4
 8011ba0:	f002 f95c 	bl	8013e5c <_Bfree>
 8011ba4:	4631      	mov	r1, r6
 8011ba6:	4620      	mov	r0, r4
 8011ba8:	f002 f958 	bl	8013e5c <_Bfree>
 8011bac:	9907      	ldr	r1, [sp, #28]
 8011bae:	4620      	mov	r0, r4
 8011bb0:	f002 f954 	bl	8013e5c <_Bfree>
 8011bb4:	4629      	mov	r1, r5
 8011bb6:	4620      	mov	r0, r4
 8011bb8:	f002 f950 	bl	8013e5c <_Bfree>
 8011bbc:	e5dc      	b.n	8011778 <_strtod_l+0x88>
 8011bbe:	4b36      	ldr	r3, [pc, #216]	; (8011c98 <_strtod_l+0x5a8>)
 8011bc0:	9304      	str	r3, [sp, #16]
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011bc8:	4650      	mov	r0, sl
 8011bca:	4659      	mov	r1, fp
 8011bcc:	4699      	mov	r9, r3
 8011bce:	f1b8 0f01 	cmp.w	r8, #1
 8011bd2:	dc21      	bgt.n	8011c18 <_strtod_l+0x528>
 8011bd4:	b10b      	cbz	r3, 8011bda <_strtod_l+0x4ea>
 8011bd6:	4682      	mov	sl, r0
 8011bd8:	468b      	mov	fp, r1
 8011bda:	4b2f      	ldr	r3, [pc, #188]	; (8011c98 <_strtod_l+0x5a8>)
 8011bdc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8011be0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8011be4:	4652      	mov	r2, sl
 8011be6:	465b      	mov	r3, fp
 8011be8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8011bec:	f7f4 fd7c 	bl	80066e8 <__aeabi_dmul>
 8011bf0:	4b2a      	ldr	r3, [pc, #168]	; (8011c9c <_strtod_l+0x5ac>)
 8011bf2:	460a      	mov	r2, r1
 8011bf4:	400b      	ands	r3, r1
 8011bf6:	492a      	ldr	r1, [pc, #168]	; (8011ca0 <_strtod_l+0x5b0>)
 8011bf8:	428b      	cmp	r3, r1
 8011bfa:	4682      	mov	sl, r0
 8011bfc:	d8bc      	bhi.n	8011b78 <_strtod_l+0x488>
 8011bfe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011c02:	428b      	cmp	r3, r1
 8011c04:	bf86      	itte	hi
 8011c06:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8011ca4 <_strtod_l+0x5b4>
 8011c0a:	f04f 3aff 	movhi.w	sl, #4294967295
 8011c0e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8011c12:	2300      	movs	r3, #0
 8011c14:	9304      	str	r3, [sp, #16]
 8011c16:	e084      	b.n	8011d22 <_strtod_l+0x632>
 8011c18:	f018 0f01 	tst.w	r8, #1
 8011c1c:	d005      	beq.n	8011c2a <_strtod_l+0x53a>
 8011c1e:	9b04      	ldr	r3, [sp, #16]
 8011c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c24:	f7f4 fd60 	bl	80066e8 <__aeabi_dmul>
 8011c28:	2301      	movs	r3, #1
 8011c2a:	9a04      	ldr	r2, [sp, #16]
 8011c2c:	3208      	adds	r2, #8
 8011c2e:	f109 0901 	add.w	r9, r9, #1
 8011c32:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011c36:	9204      	str	r2, [sp, #16]
 8011c38:	e7c9      	b.n	8011bce <_strtod_l+0x4de>
 8011c3a:	d0ea      	beq.n	8011c12 <_strtod_l+0x522>
 8011c3c:	f1c8 0800 	rsb	r8, r8, #0
 8011c40:	f018 020f 	ands.w	r2, r8, #15
 8011c44:	d00a      	beq.n	8011c5c <_strtod_l+0x56c>
 8011c46:	4b13      	ldr	r3, [pc, #76]	; (8011c94 <_strtod_l+0x5a4>)
 8011c48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011c4c:	4650      	mov	r0, sl
 8011c4e:	4659      	mov	r1, fp
 8011c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c54:	f7f4 fe72 	bl	800693c <__aeabi_ddiv>
 8011c58:	4682      	mov	sl, r0
 8011c5a:	468b      	mov	fp, r1
 8011c5c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011c60:	d0d7      	beq.n	8011c12 <_strtod_l+0x522>
 8011c62:	f1b8 0f1f 	cmp.w	r8, #31
 8011c66:	dd1f      	ble.n	8011ca8 <_strtod_l+0x5b8>
 8011c68:	2500      	movs	r5, #0
 8011c6a:	462e      	mov	r6, r5
 8011c6c:	9507      	str	r5, [sp, #28]
 8011c6e:	9505      	str	r5, [sp, #20]
 8011c70:	2322      	movs	r3, #34	; 0x22
 8011c72:	f04f 0a00 	mov.w	sl, #0
 8011c76:	f04f 0b00 	mov.w	fp, #0
 8011c7a:	6023      	str	r3, [r4, #0]
 8011c7c:	e786      	b.n	8011b8c <_strtod_l+0x49c>
 8011c7e:	bf00      	nop
 8011c80:	0814f7bd 	.word	0x0814f7bd
 8011c84:	0814f800 	.word	0x0814f800
 8011c88:	0814f7b5 	.word	0x0814f7b5
 8011c8c:	0814f944 	.word	0x0814f944
 8011c90:	0814fc58 	.word	0x0814fc58
 8011c94:	0814fb38 	.word	0x0814fb38
 8011c98:	0814fb10 	.word	0x0814fb10
 8011c9c:	7ff00000 	.word	0x7ff00000
 8011ca0:	7ca00000 	.word	0x7ca00000
 8011ca4:	7fefffff 	.word	0x7fefffff
 8011ca8:	f018 0310 	ands.w	r3, r8, #16
 8011cac:	bf18      	it	ne
 8011cae:	236a      	movne	r3, #106	; 0x6a
 8011cb0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8012060 <_strtod_l+0x970>
 8011cb4:	9304      	str	r3, [sp, #16]
 8011cb6:	4650      	mov	r0, sl
 8011cb8:	4659      	mov	r1, fp
 8011cba:	2300      	movs	r3, #0
 8011cbc:	f018 0f01 	tst.w	r8, #1
 8011cc0:	d004      	beq.n	8011ccc <_strtod_l+0x5dc>
 8011cc2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011cc6:	f7f4 fd0f 	bl	80066e8 <__aeabi_dmul>
 8011cca:	2301      	movs	r3, #1
 8011ccc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8011cd0:	f109 0908 	add.w	r9, r9, #8
 8011cd4:	d1f2      	bne.n	8011cbc <_strtod_l+0x5cc>
 8011cd6:	b10b      	cbz	r3, 8011cdc <_strtod_l+0x5ec>
 8011cd8:	4682      	mov	sl, r0
 8011cda:	468b      	mov	fp, r1
 8011cdc:	9b04      	ldr	r3, [sp, #16]
 8011cde:	b1c3      	cbz	r3, 8011d12 <_strtod_l+0x622>
 8011ce0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011ce4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	4659      	mov	r1, fp
 8011cec:	dd11      	ble.n	8011d12 <_strtod_l+0x622>
 8011cee:	2b1f      	cmp	r3, #31
 8011cf0:	f340 8124 	ble.w	8011f3c <_strtod_l+0x84c>
 8011cf4:	2b34      	cmp	r3, #52	; 0x34
 8011cf6:	bfde      	ittt	le
 8011cf8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8011cfc:	f04f 33ff 	movle.w	r3, #4294967295
 8011d00:	fa03 f202 	lslle.w	r2, r3, r2
 8011d04:	f04f 0a00 	mov.w	sl, #0
 8011d08:	bfcc      	ite	gt
 8011d0a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011d0e:	ea02 0b01 	andle.w	fp, r2, r1
 8011d12:	2200      	movs	r2, #0
 8011d14:	2300      	movs	r3, #0
 8011d16:	4650      	mov	r0, sl
 8011d18:	4659      	mov	r1, fp
 8011d1a:	f7f4 ff4d 	bl	8006bb8 <__aeabi_dcmpeq>
 8011d1e:	2800      	cmp	r0, #0
 8011d20:	d1a2      	bne.n	8011c68 <_strtod_l+0x578>
 8011d22:	9b07      	ldr	r3, [sp, #28]
 8011d24:	9300      	str	r3, [sp, #0]
 8011d26:	9908      	ldr	r1, [sp, #32]
 8011d28:	462b      	mov	r3, r5
 8011d2a:	463a      	mov	r2, r7
 8011d2c:	4620      	mov	r0, r4
 8011d2e:	f002 f8fd 	bl	8013f2c <__s2b>
 8011d32:	9007      	str	r0, [sp, #28]
 8011d34:	2800      	cmp	r0, #0
 8011d36:	f43f af1f 	beq.w	8011b78 <_strtod_l+0x488>
 8011d3a:	9b05      	ldr	r3, [sp, #20]
 8011d3c:	1b9e      	subs	r6, r3, r6
 8011d3e:	9b06      	ldr	r3, [sp, #24]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	bfb4      	ite	lt
 8011d44:	4633      	movlt	r3, r6
 8011d46:	2300      	movge	r3, #0
 8011d48:	930c      	str	r3, [sp, #48]	; 0x30
 8011d4a:	9b06      	ldr	r3, [sp, #24]
 8011d4c:	2500      	movs	r5, #0
 8011d4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011d52:	9312      	str	r3, [sp, #72]	; 0x48
 8011d54:	462e      	mov	r6, r5
 8011d56:	9b07      	ldr	r3, [sp, #28]
 8011d58:	4620      	mov	r0, r4
 8011d5a:	6859      	ldr	r1, [r3, #4]
 8011d5c:	f002 f83e 	bl	8013ddc <_Balloc>
 8011d60:	9005      	str	r0, [sp, #20]
 8011d62:	2800      	cmp	r0, #0
 8011d64:	f43f af0c 	beq.w	8011b80 <_strtod_l+0x490>
 8011d68:	9b07      	ldr	r3, [sp, #28]
 8011d6a:	691a      	ldr	r2, [r3, #16]
 8011d6c:	3202      	adds	r2, #2
 8011d6e:	f103 010c 	add.w	r1, r3, #12
 8011d72:	0092      	lsls	r2, r2, #2
 8011d74:	300c      	adds	r0, #12
 8011d76:	f7fe fd5b 	bl	8010830 <memcpy>
 8011d7a:	ec4b ab10 	vmov	d0, sl, fp
 8011d7e:	aa1a      	add	r2, sp, #104	; 0x68
 8011d80:	a919      	add	r1, sp, #100	; 0x64
 8011d82:	4620      	mov	r0, r4
 8011d84:	f002 fc18 	bl	80145b8 <__d2b>
 8011d88:	ec4b ab18 	vmov	d8, sl, fp
 8011d8c:	9018      	str	r0, [sp, #96]	; 0x60
 8011d8e:	2800      	cmp	r0, #0
 8011d90:	f43f aef6 	beq.w	8011b80 <_strtod_l+0x490>
 8011d94:	2101      	movs	r1, #1
 8011d96:	4620      	mov	r0, r4
 8011d98:	f002 f962 	bl	8014060 <__i2b>
 8011d9c:	4606      	mov	r6, r0
 8011d9e:	2800      	cmp	r0, #0
 8011da0:	f43f aeee 	beq.w	8011b80 <_strtod_l+0x490>
 8011da4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011da6:	9904      	ldr	r1, [sp, #16]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	bfab      	itete	ge
 8011dac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8011dae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8011db0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8011db2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8011db6:	bfac      	ite	ge
 8011db8:	eb03 0902 	addge.w	r9, r3, r2
 8011dbc:	1ad7      	sublt	r7, r2, r3
 8011dbe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011dc0:	eba3 0801 	sub.w	r8, r3, r1
 8011dc4:	4490      	add	r8, r2
 8011dc6:	4ba1      	ldr	r3, [pc, #644]	; (801204c <_strtod_l+0x95c>)
 8011dc8:	f108 38ff 	add.w	r8, r8, #4294967295
 8011dcc:	4598      	cmp	r8, r3
 8011dce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011dd2:	f280 80c7 	bge.w	8011f64 <_strtod_l+0x874>
 8011dd6:	eba3 0308 	sub.w	r3, r3, r8
 8011dda:	2b1f      	cmp	r3, #31
 8011ddc:	eba2 0203 	sub.w	r2, r2, r3
 8011de0:	f04f 0101 	mov.w	r1, #1
 8011de4:	f300 80b1 	bgt.w	8011f4a <_strtod_l+0x85a>
 8011de8:	fa01 f303 	lsl.w	r3, r1, r3
 8011dec:	930d      	str	r3, [sp, #52]	; 0x34
 8011dee:	2300      	movs	r3, #0
 8011df0:	9308      	str	r3, [sp, #32]
 8011df2:	eb09 0802 	add.w	r8, r9, r2
 8011df6:	9b04      	ldr	r3, [sp, #16]
 8011df8:	45c1      	cmp	r9, r8
 8011dfa:	4417      	add	r7, r2
 8011dfc:	441f      	add	r7, r3
 8011dfe:	464b      	mov	r3, r9
 8011e00:	bfa8      	it	ge
 8011e02:	4643      	movge	r3, r8
 8011e04:	42bb      	cmp	r3, r7
 8011e06:	bfa8      	it	ge
 8011e08:	463b      	movge	r3, r7
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	bfc2      	ittt	gt
 8011e0e:	eba8 0803 	subgt.w	r8, r8, r3
 8011e12:	1aff      	subgt	r7, r7, r3
 8011e14:	eba9 0903 	subgt.w	r9, r9, r3
 8011e18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	dd17      	ble.n	8011e4e <_strtod_l+0x75e>
 8011e1e:	4631      	mov	r1, r6
 8011e20:	461a      	mov	r2, r3
 8011e22:	4620      	mov	r0, r4
 8011e24:	f002 f9dc 	bl	80141e0 <__pow5mult>
 8011e28:	4606      	mov	r6, r0
 8011e2a:	2800      	cmp	r0, #0
 8011e2c:	f43f aea8 	beq.w	8011b80 <_strtod_l+0x490>
 8011e30:	4601      	mov	r1, r0
 8011e32:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011e34:	4620      	mov	r0, r4
 8011e36:	f002 f929 	bl	801408c <__multiply>
 8011e3a:	900b      	str	r0, [sp, #44]	; 0x2c
 8011e3c:	2800      	cmp	r0, #0
 8011e3e:	f43f ae9f 	beq.w	8011b80 <_strtod_l+0x490>
 8011e42:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011e44:	4620      	mov	r0, r4
 8011e46:	f002 f809 	bl	8013e5c <_Bfree>
 8011e4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e4c:	9318      	str	r3, [sp, #96]	; 0x60
 8011e4e:	f1b8 0f00 	cmp.w	r8, #0
 8011e52:	f300 808c 	bgt.w	8011f6e <_strtod_l+0x87e>
 8011e56:	9b06      	ldr	r3, [sp, #24]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	dd08      	ble.n	8011e6e <_strtod_l+0x77e>
 8011e5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011e5e:	9905      	ldr	r1, [sp, #20]
 8011e60:	4620      	mov	r0, r4
 8011e62:	f002 f9bd 	bl	80141e0 <__pow5mult>
 8011e66:	9005      	str	r0, [sp, #20]
 8011e68:	2800      	cmp	r0, #0
 8011e6a:	f43f ae89 	beq.w	8011b80 <_strtod_l+0x490>
 8011e6e:	2f00      	cmp	r7, #0
 8011e70:	dd08      	ble.n	8011e84 <_strtod_l+0x794>
 8011e72:	9905      	ldr	r1, [sp, #20]
 8011e74:	463a      	mov	r2, r7
 8011e76:	4620      	mov	r0, r4
 8011e78:	f002 fa0c 	bl	8014294 <__lshift>
 8011e7c:	9005      	str	r0, [sp, #20]
 8011e7e:	2800      	cmp	r0, #0
 8011e80:	f43f ae7e 	beq.w	8011b80 <_strtod_l+0x490>
 8011e84:	f1b9 0f00 	cmp.w	r9, #0
 8011e88:	dd08      	ble.n	8011e9c <_strtod_l+0x7ac>
 8011e8a:	4631      	mov	r1, r6
 8011e8c:	464a      	mov	r2, r9
 8011e8e:	4620      	mov	r0, r4
 8011e90:	f002 fa00 	bl	8014294 <__lshift>
 8011e94:	4606      	mov	r6, r0
 8011e96:	2800      	cmp	r0, #0
 8011e98:	f43f ae72 	beq.w	8011b80 <_strtod_l+0x490>
 8011e9c:	9a05      	ldr	r2, [sp, #20]
 8011e9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011ea0:	4620      	mov	r0, r4
 8011ea2:	f002 fa83 	bl	80143ac <__mdiff>
 8011ea6:	4605      	mov	r5, r0
 8011ea8:	2800      	cmp	r0, #0
 8011eaa:	f43f ae69 	beq.w	8011b80 <_strtod_l+0x490>
 8011eae:	68c3      	ldr	r3, [r0, #12]
 8011eb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	60c3      	str	r3, [r0, #12]
 8011eb6:	4631      	mov	r1, r6
 8011eb8:	f002 fa5c 	bl	8014374 <__mcmp>
 8011ebc:	2800      	cmp	r0, #0
 8011ebe:	da60      	bge.n	8011f82 <_strtod_l+0x892>
 8011ec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ec2:	ea53 030a 	orrs.w	r3, r3, sl
 8011ec6:	f040 8082 	bne.w	8011fce <_strtod_l+0x8de>
 8011eca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d17d      	bne.n	8011fce <_strtod_l+0x8de>
 8011ed2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011ed6:	0d1b      	lsrs	r3, r3, #20
 8011ed8:	051b      	lsls	r3, r3, #20
 8011eda:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011ede:	d976      	bls.n	8011fce <_strtod_l+0x8de>
 8011ee0:	696b      	ldr	r3, [r5, #20]
 8011ee2:	b913      	cbnz	r3, 8011eea <_strtod_l+0x7fa>
 8011ee4:	692b      	ldr	r3, [r5, #16]
 8011ee6:	2b01      	cmp	r3, #1
 8011ee8:	dd71      	ble.n	8011fce <_strtod_l+0x8de>
 8011eea:	4629      	mov	r1, r5
 8011eec:	2201      	movs	r2, #1
 8011eee:	4620      	mov	r0, r4
 8011ef0:	f002 f9d0 	bl	8014294 <__lshift>
 8011ef4:	4631      	mov	r1, r6
 8011ef6:	4605      	mov	r5, r0
 8011ef8:	f002 fa3c 	bl	8014374 <__mcmp>
 8011efc:	2800      	cmp	r0, #0
 8011efe:	dd66      	ble.n	8011fce <_strtod_l+0x8de>
 8011f00:	9904      	ldr	r1, [sp, #16]
 8011f02:	4a53      	ldr	r2, [pc, #332]	; (8012050 <_strtod_l+0x960>)
 8011f04:	465b      	mov	r3, fp
 8011f06:	2900      	cmp	r1, #0
 8011f08:	f000 8081 	beq.w	801200e <_strtod_l+0x91e>
 8011f0c:	ea02 010b 	and.w	r1, r2, fp
 8011f10:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011f14:	dc7b      	bgt.n	801200e <_strtod_l+0x91e>
 8011f16:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011f1a:	f77f aea9 	ble.w	8011c70 <_strtod_l+0x580>
 8011f1e:	4b4d      	ldr	r3, [pc, #308]	; (8012054 <_strtod_l+0x964>)
 8011f20:	4650      	mov	r0, sl
 8011f22:	4659      	mov	r1, fp
 8011f24:	2200      	movs	r2, #0
 8011f26:	f7f4 fbdf 	bl	80066e8 <__aeabi_dmul>
 8011f2a:	460b      	mov	r3, r1
 8011f2c:	4303      	orrs	r3, r0
 8011f2e:	bf08      	it	eq
 8011f30:	2322      	moveq	r3, #34	; 0x22
 8011f32:	4682      	mov	sl, r0
 8011f34:	468b      	mov	fp, r1
 8011f36:	bf08      	it	eq
 8011f38:	6023      	streq	r3, [r4, #0]
 8011f3a:	e62b      	b.n	8011b94 <_strtod_l+0x4a4>
 8011f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8011f40:	fa02 f303 	lsl.w	r3, r2, r3
 8011f44:	ea03 0a0a 	and.w	sl, r3, sl
 8011f48:	e6e3      	b.n	8011d12 <_strtod_l+0x622>
 8011f4a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8011f4e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8011f52:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8011f56:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8011f5a:	fa01 f308 	lsl.w	r3, r1, r8
 8011f5e:	9308      	str	r3, [sp, #32]
 8011f60:	910d      	str	r1, [sp, #52]	; 0x34
 8011f62:	e746      	b.n	8011df2 <_strtod_l+0x702>
 8011f64:	2300      	movs	r3, #0
 8011f66:	9308      	str	r3, [sp, #32]
 8011f68:	2301      	movs	r3, #1
 8011f6a:	930d      	str	r3, [sp, #52]	; 0x34
 8011f6c:	e741      	b.n	8011df2 <_strtod_l+0x702>
 8011f6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011f70:	4642      	mov	r2, r8
 8011f72:	4620      	mov	r0, r4
 8011f74:	f002 f98e 	bl	8014294 <__lshift>
 8011f78:	9018      	str	r0, [sp, #96]	; 0x60
 8011f7a:	2800      	cmp	r0, #0
 8011f7c:	f47f af6b 	bne.w	8011e56 <_strtod_l+0x766>
 8011f80:	e5fe      	b.n	8011b80 <_strtod_l+0x490>
 8011f82:	465f      	mov	r7, fp
 8011f84:	d16e      	bne.n	8012064 <_strtod_l+0x974>
 8011f86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011f88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011f8c:	b342      	cbz	r2, 8011fe0 <_strtod_l+0x8f0>
 8011f8e:	4a32      	ldr	r2, [pc, #200]	; (8012058 <_strtod_l+0x968>)
 8011f90:	4293      	cmp	r3, r2
 8011f92:	d128      	bne.n	8011fe6 <_strtod_l+0x8f6>
 8011f94:	9b04      	ldr	r3, [sp, #16]
 8011f96:	4651      	mov	r1, sl
 8011f98:	b1eb      	cbz	r3, 8011fd6 <_strtod_l+0x8e6>
 8011f9a:	4b2d      	ldr	r3, [pc, #180]	; (8012050 <_strtod_l+0x960>)
 8011f9c:	403b      	ands	r3, r7
 8011f9e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8011fa6:	d819      	bhi.n	8011fdc <_strtod_l+0x8ec>
 8011fa8:	0d1b      	lsrs	r3, r3, #20
 8011faa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011fae:	fa02 f303 	lsl.w	r3, r2, r3
 8011fb2:	4299      	cmp	r1, r3
 8011fb4:	d117      	bne.n	8011fe6 <_strtod_l+0x8f6>
 8011fb6:	4b29      	ldr	r3, [pc, #164]	; (801205c <_strtod_l+0x96c>)
 8011fb8:	429f      	cmp	r7, r3
 8011fba:	d102      	bne.n	8011fc2 <_strtod_l+0x8d2>
 8011fbc:	3101      	adds	r1, #1
 8011fbe:	f43f addf 	beq.w	8011b80 <_strtod_l+0x490>
 8011fc2:	4b23      	ldr	r3, [pc, #140]	; (8012050 <_strtod_l+0x960>)
 8011fc4:	403b      	ands	r3, r7
 8011fc6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8011fca:	f04f 0a00 	mov.w	sl, #0
 8011fce:	9b04      	ldr	r3, [sp, #16]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d1a4      	bne.n	8011f1e <_strtod_l+0x82e>
 8011fd4:	e5de      	b.n	8011b94 <_strtod_l+0x4a4>
 8011fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8011fda:	e7ea      	b.n	8011fb2 <_strtod_l+0x8c2>
 8011fdc:	4613      	mov	r3, r2
 8011fde:	e7e8      	b.n	8011fb2 <_strtod_l+0x8c2>
 8011fe0:	ea53 030a 	orrs.w	r3, r3, sl
 8011fe4:	d08c      	beq.n	8011f00 <_strtod_l+0x810>
 8011fe6:	9b08      	ldr	r3, [sp, #32]
 8011fe8:	b1db      	cbz	r3, 8012022 <_strtod_l+0x932>
 8011fea:	423b      	tst	r3, r7
 8011fec:	d0ef      	beq.n	8011fce <_strtod_l+0x8de>
 8011fee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ff0:	9a04      	ldr	r2, [sp, #16]
 8011ff2:	4650      	mov	r0, sl
 8011ff4:	4659      	mov	r1, fp
 8011ff6:	b1c3      	cbz	r3, 801202a <_strtod_l+0x93a>
 8011ff8:	f7ff fb5e 	bl	80116b8 <sulp>
 8011ffc:	4602      	mov	r2, r0
 8011ffe:	460b      	mov	r3, r1
 8012000:	ec51 0b18 	vmov	r0, r1, d8
 8012004:	f7f4 f9ba 	bl	800637c <__adddf3>
 8012008:	4682      	mov	sl, r0
 801200a:	468b      	mov	fp, r1
 801200c:	e7df      	b.n	8011fce <_strtod_l+0x8de>
 801200e:	4013      	ands	r3, r2
 8012010:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012014:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012018:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801201c:	f04f 3aff 	mov.w	sl, #4294967295
 8012020:	e7d5      	b.n	8011fce <_strtod_l+0x8de>
 8012022:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012024:	ea13 0f0a 	tst.w	r3, sl
 8012028:	e7e0      	b.n	8011fec <_strtod_l+0x8fc>
 801202a:	f7ff fb45 	bl	80116b8 <sulp>
 801202e:	4602      	mov	r2, r0
 8012030:	460b      	mov	r3, r1
 8012032:	ec51 0b18 	vmov	r0, r1, d8
 8012036:	f7f4 f99f 	bl	8006378 <__aeabi_dsub>
 801203a:	2200      	movs	r2, #0
 801203c:	2300      	movs	r3, #0
 801203e:	4682      	mov	sl, r0
 8012040:	468b      	mov	fp, r1
 8012042:	f7f4 fdb9 	bl	8006bb8 <__aeabi_dcmpeq>
 8012046:	2800      	cmp	r0, #0
 8012048:	d0c1      	beq.n	8011fce <_strtod_l+0x8de>
 801204a:	e611      	b.n	8011c70 <_strtod_l+0x580>
 801204c:	fffffc02 	.word	0xfffffc02
 8012050:	7ff00000 	.word	0x7ff00000
 8012054:	39500000 	.word	0x39500000
 8012058:	000fffff 	.word	0x000fffff
 801205c:	7fefffff 	.word	0x7fefffff
 8012060:	0814f818 	.word	0x0814f818
 8012064:	4631      	mov	r1, r6
 8012066:	4628      	mov	r0, r5
 8012068:	f002 fb02 	bl	8014670 <__ratio>
 801206c:	ec59 8b10 	vmov	r8, r9, d0
 8012070:	ee10 0a10 	vmov	r0, s0
 8012074:	2200      	movs	r2, #0
 8012076:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801207a:	4649      	mov	r1, r9
 801207c:	f7f4 fdb0 	bl	8006be0 <__aeabi_dcmple>
 8012080:	2800      	cmp	r0, #0
 8012082:	d07a      	beq.n	801217a <_strtod_l+0xa8a>
 8012084:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012086:	2b00      	cmp	r3, #0
 8012088:	d04a      	beq.n	8012120 <_strtod_l+0xa30>
 801208a:	4b95      	ldr	r3, [pc, #596]	; (80122e0 <_strtod_l+0xbf0>)
 801208c:	2200      	movs	r2, #0
 801208e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012092:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80122e0 <_strtod_l+0xbf0>
 8012096:	f04f 0800 	mov.w	r8, #0
 801209a:	4b92      	ldr	r3, [pc, #584]	; (80122e4 <_strtod_l+0xbf4>)
 801209c:	403b      	ands	r3, r7
 801209e:	930d      	str	r3, [sp, #52]	; 0x34
 80120a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80120a2:	4b91      	ldr	r3, [pc, #580]	; (80122e8 <_strtod_l+0xbf8>)
 80120a4:	429a      	cmp	r2, r3
 80120a6:	f040 80b0 	bne.w	801220a <_strtod_l+0xb1a>
 80120aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80120ae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80120b2:	ec4b ab10 	vmov	d0, sl, fp
 80120b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80120ba:	f002 fa01 	bl	80144c0 <__ulp>
 80120be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80120c2:	ec53 2b10 	vmov	r2, r3, d0
 80120c6:	f7f4 fb0f 	bl	80066e8 <__aeabi_dmul>
 80120ca:	4652      	mov	r2, sl
 80120cc:	465b      	mov	r3, fp
 80120ce:	f7f4 f955 	bl	800637c <__adddf3>
 80120d2:	460b      	mov	r3, r1
 80120d4:	4983      	ldr	r1, [pc, #524]	; (80122e4 <_strtod_l+0xbf4>)
 80120d6:	4a85      	ldr	r2, [pc, #532]	; (80122ec <_strtod_l+0xbfc>)
 80120d8:	4019      	ands	r1, r3
 80120da:	4291      	cmp	r1, r2
 80120dc:	4682      	mov	sl, r0
 80120de:	d960      	bls.n	80121a2 <_strtod_l+0xab2>
 80120e0:	ee18 3a90 	vmov	r3, s17
 80120e4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80120e8:	4293      	cmp	r3, r2
 80120ea:	d104      	bne.n	80120f6 <_strtod_l+0xa06>
 80120ec:	ee18 3a10 	vmov	r3, s16
 80120f0:	3301      	adds	r3, #1
 80120f2:	f43f ad45 	beq.w	8011b80 <_strtod_l+0x490>
 80120f6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80122f8 <_strtod_l+0xc08>
 80120fa:	f04f 3aff 	mov.w	sl, #4294967295
 80120fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012100:	4620      	mov	r0, r4
 8012102:	f001 feab 	bl	8013e5c <_Bfree>
 8012106:	9905      	ldr	r1, [sp, #20]
 8012108:	4620      	mov	r0, r4
 801210a:	f001 fea7 	bl	8013e5c <_Bfree>
 801210e:	4631      	mov	r1, r6
 8012110:	4620      	mov	r0, r4
 8012112:	f001 fea3 	bl	8013e5c <_Bfree>
 8012116:	4629      	mov	r1, r5
 8012118:	4620      	mov	r0, r4
 801211a:	f001 fe9f 	bl	8013e5c <_Bfree>
 801211e:	e61a      	b.n	8011d56 <_strtod_l+0x666>
 8012120:	f1ba 0f00 	cmp.w	sl, #0
 8012124:	d11b      	bne.n	801215e <_strtod_l+0xa6e>
 8012126:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801212a:	b9f3      	cbnz	r3, 801216a <_strtod_l+0xa7a>
 801212c:	4b6c      	ldr	r3, [pc, #432]	; (80122e0 <_strtod_l+0xbf0>)
 801212e:	2200      	movs	r2, #0
 8012130:	4640      	mov	r0, r8
 8012132:	4649      	mov	r1, r9
 8012134:	f7f4 fd4a 	bl	8006bcc <__aeabi_dcmplt>
 8012138:	b9d0      	cbnz	r0, 8012170 <_strtod_l+0xa80>
 801213a:	4640      	mov	r0, r8
 801213c:	4649      	mov	r1, r9
 801213e:	4b6c      	ldr	r3, [pc, #432]	; (80122f0 <_strtod_l+0xc00>)
 8012140:	2200      	movs	r2, #0
 8012142:	f7f4 fad1 	bl	80066e8 <__aeabi_dmul>
 8012146:	4680      	mov	r8, r0
 8012148:	4689      	mov	r9, r1
 801214a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801214e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8012152:	9315      	str	r3, [sp, #84]	; 0x54
 8012154:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8012158:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801215c:	e79d      	b.n	801209a <_strtod_l+0x9aa>
 801215e:	f1ba 0f01 	cmp.w	sl, #1
 8012162:	d102      	bne.n	801216a <_strtod_l+0xa7a>
 8012164:	2f00      	cmp	r7, #0
 8012166:	f43f ad83 	beq.w	8011c70 <_strtod_l+0x580>
 801216a:	4b62      	ldr	r3, [pc, #392]	; (80122f4 <_strtod_l+0xc04>)
 801216c:	2200      	movs	r2, #0
 801216e:	e78e      	b.n	801208e <_strtod_l+0x99e>
 8012170:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80122f0 <_strtod_l+0xc00>
 8012174:	f04f 0800 	mov.w	r8, #0
 8012178:	e7e7      	b.n	801214a <_strtod_l+0xa5a>
 801217a:	4b5d      	ldr	r3, [pc, #372]	; (80122f0 <_strtod_l+0xc00>)
 801217c:	4640      	mov	r0, r8
 801217e:	4649      	mov	r1, r9
 8012180:	2200      	movs	r2, #0
 8012182:	f7f4 fab1 	bl	80066e8 <__aeabi_dmul>
 8012186:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012188:	4680      	mov	r8, r0
 801218a:	4689      	mov	r9, r1
 801218c:	b933      	cbnz	r3, 801219c <_strtod_l+0xaac>
 801218e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012192:	900e      	str	r0, [sp, #56]	; 0x38
 8012194:	930f      	str	r3, [sp, #60]	; 0x3c
 8012196:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801219a:	e7dd      	b.n	8012158 <_strtod_l+0xa68>
 801219c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80121a0:	e7f9      	b.n	8012196 <_strtod_l+0xaa6>
 80121a2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80121a6:	9b04      	ldr	r3, [sp, #16]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d1a8      	bne.n	80120fe <_strtod_l+0xa0e>
 80121ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80121b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80121b2:	0d1b      	lsrs	r3, r3, #20
 80121b4:	051b      	lsls	r3, r3, #20
 80121b6:	429a      	cmp	r2, r3
 80121b8:	d1a1      	bne.n	80120fe <_strtod_l+0xa0e>
 80121ba:	4640      	mov	r0, r8
 80121bc:	4649      	mov	r1, r9
 80121be:	f7f4 fdf3 	bl	8006da8 <__aeabi_d2lz>
 80121c2:	f7f4 fa63 	bl	800668c <__aeabi_l2d>
 80121c6:	4602      	mov	r2, r0
 80121c8:	460b      	mov	r3, r1
 80121ca:	4640      	mov	r0, r8
 80121cc:	4649      	mov	r1, r9
 80121ce:	f7f4 f8d3 	bl	8006378 <__aeabi_dsub>
 80121d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80121d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80121d8:	ea43 030a 	orr.w	r3, r3, sl
 80121dc:	4313      	orrs	r3, r2
 80121de:	4680      	mov	r8, r0
 80121e0:	4689      	mov	r9, r1
 80121e2:	d055      	beq.n	8012290 <_strtod_l+0xba0>
 80121e4:	a336      	add	r3, pc, #216	; (adr r3, 80122c0 <_strtod_l+0xbd0>)
 80121e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ea:	f7f4 fcef 	bl	8006bcc <__aeabi_dcmplt>
 80121ee:	2800      	cmp	r0, #0
 80121f0:	f47f acd0 	bne.w	8011b94 <_strtod_l+0x4a4>
 80121f4:	a334      	add	r3, pc, #208	; (adr r3, 80122c8 <_strtod_l+0xbd8>)
 80121f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121fa:	4640      	mov	r0, r8
 80121fc:	4649      	mov	r1, r9
 80121fe:	f7f4 fd03 	bl	8006c08 <__aeabi_dcmpgt>
 8012202:	2800      	cmp	r0, #0
 8012204:	f43f af7b 	beq.w	80120fe <_strtod_l+0xa0e>
 8012208:	e4c4      	b.n	8011b94 <_strtod_l+0x4a4>
 801220a:	9b04      	ldr	r3, [sp, #16]
 801220c:	b333      	cbz	r3, 801225c <_strtod_l+0xb6c>
 801220e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012210:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012214:	d822      	bhi.n	801225c <_strtod_l+0xb6c>
 8012216:	a32e      	add	r3, pc, #184	; (adr r3, 80122d0 <_strtod_l+0xbe0>)
 8012218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801221c:	4640      	mov	r0, r8
 801221e:	4649      	mov	r1, r9
 8012220:	f7f4 fcde 	bl	8006be0 <__aeabi_dcmple>
 8012224:	b1a0      	cbz	r0, 8012250 <_strtod_l+0xb60>
 8012226:	4649      	mov	r1, r9
 8012228:	4640      	mov	r0, r8
 801222a:	f7f4 fd35 	bl	8006c98 <__aeabi_d2uiz>
 801222e:	2801      	cmp	r0, #1
 8012230:	bf38      	it	cc
 8012232:	2001      	movcc	r0, #1
 8012234:	f7f4 f9de 	bl	80065f4 <__aeabi_ui2d>
 8012238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801223a:	4680      	mov	r8, r0
 801223c:	4689      	mov	r9, r1
 801223e:	bb23      	cbnz	r3, 801228a <_strtod_l+0xb9a>
 8012240:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012244:	9010      	str	r0, [sp, #64]	; 0x40
 8012246:	9311      	str	r3, [sp, #68]	; 0x44
 8012248:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801224c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012252:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012254:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8012258:	1a9b      	subs	r3, r3, r2
 801225a:	9309      	str	r3, [sp, #36]	; 0x24
 801225c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012260:	eeb0 0a48 	vmov.f32	s0, s16
 8012264:	eef0 0a68 	vmov.f32	s1, s17
 8012268:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801226c:	f002 f928 	bl	80144c0 <__ulp>
 8012270:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012274:	ec53 2b10 	vmov	r2, r3, d0
 8012278:	f7f4 fa36 	bl	80066e8 <__aeabi_dmul>
 801227c:	ec53 2b18 	vmov	r2, r3, d8
 8012280:	f7f4 f87c 	bl	800637c <__adddf3>
 8012284:	4682      	mov	sl, r0
 8012286:	468b      	mov	fp, r1
 8012288:	e78d      	b.n	80121a6 <_strtod_l+0xab6>
 801228a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801228e:	e7db      	b.n	8012248 <_strtod_l+0xb58>
 8012290:	a311      	add	r3, pc, #68	; (adr r3, 80122d8 <_strtod_l+0xbe8>)
 8012292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012296:	f7f4 fc99 	bl	8006bcc <__aeabi_dcmplt>
 801229a:	e7b2      	b.n	8012202 <_strtod_l+0xb12>
 801229c:	2300      	movs	r3, #0
 801229e:	930a      	str	r3, [sp, #40]	; 0x28
 80122a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80122a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80122a4:	6013      	str	r3, [r2, #0]
 80122a6:	f7ff ba6b 	b.w	8011780 <_strtod_l+0x90>
 80122aa:	2a65      	cmp	r2, #101	; 0x65
 80122ac:	f43f ab5f 	beq.w	801196e <_strtod_l+0x27e>
 80122b0:	2a45      	cmp	r2, #69	; 0x45
 80122b2:	f43f ab5c 	beq.w	801196e <_strtod_l+0x27e>
 80122b6:	2301      	movs	r3, #1
 80122b8:	f7ff bb94 	b.w	80119e4 <_strtod_l+0x2f4>
 80122bc:	f3af 8000 	nop.w
 80122c0:	94a03595 	.word	0x94a03595
 80122c4:	3fdfffff 	.word	0x3fdfffff
 80122c8:	35afe535 	.word	0x35afe535
 80122cc:	3fe00000 	.word	0x3fe00000
 80122d0:	ffc00000 	.word	0xffc00000
 80122d4:	41dfffff 	.word	0x41dfffff
 80122d8:	94a03595 	.word	0x94a03595
 80122dc:	3fcfffff 	.word	0x3fcfffff
 80122e0:	3ff00000 	.word	0x3ff00000
 80122e4:	7ff00000 	.word	0x7ff00000
 80122e8:	7fe00000 	.word	0x7fe00000
 80122ec:	7c9fffff 	.word	0x7c9fffff
 80122f0:	3fe00000 	.word	0x3fe00000
 80122f4:	bff00000 	.word	0xbff00000
 80122f8:	7fefffff 	.word	0x7fefffff

080122fc <_strtod_r>:
 80122fc:	4b01      	ldr	r3, [pc, #4]	; (8012304 <_strtod_r+0x8>)
 80122fe:	f7ff b9f7 	b.w	80116f0 <_strtod_l>
 8012302:	bf00      	nop
 8012304:	20000930 	.word	0x20000930

08012308 <_strtol_l.constprop.0>:
 8012308:	2b01      	cmp	r3, #1
 801230a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801230e:	d001      	beq.n	8012314 <_strtol_l.constprop.0+0xc>
 8012310:	2b24      	cmp	r3, #36	; 0x24
 8012312:	d906      	bls.n	8012322 <_strtol_l.constprop.0+0x1a>
 8012314:	f7fe fa52 	bl	80107bc <__errno>
 8012318:	2316      	movs	r3, #22
 801231a:	6003      	str	r3, [r0, #0]
 801231c:	2000      	movs	r0, #0
 801231e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012322:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8012408 <_strtol_l.constprop.0+0x100>
 8012326:	460d      	mov	r5, r1
 8012328:	462e      	mov	r6, r5
 801232a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801232e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8012332:	f017 0708 	ands.w	r7, r7, #8
 8012336:	d1f7      	bne.n	8012328 <_strtol_l.constprop.0+0x20>
 8012338:	2c2d      	cmp	r4, #45	; 0x2d
 801233a:	d132      	bne.n	80123a2 <_strtol_l.constprop.0+0x9a>
 801233c:	782c      	ldrb	r4, [r5, #0]
 801233e:	2701      	movs	r7, #1
 8012340:	1cb5      	adds	r5, r6, #2
 8012342:	2b00      	cmp	r3, #0
 8012344:	d05b      	beq.n	80123fe <_strtol_l.constprop.0+0xf6>
 8012346:	2b10      	cmp	r3, #16
 8012348:	d109      	bne.n	801235e <_strtol_l.constprop.0+0x56>
 801234a:	2c30      	cmp	r4, #48	; 0x30
 801234c:	d107      	bne.n	801235e <_strtol_l.constprop.0+0x56>
 801234e:	782c      	ldrb	r4, [r5, #0]
 8012350:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012354:	2c58      	cmp	r4, #88	; 0x58
 8012356:	d14d      	bne.n	80123f4 <_strtol_l.constprop.0+0xec>
 8012358:	786c      	ldrb	r4, [r5, #1]
 801235a:	2310      	movs	r3, #16
 801235c:	3502      	adds	r5, #2
 801235e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8012362:	f108 38ff 	add.w	r8, r8, #4294967295
 8012366:	f04f 0c00 	mov.w	ip, #0
 801236a:	fbb8 f9f3 	udiv	r9, r8, r3
 801236e:	4666      	mov	r6, ip
 8012370:	fb03 8a19 	mls	sl, r3, r9, r8
 8012374:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8012378:	f1be 0f09 	cmp.w	lr, #9
 801237c:	d816      	bhi.n	80123ac <_strtol_l.constprop.0+0xa4>
 801237e:	4674      	mov	r4, lr
 8012380:	42a3      	cmp	r3, r4
 8012382:	dd24      	ble.n	80123ce <_strtol_l.constprop.0+0xc6>
 8012384:	f1bc 0f00 	cmp.w	ip, #0
 8012388:	db1e      	blt.n	80123c8 <_strtol_l.constprop.0+0xc0>
 801238a:	45b1      	cmp	r9, r6
 801238c:	d31c      	bcc.n	80123c8 <_strtol_l.constprop.0+0xc0>
 801238e:	d101      	bne.n	8012394 <_strtol_l.constprop.0+0x8c>
 8012390:	45a2      	cmp	sl, r4
 8012392:	db19      	blt.n	80123c8 <_strtol_l.constprop.0+0xc0>
 8012394:	fb06 4603 	mla	r6, r6, r3, r4
 8012398:	f04f 0c01 	mov.w	ip, #1
 801239c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80123a0:	e7e8      	b.n	8012374 <_strtol_l.constprop.0+0x6c>
 80123a2:	2c2b      	cmp	r4, #43	; 0x2b
 80123a4:	bf04      	itt	eq
 80123a6:	782c      	ldrbeq	r4, [r5, #0]
 80123a8:	1cb5      	addeq	r5, r6, #2
 80123aa:	e7ca      	b.n	8012342 <_strtol_l.constprop.0+0x3a>
 80123ac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80123b0:	f1be 0f19 	cmp.w	lr, #25
 80123b4:	d801      	bhi.n	80123ba <_strtol_l.constprop.0+0xb2>
 80123b6:	3c37      	subs	r4, #55	; 0x37
 80123b8:	e7e2      	b.n	8012380 <_strtol_l.constprop.0+0x78>
 80123ba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80123be:	f1be 0f19 	cmp.w	lr, #25
 80123c2:	d804      	bhi.n	80123ce <_strtol_l.constprop.0+0xc6>
 80123c4:	3c57      	subs	r4, #87	; 0x57
 80123c6:	e7db      	b.n	8012380 <_strtol_l.constprop.0+0x78>
 80123c8:	f04f 3cff 	mov.w	ip, #4294967295
 80123cc:	e7e6      	b.n	801239c <_strtol_l.constprop.0+0x94>
 80123ce:	f1bc 0f00 	cmp.w	ip, #0
 80123d2:	da05      	bge.n	80123e0 <_strtol_l.constprop.0+0xd8>
 80123d4:	2322      	movs	r3, #34	; 0x22
 80123d6:	6003      	str	r3, [r0, #0]
 80123d8:	4646      	mov	r6, r8
 80123da:	b942      	cbnz	r2, 80123ee <_strtol_l.constprop.0+0xe6>
 80123dc:	4630      	mov	r0, r6
 80123de:	e79e      	b.n	801231e <_strtol_l.constprop.0+0x16>
 80123e0:	b107      	cbz	r7, 80123e4 <_strtol_l.constprop.0+0xdc>
 80123e2:	4276      	negs	r6, r6
 80123e4:	2a00      	cmp	r2, #0
 80123e6:	d0f9      	beq.n	80123dc <_strtol_l.constprop.0+0xd4>
 80123e8:	f1bc 0f00 	cmp.w	ip, #0
 80123ec:	d000      	beq.n	80123f0 <_strtol_l.constprop.0+0xe8>
 80123ee:	1e69      	subs	r1, r5, #1
 80123f0:	6011      	str	r1, [r2, #0]
 80123f2:	e7f3      	b.n	80123dc <_strtol_l.constprop.0+0xd4>
 80123f4:	2430      	movs	r4, #48	; 0x30
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d1b1      	bne.n	801235e <_strtol_l.constprop.0+0x56>
 80123fa:	2308      	movs	r3, #8
 80123fc:	e7af      	b.n	801235e <_strtol_l.constprop.0+0x56>
 80123fe:	2c30      	cmp	r4, #48	; 0x30
 8012400:	d0a5      	beq.n	801234e <_strtol_l.constprop.0+0x46>
 8012402:	230a      	movs	r3, #10
 8012404:	e7ab      	b.n	801235e <_strtol_l.constprop.0+0x56>
 8012406:	bf00      	nop
 8012408:	0814f841 	.word	0x0814f841

0801240c <_strtol_r>:
 801240c:	f7ff bf7c 	b.w	8012308 <_strtol_l.constprop.0>

08012410 <__swbuf_r>:
 8012410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012412:	460e      	mov	r6, r1
 8012414:	4614      	mov	r4, r2
 8012416:	4605      	mov	r5, r0
 8012418:	b118      	cbz	r0, 8012422 <__swbuf_r+0x12>
 801241a:	6983      	ldr	r3, [r0, #24]
 801241c:	b90b      	cbnz	r3, 8012422 <__swbuf_r+0x12>
 801241e:	f001 f84b 	bl	80134b8 <__sinit>
 8012422:	4b21      	ldr	r3, [pc, #132]	; (80124a8 <__swbuf_r+0x98>)
 8012424:	429c      	cmp	r4, r3
 8012426:	d12b      	bne.n	8012480 <__swbuf_r+0x70>
 8012428:	686c      	ldr	r4, [r5, #4]
 801242a:	69a3      	ldr	r3, [r4, #24]
 801242c:	60a3      	str	r3, [r4, #8]
 801242e:	89a3      	ldrh	r3, [r4, #12]
 8012430:	071a      	lsls	r2, r3, #28
 8012432:	d52f      	bpl.n	8012494 <__swbuf_r+0x84>
 8012434:	6923      	ldr	r3, [r4, #16]
 8012436:	b36b      	cbz	r3, 8012494 <__swbuf_r+0x84>
 8012438:	6923      	ldr	r3, [r4, #16]
 801243a:	6820      	ldr	r0, [r4, #0]
 801243c:	1ac0      	subs	r0, r0, r3
 801243e:	6963      	ldr	r3, [r4, #20]
 8012440:	b2f6      	uxtb	r6, r6
 8012442:	4283      	cmp	r3, r0
 8012444:	4637      	mov	r7, r6
 8012446:	dc04      	bgt.n	8012452 <__swbuf_r+0x42>
 8012448:	4621      	mov	r1, r4
 801244a:	4628      	mov	r0, r5
 801244c:	f000 ffa0 	bl	8013390 <_fflush_r>
 8012450:	bb30      	cbnz	r0, 80124a0 <__swbuf_r+0x90>
 8012452:	68a3      	ldr	r3, [r4, #8]
 8012454:	3b01      	subs	r3, #1
 8012456:	60a3      	str	r3, [r4, #8]
 8012458:	6823      	ldr	r3, [r4, #0]
 801245a:	1c5a      	adds	r2, r3, #1
 801245c:	6022      	str	r2, [r4, #0]
 801245e:	701e      	strb	r6, [r3, #0]
 8012460:	6963      	ldr	r3, [r4, #20]
 8012462:	3001      	adds	r0, #1
 8012464:	4283      	cmp	r3, r0
 8012466:	d004      	beq.n	8012472 <__swbuf_r+0x62>
 8012468:	89a3      	ldrh	r3, [r4, #12]
 801246a:	07db      	lsls	r3, r3, #31
 801246c:	d506      	bpl.n	801247c <__swbuf_r+0x6c>
 801246e:	2e0a      	cmp	r6, #10
 8012470:	d104      	bne.n	801247c <__swbuf_r+0x6c>
 8012472:	4621      	mov	r1, r4
 8012474:	4628      	mov	r0, r5
 8012476:	f000 ff8b 	bl	8013390 <_fflush_r>
 801247a:	b988      	cbnz	r0, 80124a0 <__swbuf_r+0x90>
 801247c:	4638      	mov	r0, r7
 801247e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012480:	4b0a      	ldr	r3, [pc, #40]	; (80124ac <__swbuf_r+0x9c>)
 8012482:	429c      	cmp	r4, r3
 8012484:	d101      	bne.n	801248a <__swbuf_r+0x7a>
 8012486:	68ac      	ldr	r4, [r5, #8]
 8012488:	e7cf      	b.n	801242a <__swbuf_r+0x1a>
 801248a:	4b09      	ldr	r3, [pc, #36]	; (80124b0 <__swbuf_r+0xa0>)
 801248c:	429c      	cmp	r4, r3
 801248e:	bf08      	it	eq
 8012490:	68ec      	ldreq	r4, [r5, #12]
 8012492:	e7ca      	b.n	801242a <__swbuf_r+0x1a>
 8012494:	4621      	mov	r1, r4
 8012496:	4628      	mov	r0, r5
 8012498:	f000 f80c 	bl	80124b4 <__swsetup_r>
 801249c:	2800      	cmp	r0, #0
 801249e:	d0cb      	beq.n	8012438 <__swbuf_r+0x28>
 80124a0:	f04f 37ff 	mov.w	r7, #4294967295
 80124a4:	e7ea      	b.n	801247c <__swbuf_r+0x6c>
 80124a6:	bf00      	nop
 80124a8:	0814f9f4 	.word	0x0814f9f4
 80124ac:	0814fa14 	.word	0x0814fa14
 80124b0:	0814f9d4 	.word	0x0814f9d4

080124b4 <__swsetup_r>:
 80124b4:	4b32      	ldr	r3, [pc, #200]	; (8012580 <__swsetup_r+0xcc>)
 80124b6:	b570      	push	{r4, r5, r6, lr}
 80124b8:	681d      	ldr	r5, [r3, #0]
 80124ba:	4606      	mov	r6, r0
 80124bc:	460c      	mov	r4, r1
 80124be:	b125      	cbz	r5, 80124ca <__swsetup_r+0x16>
 80124c0:	69ab      	ldr	r3, [r5, #24]
 80124c2:	b913      	cbnz	r3, 80124ca <__swsetup_r+0x16>
 80124c4:	4628      	mov	r0, r5
 80124c6:	f000 fff7 	bl	80134b8 <__sinit>
 80124ca:	4b2e      	ldr	r3, [pc, #184]	; (8012584 <__swsetup_r+0xd0>)
 80124cc:	429c      	cmp	r4, r3
 80124ce:	d10f      	bne.n	80124f0 <__swsetup_r+0x3c>
 80124d0:	686c      	ldr	r4, [r5, #4]
 80124d2:	89a3      	ldrh	r3, [r4, #12]
 80124d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80124d8:	0719      	lsls	r1, r3, #28
 80124da:	d42c      	bmi.n	8012536 <__swsetup_r+0x82>
 80124dc:	06dd      	lsls	r5, r3, #27
 80124de:	d411      	bmi.n	8012504 <__swsetup_r+0x50>
 80124e0:	2309      	movs	r3, #9
 80124e2:	6033      	str	r3, [r6, #0]
 80124e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80124e8:	81a3      	strh	r3, [r4, #12]
 80124ea:	f04f 30ff 	mov.w	r0, #4294967295
 80124ee:	e03e      	b.n	801256e <__swsetup_r+0xba>
 80124f0:	4b25      	ldr	r3, [pc, #148]	; (8012588 <__swsetup_r+0xd4>)
 80124f2:	429c      	cmp	r4, r3
 80124f4:	d101      	bne.n	80124fa <__swsetup_r+0x46>
 80124f6:	68ac      	ldr	r4, [r5, #8]
 80124f8:	e7eb      	b.n	80124d2 <__swsetup_r+0x1e>
 80124fa:	4b24      	ldr	r3, [pc, #144]	; (801258c <__swsetup_r+0xd8>)
 80124fc:	429c      	cmp	r4, r3
 80124fe:	bf08      	it	eq
 8012500:	68ec      	ldreq	r4, [r5, #12]
 8012502:	e7e6      	b.n	80124d2 <__swsetup_r+0x1e>
 8012504:	0758      	lsls	r0, r3, #29
 8012506:	d512      	bpl.n	801252e <__swsetup_r+0x7a>
 8012508:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801250a:	b141      	cbz	r1, 801251e <__swsetup_r+0x6a>
 801250c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012510:	4299      	cmp	r1, r3
 8012512:	d002      	beq.n	801251a <__swsetup_r+0x66>
 8012514:	4630      	mov	r0, r6
 8012516:	f002 f939 	bl	801478c <_free_r>
 801251a:	2300      	movs	r3, #0
 801251c:	6363      	str	r3, [r4, #52]	; 0x34
 801251e:	89a3      	ldrh	r3, [r4, #12]
 8012520:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012524:	81a3      	strh	r3, [r4, #12]
 8012526:	2300      	movs	r3, #0
 8012528:	6063      	str	r3, [r4, #4]
 801252a:	6923      	ldr	r3, [r4, #16]
 801252c:	6023      	str	r3, [r4, #0]
 801252e:	89a3      	ldrh	r3, [r4, #12]
 8012530:	f043 0308 	orr.w	r3, r3, #8
 8012534:	81a3      	strh	r3, [r4, #12]
 8012536:	6923      	ldr	r3, [r4, #16]
 8012538:	b94b      	cbnz	r3, 801254e <__swsetup_r+0x9a>
 801253a:	89a3      	ldrh	r3, [r4, #12]
 801253c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012544:	d003      	beq.n	801254e <__swsetup_r+0x9a>
 8012546:	4621      	mov	r1, r4
 8012548:	4630      	mov	r0, r6
 801254a:	f001 fbed 	bl	8013d28 <__smakebuf_r>
 801254e:	89a0      	ldrh	r0, [r4, #12]
 8012550:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012554:	f010 0301 	ands.w	r3, r0, #1
 8012558:	d00a      	beq.n	8012570 <__swsetup_r+0xbc>
 801255a:	2300      	movs	r3, #0
 801255c:	60a3      	str	r3, [r4, #8]
 801255e:	6963      	ldr	r3, [r4, #20]
 8012560:	425b      	negs	r3, r3
 8012562:	61a3      	str	r3, [r4, #24]
 8012564:	6923      	ldr	r3, [r4, #16]
 8012566:	b943      	cbnz	r3, 801257a <__swsetup_r+0xc6>
 8012568:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801256c:	d1ba      	bne.n	80124e4 <__swsetup_r+0x30>
 801256e:	bd70      	pop	{r4, r5, r6, pc}
 8012570:	0781      	lsls	r1, r0, #30
 8012572:	bf58      	it	pl
 8012574:	6963      	ldrpl	r3, [r4, #20]
 8012576:	60a3      	str	r3, [r4, #8]
 8012578:	e7f4      	b.n	8012564 <__swsetup_r+0xb0>
 801257a:	2000      	movs	r0, #0
 801257c:	e7f7      	b.n	801256e <__swsetup_r+0xba>
 801257e:	bf00      	nop
 8012580:	200008c8 	.word	0x200008c8
 8012584:	0814f9f4 	.word	0x0814f9f4
 8012588:	0814fa14 	.word	0x0814fa14
 801258c:	0814f9d4 	.word	0x0814f9d4

08012590 <quorem>:
 8012590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012594:	6903      	ldr	r3, [r0, #16]
 8012596:	690c      	ldr	r4, [r1, #16]
 8012598:	42a3      	cmp	r3, r4
 801259a:	4607      	mov	r7, r0
 801259c:	f2c0 8081 	blt.w	80126a2 <quorem+0x112>
 80125a0:	3c01      	subs	r4, #1
 80125a2:	f101 0814 	add.w	r8, r1, #20
 80125a6:	f100 0514 	add.w	r5, r0, #20
 80125aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80125ae:	9301      	str	r3, [sp, #4]
 80125b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80125b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80125b8:	3301      	adds	r3, #1
 80125ba:	429a      	cmp	r2, r3
 80125bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80125c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80125c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80125c8:	d331      	bcc.n	801262e <quorem+0x9e>
 80125ca:	f04f 0e00 	mov.w	lr, #0
 80125ce:	4640      	mov	r0, r8
 80125d0:	46ac      	mov	ip, r5
 80125d2:	46f2      	mov	sl, lr
 80125d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80125d8:	b293      	uxth	r3, r2
 80125da:	fb06 e303 	mla	r3, r6, r3, lr
 80125de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80125e2:	b29b      	uxth	r3, r3
 80125e4:	ebaa 0303 	sub.w	r3, sl, r3
 80125e8:	f8dc a000 	ldr.w	sl, [ip]
 80125ec:	0c12      	lsrs	r2, r2, #16
 80125ee:	fa13 f38a 	uxtah	r3, r3, sl
 80125f2:	fb06 e202 	mla	r2, r6, r2, lr
 80125f6:	9300      	str	r3, [sp, #0]
 80125f8:	9b00      	ldr	r3, [sp, #0]
 80125fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80125fe:	b292      	uxth	r2, r2
 8012600:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012604:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012608:	f8bd 3000 	ldrh.w	r3, [sp]
 801260c:	4581      	cmp	r9, r0
 801260e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012612:	f84c 3b04 	str.w	r3, [ip], #4
 8012616:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801261a:	d2db      	bcs.n	80125d4 <quorem+0x44>
 801261c:	f855 300b 	ldr.w	r3, [r5, fp]
 8012620:	b92b      	cbnz	r3, 801262e <quorem+0x9e>
 8012622:	9b01      	ldr	r3, [sp, #4]
 8012624:	3b04      	subs	r3, #4
 8012626:	429d      	cmp	r5, r3
 8012628:	461a      	mov	r2, r3
 801262a:	d32e      	bcc.n	801268a <quorem+0xfa>
 801262c:	613c      	str	r4, [r7, #16]
 801262e:	4638      	mov	r0, r7
 8012630:	f001 fea0 	bl	8014374 <__mcmp>
 8012634:	2800      	cmp	r0, #0
 8012636:	db24      	blt.n	8012682 <quorem+0xf2>
 8012638:	3601      	adds	r6, #1
 801263a:	4628      	mov	r0, r5
 801263c:	f04f 0c00 	mov.w	ip, #0
 8012640:	f858 2b04 	ldr.w	r2, [r8], #4
 8012644:	f8d0 e000 	ldr.w	lr, [r0]
 8012648:	b293      	uxth	r3, r2
 801264a:	ebac 0303 	sub.w	r3, ip, r3
 801264e:	0c12      	lsrs	r2, r2, #16
 8012650:	fa13 f38e 	uxtah	r3, r3, lr
 8012654:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012658:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801265c:	b29b      	uxth	r3, r3
 801265e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012662:	45c1      	cmp	r9, r8
 8012664:	f840 3b04 	str.w	r3, [r0], #4
 8012668:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801266c:	d2e8      	bcs.n	8012640 <quorem+0xb0>
 801266e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012672:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012676:	b922      	cbnz	r2, 8012682 <quorem+0xf2>
 8012678:	3b04      	subs	r3, #4
 801267a:	429d      	cmp	r5, r3
 801267c:	461a      	mov	r2, r3
 801267e:	d30a      	bcc.n	8012696 <quorem+0x106>
 8012680:	613c      	str	r4, [r7, #16]
 8012682:	4630      	mov	r0, r6
 8012684:	b003      	add	sp, #12
 8012686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801268a:	6812      	ldr	r2, [r2, #0]
 801268c:	3b04      	subs	r3, #4
 801268e:	2a00      	cmp	r2, #0
 8012690:	d1cc      	bne.n	801262c <quorem+0x9c>
 8012692:	3c01      	subs	r4, #1
 8012694:	e7c7      	b.n	8012626 <quorem+0x96>
 8012696:	6812      	ldr	r2, [r2, #0]
 8012698:	3b04      	subs	r3, #4
 801269a:	2a00      	cmp	r2, #0
 801269c:	d1f0      	bne.n	8012680 <quorem+0xf0>
 801269e:	3c01      	subs	r4, #1
 80126a0:	e7eb      	b.n	801267a <quorem+0xea>
 80126a2:	2000      	movs	r0, #0
 80126a4:	e7ee      	b.n	8012684 <quorem+0xf4>
	...

080126a8 <_dtoa_r>:
 80126a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126ac:	ed2d 8b04 	vpush	{d8-d9}
 80126b0:	ec57 6b10 	vmov	r6, r7, d0
 80126b4:	b093      	sub	sp, #76	; 0x4c
 80126b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80126b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80126bc:	9106      	str	r1, [sp, #24]
 80126be:	ee10 aa10 	vmov	sl, s0
 80126c2:	4604      	mov	r4, r0
 80126c4:	9209      	str	r2, [sp, #36]	; 0x24
 80126c6:	930c      	str	r3, [sp, #48]	; 0x30
 80126c8:	46bb      	mov	fp, r7
 80126ca:	b975      	cbnz	r5, 80126ea <_dtoa_r+0x42>
 80126cc:	2010      	movs	r0, #16
 80126ce:	f001 fb6b 	bl	8013da8 <malloc>
 80126d2:	4602      	mov	r2, r0
 80126d4:	6260      	str	r0, [r4, #36]	; 0x24
 80126d6:	b920      	cbnz	r0, 80126e2 <_dtoa_r+0x3a>
 80126d8:	4ba7      	ldr	r3, [pc, #668]	; (8012978 <_dtoa_r+0x2d0>)
 80126da:	21ea      	movs	r1, #234	; 0xea
 80126dc:	48a7      	ldr	r0, [pc, #668]	; (801297c <_dtoa_r+0x2d4>)
 80126de:	f002 fc79 	bl	8014fd4 <__assert_func>
 80126e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80126e6:	6005      	str	r5, [r0, #0]
 80126e8:	60c5      	str	r5, [r0, #12]
 80126ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80126ec:	6819      	ldr	r1, [r3, #0]
 80126ee:	b151      	cbz	r1, 8012706 <_dtoa_r+0x5e>
 80126f0:	685a      	ldr	r2, [r3, #4]
 80126f2:	604a      	str	r2, [r1, #4]
 80126f4:	2301      	movs	r3, #1
 80126f6:	4093      	lsls	r3, r2
 80126f8:	608b      	str	r3, [r1, #8]
 80126fa:	4620      	mov	r0, r4
 80126fc:	f001 fbae 	bl	8013e5c <_Bfree>
 8012700:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012702:	2200      	movs	r2, #0
 8012704:	601a      	str	r2, [r3, #0]
 8012706:	1e3b      	subs	r3, r7, #0
 8012708:	bfaa      	itet	ge
 801270a:	2300      	movge	r3, #0
 801270c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8012710:	f8c8 3000 	strge.w	r3, [r8]
 8012714:	4b9a      	ldr	r3, [pc, #616]	; (8012980 <_dtoa_r+0x2d8>)
 8012716:	bfbc      	itt	lt
 8012718:	2201      	movlt	r2, #1
 801271a:	f8c8 2000 	strlt.w	r2, [r8]
 801271e:	ea33 030b 	bics.w	r3, r3, fp
 8012722:	d11b      	bne.n	801275c <_dtoa_r+0xb4>
 8012724:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012726:	f242 730f 	movw	r3, #9999	; 0x270f
 801272a:	6013      	str	r3, [r2, #0]
 801272c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012730:	4333      	orrs	r3, r6
 8012732:	f000 8592 	beq.w	801325a <_dtoa_r+0xbb2>
 8012736:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012738:	b963      	cbnz	r3, 8012754 <_dtoa_r+0xac>
 801273a:	4b92      	ldr	r3, [pc, #584]	; (8012984 <_dtoa_r+0x2dc>)
 801273c:	e022      	b.n	8012784 <_dtoa_r+0xdc>
 801273e:	4b92      	ldr	r3, [pc, #584]	; (8012988 <_dtoa_r+0x2e0>)
 8012740:	9301      	str	r3, [sp, #4]
 8012742:	3308      	adds	r3, #8
 8012744:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012746:	6013      	str	r3, [r2, #0]
 8012748:	9801      	ldr	r0, [sp, #4]
 801274a:	b013      	add	sp, #76	; 0x4c
 801274c:	ecbd 8b04 	vpop	{d8-d9}
 8012750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012754:	4b8b      	ldr	r3, [pc, #556]	; (8012984 <_dtoa_r+0x2dc>)
 8012756:	9301      	str	r3, [sp, #4]
 8012758:	3303      	adds	r3, #3
 801275a:	e7f3      	b.n	8012744 <_dtoa_r+0x9c>
 801275c:	2200      	movs	r2, #0
 801275e:	2300      	movs	r3, #0
 8012760:	4650      	mov	r0, sl
 8012762:	4659      	mov	r1, fp
 8012764:	f7f4 fa28 	bl	8006bb8 <__aeabi_dcmpeq>
 8012768:	ec4b ab19 	vmov	d9, sl, fp
 801276c:	4680      	mov	r8, r0
 801276e:	b158      	cbz	r0, 8012788 <_dtoa_r+0xe0>
 8012770:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012772:	2301      	movs	r3, #1
 8012774:	6013      	str	r3, [r2, #0]
 8012776:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012778:	2b00      	cmp	r3, #0
 801277a:	f000 856b 	beq.w	8013254 <_dtoa_r+0xbac>
 801277e:	4883      	ldr	r0, [pc, #524]	; (801298c <_dtoa_r+0x2e4>)
 8012780:	6018      	str	r0, [r3, #0]
 8012782:	1e43      	subs	r3, r0, #1
 8012784:	9301      	str	r3, [sp, #4]
 8012786:	e7df      	b.n	8012748 <_dtoa_r+0xa0>
 8012788:	ec4b ab10 	vmov	d0, sl, fp
 801278c:	aa10      	add	r2, sp, #64	; 0x40
 801278e:	a911      	add	r1, sp, #68	; 0x44
 8012790:	4620      	mov	r0, r4
 8012792:	f001 ff11 	bl	80145b8 <__d2b>
 8012796:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801279a:	ee08 0a10 	vmov	s16, r0
 801279e:	2d00      	cmp	r5, #0
 80127a0:	f000 8084 	beq.w	80128ac <_dtoa_r+0x204>
 80127a4:	ee19 3a90 	vmov	r3, s19
 80127a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80127ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80127b0:	4656      	mov	r6, sl
 80127b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80127b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80127ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80127be:	4b74      	ldr	r3, [pc, #464]	; (8012990 <_dtoa_r+0x2e8>)
 80127c0:	2200      	movs	r2, #0
 80127c2:	4630      	mov	r0, r6
 80127c4:	4639      	mov	r1, r7
 80127c6:	f7f3 fdd7 	bl	8006378 <__aeabi_dsub>
 80127ca:	a365      	add	r3, pc, #404	; (adr r3, 8012960 <_dtoa_r+0x2b8>)
 80127cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127d0:	f7f3 ff8a 	bl	80066e8 <__aeabi_dmul>
 80127d4:	a364      	add	r3, pc, #400	; (adr r3, 8012968 <_dtoa_r+0x2c0>)
 80127d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127da:	f7f3 fdcf 	bl	800637c <__adddf3>
 80127de:	4606      	mov	r6, r0
 80127e0:	4628      	mov	r0, r5
 80127e2:	460f      	mov	r7, r1
 80127e4:	f7f3 ff16 	bl	8006614 <__aeabi_i2d>
 80127e8:	a361      	add	r3, pc, #388	; (adr r3, 8012970 <_dtoa_r+0x2c8>)
 80127ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ee:	f7f3 ff7b 	bl	80066e8 <__aeabi_dmul>
 80127f2:	4602      	mov	r2, r0
 80127f4:	460b      	mov	r3, r1
 80127f6:	4630      	mov	r0, r6
 80127f8:	4639      	mov	r1, r7
 80127fa:	f7f3 fdbf 	bl	800637c <__adddf3>
 80127fe:	4606      	mov	r6, r0
 8012800:	460f      	mov	r7, r1
 8012802:	f7f4 fa21 	bl	8006c48 <__aeabi_d2iz>
 8012806:	2200      	movs	r2, #0
 8012808:	9000      	str	r0, [sp, #0]
 801280a:	2300      	movs	r3, #0
 801280c:	4630      	mov	r0, r6
 801280e:	4639      	mov	r1, r7
 8012810:	f7f4 f9dc 	bl	8006bcc <__aeabi_dcmplt>
 8012814:	b150      	cbz	r0, 801282c <_dtoa_r+0x184>
 8012816:	9800      	ldr	r0, [sp, #0]
 8012818:	f7f3 fefc 	bl	8006614 <__aeabi_i2d>
 801281c:	4632      	mov	r2, r6
 801281e:	463b      	mov	r3, r7
 8012820:	f7f4 f9ca 	bl	8006bb8 <__aeabi_dcmpeq>
 8012824:	b910      	cbnz	r0, 801282c <_dtoa_r+0x184>
 8012826:	9b00      	ldr	r3, [sp, #0]
 8012828:	3b01      	subs	r3, #1
 801282a:	9300      	str	r3, [sp, #0]
 801282c:	9b00      	ldr	r3, [sp, #0]
 801282e:	2b16      	cmp	r3, #22
 8012830:	d85a      	bhi.n	80128e8 <_dtoa_r+0x240>
 8012832:	9a00      	ldr	r2, [sp, #0]
 8012834:	4b57      	ldr	r3, [pc, #348]	; (8012994 <_dtoa_r+0x2ec>)
 8012836:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801283a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801283e:	ec51 0b19 	vmov	r0, r1, d9
 8012842:	f7f4 f9c3 	bl	8006bcc <__aeabi_dcmplt>
 8012846:	2800      	cmp	r0, #0
 8012848:	d050      	beq.n	80128ec <_dtoa_r+0x244>
 801284a:	9b00      	ldr	r3, [sp, #0]
 801284c:	3b01      	subs	r3, #1
 801284e:	9300      	str	r3, [sp, #0]
 8012850:	2300      	movs	r3, #0
 8012852:	930b      	str	r3, [sp, #44]	; 0x2c
 8012854:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012856:	1b5d      	subs	r5, r3, r5
 8012858:	1e6b      	subs	r3, r5, #1
 801285a:	9305      	str	r3, [sp, #20]
 801285c:	bf45      	ittet	mi
 801285e:	f1c5 0301 	rsbmi	r3, r5, #1
 8012862:	9304      	strmi	r3, [sp, #16]
 8012864:	2300      	movpl	r3, #0
 8012866:	2300      	movmi	r3, #0
 8012868:	bf4c      	ite	mi
 801286a:	9305      	strmi	r3, [sp, #20]
 801286c:	9304      	strpl	r3, [sp, #16]
 801286e:	9b00      	ldr	r3, [sp, #0]
 8012870:	2b00      	cmp	r3, #0
 8012872:	db3d      	blt.n	80128f0 <_dtoa_r+0x248>
 8012874:	9b05      	ldr	r3, [sp, #20]
 8012876:	9a00      	ldr	r2, [sp, #0]
 8012878:	920a      	str	r2, [sp, #40]	; 0x28
 801287a:	4413      	add	r3, r2
 801287c:	9305      	str	r3, [sp, #20]
 801287e:	2300      	movs	r3, #0
 8012880:	9307      	str	r3, [sp, #28]
 8012882:	9b06      	ldr	r3, [sp, #24]
 8012884:	2b09      	cmp	r3, #9
 8012886:	f200 8089 	bhi.w	801299c <_dtoa_r+0x2f4>
 801288a:	2b05      	cmp	r3, #5
 801288c:	bfc4      	itt	gt
 801288e:	3b04      	subgt	r3, #4
 8012890:	9306      	strgt	r3, [sp, #24]
 8012892:	9b06      	ldr	r3, [sp, #24]
 8012894:	f1a3 0302 	sub.w	r3, r3, #2
 8012898:	bfcc      	ite	gt
 801289a:	2500      	movgt	r5, #0
 801289c:	2501      	movle	r5, #1
 801289e:	2b03      	cmp	r3, #3
 80128a0:	f200 8087 	bhi.w	80129b2 <_dtoa_r+0x30a>
 80128a4:	e8df f003 	tbb	[pc, r3]
 80128a8:	59383a2d 	.word	0x59383a2d
 80128ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80128b0:	441d      	add	r5, r3
 80128b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80128b6:	2b20      	cmp	r3, #32
 80128b8:	bfc1      	itttt	gt
 80128ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80128be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80128c2:	fa0b f303 	lslgt.w	r3, fp, r3
 80128c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80128ca:	bfda      	itte	le
 80128cc:	f1c3 0320 	rsble	r3, r3, #32
 80128d0:	fa06 f003 	lslle.w	r0, r6, r3
 80128d4:	4318      	orrgt	r0, r3
 80128d6:	f7f3 fe8d 	bl	80065f4 <__aeabi_ui2d>
 80128da:	2301      	movs	r3, #1
 80128dc:	4606      	mov	r6, r0
 80128de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80128e2:	3d01      	subs	r5, #1
 80128e4:	930e      	str	r3, [sp, #56]	; 0x38
 80128e6:	e76a      	b.n	80127be <_dtoa_r+0x116>
 80128e8:	2301      	movs	r3, #1
 80128ea:	e7b2      	b.n	8012852 <_dtoa_r+0x1aa>
 80128ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80128ee:	e7b1      	b.n	8012854 <_dtoa_r+0x1ac>
 80128f0:	9b04      	ldr	r3, [sp, #16]
 80128f2:	9a00      	ldr	r2, [sp, #0]
 80128f4:	1a9b      	subs	r3, r3, r2
 80128f6:	9304      	str	r3, [sp, #16]
 80128f8:	4253      	negs	r3, r2
 80128fa:	9307      	str	r3, [sp, #28]
 80128fc:	2300      	movs	r3, #0
 80128fe:	930a      	str	r3, [sp, #40]	; 0x28
 8012900:	e7bf      	b.n	8012882 <_dtoa_r+0x1da>
 8012902:	2300      	movs	r3, #0
 8012904:	9308      	str	r3, [sp, #32]
 8012906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012908:	2b00      	cmp	r3, #0
 801290a:	dc55      	bgt.n	80129b8 <_dtoa_r+0x310>
 801290c:	2301      	movs	r3, #1
 801290e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012912:	461a      	mov	r2, r3
 8012914:	9209      	str	r2, [sp, #36]	; 0x24
 8012916:	e00c      	b.n	8012932 <_dtoa_r+0x28a>
 8012918:	2301      	movs	r3, #1
 801291a:	e7f3      	b.n	8012904 <_dtoa_r+0x25c>
 801291c:	2300      	movs	r3, #0
 801291e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012920:	9308      	str	r3, [sp, #32]
 8012922:	9b00      	ldr	r3, [sp, #0]
 8012924:	4413      	add	r3, r2
 8012926:	9302      	str	r3, [sp, #8]
 8012928:	3301      	adds	r3, #1
 801292a:	2b01      	cmp	r3, #1
 801292c:	9303      	str	r3, [sp, #12]
 801292e:	bfb8      	it	lt
 8012930:	2301      	movlt	r3, #1
 8012932:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012934:	2200      	movs	r2, #0
 8012936:	6042      	str	r2, [r0, #4]
 8012938:	2204      	movs	r2, #4
 801293a:	f102 0614 	add.w	r6, r2, #20
 801293e:	429e      	cmp	r6, r3
 8012940:	6841      	ldr	r1, [r0, #4]
 8012942:	d93d      	bls.n	80129c0 <_dtoa_r+0x318>
 8012944:	4620      	mov	r0, r4
 8012946:	f001 fa49 	bl	8013ddc <_Balloc>
 801294a:	9001      	str	r0, [sp, #4]
 801294c:	2800      	cmp	r0, #0
 801294e:	d13b      	bne.n	80129c8 <_dtoa_r+0x320>
 8012950:	4b11      	ldr	r3, [pc, #68]	; (8012998 <_dtoa_r+0x2f0>)
 8012952:	4602      	mov	r2, r0
 8012954:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012958:	e6c0      	b.n	80126dc <_dtoa_r+0x34>
 801295a:	2301      	movs	r3, #1
 801295c:	e7df      	b.n	801291e <_dtoa_r+0x276>
 801295e:	bf00      	nop
 8012960:	636f4361 	.word	0x636f4361
 8012964:	3fd287a7 	.word	0x3fd287a7
 8012968:	8b60c8b3 	.word	0x8b60c8b3
 801296c:	3fc68a28 	.word	0x3fc68a28
 8012970:	509f79fb 	.word	0x509f79fb
 8012974:	3fd34413 	.word	0x3fd34413
 8012978:	0814f94e 	.word	0x0814f94e
 801297c:	0814f965 	.word	0x0814f965
 8012980:	7ff00000 	.word	0x7ff00000
 8012984:	0814f94a 	.word	0x0814f94a
 8012988:	0814f941 	.word	0x0814f941
 801298c:	0814f7c1 	.word	0x0814f7c1
 8012990:	3ff80000 	.word	0x3ff80000
 8012994:	0814fb38 	.word	0x0814fb38
 8012998:	0814f9c0 	.word	0x0814f9c0
 801299c:	2501      	movs	r5, #1
 801299e:	2300      	movs	r3, #0
 80129a0:	9306      	str	r3, [sp, #24]
 80129a2:	9508      	str	r5, [sp, #32]
 80129a4:	f04f 33ff 	mov.w	r3, #4294967295
 80129a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80129ac:	2200      	movs	r2, #0
 80129ae:	2312      	movs	r3, #18
 80129b0:	e7b0      	b.n	8012914 <_dtoa_r+0x26c>
 80129b2:	2301      	movs	r3, #1
 80129b4:	9308      	str	r3, [sp, #32]
 80129b6:	e7f5      	b.n	80129a4 <_dtoa_r+0x2fc>
 80129b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80129be:	e7b8      	b.n	8012932 <_dtoa_r+0x28a>
 80129c0:	3101      	adds	r1, #1
 80129c2:	6041      	str	r1, [r0, #4]
 80129c4:	0052      	lsls	r2, r2, #1
 80129c6:	e7b8      	b.n	801293a <_dtoa_r+0x292>
 80129c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80129ca:	9a01      	ldr	r2, [sp, #4]
 80129cc:	601a      	str	r2, [r3, #0]
 80129ce:	9b03      	ldr	r3, [sp, #12]
 80129d0:	2b0e      	cmp	r3, #14
 80129d2:	f200 809d 	bhi.w	8012b10 <_dtoa_r+0x468>
 80129d6:	2d00      	cmp	r5, #0
 80129d8:	f000 809a 	beq.w	8012b10 <_dtoa_r+0x468>
 80129dc:	9b00      	ldr	r3, [sp, #0]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	dd32      	ble.n	8012a48 <_dtoa_r+0x3a0>
 80129e2:	4ab7      	ldr	r2, [pc, #732]	; (8012cc0 <_dtoa_r+0x618>)
 80129e4:	f003 030f 	and.w	r3, r3, #15
 80129e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80129ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80129f0:	9b00      	ldr	r3, [sp, #0]
 80129f2:	05d8      	lsls	r0, r3, #23
 80129f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80129f8:	d516      	bpl.n	8012a28 <_dtoa_r+0x380>
 80129fa:	4bb2      	ldr	r3, [pc, #712]	; (8012cc4 <_dtoa_r+0x61c>)
 80129fc:	ec51 0b19 	vmov	r0, r1, d9
 8012a00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012a04:	f7f3 ff9a 	bl	800693c <__aeabi_ddiv>
 8012a08:	f007 070f 	and.w	r7, r7, #15
 8012a0c:	4682      	mov	sl, r0
 8012a0e:	468b      	mov	fp, r1
 8012a10:	2503      	movs	r5, #3
 8012a12:	4eac      	ldr	r6, [pc, #688]	; (8012cc4 <_dtoa_r+0x61c>)
 8012a14:	b957      	cbnz	r7, 8012a2c <_dtoa_r+0x384>
 8012a16:	4642      	mov	r2, r8
 8012a18:	464b      	mov	r3, r9
 8012a1a:	4650      	mov	r0, sl
 8012a1c:	4659      	mov	r1, fp
 8012a1e:	f7f3 ff8d 	bl	800693c <__aeabi_ddiv>
 8012a22:	4682      	mov	sl, r0
 8012a24:	468b      	mov	fp, r1
 8012a26:	e028      	b.n	8012a7a <_dtoa_r+0x3d2>
 8012a28:	2502      	movs	r5, #2
 8012a2a:	e7f2      	b.n	8012a12 <_dtoa_r+0x36a>
 8012a2c:	07f9      	lsls	r1, r7, #31
 8012a2e:	d508      	bpl.n	8012a42 <_dtoa_r+0x39a>
 8012a30:	4640      	mov	r0, r8
 8012a32:	4649      	mov	r1, r9
 8012a34:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012a38:	f7f3 fe56 	bl	80066e8 <__aeabi_dmul>
 8012a3c:	3501      	adds	r5, #1
 8012a3e:	4680      	mov	r8, r0
 8012a40:	4689      	mov	r9, r1
 8012a42:	107f      	asrs	r7, r7, #1
 8012a44:	3608      	adds	r6, #8
 8012a46:	e7e5      	b.n	8012a14 <_dtoa_r+0x36c>
 8012a48:	f000 809b 	beq.w	8012b82 <_dtoa_r+0x4da>
 8012a4c:	9b00      	ldr	r3, [sp, #0]
 8012a4e:	4f9d      	ldr	r7, [pc, #628]	; (8012cc4 <_dtoa_r+0x61c>)
 8012a50:	425e      	negs	r6, r3
 8012a52:	4b9b      	ldr	r3, [pc, #620]	; (8012cc0 <_dtoa_r+0x618>)
 8012a54:	f006 020f 	and.w	r2, r6, #15
 8012a58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a60:	ec51 0b19 	vmov	r0, r1, d9
 8012a64:	f7f3 fe40 	bl	80066e8 <__aeabi_dmul>
 8012a68:	1136      	asrs	r6, r6, #4
 8012a6a:	4682      	mov	sl, r0
 8012a6c:	468b      	mov	fp, r1
 8012a6e:	2300      	movs	r3, #0
 8012a70:	2502      	movs	r5, #2
 8012a72:	2e00      	cmp	r6, #0
 8012a74:	d17a      	bne.n	8012b6c <_dtoa_r+0x4c4>
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d1d3      	bne.n	8012a22 <_dtoa_r+0x37a>
 8012a7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	f000 8082 	beq.w	8012b86 <_dtoa_r+0x4de>
 8012a82:	4b91      	ldr	r3, [pc, #580]	; (8012cc8 <_dtoa_r+0x620>)
 8012a84:	2200      	movs	r2, #0
 8012a86:	4650      	mov	r0, sl
 8012a88:	4659      	mov	r1, fp
 8012a8a:	f7f4 f89f 	bl	8006bcc <__aeabi_dcmplt>
 8012a8e:	2800      	cmp	r0, #0
 8012a90:	d079      	beq.n	8012b86 <_dtoa_r+0x4de>
 8012a92:	9b03      	ldr	r3, [sp, #12]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d076      	beq.n	8012b86 <_dtoa_r+0x4de>
 8012a98:	9b02      	ldr	r3, [sp, #8]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	dd36      	ble.n	8012b0c <_dtoa_r+0x464>
 8012a9e:	9b00      	ldr	r3, [sp, #0]
 8012aa0:	4650      	mov	r0, sl
 8012aa2:	4659      	mov	r1, fp
 8012aa4:	1e5f      	subs	r7, r3, #1
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	4b88      	ldr	r3, [pc, #544]	; (8012ccc <_dtoa_r+0x624>)
 8012aaa:	f7f3 fe1d 	bl	80066e8 <__aeabi_dmul>
 8012aae:	9e02      	ldr	r6, [sp, #8]
 8012ab0:	4682      	mov	sl, r0
 8012ab2:	468b      	mov	fp, r1
 8012ab4:	3501      	adds	r5, #1
 8012ab6:	4628      	mov	r0, r5
 8012ab8:	f7f3 fdac 	bl	8006614 <__aeabi_i2d>
 8012abc:	4652      	mov	r2, sl
 8012abe:	465b      	mov	r3, fp
 8012ac0:	f7f3 fe12 	bl	80066e8 <__aeabi_dmul>
 8012ac4:	4b82      	ldr	r3, [pc, #520]	; (8012cd0 <_dtoa_r+0x628>)
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	f7f3 fc58 	bl	800637c <__adddf3>
 8012acc:	46d0      	mov	r8, sl
 8012ace:	46d9      	mov	r9, fp
 8012ad0:	4682      	mov	sl, r0
 8012ad2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8012ad6:	2e00      	cmp	r6, #0
 8012ad8:	d158      	bne.n	8012b8c <_dtoa_r+0x4e4>
 8012ada:	4b7e      	ldr	r3, [pc, #504]	; (8012cd4 <_dtoa_r+0x62c>)
 8012adc:	2200      	movs	r2, #0
 8012ade:	4640      	mov	r0, r8
 8012ae0:	4649      	mov	r1, r9
 8012ae2:	f7f3 fc49 	bl	8006378 <__aeabi_dsub>
 8012ae6:	4652      	mov	r2, sl
 8012ae8:	465b      	mov	r3, fp
 8012aea:	4680      	mov	r8, r0
 8012aec:	4689      	mov	r9, r1
 8012aee:	f7f4 f88b 	bl	8006c08 <__aeabi_dcmpgt>
 8012af2:	2800      	cmp	r0, #0
 8012af4:	f040 8295 	bne.w	8013022 <_dtoa_r+0x97a>
 8012af8:	4652      	mov	r2, sl
 8012afa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012afe:	4640      	mov	r0, r8
 8012b00:	4649      	mov	r1, r9
 8012b02:	f7f4 f863 	bl	8006bcc <__aeabi_dcmplt>
 8012b06:	2800      	cmp	r0, #0
 8012b08:	f040 8289 	bne.w	801301e <_dtoa_r+0x976>
 8012b0c:	ec5b ab19 	vmov	sl, fp, d9
 8012b10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	f2c0 8148 	blt.w	8012da8 <_dtoa_r+0x700>
 8012b18:	9a00      	ldr	r2, [sp, #0]
 8012b1a:	2a0e      	cmp	r2, #14
 8012b1c:	f300 8144 	bgt.w	8012da8 <_dtoa_r+0x700>
 8012b20:	4b67      	ldr	r3, [pc, #412]	; (8012cc0 <_dtoa_r+0x618>)
 8012b22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012b26:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	f280 80d5 	bge.w	8012cdc <_dtoa_r+0x634>
 8012b32:	9b03      	ldr	r3, [sp, #12]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	f300 80d1 	bgt.w	8012cdc <_dtoa_r+0x634>
 8012b3a:	f040 826f 	bne.w	801301c <_dtoa_r+0x974>
 8012b3e:	4b65      	ldr	r3, [pc, #404]	; (8012cd4 <_dtoa_r+0x62c>)
 8012b40:	2200      	movs	r2, #0
 8012b42:	4640      	mov	r0, r8
 8012b44:	4649      	mov	r1, r9
 8012b46:	f7f3 fdcf 	bl	80066e8 <__aeabi_dmul>
 8012b4a:	4652      	mov	r2, sl
 8012b4c:	465b      	mov	r3, fp
 8012b4e:	f7f4 f851 	bl	8006bf4 <__aeabi_dcmpge>
 8012b52:	9e03      	ldr	r6, [sp, #12]
 8012b54:	4637      	mov	r7, r6
 8012b56:	2800      	cmp	r0, #0
 8012b58:	f040 8245 	bne.w	8012fe6 <_dtoa_r+0x93e>
 8012b5c:	9d01      	ldr	r5, [sp, #4]
 8012b5e:	2331      	movs	r3, #49	; 0x31
 8012b60:	f805 3b01 	strb.w	r3, [r5], #1
 8012b64:	9b00      	ldr	r3, [sp, #0]
 8012b66:	3301      	adds	r3, #1
 8012b68:	9300      	str	r3, [sp, #0]
 8012b6a:	e240      	b.n	8012fee <_dtoa_r+0x946>
 8012b6c:	07f2      	lsls	r2, r6, #31
 8012b6e:	d505      	bpl.n	8012b7c <_dtoa_r+0x4d4>
 8012b70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012b74:	f7f3 fdb8 	bl	80066e8 <__aeabi_dmul>
 8012b78:	3501      	adds	r5, #1
 8012b7a:	2301      	movs	r3, #1
 8012b7c:	1076      	asrs	r6, r6, #1
 8012b7e:	3708      	adds	r7, #8
 8012b80:	e777      	b.n	8012a72 <_dtoa_r+0x3ca>
 8012b82:	2502      	movs	r5, #2
 8012b84:	e779      	b.n	8012a7a <_dtoa_r+0x3d2>
 8012b86:	9f00      	ldr	r7, [sp, #0]
 8012b88:	9e03      	ldr	r6, [sp, #12]
 8012b8a:	e794      	b.n	8012ab6 <_dtoa_r+0x40e>
 8012b8c:	9901      	ldr	r1, [sp, #4]
 8012b8e:	4b4c      	ldr	r3, [pc, #304]	; (8012cc0 <_dtoa_r+0x618>)
 8012b90:	4431      	add	r1, r6
 8012b92:	910d      	str	r1, [sp, #52]	; 0x34
 8012b94:	9908      	ldr	r1, [sp, #32]
 8012b96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012b9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012b9e:	2900      	cmp	r1, #0
 8012ba0:	d043      	beq.n	8012c2a <_dtoa_r+0x582>
 8012ba2:	494d      	ldr	r1, [pc, #308]	; (8012cd8 <_dtoa_r+0x630>)
 8012ba4:	2000      	movs	r0, #0
 8012ba6:	f7f3 fec9 	bl	800693c <__aeabi_ddiv>
 8012baa:	4652      	mov	r2, sl
 8012bac:	465b      	mov	r3, fp
 8012bae:	f7f3 fbe3 	bl	8006378 <__aeabi_dsub>
 8012bb2:	9d01      	ldr	r5, [sp, #4]
 8012bb4:	4682      	mov	sl, r0
 8012bb6:	468b      	mov	fp, r1
 8012bb8:	4649      	mov	r1, r9
 8012bba:	4640      	mov	r0, r8
 8012bbc:	f7f4 f844 	bl	8006c48 <__aeabi_d2iz>
 8012bc0:	4606      	mov	r6, r0
 8012bc2:	f7f3 fd27 	bl	8006614 <__aeabi_i2d>
 8012bc6:	4602      	mov	r2, r0
 8012bc8:	460b      	mov	r3, r1
 8012bca:	4640      	mov	r0, r8
 8012bcc:	4649      	mov	r1, r9
 8012bce:	f7f3 fbd3 	bl	8006378 <__aeabi_dsub>
 8012bd2:	3630      	adds	r6, #48	; 0x30
 8012bd4:	f805 6b01 	strb.w	r6, [r5], #1
 8012bd8:	4652      	mov	r2, sl
 8012bda:	465b      	mov	r3, fp
 8012bdc:	4680      	mov	r8, r0
 8012bde:	4689      	mov	r9, r1
 8012be0:	f7f3 fff4 	bl	8006bcc <__aeabi_dcmplt>
 8012be4:	2800      	cmp	r0, #0
 8012be6:	d163      	bne.n	8012cb0 <_dtoa_r+0x608>
 8012be8:	4642      	mov	r2, r8
 8012bea:	464b      	mov	r3, r9
 8012bec:	4936      	ldr	r1, [pc, #216]	; (8012cc8 <_dtoa_r+0x620>)
 8012bee:	2000      	movs	r0, #0
 8012bf0:	f7f3 fbc2 	bl	8006378 <__aeabi_dsub>
 8012bf4:	4652      	mov	r2, sl
 8012bf6:	465b      	mov	r3, fp
 8012bf8:	f7f3 ffe8 	bl	8006bcc <__aeabi_dcmplt>
 8012bfc:	2800      	cmp	r0, #0
 8012bfe:	f040 80b5 	bne.w	8012d6c <_dtoa_r+0x6c4>
 8012c02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012c04:	429d      	cmp	r5, r3
 8012c06:	d081      	beq.n	8012b0c <_dtoa_r+0x464>
 8012c08:	4b30      	ldr	r3, [pc, #192]	; (8012ccc <_dtoa_r+0x624>)
 8012c0a:	2200      	movs	r2, #0
 8012c0c:	4650      	mov	r0, sl
 8012c0e:	4659      	mov	r1, fp
 8012c10:	f7f3 fd6a 	bl	80066e8 <__aeabi_dmul>
 8012c14:	4b2d      	ldr	r3, [pc, #180]	; (8012ccc <_dtoa_r+0x624>)
 8012c16:	4682      	mov	sl, r0
 8012c18:	468b      	mov	fp, r1
 8012c1a:	4640      	mov	r0, r8
 8012c1c:	4649      	mov	r1, r9
 8012c1e:	2200      	movs	r2, #0
 8012c20:	f7f3 fd62 	bl	80066e8 <__aeabi_dmul>
 8012c24:	4680      	mov	r8, r0
 8012c26:	4689      	mov	r9, r1
 8012c28:	e7c6      	b.n	8012bb8 <_dtoa_r+0x510>
 8012c2a:	4650      	mov	r0, sl
 8012c2c:	4659      	mov	r1, fp
 8012c2e:	f7f3 fd5b 	bl	80066e8 <__aeabi_dmul>
 8012c32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012c34:	9d01      	ldr	r5, [sp, #4]
 8012c36:	930f      	str	r3, [sp, #60]	; 0x3c
 8012c38:	4682      	mov	sl, r0
 8012c3a:	468b      	mov	fp, r1
 8012c3c:	4649      	mov	r1, r9
 8012c3e:	4640      	mov	r0, r8
 8012c40:	f7f4 f802 	bl	8006c48 <__aeabi_d2iz>
 8012c44:	4606      	mov	r6, r0
 8012c46:	f7f3 fce5 	bl	8006614 <__aeabi_i2d>
 8012c4a:	3630      	adds	r6, #48	; 0x30
 8012c4c:	4602      	mov	r2, r0
 8012c4e:	460b      	mov	r3, r1
 8012c50:	4640      	mov	r0, r8
 8012c52:	4649      	mov	r1, r9
 8012c54:	f7f3 fb90 	bl	8006378 <__aeabi_dsub>
 8012c58:	f805 6b01 	strb.w	r6, [r5], #1
 8012c5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012c5e:	429d      	cmp	r5, r3
 8012c60:	4680      	mov	r8, r0
 8012c62:	4689      	mov	r9, r1
 8012c64:	f04f 0200 	mov.w	r2, #0
 8012c68:	d124      	bne.n	8012cb4 <_dtoa_r+0x60c>
 8012c6a:	4b1b      	ldr	r3, [pc, #108]	; (8012cd8 <_dtoa_r+0x630>)
 8012c6c:	4650      	mov	r0, sl
 8012c6e:	4659      	mov	r1, fp
 8012c70:	f7f3 fb84 	bl	800637c <__adddf3>
 8012c74:	4602      	mov	r2, r0
 8012c76:	460b      	mov	r3, r1
 8012c78:	4640      	mov	r0, r8
 8012c7a:	4649      	mov	r1, r9
 8012c7c:	f7f3 ffc4 	bl	8006c08 <__aeabi_dcmpgt>
 8012c80:	2800      	cmp	r0, #0
 8012c82:	d173      	bne.n	8012d6c <_dtoa_r+0x6c4>
 8012c84:	4652      	mov	r2, sl
 8012c86:	465b      	mov	r3, fp
 8012c88:	4913      	ldr	r1, [pc, #76]	; (8012cd8 <_dtoa_r+0x630>)
 8012c8a:	2000      	movs	r0, #0
 8012c8c:	f7f3 fb74 	bl	8006378 <__aeabi_dsub>
 8012c90:	4602      	mov	r2, r0
 8012c92:	460b      	mov	r3, r1
 8012c94:	4640      	mov	r0, r8
 8012c96:	4649      	mov	r1, r9
 8012c98:	f7f3 ff98 	bl	8006bcc <__aeabi_dcmplt>
 8012c9c:	2800      	cmp	r0, #0
 8012c9e:	f43f af35 	beq.w	8012b0c <_dtoa_r+0x464>
 8012ca2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012ca4:	1e6b      	subs	r3, r5, #1
 8012ca6:	930f      	str	r3, [sp, #60]	; 0x3c
 8012ca8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012cac:	2b30      	cmp	r3, #48	; 0x30
 8012cae:	d0f8      	beq.n	8012ca2 <_dtoa_r+0x5fa>
 8012cb0:	9700      	str	r7, [sp, #0]
 8012cb2:	e049      	b.n	8012d48 <_dtoa_r+0x6a0>
 8012cb4:	4b05      	ldr	r3, [pc, #20]	; (8012ccc <_dtoa_r+0x624>)
 8012cb6:	f7f3 fd17 	bl	80066e8 <__aeabi_dmul>
 8012cba:	4680      	mov	r8, r0
 8012cbc:	4689      	mov	r9, r1
 8012cbe:	e7bd      	b.n	8012c3c <_dtoa_r+0x594>
 8012cc0:	0814fb38 	.word	0x0814fb38
 8012cc4:	0814fb10 	.word	0x0814fb10
 8012cc8:	3ff00000 	.word	0x3ff00000
 8012ccc:	40240000 	.word	0x40240000
 8012cd0:	401c0000 	.word	0x401c0000
 8012cd4:	40140000 	.word	0x40140000
 8012cd8:	3fe00000 	.word	0x3fe00000
 8012cdc:	9d01      	ldr	r5, [sp, #4]
 8012cde:	4656      	mov	r6, sl
 8012ce0:	465f      	mov	r7, fp
 8012ce2:	4642      	mov	r2, r8
 8012ce4:	464b      	mov	r3, r9
 8012ce6:	4630      	mov	r0, r6
 8012ce8:	4639      	mov	r1, r7
 8012cea:	f7f3 fe27 	bl	800693c <__aeabi_ddiv>
 8012cee:	f7f3 ffab 	bl	8006c48 <__aeabi_d2iz>
 8012cf2:	4682      	mov	sl, r0
 8012cf4:	f7f3 fc8e 	bl	8006614 <__aeabi_i2d>
 8012cf8:	4642      	mov	r2, r8
 8012cfa:	464b      	mov	r3, r9
 8012cfc:	f7f3 fcf4 	bl	80066e8 <__aeabi_dmul>
 8012d00:	4602      	mov	r2, r0
 8012d02:	460b      	mov	r3, r1
 8012d04:	4630      	mov	r0, r6
 8012d06:	4639      	mov	r1, r7
 8012d08:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8012d0c:	f7f3 fb34 	bl	8006378 <__aeabi_dsub>
 8012d10:	f805 6b01 	strb.w	r6, [r5], #1
 8012d14:	9e01      	ldr	r6, [sp, #4]
 8012d16:	9f03      	ldr	r7, [sp, #12]
 8012d18:	1bae      	subs	r6, r5, r6
 8012d1a:	42b7      	cmp	r7, r6
 8012d1c:	4602      	mov	r2, r0
 8012d1e:	460b      	mov	r3, r1
 8012d20:	d135      	bne.n	8012d8e <_dtoa_r+0x6e6>
 8012d22:	f7f3 fb2b 	bl	800637c <__adddf3>
 8012d26:	4642      	mov	r2, r8
 8012d28:	464b      	mov	r3, r9
 8012d2a:	4606      	mov	r6, r0
 8012d2c:	460f      	mov	r7, r1
 8012d2e:	f7f3 ff6b 	bl	8006c08 <__aeabi_dcmpgt>
 8012d32:	b9d0      	cbnz	r0, 8012d6a <_dtoa_r+0x6c2>
 8012d34:	4642      	mov	r2, r8
 8012d36:	464b      	mov	r3, r9
 8012d38:	4630      	mov	r0, r6
 8012d3a:	4639      	mov	r1, r7
 8012d3c:	f7f3 ff3c 	bl	8006bb8 <__aeabi_dcmpeq>
 8012d40:	b110      	cbz	r0, 8012d48 <_dtoa_r+0x6a0>
 8012d42:	f01a 0f01 	tst.w	sl, #1
 8012d46:	d110      	bne.n	8012d6a <_dtoa_r+0x6c2>
 8012d48:	4620      	mov	r0, r4
 8012d4a:	ee18 1a10 	vmov	r1, s16
 8012d4e:	f001 f885 	bl	8013e5c <_Bfree>
 8012d52:	2300      	movs	r3, #0
 8012d54:	9800      	ldr	r0, [sp, #0]
 8012d56:	702b      	strb	r3, [r5, #0]
 8012d58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012d5a:	3001      	adds	r0, #1
 8012d5c:	6018      	str	r0, [r3, #0]
 8012d5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	f43f acf1 	beq.w	8012748 <_dtoa_r+0xa0>
 8012d66:	601d      	str	r5, [r3, #0]
 8012d68:	e4ee      	b.n	8012748 <_dtoa_r+0xa0>
 8012d6a:	9f00      	ldr	r7, [sp, #0]
 8012d6c:	462b      	mov	r3, r5
 8012d6e:	461d      	mov	r5, r3
 8012d70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012d74:	2a39      	cmp	r2, #57	; 0x39
 8012d76:	d106      	bne.n	8012d86 <_dtoa_r+0x6de>
 8012d78:	9a01      	ldr	r2, [sp, #4]
 8012d7a:	429a      	cmp	r2, r3
 8012d7c:	d1f7      	bne.n	8012d6e <_dtoa_r+0x6c6>
 8012d7e:	9901      	ldr	r1, [sp, #4]
 8012d80:	2230      	movs	r2, #48	; 0x30
 8012d82:	3701      	adds	r7, #1
 8012d84:	700a      	strb	r2, [r1, #0]
 8012d86:	781a      	ldrb	r2, [r3, #0]
 8012d88:	3201      	adds	r2, #1
 8012d8a:	701a      	strb	r2, [r3, #0]
 8012d8c:	e790      	b.n	8012cb0 <_dtoa_r+0x608>
 8012d8e:	4ba6      	ldr	r3, [pc, #664]	; (8013028 <_dtoa_r+0x980>)
 8012d90:	2200      	movs	r2, #0
 8012d92:	f7f3 fca9 	bl	80066e8 <__aeabi_dmul>
 8012d96:	2200      	movs	r2, #0
 8012d98:	2300      	movs	r3, #0
 8012d9a:	4606      	mov	r6, r0
 8012d9c:	460f      	mov	r7, r1
 8012d9e:	f7f3 ff0b 	bl	8006bb8 <__aeabi_dcmpeq>
 8012da2:	2800      	cmp	r0, #0
 8012da4:	d09d      	beq.n	8012ce2 <_dtoa_r+0x63a>
 8012da6:	e7cf      	b.n	8012d48 <_dtoa_r+0x6a0>
 8012da8:	9a08      	ldr	r2, [sp, #32]
 8012daa:	2a00      	cmp	r2, #0
 8012dac:	f000 80d7 	beq.w	8012f5e <_dtoa_r+0x8b6>
 8012db0:	9a06      	ldr	r2, [sp, #24]
 8012db2:	2a01      	cmp	r2, #1
 8012db4:	f300 80ba 	bgt.w	8012f2c <_dtoa_r+0x884>
 8012db8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012dba:	2a00      	cmp	r2, #0
 8012dbc:	f000 80b2 	beq.w	8012f24 <_dtoa_r+0x87c>
 8012dc0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012dc4:	9e07      	ldr	r6, [sp, #28]
 8012dc6:	9d04      	ldr	r5, [sp, #16]
 8012dc8:	9a04      	ldr	r2, [sp, #16]
 8012dca:	441a      	add	r2, r3
 8012dcc:	9204      	str	r2, [sp, #16]
 8012dce:	9a05      	ldr	r2, [sp, #20]
 8012dd0:	2101      	movs	r1, #1
 8012dd2:	441a      	add	r2, r3
 8012dd4:	4620      	mov	r0, r4
 8012dd6:	9205      	str	r2, [sp, #20]
 8012dd8:	f001 f942 	bl	8014060 <__i2b>
 8012ddc:	4607      	mov	r7, r0
 8012dde:	2d00      	cmp	r5, #0
 8012de0:	dd0c      	ble.n	8012dfc <_dtoa_r+0x754>
 8012de2:	9b05      	ldr	r3, [sp, #20]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	dd09      	ble.n	8012dfc <_dtoa_r+0x754>
 8012de8:	42ab      	cmp	r3, r5
 8012dea:	9a04      	ldr	r2, [sp, #16]
 8012dec:	bfa8      	it	ge
 8012dee:	462b      	movge	r3, r5
 8012df0:	1ad2      	subs	r2, r2, r3
 8012df2:	9204      	str	r2, [sp, #16]
 8012df4:	9a05      	ldr	r2, [sp, #20]
 8012df6:	1aed      	subs	r5, r5, r3
 8012df8:	1ad3      	subs	r3, r2, r3
 8012dfa:	9305      	str	r3, [sp, #20]
 8012dfc:	9b07      	ldr	r3, [sp, #28]
 8012dfe:	b31b      	cbz	r3, 8012e48 <_dtoa_r+0x7a0>
 8012e00:	9b08      	ldr	r3, [sp, #32]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	f000 80af 	beq.w	8012f66 <_dtoa_r+0x8be>
 8012e08:	2e00      	cmp	r6, #0
 8012e0a:	dd13      	ble.n	8012e34 <_dtoa_r+0x78c>
 8012e0c:	4639      	mov	r1, r7
 8012e0e:	4632      	mov	r2, r6
 8012e10:	4620      	mov	r0, r4
 8012e12:	f001 f9e5 	bl	80141e0 <__pow5mult>
 8012e16:	ee18 2a10 	vmov	r2, s16
 8012e1a:	4601      	mov	r1, r0
 8012e1c:	4607      	mov	r7, r0
 8012e1e:	4620      	mov	r0, r4
 8012e20:	f001 f934 	bl	801408c <__multiply>
 8012e24:	ee18 1a10 	vmov	r1, s16
 8012e28:	4680      	mov	r8, r0
 8012e2a:	4620      	mov	r0, r4
 8012e2c:	f001 f816 	bl	8013e5c <_Bfree>
 8012e30:	ee08 8a10 	vmov	s16, r8
 8012e34:	9b07      	ldr	r3, [sp, #28]
 8012e36:	1b9a      	subs	r2, r3, r6
 8012e38:	d006      	beq.n	8012e48 <_dtoa_r+0x7a0>
 8012e3a:	ee18 1a10 	vmov	r1, s16
 8012e3e:	4620      	mov	r0, r4
 8012e40:	f001 f9ce 	bl	80141e0 <__pow5mult>
 8012e44:	ee08 0a10 	vmov	s16, r0
 8012e48:	2101      	movs	r1, #1
 8012e4a:	4620      	mov	r0, r4
 8012e4c:	f001 f908 	bl	8014060 <__i2b>
 8012e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	4606      	mov	r6, r0
 8012e56:	f340 8088 	ble.w	8012f6a <_dtoa_r+0x8c2>
 8012e5a:	461a      	mov	r2, r3
 8012e5c:	4601      	mov	r1, r0
 8012e5e:	4620      	mov	r0, r4
 8012e60:	f001 f9be 	bl	80141e0 <__pow5mult>
 8012e64:	9b06      	ldr	r3, [sp, #24]
 8012e66:	2b01      	cmp	r3, #1
 8012e68:	4606      	mov	r6, r0
 8012e6a:	f340 8081 	ble.w	8012f70 <_dtoa_r+0x8c8>
 8012e6e:	f04f 0800 	mov.w	r8, #0
 8012e72:	6933      	ldr	r3, [r6, #16]
 8012e74:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012e78:	6918      	ldr	r0, [r3, #16]
 8012e7a:	f001 f8a1 	bl	8013fc0 <__hi0bits>
 8012e7e:	f1c0 0020 	rsb	r0, r0, #32
 8012e82:	9b05      	ldr	r3, [sp, #20]
 8012e84:	4418      	add	r0, r3
 8012e86:	f010 001f 	ands.w	r0, r0, #31
 8012e8a:	f000 8092 	beq.w	8012fb2 <_dtoa_r+0x90a>
 8012e8e:	f1c0 0320 	rsb	r3, r0, #32
 8012e92:	2b04      	cmp	r3, #4
 8012e94:	f340 808a 	ble.w	8012fac <_dtoa_r+0x904>
 8012e98:	f1c0 001c 	rsb	r0, r0, #28
 8012e9c:	9b04      	ldr	r3, [sp, #16]
 8012e9e:	4403      	add	r3, r0
 8012ea0:	9304      	str	r3, [sp, #16]
 8012ea2:	9b05      	ldr	r3, [sp, #20]
 8012ea4:	4403      	add	r3, r0
 8012ea6:	4405      	add	r5, r0
 8012ea8:	9305      	str	r3, [sp, #20]
 8012eaa:	9b04      	ldr	r3, [sp, #16]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	dd07      	ble.n	8012ec0 <_dtoa_r+0x818>
 8012eb0:	ee18 1a10 	vmov	r1, s16
 8012eb4:	461a      	mov	r2, r3
 8012eb6:	4620      	mov	r0, r4
 8012eb8:	f001 f9ec 	bl	8014294 <__lshift>
 8012ebc:	ee08 0a10 	vmov	s16, r0
 8012ec0:	9b05      	ldr	r3, [sp, #20]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	dd05      	ble.n	8012ed2 <_dtoa_r+0x82a>
 8012ec6:	4631      	mov	r1, r6
 8012ec8:	461a      	mov	r2, r3
 8012eca:	4620      	mov	r0, r4
 8012ecc:	f001 f9e2 	bl	8014294 <__lshift>
 8012ed0:	4606      	mov	r6, r0
 8012ed2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d06e      	beq.n	8012fb6 <_dtoa_r+0x90e>
 8012ed8:	ee18 0a10 	vmov	r0, s16
 8012edc:	4631      	mov	r1, r6
 8012ede:	f001 fa49 	bl	8014374 <__mcmp>
 8012ee2:	2800      	cmp	r0, #0
 8012ee4:	da67      	bge.n	8012fb6 <_dtoa_r+0x90e>
 8012ee6:	9b00      	ldr	r3, [sp, #0]
 8012ee8:	3b01      	subs	r3, #1
 8012eea:	ee18 1a10 	vmov	r1, s16
 8012eee:	9300      	str	r3, [sp, #0]
 8012ef0:	220a      	movs	r2, #10
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	4620      	mov	r0, r4
 8012ef6:	f000 ffd3 	bl	8013ea0 <__multadd>
 8012efa:	9b08      	ldr	r3, [sp, #32]
 8012efc:	ee08 0a10 	vmov	s16, r0
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	f000 81b1 	beq.w	8013268 <_dtoa_r+0xbc0>
 8012f06:	2300      	movs	r3, #0
 8012f08:	4639      	mov	r1, r7
 8012f0a:	220a      	movs	r2, #10
 8012f0c:	4620      	mov	r0, r4
 8012f0e:	f000 ffc7 	bl	8013ea0 <__multadd>
 8012f12:	9b02      	ldr	r3, [sp, #8]
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	4607      	mov	r7, r0
 8012f18:	f300 808e 	bgt.w	8013038 <_dtoa_r+0x990>
 8012f1c:	9b06      	ldr	r3, [sp, #24]
 8012f1e:	2b02      	cmp	r3, #2
 8012f20:	dc51      	bgt.n	8012fc6 <_dtoa_r+0x91e>
 8012f22:	e089      	b.n	8013038 <_dtoa_r+0x990>
 8012f24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012f26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012f2a:	e74b      	b.n	8012dc4 <_dtoa_r+0x71c>
 8012f2c:	9b03      	ldr	r3, [sp, #12]
 8012f2e:	1e5e      	subs	r6, r3, #1
 8012f30:	9b07      	ldr	r3, [sp, #28]
 8012f32:	42b3      	cmp	r3, r6
 8012f34:	bfbf      	itttt	lt
 8012f36:	9b07      	ldrlt	r3, [sp, #28]
 8012f38:	9607      	strlt	r6, [sp, #28]
 8012f3a:	1af2      	sublt	r2, r6, r3
 8012f3c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8012f3e:	bfb6      	itet	lt
 8012f40:	189b      	addlt	r3, r3, r2
 8012f42:	1b9e      	subge	r6, r3, r6
 8012f44:	930a      	strlt	r3, [sp, #40]	; 0x28
 8012f46:	9b03      	ldr	r3, [sp, #12]
 8012f48:	bfb8      	it	lt
 8012f4a:	2600      	movlt	r6, #0
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	bfb7      	itett	lt
 8012f50:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8012f54:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8012f58:	1a9d      	sublt	r5, r3, r2
 8012f5a:	2300      	movlt	r3, #0
 8012f5c:	e734      	b.n	8012dc8 <_dtoa_r+0x720>
 8012f5e:	9e07      	ldr	r6, [sp, #28]
 8012f60:	9d04      	ldr	r5, [sp, #16]
 8012f62:	9f08      	ldr	r7, [sp, #32]
 8012f64:	e73b      	b.n	8012dde <_dtoa_r+0x736>
 8012f66:	9a07      	ldr	r2, [sp, #28]
 8012f68:	e767      	b.n	8012e3a <_dtoa_r+0x792>
 8012f6a:	9b06      	ldr	r3, [sp, #24]
 8012f6c:	2b01      	cmp	r3, #1
 8012f6e:	dc18      	bgt.n	8012fa2 <_dtoa_r+0x8fa>
 8012f70:	f1ba 0f00 	cmp.w	sl, #0
 8012f74:	d115      	bne.n	8012fa2 <_dtoa_r+0x8fa>
 8012f76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012f7a:	b993      	cbnz	r3, 8012fa2 <_dtoa_r+0x8fa>
 8012f7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012f80:	0d1b      	lsrs	r3, r3, #20
 8012f82:	051b      	lsls	r3, r3, #20
 8012f84:	b183      	cbz	r3, 8012fa8 <_dtoa_r+0x900>
 8012f86:	9b04      	ldr	r3, [sp, #16]
 8012f88:	3301      	adds	r3, #1
 8012f8a:	9304      	str	r3, [sp, #16]
 8012f8c:	9b05      	ldr	r3, [sp, #20]
 8012f8e:	3301      	adds	r3, #1
 8012f90:	9305      	str	r3, [sp, #20]
 8012f92:	f04f 0801 	mov.w	r8, #1
 8012f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	f47f af6a 	bne.w	8012e72 <_dtoa_r+0x7ca>
 8012f9e:	2001      	movs	r0, #1
 8012fa0:	e76f      	b.n	8012e82 <_dtoa_r+0x7da>
 8012fa2:	f04f 0800 	mov.w	r8, #0
 8012fa6:	e7f6      	b.n	8012f96 <_dtoa_r+0x8ee>
 8012fa8:	4698      	mov	r8, r3
 8012faa:	e7f4      	b.n	8012f96 <_dtoa_r+0x8ee>
 8012fac:	f43f af7d 	beq.w	8012eaa <_dtoa_r+0x802>
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	301c      	adds	r0, #28
 8012fb4:	e772      	b.n	8012e9c <_dtoa_r+0x7f4>
 8012fb6:	9b03      	ldr	r3, [sp, #12]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	dc37      	bgt.n	801302c <_dtoa_r+0x984>
 8012fbc:	9b06      	ldr	r3, [sp, #24]
 8012fbe:	2b02      	cmp	r3, #2
 8012fc0:	dd34      	ble.n	801302c <_dtoa_r+0x984>
 8012fc2:	9b03      	ldr	r3, [sp, #12]
 8012fc4:	9302      	str	r3, [sp, #8]
 8012fc6:	9b02      	ldr	r3, [sp, #8]
 8012fc8:	b96b      	cbnz	r3, 8012fe6 <_dtoa_r+0x93e>
 8012fca:	4631      	mov	r1, r6
 8012fcc:	2205      	movs	r2, #5
 8012fce:	4620      	mov	r0, r4
 8012fd0:	f000 ff66 	bl	8013ea0 <__multadd>
 8012fd4:	4601      	mov	r1, r0
 8012fd6:	4606      	mov	r6, r0
 8012fd8:	ee18 0a10 	vmov	r0, s16
 8012fdc:	f001 f9ca 	bl	8014374 <__mcmp>
 8012fe0:	2800      	cmp	r0, #0
 8012fe2:	f73f adbb 	bgt.w	8012b5c <_dtoa_r+0x4b4>
 8012fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012fe8:	9d01      	ldr	r5, [sp, #4]
 8012fea:	43db      	mvns	r3, r3
 8012fec:	9300      	str	r3, [sp, #0]
 8012fee:	f04f 0800 	mov.w	r8, #0
 8012ff2:	4631      	mov	r1, r6
 8012ff4:	4620      	mov	r0, r4
 8012ff6:	f000 ff31 	bl	8013e5c <_Bfree>
 8012ffa:	2f00      	cmp	r7, #0
 8012ffc:	f43f aea4 	beq.w	8012d48 <_dtoa_r+0x6a0>
 8013000:	f1b8 0f00 	cmp.w	r8, #0
 8013004:	d005      	beq.n	8013012 <_dtoa_r+0x96a>
 8013006:	45b8      	cmp	r8, r7
 8013008:	d003      	beq.n	8013012 <_dtoa_r+0x96a>
 801300a:	4641      	mov	r1, r8
 801300c:	4620      	mov	r0, r4
 801300e:	f000 ff25 	bl	8013e5c <_Bfree>
 8013012:	4639      	mov	r1, r7
 8013014:	4620      	mov	r0, r4
 8013016:	f000 ff21 	bl	8013e5c <_Bfree>
 801301a:	e695      	b.n	8012d48 <_dtoa_r+0x6a0>
 801301c:	2600      	movs	r6, #0
 801301e:	4637      	mov	r7, r6
 8013020:	e7e1      	b.n	8012fe6 <_dtoa_r+0x93e>
 8013022:	9700      	str	r7, [sp, #0]
 8013024:	4637      	mov	r7, r6
 8013026:	e599      	b.n	8012b5c <_dtoa_r+0x4b4>
 8013028:	40240000 	.word	0x40240000
 801302c:	9b08      	ldr	r3, [sp, #32]
 801302e:	2b00      	cmp	r3, #0
 8013030:	f000 80ca 	beq.w	80131c8 <_dtoa_r+0xb20>
 8013034:	9b03      	ldr	r3, [sp, #12]
 8013036:	9302      	str	r3, [sp, #8]
 8013038:	2d00      	cmp	r5, #0
 801303a:	dd05      	ble.n	8013048 <_dtoa_r+0x9a0>
 801303c:	4639      	mov	r1, r7
 801303e:	462a      	mov	r2, r5
 8013040:	4620      	mov	r0, r4
 8013042:	f001 f927 	bl	8014294 <__lshift>
 8013046:	4607      	mov	r7, r0
 8013048:	f1b8 0f00 	cmp.w	r8, #0
 801304c:	d05b      	beq.n	8013106 <_dtoa_r+0xa5e>
 801304e:	6879      	ldr	r1, [r7, #4]
 8013050:	4620      	mov	r0, r4
 8013052:	f000 fec3 	bl	8013ddc <_Balloc>
 8013056:	4605      	mov	r5, r0
 8013058:	b928      	cbnz	r0, 8013066 <_dtoa_r+0x9be>
 801305a:	4b87      	ldr	r3, [pc, #540]	; (8013278 <_dtoa_r+0xbd0>)
 801305c:	4602      	mov	r2, r0
 801305e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013062:	f7ff bb3b 	b.w	80126dc <_dtoa_r+0x34>
 8013066:	693a      	ldr	r2, [r7, #16]
 8013068:	3202      	adds	r2, #2
 801306a:	0092      	lsls	r2, r2, #2
 801306c:	f107 010c 	add.w	r1, r7, #12
 8013070:	300c      	adds	r0, #12
 8013072:	f7fd fbdd 	bl	8010830 <memcpy>
 8013076:	2201      	movs	r2, #1
 8013078:	4629      	mov	r1, r5
 801307a:	4620      	mov	r0, r4
 801307c:	f001 f90a 	bl	8014294 <__lshift>
 8013080:	9b01      	ldr	r3, [sp, #4]
 8013082:	f103 0901 	add.w	r9, r3, #1
 8013086:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801308a:	4413      	add	r3, r2
 801308c:	9305      	str	r3, [sp, #20]
 801308e:	f00a 0301 	and.w	r3, sl, #1
 8013092:	46b8      	mov	r8, r7
 8013094:	9304      	str	r3, [sp, #16]
 8013096:	4607      	mov	r7, r0
 8013098:	4631      	mov	r1, r6
 801309a:	ee18 0a10 	vmov	r0, s16
 801309e:	f7ff fa77 	bl	8012590 <quorem>
 80130a2:	4641      	mov	r1, r8
 80130a4:	9002      	str	r0, [sp, #8]
 80130a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80130aa:	ee18 0a10 	vmov	r0, s16
 80130ae:	f001 f961 	bl	8014374 <__mcmp>
 80130b2:	463a      	mov	r2, r7
 80130b4:	9003      	str	r0, [sp, #12]
 80130b6:	4631      	mov	r1, r6
 80130b8:	4620      	mov	r0, r4
 80130ba:	f001 f977 	bl	80143ac <__mdiff>
 80130be:	68c2      	ldr	r2, [r0, #12]
 80130c0:	f109 3bff 	add.w	fp, r9, #4294967295
 80130c4:	4605      	mov	r5, r0
 80130c6:	bb02      	cbnz	r2, 801310a <_dtoa_r+0xa62>
 80130c8:	4601      	mov	r1, r0
 80130ca:	ee18 0a10 	vmov	r0, s16
 80130ce:	f001 f951 	bl	8014374 <__mcmp>
 80130d2:	4602      	mov	r2, r0
 80130d4:	4629      	mov	r1, r5
 80130d6:	4620      	mov	r0, r4
 80130d8:	9207      	str	r2, [sp, #28]
 80130da:	f000 febf 	bl	8013e5c <_Bfree>
 80130de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80130e2:	ea43 0102 	orr.w	r1, r3, r2
 80130e6:	9b04      	ldr	r3, [sp, #16]
 80130e8:	430b      	orrs	r3, r1
 80130ea:	464d      	mov	r5, r9
 80130ec:	d10f      	bne.n	801310e <_dtoa_r+0xa66>
 80130ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80130f2:	d02a      	beq.n	801314a <_dtoa_r+0xaa2>
 80130f4:	9b03      	ldr	r3, [sp, #12]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	dd02      	ble.n	8013100 <_dtoa_r+0xa58>
 80130fa:	9b02      	ldr	r3, [sp, #8]
 80130fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8013100:	f88b a000 	strb.w	sl, [fp]
 8013104:	e775      	b.n	8012ff2 <_dtoa_r+0x94a>
 8013106:	4638      	mov	r0, r7
 8013108:	e7ba      	b.n	8013080 <_dtoa_r+0x9d8>
 801310a:	2201      	movs	r2, #1
 801310c:	e7e2      	b.n	80130d4 <_dtoa_r+0xa2c>
 801310e:	9b03      	ldr	r3, [sp, #12]
 8013110:	2b00      	cmp	r3, #0
 8013112:	db04      	blt.n	801311e <_dtoa_r+0xa76>
 8013114:	9906      	ldr	r1, [sp, #24]
 8013116:	430b      	orrs	r3, r1
 8013118:	9904      	ldr	r1, [sp, #16]
 801311a:	430b      	orrs	r3, r1
 801311c:	d122      	bne.n	8013164 <_dtoa_r+0xabc>
 801311e:	2a00      	cmp	r2, #0
 8013120:	ddee      	ble.n	8013100 <_dtoa_r+0xa58>
 8013122:	ee18 1a10 	vmov	r1, s16
 8013126:	2201      	movs	r2, #1
 8013128:	4620      	mov	r0, r4
 801312a:	f001 f8b3 	bl	8014294 <__lshift>
 801312e:	4631      	mov	r1, r6
 8013130:	ee08 0a10 	vmov	s16, r0
 8013134:	f001 f91e 	bl	8014374 <__mcmp>
 8013138:	2800      	cmp	r0, #0
 801313a:	dc03      	bgt.n	8013144 <_dtoa_r+0xa9c>
 801313c:	d1e0      	bne.n	8013100 <_dtoa_r+0xa58>
 801313e:	f01a 0f01 	tst.w	sl, #1
 8013142:	d0dd      	beq.n	8013100 <_dtoa_r+0xa58>
 8013144:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013148:	d1d7      	bne.n	80130fa <_dtoa_r+0xa52>
 801314a:	2339      	movs	r3, #57	; 0x39
 801314c:	f88b 3000 	strb.w	r3, [fp]
 8013150:	462b      	mov	r3, r5
 8013152:	461d      	mov	r5, r3
 8013154:	3b01      	subs	r3, #1
 8013156:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801315a:	2a39      	cmp	r2, #57	; 0x39
 801315c:	d071      	beq.n	8013242 <_dtoa_r+0xb9a>
 801315e:	3201      	adds	r2, #1
 8013160:	701a      	strb	r2, [r3, #0]
 8013162:	e746      	b.n	8012ff2 <_dtoa_r+0x94a>
 8013164:	2a00      	cmp	r2, #0
 8013166:	dd07      	ble.n	8013178 <_dtoa_r+0xad0>
 8013168:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801316c:	d0ed      	beq.n	801314a <_dtoa_r+0xaa2>
 801316e:	f10a 0301 	add.w	r3, sl, #1
 8013172:	f88b 3000 	strb.w	r3, [fp]
 8013176:	e73c      	b.n	8012ff2 <_dtoa_r+0x94a>
 8013178:	9b05      	ldr	r3, [sp, #20]
 801317a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801317e:	4599      	cmp	r9, r3
 8013180:	d047      	beq.n	8013212 <_dtoa_r+0xb6a>
 8013182:	ee18 1a10 	vmov	r1, s16
 8013186:	2300      	movs	r3, #0
 8013188:	220a      	movs	r2, #10
 801318a:	4620      	mov	r0, r4
 801318c:	f000 fe88 	bl	8013ea0 <__multadd>
 8013190:	45b8      	cmp	r8, r7
 8013192:	ee08 0a10 	vmov	s16, r0
 8013196:	f04f 0300 	mov.w	r3, #0
 801319a:	f04f 020a 	mov.w	r2, #10
 801319e:	4641      	mov	r1, r8
 80131a0:	4620      	mov	r0, r4
 80131a2:	d106      	bne.n	80131b2 <_dtoa_r+0xb0a>
 80131a4:	f000 fe7c 	bl	8013ea0 <__multadd>
 80131a8:	4680      	mov	r8, r0
 80131aa:	4607      	mov	r7, r0
 80131ac:	f109 0901 	add.w	r9, r9, #1
 80131b0:	e772      	b.n	8013098 <_dtoa_r+0x9f0>
 80131b2:	f000 fe75 	bl	8013ea0 <__multadd>
 80131b6:	4639      	mov	r1, r7
 80131b8:	4680      	mov	r8, r0
 80131ba:	2300      	movs	r3, #0
 80131bc:	220a      	movs	r2, #10
 80131be:	4620      	mov	r0, r4
 80131c0:	f000 fe6e 	bl	8013ea0 <__multadd>
 80131c4:	4607      	mov	r7, r0
 80131c6:	e7f1      	b.n	80131ac <_dtoa_r+0xb04>
 80131c8:	9b03      	ldr	r3, [sp, #12]
 80131ca:	9302      	str	r3, [sp, #8]
 80131cc:	9d01      	ldr	r5, [sp, #4]
 80131ce:	ee18 0a10 	vmov	r0, s16
 80131d2:	4631      	mov	r1, r6
 80131d4:	f7ff f9dc 	bl	8012590 <quorem>
 80131d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80131dc:	9b01      	ldr	r3, [sp, #4]
 80131de:	f805 ab01 	strb.w	sl, [r5], #1
 80131e2:	1aea      	subs	r2, r5, r3
 80131e4:	9b02      	ldr	r3, [sp, #8]
 80131e6:	4293      	cmp	r3, r2
 80131e8:	dd09      	ble.n	80131fe <_dtoa_r+0xb56>
 80131ea:	ee18 1a10 	vmov	r1, s16
 80131ee:	2300      	movs	r3, #0
 80131f0:	220a      	movs	r2, #10
 80131f2:	4620      	mov	r0, r4
 80131f4:	f000 fe54 	bl	8013ea0 <__multadd>
 80131f8:	ee08 0a10 	vmov	s16, r0
 80131fc:	e7e7      	b.n	80131ce <_dtoa_r+0xb26>
 80131fe:	9b02      	ldr	r3, [sp, #8]
 8013200:	2b00      	cmp	r3, #0
 8013202:	bfc8      	it	gt
 8013204:	461d      	movgt	r5, r3
 8013206:	9b01      	ldr	r3, [sp, #4]
 8013208:	bfd8      	it	le
 801320a:	2501      	movle	r5, #1
 801320c:	441d      	add	r5, r3
 801320e:	f04f 0800 	mov.w	r8, #0
 8013212:	ee18 1a10 	vmov	r1, s16
 8013216:	2201      	movs	r2, #1
 8013218:	4620      	mov	r0, r4
 801321a:	f001 f83b 	bl	8014294 <__lshift>
 801321e:	4631      	mov	r1, r6
 8013220:	ee08 0a10 	vmov	s16, r0
 8013224:	f001 f8a6 	bl	8014374 <__mcmp>
 8013228:	2800      	cmp	r0, #0
 801322a:	dc91      	bgt.n	8013150 <_dtoa_r+0xaa8>
 801322c:	d102      	bne.n	8013234 <_dtoa_r+0xb8c>
 801322e:	f01a 0f01 	tst.w	sl, #1
 8013232:	d18d      	bne.n	8013150 <_dtoa_r+0xaa8>
 8013234:	462b      	mov	r3, r5
 8013236:	461d      	mov	r5, r3
 8013238:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801323c:	2a30      	cmp	r2, #48	; 0x30
 801323e:	d0fa      	beq.n	8013236 <_dtoa_r+0xb8e>
 8013240:	e6d7      	b.n	8012ff2 <_dtoa_r+0x94a>
 8013242:	9a01      	ldr	r2, [sp, #4]
 8013244:	429a      	cmp	r2, r3
 8013246:	d184      	bne.n	8013152 <_dtoa_r+0xaaa>
 8013248:	9b00      	ldr	r3, [sp, #0]
 801324a:	3301      	adds	r3, #1
 801324c:	9300      	str	r3, [sp, #0]
 801324e:	2331      	movs	r3, #49	; 0x31
 8013250:	7013      	strb	r3, [r2, #0]
 8013252:	e6ce      	b.n	8012ff2 <_dtoa_r+0x94a>
 8013254:	4b09      	ldr	r3, [pc, #36]	; (801327c <_dtoa_r+0xbd4>)
 8013256:	f7ff ba95 	b.w	8012784 <_dtoa_r+0xdc>
 801325a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801325c:	2b00      	cmp	r3, #0
 801325e:	f47f aa6e 	bne.w	801273e <_dtoa_r+0x96>
 8013262:	4b07      	ldr	r3, [pc, #28]	; (8013280 <_dtoa_r+0xbd8>)
 8013264:	f7ff ba8e 	b.w	8012784 <_dtoa_r+0xdc>
 8013268:	9b02      	ldr	r3, [sp, #8]
 801326a:	2b00      	cmp	r3, #0
 801326c:	dcae      	bgt.n	80131cc <_dtoa_r+0xb24>
 801326e:	9b06      	ldr	r3, [sp, #24]
 8013270:	2b02      	cmp	r3, #2
 8013272:	f73f aea8 	bgt.w	8012fc6 <_dtoa_r+0x91e>
 8013276:	e7a9      	b.n	80131cc <_dtoa_r+0xb24>
 8013278:	0814f9c0 	.word	0x0814f9c0
 801327c:	0814f7c0 	.word	0x0814f7c0
 8013280:	0814f941 	.word	0x0814f941

08013284 <__sflush_r>:
 8013284:	898a      	ldrh	r2, [r1, #12]
 8013286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801328a:	4605      	mov	r5, r0
 801328c:	0710      	lsls	r0, r2, #28
 801328e:	460c      	mov	r4, r1
 8013290:	d458      	bmi.n	8013344 <__sflush_r+0xc0>
 8013292:	684b      	ldr	r3, [r1, #4]
 8013294:	2b00      	cmp	r3, #0
 8013296:	dc05      	bgt.n	80132a4 <__sflush_r+0x20>
 8013298:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801329a:	2b00      	cmp	r3, #0
 801329c:	dc02      	bgt.n	80132a4 <__sflush_r+0x20>
 801329e:	2000      	movs	r0, #0
 80132a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80132a6:	2e00      	cmp	r6, #0
 80132a8:	d0f9      	beq.n	801329e <__sflush_r+0x1a>
 80132aa:	2300      	movs	r3, #0
 80132ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80132b0:	682f      	ldr	r7, [r5, #0]
 80132b2:	602b      	str	r3, [r5, #0]
 80132b4:	d032      	beq.n	801331c <__sflush_r+0x98>
 80132b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80132b8:	89a3      	ldrh	r3, [r4, #12]
 80132ba:	075a      	lsls	r2, r3, #29
 80132bc:	d505      	bpl.n	80132ca <__sflush_r+0x46>
 80132be:	6863      	ldr	r3, [r4, #4]
 80132c0:	1ac0      	subs	r0, r0, r3
 80132c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80132c4:	b10b      	cbz	r3, 80132ca <__sflush_r+0x46>
 80132c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80132c8:	1ac0      	subs	r0, r0, r3
 80132ca:	2300      	movs	r3, #0
 80132cc:	4602      	mov	r2, r0
 80132ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80132d0:	6a21      	ldr	r1, [r4, #32]
 80132d2:	4628      	mov	r0, r5
 80132d4:	47b0      	blx	r6
 80132d6:	1c43      	adds	r3, r0, #1
 80132d8:	89a3      	ldrh	r3, [r4, #12]
 80132da:	d106      	bne.n	80132ea <__sflush_r+0x66>
 80132dc:	6829      	ldr	r1, [r5, #0]
 80132de:	291d      	cmp	r1, #29
 80132e0:	d82c      	bhi.n	801333c <__sflush_r+0xb8>
 80132e2:	4a2a      	ldr	r2, [pc, #168]	; (801338c <__sflush_r+0x108>)
 80132e4:	40ca      	lsrs	r2, r1
 80132e6:	07d6      	lsls	r6, r2, #31
 80132e8:	d528      	bpl.n	801333c <__sflush_r+0xb8>
 80132ea:	2200      	movs	r2, #0
 80132ec:	6062      	str	r2, [r4, #4]
 80132ee:	04d9      	lsls	r1, r3, #19
 80132f0:	6922      	ldr	r2, [r4, #16]
 80132f2:	6022      	str	r2, [r4, #0]
 80132f4:	d504      	bpl.n	8013300 <__sflush_r+0x7c>
 80132f6:	1c42      	adds	r2, r0, #1
 80132f8:	d101      	bne.n	80132fe <__sflush_r+0x7a>
 80132fa:	682b      	ldr	r3, [r5, #0]
 80132fc:	b903      	cbnz	r3, 8013300 <__sflush_r+0x7c>
 80132fe:	6560      	str	r0, [r4, #84]	; 0x54
 8013300:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013302:	602f      	str	r7, [r5, #0]
 8013304:	2900      	cmp	r1, #0
 8013306:	d0ca      	beq.n	801329e <__sflush_r+0x1a>
 8013308:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801330c:	4299      	cmp	r1, r3
 801330e:	d002      	beq.n	8013316 <__sflush_r+0x92>
 8013310:	4628      	mov	r0, r5
 8013312:	f001 fa3b 	bl	801478c <_free_r>
 8013316:	2000      	movs	r0, #0
 8013318:	6360      	str	r0, [r4, #52]	; 0x34
 801331a:	e7c1      	b.n	80132a0 <__sflush_r+0x1c>
 801331c:	6a21      	ldr	r1, [r4, #32]
 801331e:	2301      	movs	r3, #1
 8013320:	4628      	mov	r0, r5
 8013322:	47b0      	blx	r6
 8013324:	1c41      	adds	r1, r0, #1
 8013326:	d1c7      	bne.n	80132b8 <__sflush_r+0x34>
 8013328:	682b      	ldr	r3, [r5, #0]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d0c4      	beq.n	80132b8 <__sflush_r+0x34>
 801332e:	2b1d      	cmp	r3, #29
 8013330:	d001      	beq.n	8013336 <__sflush_r+0xb2>
 8013332:	2b16      	cmp	r3, #22
 8013334:	d101      	bne.n	801333a <__sflush_r+0xb6>
 8013336:	602f      	str	r7, [r5, #0]
 8013338:	e7b1      	b.n	801329e <__sflush_r+0x1a>
 801333a:	89a3      	ldrh	r3, [r4, #12]
 801333c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013340:	81a3      	strh	r3, [r4, #12]
 8013342:	e7ad      	b.n	80132a0 <__sflush_r+0x1c>
 8013344:	690f      	ldr	r7, [r1, #16]
 8013346:	2f00      	cmp	r7, #0
 8013348:	d0a9      	beq.n	801329e <__sflush_r+0x1a>
 801334a:	0793      	lsls	r3, r2, #30
 801334c:	680e      	ldr	r6, [r1, #0]
 801334e:	bf08      	it	eq
 8013350:	694b      	ldreq	r3, [r1, #20]
 8013352:	600f      	str	r7, [r1, #0]
 8013354:	bf18      	it	ne
 8013356:	2300      	movne	r3, #0
 8013358:	eba6 0807 	sub.w	r8, r6, r7
 801335c:	608b      	str	r3, [r1, #8]
 801335e:	f1b8 0f00 	cmp.w	r8, #0
 8013362:	dd9c      	ble.n	801329e <__sflush_r+0x1a>
 8013364:	6a21      	ldr	r1, [r4, #32]
 8013366:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013368:	4643      	mov	r3, r8
 801336a:	463a      	mov	r2, r7
 801336c:	4628      	mov	r0, r5
 801336e:	47b0      	blx	r6
 8013370:	2800      	cmp	r0, #0
 8013372:	dc06      	bgt.n	8013382 <__sflush_r+0xfe>
 8013374:	89a3      	ldrh	r3, [r4, #12]
 8013376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801337a:	81a3      	strh	r3, [r4, #12]
 801337c:	f04f 30ff 	mov.w	r0, #4294967295
 8013380:	e78e      	b.n	80132a0 <__sflush_r+0x1c>
 8013382:	4407      	add	r7, r0
 8013384:	eba8 0800 	sub.w	r8, r8, r0
 8013388:	e7e9      	b.n	801335e <__sflush_r+0xda>
 801338a:	bf00      	nop
 801338c:	20400001 	.word	0x20400001

08013390 <_fflush_r>:
 8013390:	b538      	push	{r3, r4, r5, lr}
 8013392:	690b      	ldr	r3, [r1, #16]
 8013394:	4605      	mov	r5, r0
 8013396:	460c      	mov	r4, r1
 8013398:	b913      	cbnz	r3, 80133a0 <_fflush_r+0x10>
 801339a:	2500      	movs	r5, #0
 801339c:	4628      	mov	r0, r5
 801339e:	bd38      	pop	{r3, r4, r5, pc}
 80133a0:	b118      	cbz	r0, 80133aa <_fflush_r+0x1a>
 80133a2:	6983      	ldr	r3, [r0, #24]
 80133a4:	b90b      	cbnz	r3, 80133aa <_fflush_r+0x1a>
 80133a6:	f000 f887 	bl	80134b8 <__sinit>
 80133aa:	4b14      	ldr	r3, [pc, #80]	; (80133fc <_fflush_r+0x6c>)
 80133ac:	429c      	cmp	r4, r3
 80133ae:	d11b      	bne.n	80133e8 <_fflush_r+0x58>
 80133b0:	686c      	ldr	r4, [r5, #4]
 80133b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d0ef      	beq.n	801339a <_fflush_r+0xa>
 80133ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80133bc:	07d0      	lsls	r0, r2, #31
 80133be:	d404      	bmi.n	80133ca <_fflush_r+0x3a>
 80133c0:	0599      	lsls	r1, r3, #22
 80133c2:	d402      	bmi.n	80133ca <_fflush_r+0x3a>
 80133c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80133c6:	f000 fc88 	bl	8013cda <__retarget_lock_acquire_recursive>
 80133ca:	4628      	mov	r0, r5
 80133cc:	4621      	mov	r1, r4
 80133ce:	f7ff ff59 	bl	8013284 <__sflush_r>
 80133d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80133d4:	07da      	lsls	r2, r3, #31
 80133d6:	4605      	mov	r5, r0
 80133d8:	d4e0      	bmi.n	801339c <_fflush_r+0xc>
 80133da:	89a3      	ldrh	r3, [r4, #12]
 80133dc:	059b      	lsls	r3, r3, #22
 80133de:	d4dd      	bmi.n	801339c <_fflush_r+0xc>
 80133e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80133e2:	f000 fc7b 	bl	8013cdc <__retarget_lock_release_recursive>
 80133e6:	e7d9      	b.n	801339c <_fflush_r+0xc>
 80133e8:	4b05      	ldr	r3, [pc, #20]	; (8013400 <_fflush_r+0x70>)
 80133ea:	429c      	cmp	r4, r3
 80133ec:	d101      	bne.n	80133f2 <_fflush_r+0x62>
 80133ee:	68ac      	ldr	r4, [r5, #8]
 80133f0:	e7df      	b.n	80133b2 <_fflush_r+0x22>
 80133f2:	4b04      	ldr	r3, [pc, #16]	; (8013404 <_fflush_r+0x74>)
 80133f4:	429c      	cmp	r4, r3
 80133f6:	bf08      	it	eq
 80133f8:	68ec      	ldreq	r4, [r5, #12]
 80133fa:	e7da      	b.n	80133b2 <_fflush_r+0x22>
 80133fc:	0814f9f4 	.word	0x0814f9f4
 8013400:	0814fa14 	.word	0x0814fa14
 8013404:	0814f9d4 	.word	0x0814f9d4

08013408 <std>:
 8013408:	2300      	movs	r3, #0
 801340a:	b510      	push	{r4, lr}
 801340c:	4604      	mov	r4, r0
 801340e:	e9c0 3300 	strd	r3, r3, [r0]
 8013412:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013416:	6083      	str	r3, [r0, #8]
 8013418:	8181      	strh	r1, [r0, #12]
 801341a:	6643      	str	r3, [r0, #100]	; 0x64
 801341c:	81c2      	strh	r2, [r0, #14]
 801341e:	6183      	str	r3, [r0, #24]
 8013420:	4619      	mov	r1, r3
 8013422:	2208      	movs	r2, #8
 8013424:	305c      	adds	r0, #92	; 0x5c
 8013426:	f7fd fa11 	bl	801084c <memset>
 801342a:	4b05      	ldr	r3, [pc, #20]	; (8013440 <std+0x38>)
 801342c:	6263      	str	r3, [r4, #36]	; 0x24
 801342e:	4b05      	ldr	r3, [pc, #20]	; (8013444 <std+0x3c>)
 8013430:	62a3      	str	r3, [r4, #40]	; 0x28
 8013432:	4b05      	ldr	r3, [pc, #20]	; (8013448 <std+0x40>)
 8013434:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013436:	4b05      	ldr	r3, [pc, #20]	; (801344c <std+0x44>)
 8013438:	6224      	str	r4, [r4, #32]
 801343a:	6323      	str	r3, [r4, #48]	; 0x30
 801343c:	bd10      	pop	{r4, pc}
 801343e:	bf00      	nop
 8013440:	08014ee9 	.word	0x08014ee9
 8013444:	08014f0b 	.word	0x08014f0b
 8013448:	08014f43 	.word	0x08014f43
 801344c:	08014f67 	.word	0x08014f67

08013450 <_cleanup_r>:
 8013450:	4901      	ldr	r1, [pc, #4]	; (8013458 <_cleanup_r+0x8>)
 8013452:	f000 b8af 	b.w	80135b4 <_fwalk_reent>
 8013456:	bf00      	nop
 8013458:	08013391 	.word	0x08013391

0801345c <__sfmoreglue>:
 801345c:	b570      	push	{r4, r5, r6, lr}
 801345e:	2268      	movs	r2, #104	; 0x68
 8013460:	1e4d      	subs	r5, r1, #1
 8013462:	4355      	muls	r5, r2
 8013464:	460e      	mov	r6, r1
 8013466:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801346a:	f001 f9fb 	bl	8014864 <_malloc_r>
 801346e:	4604      	mov	r4, r0
 8013470:	b140      	cbz	r0, 8013484 <__sfmoreglue+0x28>
 8013472:	2100      	movs	r1, #0
 8013474:	e9c0 1600 	strd	r1, r6, [r0]
 8013478:	300c      	adds	r0, #12
 801347a:	60a0      	str	r0, [r4, #8]
 801347c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013480:	f7fd f9e4 	bl	801084c <memset>
 8013484:	4620      	mov	r0, r4
 8013486:	bd70      	pop	{r4, r5, r6, pc}

08013488 <__sfp_lock_acquire>:
 8013488:	4801      	ldr	r0, [pc, #4]	; (8013490 <__sfp_lock_acquire+0x8>)
 801348a:	f000 bc26 	b.w	8013cda <__retarget_lock_acquire_recursive>
 801348e:	bf00      	nop
 8013490:	20019fdd 	.word	0x20019fdd

08013494 <__sfp_lock_release>:
 8013494:	4801      	ldr	r0, [pc, #4]	; (801349c <__sfp_lock_release+0x8>)
 8013496:	f000 bc21 	b.w	8013cdc <__retarget_lock_release_recursive>
 801349a:	bf00      	nop
 801349c:	20019fdd 	.word	0x20019fdd

080134a0 <__sinit_lock_acquire>:
 80134a0:	4801      	ldr	r0, [pc, #4]	; (80134a8 <__sinit_lock_acquire+0x8>)
 80134a2:	f000 bc1a 	b.w	8013cda <__retarget_lock_acquire_recursive>
 80134a6:	bf00      	nop
 80134a8:	20019fde 	.word	0x20019fde

080134ac <__sinit_lock_release>:
 80134ac:	4801      	ldr	r0, [pc, #4]	; (80134b4 <__sinit_lock_release+0x8>)
 80134ae:	f000 bc15 	b.w	8013cdc <__retarget_lock_release_recursive>
 80134b2:	bf00      	nop
 80134b4:	20019fde 	.word	0x20019fde

080134b8 <__sinit>:
 80134b8:	b510      	push	{r4, lr}
 80134ba:	4604      	mov	r4, r0
 80134bc:	f7ff fff0 	bl	80134a0 <__sinit_lock_acquire>
 80134c0:	69a3      	ldr	r3, [r4, #24]
 80134c2:	b11b      	cbz	r3, 80134cc <__sinit+0x14>
 80134c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80134c8:	f7ff bff0 	b.w	80134ac <__sinit_lock_release>
 80134cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80134d0:	6523      	str	r3, [r4, #80]	; 0x50
 80134d2:	4b13      	ldr	r3, [pc, #76]	; (8013520 <__sinit+0x68>)
 80134d4:	4a13      	ldr	r2, [pc, #76]	; (8013524 <__sinit+0x6c>)
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80134da:	42a3      	cmp	r3, r4
 80134dc:	bf04      	itt	eq
 80134de:	2301      	moveq	r3, #1
 80134e0:	61a3      	streq	r3, [r4, #24]
 80134e2:	4620      	mov	r0, r4
 80134e4:	f000 f820 	bl	8013528 <__sfp>
 80134e8:	6060      	str	r0, [r4, #4]
 80134ea:	4620      	mov	r0, r4
 80134ec:	f000 f81c 	bl	8013528 <__sfp>
 80134f0:	60a0      	str	r0, [r4, #8]
 80134f2:	4620      	mov	r0, r4
 80134f4:	f000 f818 	bl	8013528 <__sfp>
 80134f8:	2200      	movs	r2, #0
 80134fa:	60e0      	str	r0, [r4, #12]
 80134fc:	2104      	movs	r1, #4
 80134fe:	6860      	ldr	r0, [r4, #4]
 8013500:	f7ff ff82 	bl	8013408 <std>
 8013504:	68a0      	ldr	r0, [r4, #8]
 8013506:	2201      	movs	r2, #1
 8013508:	2109      	movs	r1, #9
 801350a:	f7ff ff7d 	bl	8013408 <std>
 801350e:	68e0      	ldr	r0, [r4, #12]
 8013510:	2202      	movs	r2, #2
 8013512:	2112      	movs	r1, #18
 8013514:	f7ff ff78 	bl	8013408 <std>
 8013518:	2301      	movs	r3, #1
 801351a:	61a3      	str	r3, [r4, #24]
 801351c:	e7d2      	b.n	80134c4 <__sinit+0xc>
 801351e:	bf00      	nop
 8013520:	0814f7ac 	.word	0x0814f7ac
 8013524:	08013451 	.word	0x08013451

08013528 <__sfp>:
 8013528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801352a:	4607      	mov	r7, r0
 801352c:	f7ff ffac 	bl	8013488 <__sfp_lock_acquire>
 8013530:	4b1e      	ldr	r3, [pc, #120]	; (80135ac <__sfp+0x84>)
 8013532:	681e      	ldr	r6, [r3, #0]
 8013534:	69b3      	ldr	r3, [r6, #24]
 8013536:	b913      	cbnz	r3, 801353e <__sfp+0x16>
 8013538:	4630      	mov	r0, r6
 801353a:	f7ff ffbd 	bl	80134b8 <__sinit>
 801353e:	3648      	adds	r6, #72	; 0x48
 8013540:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013544:	3b01      	subs	r3, #1
 8013546:	d503      	bpl.n	8013550 <__sfp+0x28>
 8013548:	6833      	ldr	r3, [r6, #0]
 801354a:	b30b      	cbz	r3, 8013590 <__sfp+0x68>
 801354c:	6836      	ldr	r6, [r6, #0]
 801354e:	e7f7      	b.n	8013540 <__sfp+0x18>
 8013550:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013554:	b9d5      	cbnz	r5, 801358c <__sfp+0x64>
 8013556:	4b16      	ldr	r3, [pc, #88]	; (80135b0 <__sfp+0x88>)
 8013558:	60e3      	str	r3, [r4, #12]
 801355a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801355e:	6665      	str	r5, [r4, #100]	; 0x64
 8013560:	f000 fbba 	bl	8013cd8 <__retarget_lock_init_recursive>
 8013564:	f7ff ff96 	bl	8013494 <__sfp_lock_release>
 8013568:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801356c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013570:	6025      	str	r5, [r4, #0]
 8013572:	61a5      	str	r5, [r4, #24]
 8013574:	2208      	movs	r2, #8
 8013576:	4629      	mov	r1, r5
 8013578:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801357c:	f7fd f966 	bl	801084c <memset>
 8013580:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013584:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013588:	4620      	mov	r0, r4
 801358a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801358c:	3468      	adds	r4, #104	; 0x68
 801358e:	e7d9      	b.n	8013544 <__sfp+0x1c>
 8013590:	2104      	movs	r1, #4
 8013592:	4638      	mov	r0, r7
 8013594:	f7ff ff62 	bl	801345c <__sfmoreglue>
 8013598:	4604      	mov	r4, r0
 801359a:	6030      	str	r0, [r6, #0]
 801359c:	2800      	cmp	r0, #0
 801359e:	d1d5      	bne.n	801354c <__sfp+0x24>
 80135a0:	f7ff ff78 	bl	8013494 <__sfp_lock_release>
 80135a4:	230c      	movs	r3, #12
 80135a6:	603b      	str	r3, [r7, #0]
 80135a8:	e7ee      	b.n	8013588 <__sfp+0x60>
 80135aa:	bf00      	nop
 80135ac:	0814f7ac 	.word	0x0814f7ac
 80135b0:	ffff0001 	.word	0xffff0001

080135b4 <_fwalk_reent>:
 80135b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80135b8:	4606      	mov	r6, r0
 80135ba:	4688      	mov	r8, r1
 80135bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80135c0:	2700      	movs	r7, #0
 80135c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80135c6:	f1b9 0901 	subs.w	r9, r9, #1
 80135ca:	d505      	bpl.n	80135d8 <_fwalk_reent+0x24>
 80135cc:	6824      	ldr	r4, [r4, #0]
 80135ce:	2c00      	cmp	r4, #0
 80135d0:	d1f7      	bne.n	80135c2 <_fwalk_reent+0xe>
 80135d2:	4638      	mov	r0, r7
 80135d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135d8:	89ab      	ldrh	r3, [r5, #12]
 80135da:	2b01      	cmp	r3, #1
 80135dc:	d907      	bls.n	80135ee <_fwalk_reent+0x3a>
 80135de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80135e2:	3301      	adds	r3, #1
 80135e4:	d003      	beq.n	80135ee <_fwalk_reent+0x3a>
 80135e6:	4629      	mov	r1, r5
 80135e8:	4630      	mov	r0, r6
 80135ea:	47c0      	blx	r8
 80135ec:	4307      	orrs	r7, r0
 80135ee:	3568      	adds	r5, #104	; 0x68
 80135f0:	e7e9      	b.n	80135c6 <_fwalk_reent+0x12>

080135f2 <rshift>:
 80135f2:	6903      	ldr	r3, [r0, #16]
 80135f4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80135f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80135fc:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013600:	f100 0414 	add.w	r4, r0, #20
 8013604:	dd45      	ble.n	8013692 <rshift+0xa0>
 8013606:	f011 011f 	ands.w	r1, r1, #31
 801360a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801360e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013612:	d10c      	bne.n	801362e <rshift+0x3c>
 8013614:	f100 0710 	add.w	r7, r0, #16
 8013618:	4629      	mov	r1, r5
 801361a:	42b1      	cmp	r1, r6
 801361c:	d334      	bcc.n	8013688 <rshift+0x96>
 801361e:	1a9b      	subs	r3, r3, r2
 8013620:	009b      	lsls	r3, r3, #2
 8013622:	1eea      	subs	r2, r5, #3
 8013624:	4296      	cmp	r6, r2
 8013626:	bf38      	it	cc
 8013628:	2300      	movcc	r3, #0
 801362a:	4423      	add	r3, r4
 801362c:	e015      	b.n	801365a <rshift+0x68>
 801362e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013632:	f1c1 0820 	rsb	r8, r1, #32
 8013636:	40cf      	lsrs	r7, r1
 8013638:	f105 0e04 	add.w	lr, r5, #4
 801363c:	46a1      	mov	r9, r4
 801363e:	4576      	cmp	r6, lr
 8013640:	46f4      	mov	ip, lr
 8013642:	d815      	bhi.n	8013670 <rshift+0x7e>
 8013644:	1a9a      	subs	r2, r3, r2
 8013646:	0092      	lsls	r2, r2, #2
 8013648:	3a04      	subs	r2, #4
 801364a:	3501      	adds	r5, #1
 801364c:	42ae      	cmp	r6, r5
 801364e:	bf38      	it	cc
 8013650:	2200      	movcc	r2, #0
 8013652:	18a3      	adds	r3, r4, r2
 8013654:	50a7      	str	r7, [r4, r2]
 8013656:	b107      	cbz	r7, 801365a <rshift+0x68>
 8013658:	3304      	adds	r3, #4
 801365a:	1b1a      	subs	r2, r3, r4
 801365c:	42a3      	cmp	r3, r4
 801365e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013662:	bf08      	it	eq
 8013664:	2300      	moveq	r3, #0
 8013666:	6102      	str	r2, [r0, #16]
 8013668:	bf08      	it	eq
 801366a:	6143      	streq	r3, [r0, #20]
 801366c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013670:	f8dc c000 	ldr.w	ip, [ip]
 8013674:	fa0c fc08 	lsl.w	ip, ip, r8
 8013678:	ea4c 0707 	orr.w	r7, ip, r7
 801367c:	f849 7b04 	str.w	r7, [r9], #4
 8013680:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013684:	40cf      	lsrs	r7, r1
 8013686:	e7da      	b.n	801363e <rshift+0x4c>
 8013688:	f851 cb04 	ldr.w	ip, [r1], #4
 801368c:	f847 cf04 	str.w	ip, [r7, #4]!
 8013690:	e7c3      	b.n	801361a <rshift+0x28>
 8013692:	4623      	mov	r3, r4
 8013694:	e7e1      	b.n	801365a <rshift+0x68>

08013696 <__hexdig_fun>:
 8013696:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801369a:	2b09      	cmp	r3, #9
 801369c:	d802      	bhi.n	80136a4 <__hexdig_fun+0xe>
 801369e:	3820      	subs	r0, #32
 80136a0:	b2c0      	uxtb	r0, r0
 80136a2:	4770      	bx	lr
 80136a4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80136a8:	2b05      	cmp	r3, #5
 80136aa:	d801      	bhi.n	80136b0 <__hexdig_fun+0x1a>
 80136ac:	3847      	subs	r0, #71	; 0x47
 80136ae:	e7f7      	b.n	80136a0 <__hexdig_fun+0xa>
 80136b0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80136b4:	2b05      	cmp	r3, #5
 80136b6:	d801      	bhi.n	80136bc <__hexdig_fun+0x26>
 80136b8:	3827      	subs	r0, #39	; 0x27
 80136ba:	e7f1      	b.n	80136a0 <__hexdig_fun+0xa>
 80136bc:	2000      	movs	r0, #0
 80136be:	4770      	bx	lr

080136c0 <__gethex>:
 80136c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136c4:	ed2d 8b02 	vpush	{d8}
 80136c8:	b089      	sub	sp, #36	; 0x24
 80136ca:	ee08 0a10 	vmov	s16, r0
 80136ce:	9304      	str	r3, [sp, #16]
 80136d0:	4bb4      	ldr	r3, [pc, #720]	; (80139a4 <__gethex+0x2e4>)
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	9301      	str	r3, [sp, #4]
 80136d6:	4618      	mov	r0, r3
 80136d8:	468b      	mov	fp, r1
 80136da:	4690      	mov	r8, r2
 80136dc:	f7f2 fde9 	bl	80062b2 <strlen>
 80136e0:	9b01      	ldr	r3, [sp, #4]
 80136e2:	f8db 2000 	ldr.w	r2, [fp]
 80136e6:	4403      	add	r3, r0
 80136e8:	4682      	mov	sl, r0
 80136ea:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80136ee:	9305      	str	r3, [sp, #20]
 80136f0:	1c93      	adds	r3, r2, #2
 80136f2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80136f6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80136fa:	32fe      	adds	r2, #254	; 0xfe
 80136fc:	18d1      	adds	r1, r2, r3
 80136fe:	461f      	mov	r7, r3
 8013700:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013704:	9100      	str	r1, [sp, #0]
 8013706:	2830      	cmp	r0, #48	; 0x30
 8013708:	d0f8      	beq.n	80136fc <__gethex+0x3c>
 801370a:	f7ff ffc4 	bl	8013696 <__hexdig_fun>
 801370e:	4604      	mov	r4, r0
 8013710:	2800      	cmp	r0, #0
 8013712:	d13a      	bne.n	801378a <__gethex+0xca>
 8013714:	9901      	ldr	r1, [sp, #4]
 8013716:	4652      	mov	r2, sl
 8013718:	4638      	mov	r0, r7
 801371a:	f001 fc28 	bl	8014f6e <strncmp>
 801371e:	4605      	mov	r5, r0
 8013720:	2800      	cmp	r0, #0
 8013722:	d168      	bne.n	80137f6 <__gethex+0x136>
 8013724:	f817 000a 	ldrb.w	r0, [r7, sl]
 8013728:	eb07 060a 	add.w	r6, r7, sl
 801372c:	f7ff ffb3 	bl	8013696 <__hexdig_fun>
 8013730:	2800      	cmp	r0, #0
 8013732:	d062      	beq.n	80137fa <__gethex+0x13a>
 8013734:	4633      	mov	r3, r6
 8013736:	7818      	ldrb	r0, [r3, #0]
 8013738:	2830      	cmp	r0, #48	; 0x30
 801373a:	461f      	mov	r7, r3
 801373c:	f103 0301 	add.w	r3, r3, #1
 8013740:	d0f9      	beq.n	8013736 <__gethex+0x76>
 8013742:	f7ff ffa8 	bl	8013696 <__hexdig_fun>
 8013746:	2301      	movs	r3, #1
 8013748:	fab0 f480 	clz	r4, r0
 801374c:	0964      	lsrs	r4, r4, #5
 801374e:	4635      	mov	r5, r6
 8013750:	9300      	str	r3, [sp, #0]
 8013752:	463a      	mov	r2, r7
 8013754:	4616      	mov	r6, r2
 8013756:	3201      	adds	r2, #1
 8013758:	7830      	ldrb	r0, [r6, #0]
 801375a:	f7ff ff9c 	bl	8013696 <__hexdig_fun>
 801375e:	2800      	cmp	r0, #0
 8013760:	d1f8      	bne.n	8013754 <__gethex+0x94>
 8013762:	9901      	ldr	r1, [sp, #4]
 8013764:	4652      	mov	r2, sl
 8013766:	4630      	mov	r0, r6
 8013768:	f001 fc01 	bl	8014f6e <strncmp>
 801376c:	b980      	cbnz	r0, 8013790 <__gethex+0xd0>
 801376e:	b94d      	cbnz	r5, 8013784 <__gethex+0xc4>
 8013770:	eb06 050a 	add.w	r5, r6, sl
 8013774:	462a      	mov	r2, r5
 8013776:	4616      	mov	r6, r2
 8013778:	3201      	adds	r2, #1
 801377a:	7830      	ldrb	r0, [r6, #0]
 801377c:	f7ff ff8b 	bl	8013696 <__hexdig_fun>
 8013780:	2800      	cmp	r0, #0
 8013782:	d1f8      	bne.n	8013776 <__gethex+0xb6>
 8013784:	1bad      	subs	r5, r5, r6
 8013786:	00ad      	lsls	r5, r5, #2
 8013788:	e004      	b.n	8013794 <__gethex+0xd4>
 801378a:	2400      	movs	r4, #0
 801378c:	4625      	mov	r5, r4
 801378e:	e7e0      	b.n	8013752 <__gethex+0x92>
 8013790:	2d00      	cmp	r5, #0
 8013792:	d1f7      	bne.n	8013784 <__gethex+0xc4>
 8013794:	7833      	ldrb	r3, [r6, #0]
 8013796:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801379a:	2b50      	cmp	r3, #80	; 0x50
 801379c:	d13b      	bne.n	8013816 <__gethex+0x156>
 801379e:	7873      	ldrb	r3, [r6, #1]
 80137a0:	2b2b      	cmp	r3, #43	; 0x2b
 80137a2:	d02c      	beq.n	80137fe <__gethex+0x13e>
 80137a4:	2b2d      	cmp	r3, #45	; 0x2d
 80137a6:	d02e      	beq.n	8013806 <__gethex+0x146>
 80137a8:	1c71      	adds	r1, r6, #1
 80137aa:	f04f 0900 	mov.w	r9, #0
 80137ae:	7808      	ldrb	r0, [r1, #0]
 80137b0:	f7ff ff71 	bl	8013696 <__hexdig_fun>
 80137b4:	1e43      	subs	r3, r0, #1
 80137b6:	b2db      	uxtb	r3, r3
 80137b8:	2b18      	cmp	r3, #24
 80137ba:	d82c      	bhi.n	8013816 <__gethex+0x156>
 80137bc:	f1a0 0210 	sub.w	r2, r0, #16
 80137c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80137c4:	f7ff ff67 	bl	8013696 <__hexdig_fun>
 80137c8:	1e43      	subs	r3, r0, #1
 80137ca:	b2db      	uxtb	r3, r3
 80137cc:	2b18      	cmp	r3, #24
 80137ce:	d91d      	bls.n	801380c <__gethex+0x14c>
 80137d0:	f1b9 0f00 	cmp.w	r9, #0
 80137d4:	d000      	beq.n	80137d8 <__gethex+0x118>
 80137d6:	4252      	negs	r2, r2
 80137d8:	4415      	add	r5, r2
 80137da:	f8cb 1000 	str.w	r1, [fp]
 80137de:	b1e4      	cbz	r4, 801381a <__gethex+0x15a>
 80137e0:	9b00      	ldr	r3, [sp, #0]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	bf14      	ite	ne
 80137e6:	2700      	movne	r7, #0
 80137e8:	2706      	moveq	r7, #6
 80137ea:	4638      	mov	r0, r7
 80137ec:	b009      	add	sp, #36	; 0x24
 80137ee:	ecbd 8b02 	vpop	{d8}
 80137f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137f6:	463e      	mov	r6, r7
 80137f8:	4625      	mov	r5, r4
 80137fa:	2401      	movs	r4, #1
 80137fc:	e7ca      	b.n	8013794 <__gethex+0xd4>
 80137fe:	f04f 0900 	mov.w	r9, #0
 8013802:	1cb1      	adds	r1, r6, #2
 8013804:	e7d3      	b.n	80137ae <__gethex+0xee>
 8013806:	f04f 0901 	mov.w	r9, #1
 801380a:	e7fa      	b.n	8013802 <__gethex+0x142>
 801380c:	230a      	movs	r3, #10
 801380e:	fb03 0202 	mla	r2, r3, r2, r0
 8013812:	3a10      	subs	r2, #16
 8013814:	e7d4      	b.n	80137c0 <__gethex+0x100>
 8013816:	4631      	mov	r1, r6
 8013818:	e7df      	b.n	80137da <__gethex+0x11a>
 801381a:	1bf3      	subs	r3, r6, r7
 801381c:	3b01      	subs	r3, #1
 801381e:	4621      	mov	r1, r4
 8013820:	2b07      	cmp	r3, #7
 8013822:	dc0b      	bgt.n	801383c <__gethex+0x17c>
 8013824:	ee18 0a10 	vmov	r0, s16
 8013828:	f000 fad8 	bl	8013ddc <_Balloc>
 801382c:	4604      	mov	r4, r0
 801382e:	b940      	cbnz	r0, 8013842 <__gethex+0x182>
 8013830:	4b5d      	ldr	r3, [pc, #372]	; (80139a8 <__gethex+0x2e8>)
 8013832:	4602      	mov	r2, r0
 8013834:	21de      	movs	r1, #222	; 0xde
 8013836:	485d      	ldr	r0, [pc, #372]	; (80139ac <__gethex+0x2ec>)
 8013838:	f001 fbcc 	bl	8014fd4 <__assert_func>
 801383c:	3101      	adds	r1, #1
 801383e:	105b      	asrs	r3, r3, #1
 8013840:	e7ee      	b.n	8013820 <__gethex+0x160>
 8013842:	f100 0914 	add.w	r9, r0, #20
 8013846:	f04f 0b00 	mov.w	fp, #0
 801384a:	f1ca 0301 	rsb	r3, sl, #1
 801384e:	f8cd 9008 	str.w	r9, [sp, #8]
 8013852:	f8cd b000 	str.w	fp, [sp]
 8013856:	9306      	str	r3, [sp, #24]
 8013858:	42b7      	cmp	r7, r6
 801385a:	d340      	bcc.n	80138de <__gethex+0x21e>
 801385c:	9802      	ldr	r0, [sp, #8]
 801385e:	9b00      	ldr	r3, [sp, #0]
 8013860:	f840 3b04 	str.w	r3, [r0], #4
 8013864:	eba0 0009 	sub.w	r0, r0, r9
 8013868:	1080      	asrs	r0, r0, #2
 801386a:	0146      	lsls	r6, r0, #5
 801386c:	6120      	str	r0, [r4, #16]
 801386e:	4618      	mov	r0, r3
 8013870:	f000 fba6 	bl	8013fc0 <__hi0bits>
 8013874:	1a30      	subs	r0, r6, r0
 8013876:	f8d8 6000 	ldr.w	r6, [r8]
 801387a:	42b0      	cmp	r0, r6
 801387c:	dd63      	ble.n	8013946 <__gethex+0x286>
 801387e:	1b87      	subs	r7, r0, r6
 8013880:	4639      	mov	r1, r7
 8013882:	4620      	mov	r0, r4
 8013884:	f000 ff4a 	bl	801471c <__any_on>
 8013888:	4682      	mov	sl, r0
 801388a:	b1a8      	cbz	r0, 80138b8 <__gethex+0x1f8>
 801388c:	1e7b      	subs	r3, r7, #1
 801388e:	1159      	asrs	r1, r3, #5
 8013890:	f003 021f 	and.w	r2, r3, #31
 8013894:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8013898:	f04f 0a01 	mov.w	sl, #1
 801389c:	fa0a f202 	lsl.w	r2, sl, r2
 80138a0:	420a      	tst	r2, r1
 80138a2:	d009      	beq.n	80138b8 <__gethex+0x1f8>
 80138a4:	4553      	cmp	r3, sl
 80138a6:	dd05      	ble.n	80138b4 <__gethex+0x1f4>
 80138a8:	1eb9      	subs	r1, r7, #2
 80138aa:	4620      	mov	r0, r4
 80138ac:	f000 ff36 	bl	801471c <__any_on>
 80138b0:	2800      	cmp	r0, #0
 80138b2:	d145      	bne.n	8013940 <__gethex+0x280>
 80138b4:	f04f 0a02 	mov.w	sl, #2
 80138b8:	4639      	mov	r1, r7
 80138ba:	4620      	mov	r0, r4
 80138bc:	f7ff fe99 	bl	80135f2 <rshift>
 80138c0:	443d      	add	r5, r7
 80138c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80138c6:	42ab      	cmp	r3, r5
 80138c8:	da4c      	bge.n	8013964 <__gethex+0x2a4>
 80138ca:	ee18 0a10 	vmov	r0, s16
 80138ce:	4621      	mov	r1, r4
 80138d0:	f000 fac4 	bl	8013e5c <_Bfree>
 80138d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80138d6:	2300      	movs	r3, #0
 80138d8:	6013      	str	r3, [r2, #0]
 80138da:	27a3      	movs	r7, #163	; 0xa3
 80138dc:	e785      	b.n	80137ea <__gethex+0x12a>
 80138de:	1e73      	subs	r3, r6, #1
 80138e0:	9a05      	ldr	r2, [sp, #20]
 80138e2:	9303      	str	r3, [sp, #12]
 80138e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80138e8:	4293      	cmp	r3, r2
 80138ea:	d019      	beq.n	8013920 <__gethex+0x260>
 80138ec:	f1bb 0f20 	cmp.w	fp, #32
 80138f0:	d107      	bne.n	8013902 <__gethex+0x242>
 80138f2:	9b02      	ldr	r3, [sp, #8]
 80138f4:	9a00      	ldr	r2, [sp, #0]
 80138f6:	f843 2b04 	str.w	r2, [r3], #4
 80138fa:	9302      	str	r3, [sp, #8]
 80138fc:	2300      	movs	r3, #0
 80138fe:	9300      	str	r3, [sp, #0]
 8013900:	469b      	mov	fp, r3
 8013902:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8013906:	f7ff fec6 	bl	8013696 <__hexdig_fun>
 801390a:	9b00      	ldr	r3, [sp, #0]
 801390c:	f000 000f 	and.w	r0, r0, #15
 8013910:	fa00 f00b 	lsl.w	r0, r0, fp
 8013914:	4303      	orrs	r3, r0
 8013916:	9300      	str	r3, [sp, #0]
 8013918:	f10b 0b04 	add.w	fp, fp, #4
 801391c:	9b03      	ldr	r3, [sp, #12]
 801391e:	e00d      	b.n	801393c <__gethex+0x27c>
 8013920:	9b03      	ldr	r3, [sp, #12]
 8013922:	9a06      	ldr	r2, [sp, #24]
 8013924:	4413      	add	r3, r2
 8013926:	42bb      	cmp	r3, r7
 8013928:	d3e0      	bcc.n	80138ec <__gethex+0x22c>
 801392a:	4618      	mov	r0, r3
 801392c:	9901      	ldr	r1, [sp, #4]
 801392e:	9307      	str	r3, [sp, #28]
 8013930:	4652      	mov	r2, sl
 8013932:	f001 fb1c 	bl	8014f6e <strncmp>
 8013936:	9b07      	ldr	r3, [sp, #28]
 8013938:	2800      	cmp	r0, #0
 801393a:	d1d7      	bne.n	80138ec <__gethex+0x22c>
 801393c:	461e      	mov	r6, r3
 801393e:	e78b      	b.n	8013858 <__gethex+0x198>
 8013940:	f04f 0a03 	mov.w	sl, #3
 8013944:	e7b8      	b.n	80138b8 <__gethex+0x1f8>
 8013946:	da0a      	bge.n	801395e <__gethex+0x29e>
 8013948:	1a37      	subs	r7, r6, r0
 801394a:	4621      	mov	r1, r4
 801394c:	ee18 0a10 	vmov	r0, s16
 8013950:	463a      	mov	r2, r7
 8013952:	f000 fc9f 	bl	8014294 <__lshift>
 8013956:	1bed      	subs	r5, r5, r7
 8013958:	4604      	mov	r4, r0
 801395a:	f100 0914 	add.w	r9, r0, #20
 801395e:	f04f 0a00 	mov.w	sl, #0
 8013962:	e7ae      	b.n	80138c2 <__gethex+0x202>
 8013964:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013968:	42a8      	cmp	r0, r5
 801396a:	dd72      	ble.n	8013a52 <__gethex+0x392>
 801396c:	1b45      	subs	r5, r0, r5
 801396e:	42ae      	cmp	r6, r5
 8013970:	dc36      	bgt.n	80139e0 <__gethex+0x320>
 8013972:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013976:	2b02      	cmp	r3, #2
 8013978:	d02a      	beq.n	80139d0 <__gethex+0x310>
 801397a:	2b03      	cmp	r3, #3
 801397c:	d02c      	beq.n	80139d8 <__gethex+0x318>
 801397e:	2b01      	cmp	r3, #1
 8013980:	d11c      	bne.n	80139bc <__gethex+0x2fc>
 8013982:	42ae      	cmp	r6, r5
 8013984:	d11a      	bne.n	80139bc <__gethex+0x2fc>
 8013986:	2e01      	cmp	r6, #1
 8013988:	d112      	bne.n	80139b0 <__gethex+0x2f0>
 801398a:	9a04      	ldr	r2, [sp, #16]
 801398c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013990:	6013      	str	r3, [r2, #0]
 8013992:	2301      	movs	r3, #1
 8013994:	6123      	str	r3, [r4, #16]
 8013996:	f8c9 3000 	str.w	r3, [r9]
 801399a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801399c:	2762      	movs	r7, #98	; 0x62
 801399e:	601c      	str	r4, [r3, #0]
 80139a0:	e723      	b.n	80137ea <__gethex+0x12a>
 80139a2:	bf00      	nop
 80139a4:	0814fa9c 	.word	0x0814fa9c
 80139a8:	0814f9c0 	.word	0x0814f9c0
 80139ac:	0814fa34 	.word	0x0814fa34
 80139b0:	1e71      	subs	r1, r6, #1
 80139b2:	4620      	mov	r0, r4
 80139b4:	f000 feb2 	bl	801471c <__any_on>
 80139b8:	2800      	cmp	r0, #0
 80139ba:	d1e6      	bne.n	801398a <__gethex+0x2ca>
 80139bc:	ee18 0a10 	vmov	r0, s16
 80139c0:	4621      	mov	r1, r4
 80139c2:	f000 fa4b 	bl	8013e5c <_Bfree>
 80139c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80139c8:	2300      	movs	r3, #0
 80139ca:	6013      	str	r3, [r2, #0]
 80139cc:	2750      	movs	r7, #80	; 0x50
 80139ce:	e70c      	b.n	80137ea <__gethex+0x12a>
 80139d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d1f2      	bne.n	80139bc <__gethex+0x2fc>
 80139d6:	e7d8      	b.n	801398a <__gethex+0x2ca>
 80139d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d1d5      	bne.n	801398a <__gethex+0x2ca>
 80139de:	e7ed      	b.n	80139bc <__gethex+0x2fc>
 80139e0:	1e6f      	subs	r7, r5, #1
 80139e2:	f1ba 0f00 	cmp.w	sl, #0
 80139e6:	d131      	bne.n	8013a4c <__gethex+0x38c>
 80139e8:	b127      	cbz	r7, 80139f4 <__gethex+0x334>
 80139ea:	4639      	mov	r1, r7
 80139ec:	4620      	mov	r0, r4
 80139ee:	f000 fe95 	bl	801471c <__any_on>
 80139f2:	4682      	mov	sl, r0
 80139f4:	117b      	asrs	r3, r7, #5
 80139f6:	2101      	movs	r1, #1
 80139f8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80139fc:	f007 071f 	and.w	r7, r7, #31
 8013a00:	fa01 f707 	lsl.w	r7, r1, r7
 8013a04:	421f      	tst	r7, r3
 8013a06:	4629      	mov	r1, r5
 8013a08:	4620      	mov	r0, r4
 8013a0a:	bf18      	it	ne
 8013a0c:	f04a 0a02 	orrne.w	sl, sl, #2
 8013a10:	1b76      	subs	r6, r6, r5
 8013a12:	f7ff fdee 	bl	80135f2 <rshift>
 8013a16:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013a1a:	2702      	movs	r7, #2
 8013a1c:	f1ba 0f00 	cmp.w	sl, #0
 8013a20:	d048      	beq.n	8013ab4 <__gethex+0x3f4>
 8013a22:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013a26:	2b02      	cmp	r3, #2
 8013a28:	d015      	beq.n	8013a56 <__gethex+0x396>
 8013a2a:	2b03      	cmp	r3, #3
 8013a2c:	d017      	beq.n	8013a5e <__gethex+0x39e>
 8013a2e:	2b01      	cmp	r3, #1
 8013a30:	d109      	bne.n	8013a46 <__gethex+0x386>
 8013a32:	f01a 0f02 	tst.w	sl, #2
 8013a36:	d006      	beq.n	8013a46 <__gethex+0x386>
 8013a38:	f8d9 0000 	ldr.w	r0, [r9]
 8013a3c:	ea4a 0a00 	orr.w	sl, sl, r0
 8013a40:	f01a 0f01 	tst.w	sl, #1
 8013a44:	d10e      	bne.n	8013a64 <__gethex+0x3a4>
 8013a46:	f047 0710 	orr.w	r7, r7, #16
 8013a4a:	e033      	b.n	8013ab4 <__gethex+0x3f4>
 8013a4c:	f04f 0a01 	mov.w	sl, #1
 8013a50:	e7d0      	b.n	80139f4 <__gethex+0x334>
 8013a52:	2701      	movs	r7, #1
 8013a54:	e7e2      	b.n	8013a1c <__gethex+0x35c>
 8013a56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013a58:	f1c3 0301 	rsb	r3, r3, #1
 8013a5c:	9315      	str	r3, [sp, #84]	; 0x54
 8013a5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d0f0      	beq.n	8013a46 <__gethex+0x386>
 8013a64:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013a68:	f104 0314 	add.w	r3, r4, #20
 8013a6c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013a70:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013a74:	f04f 0c00 	mov.w	ip, #0
 8013a78:	4618      	mov	r0, r3
 8013a7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a7e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013a82:	d01c      	beq.n	8013abe <__gethex+0x3fe>
 8013a84:	3201      	adds	r2, #1
 8013a86:	6002      	str	r2, [r0, #0]
 8013a88:	2f02      	cmp	r7, #2
 8013a8a:	f104 0314 	add.w	r3, r4, #20
 8013a8e:	d13f      	bne.n	8013b10 <__gethex+0x450>
 8013a90:	f8d8 2000 	ldr.w	r2, [r8]
 8013a94:	3a01      	subs	r2, #1
 8013a96:	42b2      	cmp	r2, r6
 8013a98:	d10a      	bne.n	8013ab0 <__gethex+0x3f0>
 8013a9a:	1171      	asrs	r1, r6, #5
 8013a9c:	2201      	movs	r2, #1
 8013a9e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013aa2:	f006 061f 	and.w	r6, r6, #31
 8013aa6:	fa02 f606 	lsl.w	r6, r2, r6
 8013aaa:	421e      	tst	r6, r3
 8013aac:	bf18      	it	ne
 8013aae:	4617      	movne	r7, r2
 8013ab0:	f047 0720 	orr.w	r7, r7, #32
 8013ab4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013ab6:	601c      	str	r4, [r3, #0]
 8013ab8:	9b04      	ldr	r3, [sp, #16]
 8013aba:	601d      	str	r5, [r3, #0]
 8013abc:	e695      	b.n	80137ea <__gethex+0x12a>
 8013abe:	4299      	cmp	r1, r3
 8013ac0:	f843 cc04 	str.w	ip, [r3, #-4]
 8013ac4:	d8d8      	bhi.n	8013a78 <__gethex+0x3b8>
 8013ac6:	68a3      	ldr	r3, [r4, #8]
 8013ac8:	459b      	cmp	fp, r3
 8013aca:	db19      	blt.n	8013b00 <__gethex+0x440>
 8013acc:	6861      	ldr	r1, [r4, #4]
 8013ace:	ee18 0a10 	vmov	r0, s16
 8013ad2:	3101      	adds	r1, #1
 8013ad4:	f000 f982 	bl	8013ddc <_Balloc>
 8013ad8:	4681      	mov	r9, r0
 8013ada:	b918      	cbnz	r0, 8013ae4 <__gethex+0x424>
 8013adc:	4b1a      	ldr	r3, [pc, #104]	; (8013b48 <__gethex+0x488>)
 8013ade:	4602      	mov	r2, r0
 8013ae0:	2184      	movs	r1, #132	; 0x84
 8013ae2:	e6a8      	b.n	8013836 <__gethex+0x176>
 8013ae4:	6922      	ldr	r2, [r4, #16]
 8013ae6:	3202      	adds	r2, #2
 8013ae8:	f104 010c 	add.w	r1, r4, #12
 8013aec:	0092      	lsls	r2, r2, #2
 8013aee:	300c      	adds	r0, #12
 8013af0:	f7fc fe9e 	bl	8010830 <memcpy>
 8013af4:	4621      	mov	r1, r4
 8013af6:	ee18 0a10 	vmov	r0, s16
 8013afa:	f000 f9af 	bl	8013e5c <_Bfree>
 8013afe:	464c      	mov	r4, r9
 8013b00:	6923      	ldr	r3, [r4, #16]
 8013b02:	1c5a      	adds	r2, r3, #1
 8013b04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013b08:	6122      	str	r2, [r4, #16]
 8013b0a:	2201      	movs	r2, #1
 8013b0c:	615a      	str	r2, [r3, #20]
 8013b0e:	e7bb      	b.n	8013a88 <__gethex+0x3c8>
 8013b10:	6922      	ldr	r2, [r4, #16]
 8013b12:	455a      	cmp	r2, fp
 8013b14:	dd0b      	ble.n	8013b2e <__gethex+0x46e>
 8013b16:	2101      	movs	r1, #1
 8013b18:	4620      	mov	r0, r4
 8013b1a:	f7ff fd6a 	bl	80135f2 <rshift>
 8013b1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013b22:	3501      	adds	r5, #1
 8013b24:	42ab      	cmp	r3, r5
 8013b26:	f6ff aed0 	blt.w	80138ca <__gethex+0x20a>
 8013b2a:	2701      	movs	r7, #1
 8013b2c:	e7c0      	b.n	8013ab0 <__gethex+0x3f0>
 8013b2e:	f016 061f 	ands.w	r6, r6, #31
 8013b32:	d0fa      	beq.n	8013b2a <__gethex+0x46a>
 8013b34:	4453      	add	r3, sl
 8013b36:	f1c6 0620 	rsb	r6, r6, #32
 8013b3a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8013b3e:	f000 fa3f 	bl	8013fc0 <__hi0bits>
 8013b42:	42b0      	cmp	r0, r6
 8013b44:	dbe7      	blt.n	8013b16 <__gethex+0x456>
 8013b46:	e7f0      	b.n	8013b2a <__gethex+0x46a>
 8013b48:	0814f9c0 	.word	0x0814f9c0

08013b4c <L_shift>:
 8013b4c:	f1c2 0208 	rsb	r2, r2, #8
 8013b50:	0092      	lsls	r2, r2, #2
 8013b52:	b570      	push	{r4, r5, r6, lr}
 8013b54:	f1c2 0620 	rsb	r6, r2, #32
 8013b58:	6843      	ldr	r3, [r0, #4]
 8013b5a:	6804      	ldr	r4, [r0, #0]
 8013b5c:	fa03 f506 	lsl.w	r5, r3, r6
 8013b60:	432c      	orrs	r4, r5
 8013b62:	40d3      	lsrs	r3, r2
 8013b64:	6004      	str	r4, [r0, #0]
 8013b66:	f840 3f04 	str.w	r3, [r0, #4]!
 8013b6a:	4288      	cmp	r0, r1
 8013b6c:	d3f4      	bcc.n	8013b58 <L_shift+0xc>
 8013b6e:	bd70      	pop	{r4, r5, r6, pc}

08013b70 <__match>:
 8013b70:	b530      	push	{r4, r5, lr}
 8013b72:	6803      	ldr	r3, [r0, #0]
 8013b74:	3301      	adds	r3, #1
 8013b76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013b7a:	b914      	cbnz	r4, 8013b82 <__match+0x12>
 8013b7c:	6003      	str	r3, [r0, #0]
 8013b7e:	2001      	movs	r0, #1
 8013b80:	bd30      	pop	{r4, r5, pc}
 8013b82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b86:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013b8a:	2d19      	cmp	r5, #25
 8013b8c:	bf98      	it	ls
 8013b8e:	3220      	addls	r2, #32
 8013b90:	42a2      	cmp	r2, r4
 8013b92:	d0f0      	beq.n	8013b76 <__match+0x6>
 8013b94:	2000      	movs	r0, #0
 8013b96:	e7f3      	b.n	8013b80 <__match+0x10>

08013b98 <__hexnan>:
 8013b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b9c:	680b      	ldr	r3, [r1, #0]
 8013b9e:	115e      	asrs	r6, r3, #5
 8013ba0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013ba4:	f013 031f 	ands.w	r3, r3, #31
 8013ba8:	b087      	sub	sp, #28
 8013baa:	bf18      	it	ne
 8013bac:	3604      	addne	r6, #4
 8013bae:	2500      	movs	r5, #0
 8013bb0:	1f37      	subs	r7, r6, #4
 8013bb2:	4690      	mov	r8, r2
 8013bb4:	6802      	ldr	r2, [r0, #0]
 8013bb6:	9301      	str	r3, [sp, #4]
 8013bb8:	4682      	mov	sl, r0
 8013bba:	f846 5c04 	str.w	r5, [r6, #-4]
 8013bbe:	46b9      	mov	r9, r7
 8013bc0:	463c      	mov	r4, r7
 8013bc2:	9502      	str	r5, [sp, #8]
 8013bc4:	46ab      	mov	fp, r5
 8013bc6:	7851      	ldrb	r1, [r2, #1]
 8013bc8:	1c53      	adds	r3, r2, #1
 8013bca:	9303      	str	r3, [sp, #12]
 8013bcc:	b341      	cbz	r1, 8013c20 <__hexnan+0x88>
 8013bce:	4608      	mov	r0, r1
 8013bd0:	9205      	str	r2, [sp, #20]
 8013bd2:	9104      	str	r1, [sp, #16]
 8013bd4:	f7ff fd5f 	bl	8013696 <__hexdig_fun>
 8013bd8:	2800      	cmp	r0, #0
 8013bda:	d14f      	bne.n	8013c7c <__hexnan+0xe4>
 8013bdc:	9904      	ldr	r1, [sp, #16]
 8013bde:	9a05      	ldr	r2, [sp, #20]
 8013be0:	2920      	cmp	r1, #32
 8013be2:	d818      	bhi.n	8013c16 <__hexnan+0x7e>
 8013be4:	9b02      	ldr	r3, [sp, #8]
 8013be6:	459b      	cmp	fp, r3
 8013be8:	dd13      	ble.n	8013c12 <__hexnan+0x7a>
 8013bea:	454c      	cmp	r4, r9
 8013bec:	d206      	bcs.n	8013bfc <__hexnan+0x64>
 8013bee:	2d07      	cmp	r5, #7
 8013bf0:	dc04      	bgt.n	8013bfc <__hexnan+0x64>
 8013bf2:	462a      	mov	r2, r5
 8013bf4:	4649      	mov	r1, r9
 8013bf6:	4620      	mov	r0, r4
 8013bf8:	f7ff ffa8 	bl	8013b4c <L_shift>
 8013bfc:	4544      	cmp	r4, r8
 8013bfe:	d950      	bls.n	8013ca2 <__hexnan+0x10a>
 8013c00:	2300      	movs	r3, #0
 8013c02:	f1a4 0904 	sub.w	r9, r4, #4
 8013c06:	f844 3c04 	str.w	r3, [r4, #-4]
 8013c0a:	f8cd b008 	str.w	fp, [sp, #8]
 8013c0e:	464c      	mov	r4, r9
 8013c10:	461d      	mov	r5, r3
 8013c12:	9a03      	ldr	r2, [sp, #12]
 8013c14:	e7d7      	b.n	8013bc6 <__hexnan+0x2e>
 8013c16:	2929      	cmp	r1, #41	; 0x29
 8013c18:	d156      	bne.n	8013cc8 <__hexnan+0x130>
 8013c1a:	3202      	adds	r2, #2
 8013c1c:	f8ca 2000 	str.w	r2, [sl]
 8013c20:	f1bb 0f00 	cmp.w	fp, #0
 8013c24:	d050      	beq.n	8013cc8 <__hexnan+0x130>
 8013c26:	454c      	cmp	r4, r9
 8013c28:	d206      	bcs.n	8013c38 <__hexnan+0xa0>
 8013c2a:	2d07      	cmp	r5, #7
 8013c2c:	dc04      	bgt.n	8013c38 <__hexnan+0xa0>
 8013c2e:	462a      	mov	r2, r5
 8013c30:	4649      	mov	r1, r9
 8013c32:	4620      	mov	r0, r4
 8013c34:	f7ff ff8a 	bl	8013b4c <L_shift>
 8013c38:	4544      	cmp	r4, r8
 8013c3a:	d934      	bls.n	8013ca6 <__hexnan+0x10e>
 8013c3c:	f1a8 0204 	sub.w	r2, r8, #4
 8013c40:	4623      	mov	r3, r4
 8013c42:	f853 1b04 	ldr.w	r1, [r3], #4
 8013c46:	f842 1f04 	str.w	r1, [r2, #4]!
 8013c4a:	429f      	cmp	r7, r3
 8013c4c:	d2f9      	bcs.n	8013c42 <__hexnan+0xaa>
 8013c4e:	1b3b      	subs	r3, r7, r4
 8013c50:	f023 0303 	bic.w	r3, r3, #3
 8013c54:	3304      	adds	r3, #4
 8013c56:	3401      	adds	r4, #1
 8013c58:	3e03      	subs	r6, #3
 8013c5a:	42b4      	cmp	r4, r6
 8013c5c:	bf88      	it	hi
 8013c5e:	2304      	movhi	r3, #4
 8013c60:	4443      	add	r3, r8
 8013c62:	2200      	movs	r2, #0
 8013c64:	f843 2b04 	str.w	r2, [r3], #4
 8013c68:	429f      	cmp	r7, r3
 8013c6a:	d2fb      	bcs.n	8013c64 <__hexnan+0xcc>
 8013c6c:	683b      	ldr	r3, [r7, #0]
 8013c6e:	b91b      	cbnz	r3, 8013c78 <__hexnan+0xe0>
 8013c70:	4547      	cmp	r7, r8
 8013c72:	d127      	bne.n	8013cc4 <__hexnan+0x12c>
 8013c74:	2301      	movs	r3, #1
 8013c76:	603b      	str	r3, [r7, #0]
 8013c78:	2005      	movs	r0, #5
 8013c7a:	e026      	b.n	8013cca <__hexnan+0x132>
 8013c7c:	3501      	adds	r5, #1
 8013c7e:	2d08      	cmp	r5, #8
 8013c80:	f10b 0b01 	add.w	fp, fp, #1
 8013c84:	dd06      	ble.n	8013c94 <__hexnan+0xfc>
 8013c86:	4544      	cmp	r4, r8
 8013c88:	d9c3      	bls.n	8013c12 <__hexnan+0x7a>
 8013c8a:	2300      	movs	r3, #0
 8013c8c:	f844 3c04 	str.w	r3, [r4, #-4]
 8013c90:	2501      	movs	r5, #1
 8013c92:	3c04      	subs	r4, #4
 8013c94:	6822      	ldr	r2, [r4, #0]
 8013c96:	f000 000f 	and.w	r0, r0, #15
 8013c9a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8013c9e:	6022      	str	r2, [r4, #0]
 8013ca0:	e7b7      	b.n	8013c12 <__hexnan+0x7a>
 8013ca2:	2508      	movs	r5, #8
 8013ca4:	e7b5      	b.n	8013c12 <__hexnan+0x7a>
 8013ca6:	9b01      	ldr	r3, [sp, #4]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d0df      	beq.n	8013c6c <__hexnan+0xd4>
 8013cac:	f04f 32ff 	mov.w	r2, #4294967295
 8013cb0:	f1c3 0320 	rsb	r3, r3, #32
 8013cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8013cb8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013cbc:	401a      	ands	r2, r3
 8013cbe:	f846 2c04 	str.w	r2, [r6, #-4]
 8013cc2:	e7d3      	b.n	8013c6c <__hexnan+0xd4>
 8013cc4:	3f04      	subs	r7, #4
 8013cc6:	e7d1      	b.n	8013c6c <__hexnan+0xd4>
 8013cc8:	2004      	movs	r0, #4
 8013cca:	b007      	add	sp, #28
 8013ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013cd0 <_localeconv_r>:
 8013cd0:	4800      	ldr	r0, [pc, #0]	; (8013cd4 <_localeconv_r+0x4>)
 8013cd2:	4770      	bx	lr
 8013cd4:	20000a20 	.word	0x20000a20

08013cd8 <__retarget_lock_init_recursive>:
 8013cd8:	4770      	bx	lr

08013cda <__retarget_lock_acquire_recursive>:
 8013cda:	4770      	bx	lr

08013cdc <__retarget_lock_release_recursive>:
 8013cdc:	4770      	bx	lr

08013cde <__swhatbuf_r>:
 8013cde:	b570      	push	{r4, r5, r6, lr}
 8013ce0:	460e      	mov	r6, r1
 8013ce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ce6:	2900      	cmp	r1, #0
 8013ce8:	b096      	sub	sp, #88	; 0x58
 8013cea:	4614      	mov	r4, r2
 8013cec:	461d      	mov	r5, r3
 8013cee:	da08      	bge.n	8013d02 <__swhatbuf_r+0x24>
 8013cf0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013cf4:	2200      	movs	r2, #0
 8013cf6:	602a      	str	r2, [r5, #0]
 8013cf8:	061a      	lsls	r2, r3, #24
 8013cfa:	d410      	bmi.n	8013d1e <__swhatbuf_r+0x40>
 8013cfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013d00:	e00e      	b.n	8013d20 <__swhatbuf_r+0x42>
 8013d02:	466a      	mov	r2, sp
 8013d04:	f001 f9a6 	bl	8015054 <_fstat_r>
 8013d08:	2800      	cmp	r0, #0
 8013d0a:	dbf1      	blt.n	8013cf0 <__swhatbuf_r+0x12>
 8013d0c:	9a01      	ldr	r2, [sp, #4]
 8013d0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013d12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013d16:	425a      	negs	r2, r3
 8013d18:	415a      	adcs	r2, r3
 8013d1a:	602a      	str	r2, [r5, #0]
 8013d1c:	e7ee      	b.n	8013cfc <__swhatbuf_r+0x1e>
 8013d1e:	2340      	movs	r3, #64	; 0x40
 8013d20:	2000      	movs	r0, #0
 8013d22:	6023      	str	r3, [r4, #0]
 8013d24:	b016      	add	sp, #88	; 0x58
 8013d26:	bd70      	pop	{r4, r5, r6, pc}

08013d28 <__smakebuf_r>:
 8013d28:	898b      	ldrh	r3, [r1, #12]
 8013d2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013d2c:	079d      	lsls	r5, r3, #30
 8013d2e:	4606      	mov	r6, r0
 8013d30:	460c      	mov	r4, r1
 8013d32:	d507      	bpl.n	8013d44 <__smakebuf_r+0x1c>
 8013d34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013d38:	6023      	str	r3, [r4, #0]
 8013d3a:	6123      	str	r3, [r4, #16]
 8013d3c:	2301      	movs	r3, #1
 8013d3e:	6163      	str	r3, [r4, #20]
 8013d40:	b002      	add	sp, #8
 8013d42:	bd70      	pop	{r4, r5, r6, pc}
 8013d44:	ab01      	add	r3, sp, #4
 8013d46:	466a      	mov	r2, sp
 8013d48:	f7ff ffc9 	bl	8013cde <__swhatbuf_r>
 8013d4c:	9900      	ldr	r1, [sp, #0]
 8013d4e:	4605      	mov	r5, r0
 8013d50:	4630      	mov	r0, r6
 8013d52:	f000 fd87 	bl	8014864 <_malloc_r>
 8013d56:	b948      	cbnz	r0, 8013d6c <__smakebuf_r+0x44>
 8013d58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d5c:	059a      	lsls	r2, r3, #22
 8013d5e:	d4ef      	bmi.n	8013d40 <__smakebuf_r+0x18>
 8013d60:	f023 0303 	bic.w	r3, r3, #3
 8013d64:	f043 0302 	orr.w	r3, r3, #2
 8013d68:	81a3      	strh	r3, [r4, #12]
 8013d6a:	e7e3      	b.n	8013d34 <__smakebuf_r+0xc>
 8013d6c:	4b0d      	ldr	r3, [pc, #52]	; (8013da4 <__smakebuf_r+0x7c>)
 8013d6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8013d70:	89a3      	ldrh	r3, [r4, #12]
 8013d72:	6020      	str	r0, [r4, #0]
 8013d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d78:	81a3      	strh	r3, [r4, #12]
 8013d7a:	9b00      	ldr	r3, [sp, #0]
 8013d7c:	6163      	str	r3, [r4, #20]
 8013d7e:	9b01      	ldr	r3, [sp, #4]
 8013d80:	6120      	str	r0, [r4, #16]
 8013d82:	b15b      	cbz	r3, 8013d9c <__smakebuf_r+0x74>
 8013d84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013d88:	4630      	mov	r0, r6
 8013d8a:	f001 f975 	bl	8015078 <_isatty_r>
 8013d8e:	b128      	cbz	r0, 8013d9c <__smakebuf_r+0x74>
 8013d90:	89a3      	ldrh	r3, [r4, #12]
 8013d92:	f023 0303 	bic.w	r3, r3, #3
 8013d96:	f043 0301 	orr.w	r3, r3, #1
 8013d9a:	81a3      	strh	r3, [r4, #12]
 8013d9c:	89a0      	ldrh	r0, [r4, #12]
 8013d9e:	4305      	orrs	r5, r0
 8013da0:	81a5      	strh	r5, [r4, #12]
 8013da2:	e7cd      	b.n	8013d40 <__smakebuf_r+0x18>
 8013da4:	08013451 	.word	0x08013451

08013da8 <malloc>:
 8013da8:	4b02      	ldr	r3, [pc, #8]	; (8013db4 <malloc+0xc>)
 8013daa:	4601      	mov	r1, r0
 8013dac:	6818      	ldr	r0, [r3, #0]
 8013dae:	f000 bd59 	b.w	8014864 <_malloc_r>
 8013db2:	bf00      	nop
 8013db4:	200008c8 	.word	0x200008c8

08013db8 <__ascii_mbtowc>:
 8013db8:	b082      	sub	sp, #8
 8013dba:	b901      	cbnz	r1, 8013dbe <__ascii_mbtowc+0x6>
 8013dbc:	a901      	add	r1, sp, #4
 8013dbe:	b142      	cbz	r2, 8013dd2 <__ascii_mbtowc+0x1a>
 8013dc0:	b14b      	cbz	r3, 8013dd6 <__ascii_mbtowc+0x1e>
 8013dc2:	7813      	ldrb	r3, [r2, #0]
 8013dc4:	600b      	str	r3, [r1, #0]
 8013dc6:	7812      	ldrb	r2, [r2, #0]
 8013dc8:	1e10      	subs	r0, r2, #0
 8013dca:	bf18      	it	ne
 8013dcc:	2001      	movne	r0, #1
 8013dce:	b002      	add	sp, #8
 8013dd0:	4770      	bx	lr
 8013dd2:	4610      	mov	r0, r2
 8013dd4:	e7fb      	b.n	8013dce <__ascii_mbtowc+0x16>
 8013dd6:	f06f 0001 	mvn.w	r0, #1
 8013dda:	e7f8      	b.n	8013dce <__ascii_mbtowc+0x16>

08013ddc <_Balloc>:
 8013ddc:	b570      	push	{r4, r5, r6, lr}
 8013dde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013de0:	4604      	mov	r4, r0
 8013de2:	460d      	mov	r5, r1
 8013de4:	b976      	cbnz	r6, 8013e04 <_Balloc+0x28>
 8013de6:	2010      	movs	r0, #16
 8013de8:	f7ff ffde 	bl	8013da8 <malloc>
 8013dec:	4602      	mov	r2, r0
 8013dee:	6260      	str	r0, [r4, #36]	; 0x24
 8013df0:	b920      	cbnz	r0, 8013dfc <_Balloc+0x20>
 8013df2:	4b18      	ldr	r3, [pc, #96]	; (8013e54 <_Balloc+0x78>)
 8013df4:	4818      	ldr	r0, [pc, #96]	; (8013e58 <_Balloc+0x7c>)
 8013df6:	2166      	movs	r1, #102	; 0x66
 8013df8:	f001 f8ec 	bl	8014fd4 <__assert_func>
 8013dfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013e00:	6006      	str	r6, [r0, #0]
 8013e02:	60c6      	str	r6, [r0, #12]
 8013e04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013e06:	68f3      	ldr	r3, [r6, #12]
 8013e08:	b183      	cbz	r3, 8013e2c <_Balloc+0x50>
 8013e0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013e0c:	68db      	ldr	r3, [r3, #12]
 8013e0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013e12:	b9b8      	cbnz	r0, 8013e44 <_Balloc+0x68>
 8013e14:	2101      	movs	r1, #1
 8013e16:	fa01 f605 	lsl.w	r6, r1, r5
 8013e1a:	1d72      	adds	r2, r6, #5
 8013e1c:	0092      	lsls	r2, r2, #2
 8013e1e:	4620      	mov	r0, r4
 8013e20:	f000 fc9d 	bl	801475e <_calloc_r>
 8013e24:	b160      	cbz	r0, 8013e40 <_Balloc+0x64>
 8013e26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013e2a:	e00e      	b.n	8013e4a <_Balloc+0x6e>
 8013e2c:	2221      	movs	r2, #33	; 0x21
 8013e2e:	2104      	movs	r1, #4
 8013e30:	4620      	mov	r0, r4
 8013e32:	f000 fc94 	bl	801475e <_calloc_r>
 8013e36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013e38:	60f0      	str	r0, [r6, #12]
 8013e3a:	68db      	ldr	r3, [r3, #12]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d1e4      	bne.n	8013e0a <_Balloc+0x2e>
 8013e40:	2000      	movs	r0, #0
 8013e42:	bd70      	pop	{r4, r5, r6, pc}
 8013e44:	6802      	ldr	r2, [r0, #0]
 8013e46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013e50:	e7f7      	b.n	8013e42 <_Balloc+0x66>
 8013e52:	bf00      	nop
 8013e54:	0814f94e 	.word	0x0814f94e
 8013e58:	0814fab0 	.word	0x0814fab0

08013e5c <_Bfree>:
 8013e5c:	b570      	push	{r4, r5, r6, lr}
 8013e5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013e60:	4605      	mov	r5, r0
 8013e62:	460c      	mov	r4, r1
 8013e64:	b976      	cbnz	r6, 8013e84 <_Bfree+0x28>
 8013e66:	2010      	movs	r0, #16
 8013e68:	f7ff ff9e 	bl	8013da8 <malloc>
 8013e6c:	4602      	mov	r2, r0
 8013e6e:	6268      	str	r0, [r5, #36]	; 0x24
 8013e70:	b920      	cbnz	r0, 8013e7c <_Bfree+0x20>
 8013e72:	4b09      	ldr	r3, [pc, #36]	; (8013e98 <_Bfree+0x3c>)
 8013e74:	4809      	ldr	r0, [pc, #36]	; (8013e9c <_Bfree+0x40>)
 8013e76:	218a      	movs	r1, #138	; 0x8a
 8013e78:	f001 f8ac 	bl	8014fd4 <__assert_func>
 8013e7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013e80:	6006      	str	r6, [r0, #0]
 8013e82:	60c6      	str	r6, [r0, #12]
 8013e84:	b13c      	cbz	r4, 8013e96 <_Bfree+0x3a>
 8013e86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013e88:	6862      	ldr	r2, [r4, #4]
 8013e8a:	68db      	ldr	r3, [r3, #12]
 8013e8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013e90:	6021      	str	r1, [r4, #0]
 8013e92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013e96:	bd70      	pop	{r4, r5, r6, pc}
 8013e98:	0814f94e 	.word	0x0814f94e
 8013e9c:	0814fab0 	.word	0x0814fab0

08013ea0 <__multadd>:
 8013ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ea4:	690d      	ldr	r5, [r1, #16]
 8013ea6:	4607      	mov	r7, r0
 8013ea8:	460c      	mov	r4, r1
 8013eaa:	461e      	mov	r6, r3
 8013eac:	f101 0c14 	add.w	ip, r1, #20
 8013eb0:	2000      	movs	r0, #0
 8013eb2:	f8dc 3000 	ldr.w	r3, [ip]
 8013eb6:	b299      	uxth	r1, r3
 8013eb8:	fb02 6101 	mla	r1, r2, r1, r6
 8013ebc:	0c1e      	lsrs	r6, r3, #16
 8013ebe:	0c0b      	lsrs	r3, r1, #16
 8013ec0:	fb02 3306 	mla	r3, r2, r6, r3
 8013ec4:	b289      	uxth	r1, r1
 8013ec6:	3001      	adds	r0, #1
 8013ec8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013ecc:	4285      	cmp	r5, r0
 8013ece:	f84c 1b04 	str.w	r1, [ip], #4
 8013ed2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013ed6:	dcec      	bgt.n	8013eb2 <__multadd+0x12>
 8013ed8:	b30e      	cbz	r6, 8013f1e <__multadd+0x7e>
 8013eda:	68a3      	ldr	r3, [r4, #8]
 8013edc:	42ab      	cmp	r3, r5
 8013ede:	dc19      	bgt.n	8013f14 <__multadd+0x74>
 8013ee0:	6861      	ldr	r1, [r4, #4]
 8013ee2:	4638      	mov	r0, r7
 8013ee4:	3101      	adds	r1, #1
 8013ee6:	f7ff ff79 	bl	8013ddc <_Balloc>
 8013eea:	4680      	mov	r8, r0
 8013eec:	b928      	cbnz	r0, 8013efa <__multadd+0x5a>
 8013eee:	4602      	mov	r2, r0
 8013ef0:	4b0c      	ldr	r3, [pc, #48]	; (8013f24 <__multadd+0x84>)
 8013ef2:	480d      	ldr	r0, [pc, #52]	; (8013f28 <__multadd+0x88>)
 8013ef4:	21b5      	movs	r1, #181	; 0xb5
 8013ef6:	f001 f86d 	bl	8014fd4 <__assert_func>
 8013efa:	6922      	ldr	r2, [r4, #16]
 8013efc:	3202      	adds	r2, #2
 8013efe:	f104 010c 	add.w	r1, r4, #12
 8013f02:	0092      	lsls	r2, r2, #2
 8013f04:	300c      	adds	r0, #12
 8013f06:	f7fc fc93 	bl	8010830 <memcpy>
 8013f0a:	4621      	mov	r1, r4
 8013f0c:	4638      	mov	r0, r7
 8013f0e:	f7ff ffa5 	bl	8013e5c <_Bfree>
 8013f12:	4644      	mov	r4, r8
 8013f14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013f18:	3501      	adds	r5, #1
 8013f1a:	615e      	str	r6, [r3, #20]
 8013f1c:	6125      	str	r5, [r4, #16]
 8013f1e:	4620      	mov	r0, r4
 8013f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f24:	0814f9c0 	.word	0x0814f9c0
 8013f28:	0814fab0 	.word	0x0814fab0

08013f2c <__s2b>:
 8013f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f30:	460c      	mov	r4, r1
 8013f32:	4615      	mov	r5, r2
 8013f34:	461f      	mov	r7, r3
 8013f36:	2209      	movs	r2, #9
 8013f38:	3308      	adds	r3, #8
 8013f3a:	4606      	mov	r6, r0
 8013f3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8013f40:	2100      	movs	r1, #0
 8013f42:	2201      	movs	r2, #1
 8013f44:	429a      	cmp	r2, r3
 8013f46:	db09      	blt.n	8013f5c <__s2b+0x30>
 8013f48:	4630      	mov	r0, r6
 8013f4a:	f7ff ff47 	bl	8013ddc <_Balloc>
 8013f4e:	b940      	cbnz	r0, 8013f62 <__s2b+0x36>
 8013f50:	4602      	mov	r2, r0
 8013f52:	4b19      	ldr	r3, [pc, #100]	; (8013fb8 <__s2b+0x8c>)
 8013f54:	4819      	ldr	r0, [pc, #100]	; (8013fbc <__s2b+0x90>)
 8013f56:	21ce      	movs	r1, #206	; 0xce
 8013f58:	f001 f83c 	bl	8014fd4 <__assert_func>
 8013f5c:	0052      	lsls	r2, r2, #1
 8013f5e:	3101      	adds	r1, #1
 8013f60:	e7f0      	b.n	8013f44 <__s2b+0x18>
 8013f62:	9b08      	ldr	r3, [sp, #32]
 8013f64:	6143      	str	r3, [r0, #20]
 8013f66:	2d09      	cmp	r5, #9
 8013f68:	f04f 0301 	mov.w	r3, #1
 8013f6c:	6103      	str	r3, [r0, #16]
 8013f6e:	dd16      	ble.n	8013f9e <__s2b+0x72>
 8013f70:	f104 0909 	add.w	r9, r4, #9
 8013f74:	46c8      	mov	r8, r9
 8013f76:	442c      	add	r4, r5
 8013f78:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013f7c:	4601      	mov	r1, r0
 8013f7e:	3b30      	subs	r3, #48	; 0x30
 8013f80:	220a      	movs	r2, #10
 8013f82:	4630      	mov	r0, r6
 8013f84:	f7ff ff8c 	bl	8013ea0 <__multadd>
 8013f88:	45a0      	cmp	r8, r4
 8013f8a:	d1f5      	bne.n	8013f78 <__s2b+0x4c>
 8013f8c:	f1a5 0408 	sub.w	r4, r5, #8
 8013f90:	444c      	add	r4, r9
 8013f92:	1b2d      	subs	r5, r5, r4
 8013f94:	1963      	adds	r3, r4, r5
 8013f96:	42bb      	cmp	r3, r7
 8013f98:	db04      	blt.n	8013fa4 <__s2b+0x78>
 8013f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f9e:	340a      	adds	r4, #10
 8013fa0:	2509      	movs	r5, #9
 8013fa2:	e7f6      	b.n	8013f92 <__s2b+0x66>
 8013fa4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013fa8:	4601      	mov	r1, r0
 8013faa:	3b30      	subs	r3, #48	; 0x30
 8013fac:	220a      	movs	r2, #10
 8013fae:	4630      	mov	r0, r6
 8013fb0:	f7ff ff76 	bl	8013ea0 <__multadd>
 8013fb4:	e7ee      	b.n	8013f94 <__s2b+0x68>
 8013fb6:	bf00      	nop
 8013fb8:	0814f9c0 	.word	0x0814f9c0
 8013fbc:	0814fab0 	.word	0x0814fab0

08013fc0 <__hi0bits>:
 8013fc0:	0c03      	lsrs	r3, r0, #16
 8013fc2:	041b      	lsls	r3, r3, #16
 8013fc4:	b9d3      	cbnz	r3, 8013ffc <__hi0bits+0x3c>
 8013fc6:	0400      	lsls	r0, r0, #16
 8013fc8:	2310      	movs	r3, #16
 8013fca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013fce:	bf04      	itt	eq
 8013fd0:	0200      	lsleq	r0, r0, #8
 8013fd2:	3308      	addeq	r3, #8
 8013fd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013fd8:	bf04      	itt	eq
 8013fda:	0100      	lsleq	r0, r0, #4
 8013fdc:	3304      	addeq	r3, #4
 8013fde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013fe2:	bf04      	itt	eq
 8013fe4:	0080      	lsleq	r0, r0, #2
 8013fe6:	3302      	addeq	r3, #2
 8013fe8:	2800      	cmp	r0, #0
 8013fea:	db05      	blt.n	8013ff8 <__hi0bits+0x38>
 8013fec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013ff0:	f103 0301 	add.w	r3, r3, #1
 8013ff4:	bf08      	it	eq
 8013ff6:	2320      	moveq	r3, #32
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	4770      	bx	lr
 8013ffc:	2300      	movs	r3, #0
 8013ffe:	e7e4      	b.n	8013fca <__hi0bits+0xa>

08014000 <__lo0bits>:
 8014000:	6803      	ldr	r3, [r0, #0]
 8014002:	f013 0207 	ands.w	r2, r3, #7
 8014006:	4601      	mov	r1, r0
 8014008:	d00b      	beq.n	8014022 <__lo0bits+0x22>
 801400a:	07da      	lsls	r2, r3, #31
 801400c:	d423      	bmi.n	8014056 <__lo0bits+0x56>
 801400e:	0798      	lsls	r0, r3, #30
 8014010:	bf49      	itett	mi
 8014012:	085b      	lsrmi	r3, r3, #1
 8014014:	089b      	lsrpl	r3, r3, #2
 8014016:	2001      	movmi	r0, #1
 8014018:	600b      	strmi	r3, [r1, #0]
 801401a:	bf5c      	itt	pl
 801401c:	600b      	strpl	r3, [r1, #0]
 801401e:	2002      	movpl	r0, #2
 8014020:	4770      	bx	lr
 8014022:	b298      	uxth	r0, r3
 8014024:	b9a8      	cbnz	r0, 8014052 <__lo0bits+0x52>
 8014026:	0c1b      	lsrs	r3, r3, #16
 8014028:	2010      	movs	r0, #16
 801402a:	b2da      	uxtb	r2, r3
 801402c:	b90a      	cbnz	r2, 8014032 <__lo0bits+0x32>
 801402e:	3008      	adds	r0, #8
 8014030:	0a1b      	lsrs	r3, r3, #8
 8014032:	071a      	lsls	r2, r3, #28
 8014034:	bf04      	itt	eq
 8014036:	091b      	lsreq	r3, r3, #4
 8014038:	3004      	addeq	r0, #4
 801403a:	079a      	lsls	r2, r3, #30
 801403c:	bf04      	itt	eq
 801403e:	089b      	lsreq	r3, r3, #2
 8014040:	3002      	addeq	r0, #2
 8014042:	07da      	lsls	r2, r3, #31
 8014044:	d403      	bmi.n	801404e <__lo0bits+0x4e>
 8014046:	085b      	lsrs	r3, r3, #1
 8014048:	f100 0001 	add.w	r0, r0, #1
 801404c:	d005      	beq.n	801405a <__lo0bits+0x5a>
 801404e:	600b      	str	r3, [r1, #0]
 8014050:	4770      	bx	lr
 8014052:	4610      	mov	r0, r2
 8014054:	e7e9      	b.n	801402a <__lo0bits+0x2a>
 8014056:	2000      	movs	r0, #0
 8014058:	4770      	bx	lr
 801405a:	2020      	movs	r0, #32
 801405c:	4770      	bx	lr
	...

08014060 <__i2b>:
 8014060:	b510      	push	{r4, lr}
 8014062:	460c      	mov	r4, r1
 8014064:	2101      	movs	r1, #1
 8014066:	f7ff feb9 	bl	8013ddc <_Balloc>
 801406a:	4602      	mov	r2, r0
 801406c:	b928      	cbnz	r0, 801407a <__i2b+0x1a>
 801406e:	4b05      	ldr	r3, [pc, #20]	; (8014084 <__i2b+0x24>)
 8014070:	4805      	ldr	r0, [pc, #20]	; (8014088 <__i2b+0x28>)
 8014072:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014076:	f000 ffad 	bl	8014fd4 <__assert_func>
 801407a:	2301      	movs	r3, #1
 801407c:	6144      	str	r4, [r0, #20]
 801407e:	6103      	str	r3, [r0, #16]
 8014080:	bd10      	pop	{r4, pc}
 8014082:	bf00      	nop
 8014084:	0814f9c0 	.word	0x0814f9c0
 8014088:	0814fab0 	.word	0x0814fab0

0801408c <__multiply>:
 801408c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014090:	4691      	mov	r9, r2
 8014092:	690a      	ldr	r2, [r1, #16]
 8014094:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014098:	429a      	cmp	r2, r3
 801409a:	bfb8      	it	lt
 801409c:	460b      	movlt	r3, r1
 801409e:	460c      	mov	r4, r1
 80140a0:	bfbc      	itt	lt
 80140a2:	464c      	movlt	r4, r9
 80140a4:	4699      	movlt	r9, r3
 80140a6:	6927      	ldr	r7, [r4, #16]
 80140a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80140ac:	68a3      	ldr	r3, [r4, #8]
 80140ae:	6861      	ldr	r1, [r4, #4]
 80140b0:	eb07 060a 	add.w	r6, r7, sl
 80140b4:	42b3      	cmp	r3, r6
 80140b6:	b085      	sub	sp, #20
 80140b8:	bfb8      	it	lt
 80140ba:	3101      	addlt	r1, #1
 80140bc:	f7ff fe8e 	bl	8013ddc <_Balloc>
 80140c0:	b930      	cbnz	r0, 80140d0 <__multiply+0x44>
 80140c2:	4602      	mov	r2, r0
 80140c4:	4b44      	ldr	r3, [pc, #272]	; (80141d8 <__multiply+0x14c>)
 80140c6:	4845      	ldr	r0, [pc, #276]	; (80141dc <__multiply+0x150>)
 80140c8:	f240 115d 	movw	r1, #349	; 0x15d
 80140cc:	f000 ff82 	bl	8014fd4 <__assert_func>
 80140d0:	f100 0514 	add.w	r5, r0, #20
 80140d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80140d8:	462b      	mov	r3, r5
 80140da:	2200      	movs	r2, #0
 80140dc:	4543      	cmp	r3, r8
 80140de:	d321      	bcc.n	8014124 <__multiply+0x98>
 80140e0:	f104 0314 	add.w	r3, r4, #20
 80140e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80140e8:	f109 0314 	add.w	r3, r9, #20
 80140ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80140f0:	9202      	str	r2, [sp, #8]
 80140f2:	1b3a      	subs	r2, r7, r4
 80140f4:	3a15      	subs	r2, #21
 80140f6:	f022 0203 	bic.w	r2, r2, #3
 80140fa:	3204      	adds	r2, #4
 80140fc:	f104 0115 	add.w	r1, r4, #21
 8014100:	428f      	cmp	r7, r1
 8014102:	bf38      	it	cc
 8014104:	2204      	movcc	r2, #4
 8014106:	9201      	str	r2, [sp, #4]
 8014108:	9a02      	ldr	r2, [sp, #8]
 801410a:	9303      	str	r3, [sp, #12]
 801410c:	429a      	cmp	r2, r3
 801410e:	d80c      	bhi.n	801412a <__multiply+0x9e>
 8014110:	2e00      	cmp	r6, #0
 8014112:	dd03      	ble.n	801411c <__multiply+0x90>
 8014114:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014118:	2b00      	cmp	r3, #0
 801411a:	d05a      	beq.n	80141d2 <__multiply+0x146>
 801411c:	6106      	str	r6, [r0, #16]
 801411e:	b005      	add	sp, #20
 8014120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014124:	f843 2b04 	str.w	r2, [r3], #4
 8014128:	e7d8      	b.n	80140dc <__multiply+0x50>
 801412a:	f8b3 a000 	ldrh.w	sl, [r3]
 801412e:	f1ba 0f00 	cmp.w	sl, #0
 8014132:	d024      	beq.n	801417e <__multiply+0xf2>
 8014134:	f104 0e14 	add.w	lr, r4, #20
 8014138:	46a9      	mov	r9, r5
 801413a:	f04f 0c00 	mov.w	ip, #0
 801413e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014142:	f8d9 1000 	ldr.w	r1, [r9]
 8014146:	fa1f fb82 	uxth.w	fp, r2
 801414a:	b289      	uxth	r1, r1
 801414c:	fb0a 110b 	mla	r1, sl, fp, r1
 8014150:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014154:	f8d9 2000 	ldr.w	r2, [r9]
 8014158:	4461      	add	r1, ip
 801415a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801415e:	fb0a c20b 	mla	r2, sl, fp, ip
 8014162:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014166:	b289      	uxth	r1, r1
 8014168:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801416c:	4577      	cmp	r7, lr
 801416e:	f849 1b04 	str.w	r1, [r9], #4
 8014172:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014176:	d8e2      	bhi.n	801413e <__multiply+0xb2>
 8014178:	9a01      	ldr	r2, [sp, #4]
 801417a:	f845 c002 	str.w	ip, [r5, r2]
 801417e:	9a03      	ldr	r2, [sp, #12]
 8014180:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014184:	3304      	adds	r3, #4
 8014186:	f1b9 0f00 	cmp.w	r9, #0
 801418a:	d020      	beq.n	80141ce <__multiply+0x142>
 801418c:	6829      	ldr	r1, [r5, #0]
 801418e:	f104 0c14 	add.w	ip, r4, #20
 8014192:	46ae      	mov	lr, r5
 8014194:	f04f 0a00 	mov.w	sl, #0
 8014198:	f8bc b000 	ldrh.w	fp, [ip]
 801419c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80141a0:	fb09 220b 	mla	r2, r9, fp, r2
 80141a4:	4492      	add	sl, r2
 80141a6:	b289      	uxth	r1, r1
 80141a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80141ac:	f84e 1b04 	str.w	r1, [lr], #4
 80141b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80141b4:	f8be 1000 	ldrh.w	r1, [lr]
 80141b8:	0c12      	lsrs	r2, r2, #16
 80141ba:	fb09 1102 	mla	r1, r9, r2, r1
 80141be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80141c2:	4567      	cmp	r7, ip
 80141c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80141c8:	d8e6      	bhi.n	8014198 <__multiply+0x10c>
 80141ca:	9a01      	ldr	r2, [sp, #4]
 80141cc:	50a9      	str	r1, [r5, r2]
 80141ce:	3504      	adds	r5, #4
 80141d0:	e79a      	b.n	8014108 <__multiply+0x7c>
 80141d2:	3e01      	subs	r6, #1
 80141d4:	e79c      	b.n	8014110 <__multiply+0x84>
 80141d6:	bf00      	nop
 80141d8:	0814f9c0 	.word	0x0814f9c0
 80141dc:	0814fab0 	.word	0x0814fab0

080141e0 <__pow5mult>:
 80141e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80141e4:	4615      	mov	r5, r2
 80141e6:	f012 0203 	ands.w	r2, r2, #3
 80141ea:	4606      	mov	r6, r0
 80141ec:	460f      	mov	r7, r1
 80141ee:	d007      	beq.n	8014200 <__pow5mult+0x20>
 80141f0:	4c25      	ldr	r4, [pc, #148]	; (8014288 <__pow5mult+0xa8>)
 80141f2:	3a01      	subs	r2, #1
 80141f4:	2300      	movs	r3, #0
 80141f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80141fa:	f7ff fe51 	bl	8013ea0 <__multadd>
 80141fe:	4607      	mov	r7, r0
 8014200:	10ad      	asrs	r5, r5, #2
 8014202:	d03d      	beq.n	8014280 <__pow5mult+0xa0>
 8014204:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014206:	b97c      	cbnz	r4, 8014228 <__pow5mult+0x48>
 8014208:	2010      	movs	r0, #16
 801420a:	f7ff fdcd 	bl	8013da8 <malloc>
 801420e:	4602      	mov	r2, r0
 8014210:	6270      	str	r0, [r6, #36]	; 0x24
 8014212:	b928      	cbnz	r0, 8014220 <__pow5mult+0x40>
 8014214:	4b1d      	ldr	r3, [pc, #116]	; (801428c <__pow5mult+0xac>)
 8014216:	481e      	ldr	r0, [pc, #120]	; (8014290 <__pow5mult+0xb0>)
 8014218:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801421c:	f000 feda 	bl	8014fd4 <__assert_func>
 8014220:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014224:	6004      	str	r4, [r0, #0]
 8014226:	60c4      	str	r4, [r0, #12]
 8014228:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801422c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014230:	b94c      	cbnz	r4, 8014246 <__pow5mult+0x66>
 8014232:	f240 2171 	movw	r1, #625	; 0x271
 8014236:	4630      	mov	r0, r6
 8014238:	f7ff ff12 	bl	8014060 <__i2b>
 801423c:	2300      	movs	r3, #0
 801423e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014242:	4604      	mov	r4, r0
 8014244:	6003      	str	r3, [r0, #0]
 8014246:	f04f 0900 	mov.w	r9, #0
 801424a:	07eb      	lsls	r3, r5, #31
 801424c:	d50a      	bpl.n	8014264 <__pow5mult+0x84>
 801424e:	4639      	mov	r1, r7
 8014250:	4622      	mov	r2, r4
 8014252:	4630      	mov	r0, r6
 8014254:	f7ff ff1a 	bl	801408c <__multiply>
 8014258:	4639      	mov	r1, r7
 801425a:	4680      	mov	r8, r0
 801425c:	4630      	mov	r0, r6
 801425e:	f7ff fdfd 	bl	8013e5c <_Bfree>
 8014262:	4647      	mov	r7, r8
 8014264:	106d      	asrs	r5, r5, #1
 8014266:	d00b      	beq.n	8014280 <__pow5mult+0xa0>
 8014268:	6820      	ldr	r0, [r4, #0]
 801426a:	b938      	cbnz	r0, 801427c <__pow5mult+0x9c>
 801426c:	4622      	mov	r2, r4
 801426e:	4621      	mov	r1, r4
 8014270:	4630      	mov	r0, r6
 8014272:	f7ff ff0b 	bl	801408c <__multiply>
 8014276:	6020      	str	r0, [r4, #0]
 8014278:	f8c0 9000 	str.w	r9, [r0]
 801427c:	4604      	mov	r4, r0
 801427e:	e7e4      	b.n	801424a <__pow5mult+0x6a>
 8014280:	4638      	mov	r0, r7
 8014282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014286:	bf00      	nop
 8014288:	0814fc00 	.word	0x0814fc00
 801428c:	0814f94e 	.word	0x0814f94e
 8014290:	0814fab0 	.word	0x0814fab0

08014294 <__lshift>:
 8014294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014298:	460c      	mov	r4, r1
 801429a:	6849      	ldr	r1, [r1, #4]
 801429c:	6923      	ldr	r3, [r4, #16]
 801429e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80142a2:	68a3      	ldr	r3, [r4, #8]
 80142a4:	4607      	mov	r7, r0
 80142a6:	4691      	mov	r9, r2
 80142a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80142ac:	f108 0601 	add.w	r6, r8, #1
 80142b0:	42b3      	cmp	r3, r6
 80142b2:	db0b      	blt.n	80142cc <__lshift+0x38>
 80142b4:	4638      	mov	r0, r7
 80142b6:	f7ff fd91 	bl	8013ddc <_Balloc>
 80142ba:	4605      	mov	r5, r0
 80142bc:	b948      	cbnz	r0, 80142d2 <__lshift+0x3e>
 80142be:	4602      	mov	r2, r0
 80142c0:	4b2a      	ldr	r3, [pc, #168]	; (801436c <__lshift+0xd8>)
 80142c2:	482b      	ldr	r0, [pc, #172]	; (8014370 <__lshift+0xdc>)
 80142c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80142c8:	f000 fe84 	bl	8014fd4 <__assert_func>
 80142cc:	3101      	adds	r1, #1
 80142ce:	005b      	lsls	r3, r3, #1
 80142d0:	e7ee      	b.n	80142b0 <__lshift+0x1c>
 80142d2:	2300      	movs	r3, #0
 80142d4:	f100 0114 	add.w	r1, r0, #20
 80142d8:	f100 0210 	add.w	r2, r0, #16
 80142dc:	4618      	mov	r0, r3
 80142de:	4553      	cmp	r3, sl
 80142e0:	db37      	blt.n	8014352 <__lshift+0xbe>
 80142e2:	6920      	ldr	r0, [r4, #16]
 80142e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80142e8:	f104 0314 	add.w	r3, r4, #20
 80142ec:	f019 091f 	ands.w	r9, r9, #31
 80142f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80142f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80142f8:	d02f      	beq.n	801435a <__lshift+0xc6>
 80142fa:	f1c9 0e20 	rsb	lr, r9, #32
 80142fe:	468a      	mov	sl, r1
 8014300:	f04f 0c00 	mov.w	ip, #0
 8014304:	681a      	ldr	r2, [r3, #0]
 8014306:	fa02 f209 	lsl.w	r2, r2, r9
 801430a:	ea42 020c 	orr.w	r2, r2, ip
 801430e:	f84a 2b04 	str.w	r2, [sl], #4
 8014312:	f853 2b04 	ldr.w	r2, [r3], #4
 8014316:	4298      	cmp	r0, r3
 8014318:	fa22 fc0e 	lsr.w	ip, r2, lr
 801431c:	d8f2      	bhi.n	8014304 <__lshift+0x70>
 801431e:	1b03      	subs	r3, r0, r4
 8014320:	3b15      	subs	r3, #21
 8014322:	f023 0303 	bic.w	r3, r3, #3
 8014326:	3304      	adds	r3, #4
 8014328:	f104 0215 	add.w	r2, r4, #21
 801432c:	4290      	cmp	r0, r2
 801432e:	bf38      	it	cc
 8014330:	2304      	movcc	r3, #4
 8014332:	f841 c003 	str.w	ip, [r1, r3]
 8014336:	f1bc 0f00 	cmp.w	ip, #0
 801433a:	d001      	beq.n	8014340 <__lshift+0xac>
 801433c:	f108 0602 	add.w	r6, r8, #2
 8014340:	3e01      	subs	r6, #1
 8014342:	4638      	mov	r0, r7
 8014344:	612e      	str	r6, [r5, #16]
 8014346:	4621      	mov	r1, r4
 8014348:	f7ff fd88 	bl	8013e5c <_Bfree>
 801434c:	4628      	mov	r0, r5
 801434e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014352:	f842 0f04 	str.w	r0, [r2, #4]!
 8014356:	3301      	adds	r3, #1
 8014358:	e7c1      	b.n	80142de <__lshift+0x4a>
 801435a:	3904      	subs	r1, #4
 801435c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014360:	f841 2f04 	str.w	r2, [r1, #4]!
 8014364:	4298      	cmp	r0, r3
 8014366:	d8f9      	bhi.n	801435c <__lshift+0xc8>
 8014368:	e7ea      	b.n	8014340 <__lshift+0xac>
 801436a:	bf00      	nop
 801436c:	0814f9c0 	.word	0x0814f9c0
 8014370:	0814fab0 	.word	0x0814fab0

08014374 <__mcmp>:
 8014374:	b530      	push	{r4, r5, lr}
 8014376:	6902      	ldr	r2, [r0, #16]
 8014378:	690c      	ldr	r4, [r1, #16]
 801437a:	1b12      	subs	r2, r2, r4
 801437c:	d10e      	bne.n	801439c <__mcmp+0x28>
 801437e:	f100 0314 	add.w	r3, r0, #20
 8014382:	3114      	adds	r1, #20
 8014384:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014388:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801438c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014390:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014394:	42a5      	cmp	r5, r4
 8014396:	d003      	beq.n	80143a0 <__mcmp+0x2c>
 8014398:	d305      	bcc.n	80143a6 <__mcmp+0x32>
 801439a:	2201      	movs	r2, #1
 801439c:	4610      	mov	r0, r2
 801439e:	bd30      	pop	{r4, r5, pc}
 80143a0:	4283      	cmp	r3, r0
 80143a2:	d3f3      	bcc.n	801438c <__mcmp+0x18>
 80143a4:	e7fa      	b.n	801439c <__mcmp+0x28>
 80143a6:	f04f 32ff 	mov.w	r2, #4294967295
 80143aa:	e7f7      	b.n	801439c <__mcmp+0x28>

080143ac <__mdiff>:
 80143ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143b0:	460c      	mov	r4, r1
 80143b2:	4606      	mov	r6, r0
 80143b4:	4611      	mov	r1, r2
 80143b6:	4620      	mov	r0, r4
 80143b8:	4690      	mov	r8, r2
 80143ba:	f7ff ffdb 	bl	8014374 <__mcmp>
 80143be:	1e05      	subs	r5, r0, #0
 80143c0:	d110      	bne.n	80143e4 <__mdiff+0x38>
 80143c2:	4629      	mov	r1, r5
 80143c4:	4630      	mov	r0, r6
 80143c6:	f7ff fd09 	bl	8013ddc <_Balloc>
 80143ca:	b930      	cbnz	r0, 80143da <__mdiff+0x2e>
 80143cc:	4b3a      	ldr	r3, [pc, #232]	; (80144b8 <__mdiff+0x10c>)
 80143ce:	4602      	mov	r2, r0
 80143d0:	f240 2132 	movw	r1, #562	; 0x232
 80143d4:	4839      	ldr	r0, [pc, #228]	; (80144bc <__mdiff+0x110>)
 80143d6:	f000 fdfd 	bl	8014fd4 <__assert_func>
 80143da:	2301      	movs	r3, #1
 80143dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80143e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143e4:	bfa4      	itt	ge
 80143e6:	4643      	movge	r3, r8
 80143e8:	46a0      	movge	r8, r4
 80143ea:	4630      	mov	r0, r6
 80143ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80143f0:	bfa6      	itte	ge
 80143f2:	461c      	movge	r4, r3
 80143f4:	2500      	movge	r5, #0
 80143f6:	2501      	movlt	r5, #1
 80143f8:	f7ff fcf0 	bl	8013ddc <_Balloc>
 80143fc:	b920      	cbnz	r0, 8014408 <__mdiff+0x5c>
 80143fe:	4b2e      	ldr	r3, [pc, #184]	; (80144b8 <__mdiff+0x10c>)
 8014400:	4602      	mov	r2, r0
 8014402:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014406:	e7e5      	b.n	80143d4 <__mdiff+0x28>
 8014408:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801440c:	6926      	ldr	r6, [r4, #16]
 801440e:	60c5      	str	r5, [r0, #12]
 8014410:	f104 0914 	add.w	r9, r4, #20
 8014414:	f108 0514 	add.w	r5, r8, #20
 8014418:	f100 0e14 	add.w	lr, r0, #20
 801441c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014420:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014424:	f108 0210 	add.w	r2, r8, #16
 8014428:	46f2      	mov	sl, lr
 801442a:	2100      	movs	r1, #0
 801442c:	f859 3b04 	ldr.w	r3, [r9], #4
 8014430:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014434:	fa1f f883 	uxth.w	r8, r3
 8014438:	fa11 f18b 	uxtah	r1, r1, fp
 801443c:	0c1b      	lsrs	r3, r3, #16
 801443e:	eba1 0808 	sub.w	r8, r1, r8
 8014442:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014446:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801444a:	fa1f f888 	uxth.w	r8, r8
 801444e:	1419      	asrs	r1, r3, #16
 8014450:	454e      	cmp	r6, r9
 8014452:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014456:	f84a 3b04 	str.w	r3, [sl], #4
 801445a:	d8e7      	bhi.n	801442c <__mdiff+0x80>
 801445c:	1b33      	subs	r3, r6, r4
 801445e:	3b15      	subs	r3, #21
 8014460:	f023 0303 	bic.w	r3, r3, #3
 8014464:	3304      	adds	r3, #4
 8014466:	3415      	adds	r4, #21
 8014468:	42a6      	cmp	r6, r4
 801446a:	bf38      	it	cc
 801446c:	2304      	movcc	r3, #4
 801446e:	441d      	add	r5, r3
 8014470:	4473      	add	r3, lr
 8014472:	469e      	mov	lr, r3
 8014474:	462e      	mov	r6, r5
 8014476:	4566      	cmp	r6, ip
 8014478:	d30e      	bcc.n	8014498 <__mdiff+0xec>
 801447a:	f10c 0203 	add.w	r2, ip, #3
 801447e:	1b52      	subs	r2, r2, r5
 8014480:	f022 0203 	bic.w	r2, r2, #3
 8014484:	3d03      	subs	r5, #3
 8014486:	45ac      	cmp	ip, r5
 8014488:	bf38      	it	cc
 801448a:	2200      	movcc	r2, #0
 801448c:	441a      	add	r2, r3
 801448e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8014492:	b17b      	cbz	r3, 80144b4 <__mdiff+0x108>
 8014494:	6107      	str	r7, [r0, #16]
 8014496:	e7a3      	b.n	80143e0 <__mdiff+0x34>
 8014498:	f856 8b04 	ldr.w	r8, [r6], #4
 801449c:	fa11 f288 	uxtah	r2, r1, r8
 80144a0:	1414      	asrs	r4, r2, #16
 80144a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80144a6:	b292      	uxth	r2, r2
 80144a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80144ac:	f84e 2b04 	str.w	r2, [lr], #4
 80144b0:	1421      	asrs	r1, r4, #16
 80144b2:	e7e0      	b.n	8014476 <__mdiff+0xca>
 80144b4:	3f01      	subs	r7, #1
 80144b6:	e7ea      	b.n	801448e <__mdiff+0xe2>
 80144b8:	0814f9c0 	.word	0x0814f9c0
 80144bc:	0814fab0 	.word	0x0814fab0

080144c0 <__ulp>:
 80144c0:	b082      	sub	sp, #8
 80144c2:	ed8d 0b00 	vstr	d0, [sp]
 80144c6:	9b01      	ldr	r3, [sp, #4]
 80144c8:	4912      	ldr	r1, [pc, #72]	; (8014514 <__ulp+0x54>)
 80144ca:	4019      	ands	r1, r3
 80144cc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80144d0:	2900      	cmp	r1, #0
 80144d2:	dd05      	ble.n	80144e0 <__ulp+0x20>
 80144d4:	2200      	movs	r2, #0
 80144d6:	460b      	mov	r3, r1
 80144d8:	ec43 2b10 	vmov	d0, r2, r3
 80144dc:	b002      	add	sp, #8
 80144de:	4770      	bx	lr
 80144e0:	4249      	negs	r1, r1
 80144e2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80144e6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80144ea:	f04f 0200 	mov.w	r2, #0
 80144ee:	f04f 0300 	mov.w	r3, #0
 80144f2:	da04      	bge.n	80144fe <__ulp+0x3e>
 80144f4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80144f8:	fa41 f300 	asr.w	r3, r1, r0
 80144fc:	e7ec      	b.n	80144d8 <__ulp+0x18>
 80144fe:	f1a0 0114 	sub.w	r1, r0, #20
 8014502:	291e      	cmp	r1, #30
 8014504:	bfda      	itte	le
 8014506:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801450a:	fa20 f101 	lsrle.w	r1, r0, r1
 801450e:	2101      	movgt	r1, #1
 8014510:	460a      	mov	r2, r1
 8014512:	e7e1      	b.n	80144d8 <__ulp+0x18>
 8014514:	7ff00000 	.word	0x7ff00000

08014518 <__b2d>:
 8014518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801451a:	6905      	ldr	r5, [r0, #16]
 801451c:	f100 0714 	add.w	r7, r0, #20
 8014520:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8014524:	1f2e      	subs	r6, r5, #4
 8014526:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801452a:	4620      	mov	r0, r4
 801452c:	f7ff fd48 	bl	8013fc0 <__hi0bits>
 8014530:	f1c0 0320 	rsb	r3, r0, #32
 8014534:	280a      	cmp	r0, #10
 8014536:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80145b4 <__b2d+0x9c>
 801453a:	600b      	str	r3, [r1, #0]
 801453c:	dc14      	bgt.n	8014568 <__b2d+0x50>
 801453e:	f1c0 0e0b 	rsb	lr, r0, #11
 8014542:	fa24 f10e 	lsr.w	r1, r4, lr
 8014546:	42b7      	cmp	r7, r6
 8014548:	ea41 030c 	orr.w	r3, r1, ip
 801454c:	bf34      	ite	cc
 801454e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014552:	2100      	movcs	r1, #0
 8014554:	3015      	adds	r0, #21
 8014556:	fa04 f000 	lsl.w	r0, r4, r0
 801455a:	fa21 f10e 	lsr.w	r1, r1, lr
 801455e:	ea40 0201 	orr.w	r2, r0, r1
 8014562:	ec43 2b10 	vmov	d0, r2, r3
 8014566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014568:	42b7      	cmp	r7, r6
 801456a:	bf3a      	itte	cc
 801456c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014570:	f1a5 0608 	subcc.w	r6, r5, #8
 8014574:	2100      	movcs	r1, #0
 8014576:	380b      	subs	r0, #11
 8014578:	d017      	beq.n	80145aa <__b2d+0x92>
 801457a:	f1c0 0c20 	rsb	ip, r0, #32
 801457e:	fa04 f500 	lsl.w	r5, r4, r0
 8014582:	42be      	cmp	r6, r7
 8014584:	fa21 f40c 	lsr.w	r4, r1, ip
 8014588:	ea45 0504 	orr.w	r5, r5, r4
 801458c:	bf8c      	ite	hi
 801458e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8014592:	2400      	movls	r4, #0
 8014594:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8014598:	fa01 f000 	lsl.w	r0, r1, r0
 801459c:	fa24 f40c 	lsr.w	r4, r4, ip
 80145a0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80145a4:	ea40 0204 	orr.w	r2, r0, r4
 80145a8:	e7db      	b.n	8014562 <__b2d+0x4a>
 80145aa:	ea44 030c 	orr.w	r3, r4, ip
 80145ae:	460a      	mov	r2, r1
 80145b0:	e7d7      	b.n	8014562 <__b2d+0x4a>
 80145b2:	bf00      	nop
 80145b4:	3ff00000 	.word	0x3ff00000

080145b8 <__d2b>:
 80145b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80145bc:	4689      	mov	r9, r1
 80145be:	2101      	movs	r1, #1
 80145c0:	ec57 6b10 	vmov	r6, r7, d0
 80145c4:	4690      	mov	r8, r2
 80145c6:	f7ff fc09 	bl	8013ddc <_Balloc>
 80145ca:	4604      	mov	r4, r0
 80145cc:	b930      	cbnz	r0, 80145dc <__d2b+0x24>
 80145ce:	4602      	mov	r2, r0
 80145d0:	4b25      	ldr	r3, [pc, #148]	; (8014668 <__d2b+0xb0>)
 80145d2:	4826      	ldr	r0, [pc, #152]	; (801466c <__d2b+0xb4>)
 80145d4:	f240 310a 	movw	r1, #778	; 0x30a
 80145d8:	f000 fcfc 	bl	8014fd4 <__assert_func>
 80145dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80145e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80145e4:	bb35      	cbnz	r5, 8014634 <__d2b+0x7c>
 80145e6:	2e00      	cmp	r6, #0
 80145e8:	9301      	str	r3, [sp, #4]
 80145ea:	d028      	beq.n	801463e <__d2b+0x86>
 80145ec:	4668      	mov	r0, sp
 80145ee:	9600      	str	r6, [sp, #0]
 80145f0:	f7ff fd06 	bl	8014000 <__lo0bits>
 80145f4:	9900      	ldr	r1, [sp, #0]
 80145f6:	b300      	cbz	r0, 801463a <__d2b+0x82>
 80145f8:	9a01      	ldr	r2, [sp, #4]
 80145fa:	f1c0 0320 	rsb	r3, r0, #32
 80145fe:	fa02 f303 	lsl.w	r3, r2, r3
 8014602:	430b      	orrs	r3, r1
 8014604:	40c2      	lsrs	r2, r0
 8014606:	6163      	str	r3, [r4, #20]
 8014608:	9201      	str	r2, [sp, #4]
 801460a:	9b01      	ldr	r3, [sp, #4]
 801460c:	61a3      	str	r3, [r4, #24]
 801460e:	2b00      	cmp	r3, #0
 8014610:	bf14      	ite	ne
 8014612:	2202      	movne	r2, #2
 8014614:	2201      	moveq	r2, #1
 8014616:	6122      	str	r2, [r4, #16]
 8014618:	b1d5      	cbz	r5, 8014650 <__d2b+0x98>
 801461a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801461e:	4405      	add	r5, r0
 8014620:	f8c9 5000 	str.w	r5, [r9]
 8014624:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014628:	f8c8 0000 	str.w	r0, [r8]
 801462c:	4620      	mov	r0, r4
 801462e:	b003      	add	sp, #12
 8014630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014638:	e7d5      	b.n	80145e6 <__d2b+0x2e>
 801463a:	6161      	str	r1, [r4, #20]
 801463c:	e7e5      	b.n	801460a <__d2b+0x52>
 801463e:	a801      	add	r0, sp, #4
 8014640:	f7ff fcde 	bl	8014000 <__lo0bits>
 8014644:	9b01      	ldr	r3, [sp, #4]
 8014646:	6163      	str	r3, [r4, #20]
 8014648:	2201      	movs	r2, #1
 801464a:	6122      	str	r2, [r4, #16]
 801464c:	3020      	adds	r0, #32
 801464e:	e7e3      	b.n	8014618 <__d2b+0x60>
 8014650:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014654:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014658:	f8c9 0000 	str.w	r0, [r9]
 801465c:	6918      	ldr	r0, [r3, #16]
 801465e:	f7ff fcaf 	bl	8013fc0 <__hi0bits>
 8014662:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014666:	e7df      	b.n	8014628 <__d2b+0x70>
 8014668:	0814f9c0 	.word	0x0814f9c0
 801466c:	0814fab0 	.word	0x0814fab0

08014670 <__ratio>:
 8014670:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014674:	4688      	mov	r8, r1
 8014676:	4669      	mov	r1, sp
 8014678:	4681      	mov	r9, r0
 801467a:	f7ff ff4d 	bl	8014518 <__b2d>
 801467e:	a901      	add	r1, sp, #4
 8014680:	4640      	mov	r0, r8
 8014682:	ec55 4b10 	vmov	r4, r5, d0
 8014686:	f7ff ff47 	bl	8014518 <__b2d>
 801468a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801468e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014692:	eba3 0c02 	sub.w	ip, r3, r2
 8014696:	e9dd 3200 	ldrd	r3, r2, [sp]
 801469a:	1a9b      	subs	r3, r3, r2
 801469c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80146a0:	ec51 0b10 	vmov	r0, r1, d0
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	bfd6      	itet	le
 80146a8:	460a      	movle	r2, r1
 80146aa:	462a      	movgt	r2, r5
 80146ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80146b0:	468b      	mov	fp, r1
 80146b2:	462f      	mov	r7, r5
 80146b4:	bfd4      	ite	le
 80146b6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80146ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80146be:	4620      	mov	r0, r4
 80146c0:	ee10 2a10 	vmov	r2, s0
 80146c4:	465b      	mov	r3, fp
 80146c6:	4639      	mov	r1, r7
 80146c8:	f7f2 f938 	bl	800693c <__aeabi_ddiv>
 80146cc:	ec41 0b10 	vmov	d0, r0, r1
 80146d0:	b003      	add	sp, #12
 80146d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080146d6 <__copybits>:
 80146d6:	3901      	subs	r1, #1
 80146d8:	b570      	push	{r4, r5, r6, lr}
 80146da:	1149      	asrs	r1, r1, #5
 80146dc:	6914      	ldr	r4, [r2, #16]
 80146de:	3101      	adds	r1, #1
 80146e0:	f102 0314 	add.w	r3, r2, #20
 80146e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80146e8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80146ec:	1f05      	subs	r5, r0, #4
 80146ee:	42a3      	cmp	r3, r4
 80146f0:	d30c      	bcc.n	801470c <__copybits+0x36>
 80146f2:	1aa3      	subs	r3, r4, r2
 80146f4:	3b11      	subs	r3, #17
 80146f6:	f023 0303 	bic.w	r3, r3, #3
 80146fa:	3211      	adds	r2, #17
 80146fc:	42a2      	cmp	r2, r4
 80146fe:	bf88      	it	hi
 8014700:	2300      	movhi	r3, #0
 8014702:	4418      	add	r0, r3
 8014704:	2300      	movs	r3, #0
 8014706:	4288      	cmp	r0, r1
 8014708:	d305      	bcc.n	8014716 <__copybits+0x40>
 801470a:	bd70      	pop	{r4, r5, r6, pc}
 801470c:	f853 6b04 	ldr.w	r6, [r3], #4
 8014710:	f845 6f04 	str.w	r6, [r5, #4]!
 8014714:	e7eb      	b.n	80146ee <__copybits+0x18>
 8014716:	f840 3b04 	str.w	r3, [r0], #4
 801471a:	e7f4      	b.n	8014706 <__copybits+0x30>

0801471c <__any_on>:
 801471c:	f100 0214 	add.w	r2, r0, #20
 8014720:	6900      	ldr	r0, [r0, #16]
 8014722:	114b      	asrs	r3, r1, #5
 8014724:	4298      	cmp	r0, r3
 8014726:	b510      	push	{r4, lr}
 8014728:	db11      	blt.n	801474e <__any_on+0x32>
 801472a:	dd0a      	ble.n	8014742 <__any_on+0x26>
 801472c:	f011 011f 	ands.w	r1, r1, #31
 8014730:	d007      	beq.n	8014742 <__any_on+0x26>
 8014732:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014736:	fa24 f001 	lsr.w	r0, r4, r1
 801473a:	fa00 f101 	lsl.w	r1, r0, r1
 801473e:	428c      	cmp	r4, r1
 8014740:	d10b      	bne.n	801475a <__any_on+0x3e>
 8014742:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014746:	4293      	cmp	r3, r2
 8014748:	d803      	bhi.n	8014752 <__any_on+0x36>
 801474a:	2000      	movs	r0, #0
 801474c:	bd10      	pop	{r4, pc}
 801474e:	4603      	mov	r3, r0
 8014750:	e7f7      	b.n	8014742 <__any_on+0x26>
 8014752:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014756:	2900      	cmp	r1, #0
 8014758:	d0f5      	beq.n	8014746 <__any_on+0x2a>
 801475a:	2001      	movs	r0, #1
 801475c:	e7f6      	b.n	801474c <__any_on+0x30>

0801475e <_calloc_r>:
 801475e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014760:	fba1 2402 	umull	r2, r4, r1, r2
 8014764:	b94c      	cbnz	r4, 801477a <_calloc_r+0x1c>
 8014766:	4611      	mov	r1, r2
 8014768:	9201      	str	r2, [sp, #4]
 801476a:	f000 f87b 	bl	8014864 <_malloc_r>
 801476e:	9a01      	ldr	r2, [sp, #4]
 8014770:	4605      	mov	r5, r0
 8014772:	b930      	cbnz	r0, 8014782 <_calloc_r+0x24>
 8014774:	4628      	mov	r0, r5
 8014776:	b003      	add	sp, #12
 8014778:	bd30      	pop	{r4, r5, pc}
 801477a:	220c      	movs	r2, #12
 801477c:	6002      	str	r2, [r0, #0]
 801477e:	2500      	movs	r5, #0
 8014780:	e7f8      	b.n	8014774 <_calloc_r+0x16>
 8014782:	4621      	mov	r1, r4
 8014784:	f7fc f862 	bl	801084c <memset>
 8014788:	e7f4      	b.n	8014774 <_calloc_r+0x16>
	...

0801478c <_free_r>:
 801478c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801478e:	2900      	cmp	r1, #0
 8014790:	d044      	beq.n	801481c <_free_r+0x90>
 8014792:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014796:	9001      	str	r0, [sp, #4]
 8014798:	2b00      	cmp	r3, #0
 801479a:	f1a1 0404 	sub.w	r4, r1, #4
 801479e:	bfb8      	it	lt
 80147a0:	18e4      	addlt	r4, r4, r3
 80147a2:	f000 fca5 	bl	80150f0 <__malloc_lock>
 80147a6:	4a1e      	ldr	r2, [pc, #120]	; (8014820 <_free_r+0x94>)
 80147a8:	9801      	ldr	r0, [sp, #4]
 80147aa:	6813      	ldr	r3, [r2, #0]
 80147ac:	b933      	cbnz	r3, 80147bc <_free_r+0x30>
 80147ae:	6063      	str	r3, [r4, #4]
 80147b0:	6014      	str	r4, [r2, #0]
 80147b2:	b003      	add	sp, #12
 80147b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80147b8:	f000 bca0 	b.w	80150fc <__malloc_unlock>
 80147bc:	42a3      	cmp	r3, r4
 80147be:	d908      	bls.n	80147d2 <_free_r+0x46>
 80147c0:	6825      	ldr	r5, [r4, #0]
 80147c2:	1961      	adds	r1, r4, r5
 80147c4:	428b      	cmp	r3, r1
 80147c6:	bf01      	itttt	eq
 80147c8:	6819      	ldreq	r1, [r3, #0]
 80147ca:	685b      	ldreq	r3, [r3, #4]
 80147cc:	1949      	addeq	r1, r1, r5
 80147ce:	6021      	streq	r1, [r4, #0]
 80147d0:	e7ed      	b.n	80147ae <_free_r+0x22>
 80147d2:	461a      	mov	r2, r3
 80147d4:	685b      	ldr	r3, [r3, #4]
 80147d6:	b10b      	cbz	r3, 80147dc <_free_r+0x50>
 80147d8:	42a3      	cmp	r3, r4
 80147da:	d9fa      	bls.n	80147d2 <_free_r+0x46>
 80147dc:	6811      	ldr	r1, [r2, #0]
 80147de:	1855      	adds	r5, r2, r1
 80147e0:	42a5      	cmp	r5, r4
 80147e2:	d10b      	bne.n	80147fc <_free_r+0x70>
 80147e4:	6824      	ldr	r4, [r4, #0]
 80147e6:	4421      	add	r1, r4
 80147e8:	1854      	adds	r4, r2, r1
 80147ea:	42a3      	cmp	r3, r4
 80147ec:	6011      	str	r1, [r2, #0]
 80147ee:	d1e0      	bne.n	80147b2 <_free_r+0x26>
 80147f0:	681c      	ldr	r4, [r3, #0]
 80147f2:	685b      	ldr	r3, [r3, #4]
 80147f4:	6053      	str	r3, [r2, #4]
 80147f6:	4421      	add	r1, r4
 80147f8:	6011      	str	r1, [r2, #0]
 80147fa:	e7da      	b.n	80147b2 <_free_r+0x26>
 80147fc:	d902      	bls.n	8014804 <_free_r+0x78>
 80147fe:	230c      	movs	r3, #12
 8014800:	6003      	str	r3, [r0, #0]
 8014802:	e7d6      	b.n	80147b2 <_free_r+0x26>
 8014804:	6825      	ldr	r5, [r4, #0]
 8014806:	1961      	adds	r1, r4, r5
 8014808:	428b      	cmp	r3, r1
 801480a:	bf04      	itt	eq
 801480c:	6819      	ldreq	r1, [r3, #0]
 801480e:	685b      	ldreq	r3, [r3, #4]
 8014810:	6063      	str	r3, [r4, #4]
 8014812:	bf04      	itt	eq
 8014814:	1949      	addeq	r1, r1, r5
 8014816:	6021      	streq	r1, [r4, #0]
 8014818:	6054      	str	r4, [r2, #4]
 801481a:	e7ca      	b.n	80147b2 <_free_r+0x26>
 801481c:	b003      	add	sp, #12
 801481e:	bd30      	pop	{r4, r5, pc}
 8014820:	20019fe0 	.word	0x20019fe0

08014824 <sbrk_aligned>:
 8014824:	b570      	push	{r4, r5, r6, lr}
 8014826:	4e0e      	ldr	r6, [pc, #56]	; (8014860 <sbrk_aligned+0x3c>)
 8014828:	460c      	mov	r4, r1
 801482a:	6831      	ldr	r1, [r6, #0]
 801482c:	4605      	mov	r5, r0
 801482e:	b911      	cbnz	r1, 8014836 <sbrk_aligned+0x12>
 8014830:	f000 fb4a 	bl	8014ec8 <_sbrk_r>
 8014834:	6030      	str	r0, [r6, #0]
 8014836:	4621      	mov	r1, r4
 8014838:	4628      	mov	r0, r5
 801483a:	f000 fb45 	bl	8014ec8 <_sbrk_r>
 801483e:	1c43      	adds	r3, r0, #1
 8014840:	d00a      	beq.n	8014858 <sbrk_aligned+0x34>
 8014842:	1cc4      	adds	r4, r0, #3
 8014844:	f024 0403 	bic.w	r4, r4, #3
 8014848:	42a0      	cmp	r0, r4
 801484a:	d007      	beq.n	801485c <sbrk_aligned+0x38>
 801484c:	1a21      	subs	r1, r4, r0
 801484e:	4628      	mov	r0, r5
 8014850:	f000 fb3a 	bl	8014ec8 <_sbrk_r>
 8014854:	3001      	adds	r0, #1
 8014856:	d101      	bne.n	801485c <sbrk_aligned+0x38>
 8014858:	f04f 34ff 	mov.w	r4, #4294967295
 801485c:	4620      	mov	r0, r4
 801485e:	bd70      	pop	{r4, r5, r6, pc}
 8014860:	20019fe4 	.word	0x20019fe4

08014864 <_malloc_r>:
 8014864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014868:	1ccd      	adds	r5, r1, #3
 801486a:	f025 0503 	bic.w	r5, r5, #3
 801486e:	3508      	adds	r5, #8
 8014870:	2d0c      	cmp	r5, #12
 8014872:	bf38      	it	cc
 8014874:	250c      	movcc	r5, #12
 8014876:	2d00      	cmp	r5, #0
 8014878:	4607      	mov	r7, r0
 801487a:	db01      	blt.n	8014880 <_malloc_r+0x1c>
 801487c:	42a9      	cmp	r1, r5
 801487e:	d905      	bls.n	801488c <_malloc_r+0x28>
 8014880:	230c      	movs	r3, #12
 8014882:	603b      	str	r3, [r7, #0]
 8014884:	2600      	movs	r6, #0
 8014886:	4630      	mov	r0, r6
 8014888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801488c:	4e2e      	ldr	r6, [pc, #184]	; (8014948 <_malloc_r+0xe4>)
 801488e:	f000 fc2f 	bl	80150f0 <__malloc_lock>
 8014892:	6833      	ldr	r3, [r6, #0]
 8014894:	461c      	mov	r4, r3
 8014896:	bb34      	cbnz	r4, 80148e6 <_malloc_r+0x82>
 8014898:	4629      	mov	r1, r5
 801489a:	4638      	mov	r0, r7
 801489c:	f7ff ffc2 	bl	8014824 <sbrk_aligned>
 80148a0:	1c43      	adds	r3, r0, #1
 80148a2:	4604      	mov	r4, r0
 80148a4:	d14d      	bne.n	8014942 <_malloc_r+0xde>
 80148a6:	6834      	ldr	r4, [r6, #0]
 80148a8:	4626      	mov	r6, r4
 80148aa:	2e00      	cmp	r6, #0
 80148ac:	d140      	bne.n	8014930 <_malloc_r+0xcc>
 80148ae:	6823      	ldr	r3, [r4, #0]
 80148b0:	4631      	mov	r1, r6
 80148b2:	4638      	mov	r0, r7
 80148b4:	eb04 0803 	add.w	r8, r4, r3
 80148b8:	f000 fb06 	bl	8014ec8 <_sbrk_r>
 80148bc:	4580      	cmp	r8, r0
 80148be:	d13a      	bne.n	8014936 <_malloc_r+0xd2>
 80148c0:	6821      	ldr	r1, [r4, #0]
 80148c2:	3503      	adds	r5, #3
 80148c4:	1a6d      	subs	r5, r5, r1
 80148c6:	f025 0503 	bic.w	r5, r5, #3
 80148ca:	3508      	adds	r5, #8
 80148cc:	2d0c      	cmp	r5, #12
 80148ce:	bf38      	it	cc
 80148d0:	250c      	movcc	r5, #12
 80148d2:	4629      	mov	r1, r5
 80148d4:	4638      	mov	r0, r7
 80148d6:	f7ff ffa5 	bl	8014824 <sbrk_aligned>
 80148da:	3001      	adds	r0, #1
 80148dc:	d02b      	beq.n	8014936 <_malloc_r+0xd2>
 80148de:	6823      	ldr	r3, [r4, #0]
 80148e0:	442b      	add	r3, r5
 80148e2:	6023      	str	r3, [r4, #0]
 80148e4:	e00e      	b.n	8014904 <_malloc_r+0xa0>
 80148e6:	6822      	ldr	r2, [r4, #0]
 80148e8:	1b52      	subs	r2, r2, r5
 80148ea:	d41e      	bmi.n	801492a <_malloc_r+0xc6>
 80148ec:	2a0b      	cmp	r2, #11
 80148ee:	d916      	bls.n	801491e <_malloc_r+0xba>
 80148f0:	1961      	adds	r1, r4, r5
 80148f2:	42a3      	cmp	r3, r4
 80148f4:	6025      	str	r5, [r4, #0]
 80148f6:	bf18      	it	ne
 80148f8:	6059      	strne	r1, [r3, #4]
 80148fa:	6863      	ldr	r3, [r4, #4]
 80148fc:	bf08      	it	eq
 80148fe:	6031      	streq	r1, [r6, #0]
 8014900:	5162      	str	r2, [r4, r5]
 8014902:	604b      	str	r3, [r1, #4]
 8014904:	4638      	mov	r0, r7
 8014906:	f104 060b 	add.w	r6, r4, #11
 801490a:	f000 fbf7 	bl	80150fc <__malloc_unlock>
 801490e:	f026 0607 	bic.w	r6, r6, #7
 8014912:	1d23      	adds	r3, r4, #4
 8014914:	1af2      	subs	r2, r6, r3
 8014916:	d0b6      	beq.n	8014886 <_malloc_r+0x22>
 8014918:	1b9b      	subs	r3, r3, r6
 801491a:	50a3      	str	r3, [r4, r2]
 801491c:	e7b3      	b.n	8014886 <_malloc_r+0x22>
 801491e:	6862      	ldr	r2, [r4, #4]
 8014920:	42a3      	cmp	r3, r4
 8014922:	bf0c      	ite	eq
 8014924:	6032      	streq	r2, [r6, #0]
 8014926:	605a      	strne	r2, [r3, #4]
 8014928:	e7ec      	b.n	8014904 <_malloc_r+0xa0>
 801492a:	4623      	mov	r3, r4
 801492c:	6864      	ldr	r4, [r4, #4]
 801492e:	e7b2      	b.n	8014896 <_malloc_r+0x32>
 8014930:	4634      	mov	r4, r6
 8014932:	6876      	ldr	r6, [r6, #4]
 8014934:	e7b9      	b.n	80148aa <_malloc_r+0x46>
 8014936:	230c      	movs	r3, #12
 8014938:	603b      	str	r3, [r7, #0]
 801493a:	4638      	mov	r0, r7
 801493c:	f000 fbde 	bl	80150fc <__malloc_unlock>
 8014940:	e7a1      	b.n	8014886 <_malloc_r+0x22>
 8014942:	6025      	str	r5, [r4, #0]
 8014944:	e7de      	b.n	8014904 <_malloc_r+0xa0>
 8014946:	bf00      	nop
 8014948:	20019fe0 	.word	0x20019fe0

0801494c <__ssputs_r>:
 801494c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014950:	688e      	ldr	r6, [r1, #8]
 8014952:	429e      	cmp	r6, r3
 8014954:	4682      	mov	sl, r0
 8014956:	460c      	mov	r4, r1
 8014958:	4690      	mov	r8, r2
 801495a:	461f      	mov	r7, r3
 801495c:	d838      	bhi.n	80149d0 <__ssputs_r+0x84>
 801495e:	898a      	ldrh	r2, [r1, #12]
 8014960:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014964:	d032      	beq.n	80149cc <__ssputs_r+0x80>
 8014966:	6825      	ldr	r5, [r4, #0]
 8014968:	6909      	ldr	r1, [r1, #16]
 801496a:	eba5 0901 	sub.w	r9, r5, r1
 801496e:	6965      	ldr	r5, [r4, #20]
 8014970:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014974:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014978:	3301      	adds	r3, #1
 801497a:	444b      	add	r3, r9
 801497c:	106d      	asrs	r5, r5, #1
 801497e:	429d      	cmp	r5, r3
 8014980:	bf38      	it	cc
 8014982:	461d      	movcc	r5, r3
 8014984:	0553      	lsls	r3, r2, #21
 8014986:	d531      	bpl.n	80149ec <__ssputs_r+0xa0>
 8014988:	4629      	mov	r1, r5
 801498a:	f7ff ff6b 	bl	8014864 <_malloc_r>
 801498e:	4606      	mov	r6, r0
 8014990:	b950      	cbnz	r0, 80149a8 <__ssputs_r+0x5c>
 8014992:	230c      	movs	r3, #12
 8014994:	f8ca 3000 	str.w	r3, [sl]
 8014998:	89a3      	ldrh	r3, [r4, #12]
 801499a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801499e:	81a3      	strh	r3, [r4, #12]
 80149a0:	f04f 30ff 	mov.w	r0, #4294967295
 80149a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149a8:	6921      	ldr	r1, [r4, #16]
 80149aa:	464a      	mov	r2, r9
 80149ac:	f7fb ff40 	bl	8010830 <memcpy>
 80149b0:	89a3      	ldrh	r3, [r4, #12]
 80149b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80149b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80149ba:	81a3      	strh	r3, [r4, #12]
 80149bc:	6126      	str	r6, [r4, #16]
 80149be:	6165      	str	r5, [r4, #20]
 80149c0:	444e      	add	r6, r9
 80149c2:	eba5 0509 	sub.w	r5, r5, r9
 80149c6:	6026      	str	r6, [r4, #0]
 80149c8:	60a5      	str	r5, [r4, #8]
 80149ca:	463e      	mov	r6, r7
 80149cc:	42be      	cmp	r6, r7
 80149ce:	d900      	bls.n	80149d2 <__ssputs_r+0x86>
 80149d0:	463e      	mov	r6, r7
 80149d2:	6820      	ldr	r0, [r4, #0]
 80149d4:	4632      	mov	r2, r6
 80149d6:	4641      	mov	r1, r8
 80149d8:	f000 fb70 	bl	80150bc <memmove>
 80149dc:	68a3      	ldr	r3, [r4, #8]
 80149de:	1b9b      	subs	r3, r3, r6
 80149e0:	60a3      	str	r3, [r4, #8]
 80149e2:	6823      	ldr	r3, [r4, #0]
 80149e4:	4433      	add	r3, r6
 80149e6:	6023      	str	r3, [r4, #0]
 80149e8:	2000      	movs	r0, #0
 80149ea:	e7db      	b.n	80149a4 <__ssputs_r+0x58>
 80149ec:	462a      	mov	r2, r5
 80149ee:	f000 fb8b 	bl	8015108 <_realloc_r>
 80149f2:	4606      	mov	r6, r0
 80149f4:	2800      	cmp	r0, #0
 80149f6:	d1e1      	bne.n	80149bc <__ssputs_r+0x70>
 80149f8:	6921      	ldr	r1, [r4, #16]
 80149fa:	4650      	mov	r0, sl
 80149fc:	f7ff fec6 	bl	801478c <_free_r>
 8014a00:	e7c7      	b.n	8014992 <__ssputs_r+0x46>
	...

08014a04 <_svfiprintf_r>:
 8014a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a08:	4698      	mov	r8, r3
 8014a0a:	898b      	ldrh	r3, [r1, #12]
 8014a0c:	061b      	lsls	r3, r3, #24
 8014a0e:	b09d      	sub	sp, #116	; 0x74
 8014a10:	4607      	mov	r7, r0
 8014a12:	460d      	mov	r5, r1
 8014a14:	4614      	mov	r4, r2
 8014a16:	d50e      	bpl.n	8014a36 <_svfiprintf_r+0x32>
 8014a18:	690b      	ldr	r3, [r1, #16]
 8014a1a:	b963      	cbnz	r3, 8014a36 <_svfiprintf_r+0x32>
 8014a1c:	2140      	movs	r1, #64	; 0x40
 8014a1e:	f7ff ff21 	bl	8014864 <_malloc_r>
 8014a22:	6028      	str	r0, [r5, #0]
 8014a24:	6128      	str	r0, [r5, #16]
 8014a26:	b920      	cbnz	r0, 8014a32 <_svfiprintf_r+0x2e>
 8014a28:	230c      	movs	r3, #12
 8014a2a:	603b      	str	r3, [r7, #0]
 8014a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8014a30:	e0d1      	b.n	8014bd6 <_svfiprintf_r+0x1d2>
 8014a32:	2340      	movs	r3, #64	; 0x40
 8014a34:	616b      	str	r3, [r5, #20]
 8014a36:	2300      	movs	r3, #0
 8014a38:	9309      	str	r3, [sp, #36]	; 0x24
 8014a3a:	2320      	movs	r3, #32
 8014a3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014a40:	f8cd 800c 	str.w	r8, [sp, #12]
 8014a44:	2330      	movs	r3, #48	; 0x30
 8014a46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014bf0 <_svfiprintf_r+0x1ec>
 8014a4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014a4e:	f04f 0901 	mov.w	r9, #1
 8014a52:	4623      	mov	r3, r4
 8014a54:	469a      	mov	sl, r3
 8014a56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a5a:	b10a      	cbz	r2, 8014a60 <_svfiprintf_r+0x5c>
 8014a5c:	2a25      	cmp	r2, #37	; 0x25
 8014a5e:	d1f9      	bne.n	8014a54 <_svfiprintf_r+0x50>
 8014a60:	ebba 0b04 	subs.w	fp, sl, r4
 8014a64:	d00b      	beq.n	8014a7e <_svfiprintf_r+0x7a>
 8014a66:	465b      	mov	r3, fp
 8014a68:	4622      	mov	r2, r4
 8014a6a:	4629      	mov	r1, r5
 8014a6c:	4638      	mov	r0, r7
 8014a6e:	f7ff ff6d 	bl	801494c <__ssputs_r>
 8014a72:	3001      	adds	r0, #1
 8014a74:	f000 80aa 	beq.w	8014bcc <_svfiprintf_r+0x1c8>
 8014a78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014a7a:	445a      	add	r2, fp
 8014a7c:	9209      	str	r2, [sp, #36]	; 0x24
 8014a7e:	f89a 3000 	ldrb.w	r3, [sl]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	f000 80a2 	beq.w	8014bcc <_svfiprintf_r+0x1c8>
 8014a88:	2300      	movs	r3, #0
 8014a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8014a8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014a92:	f10a 0a01 	add.w	sl, sl, #1
 8014a96:	9304      	str	r3, [sp, #16]
 8014a98:	9307      	str	r3, [sp, #28]
 8014a9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014a9e:	931a      	str	r3, [sp, #104]	; 0x68
 8014aa0:	4654      	mov	r4, sl
 8014aa2:	2205      	movs	r2, #5
 8014aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014aa8:	4851      	ldr	r0, [pc, #324]	; (8014bf0 <_svfiprintf_r+0x1ec>)
 8014aaa:	f7f1 fc11 	bl	80062d0 <memchr>
 8014aae:	9a04      	ldr	r2, [sp, #16]
 8014ab0:	b9d8      	cbnz	r0, 8014aea <_svfiprintf_r+0xe6>
 8014ab2:	06d0      	lsls	r0, r2, #27
 8014ab4:	bf44      	itt	mi
 8014ab6:	2320      	movmi	r3, #32
 8014ab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014abc:	0711      	lsls	r1, r2, #28
 8014abe:	bf44      	itt	mi
 8014ac0:	232b      	movmi	r3, #43	; 0x2b
 8014ac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014ac6:	f89a 3000 	ldrb.w	r3, [sl]
 8014aca:	2b2a      	cmp	r3, #42	; 0x2a
 8014acc:	d015      	beq.n	8014afa <_svfiprintf_r+0xf6>
 8014ace:	9a07      	ldr	r2, [sp, #28]
 8014ad0:	4654      	mov	r4, sl
 8014ad2:	2000      	movs	r0, #0
 8014ad4:	f04f 0c0a 	mov.w	ip, #10
 8014ad8:	4621      	mov	r1, r4
 8014ada:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014ade:	3b30      	subs	r3, #48	; 0x30
 8014ae0:	2b09      	cmp	r3, #9
 8014ae2:	d94e      	bls.n	8014b82 <_svfiprintf_r+0x17e>
 8014ae4:	b1b0      	cbz	r0, 8014b14 <_svfiprintf_r+0x110>
 8014ae6:	9207      	str	r2, [sp, #28]
 8014ae8:	e014      	b.n	8014b14 <_svfiprintf_r+0x110>
 8014aea:	eba0 0308 	sub.w	r3, r0, r8
 8014aee:	fa09 f303 	lsl.w	r3, r9, r3
 8014af2:	4313      	orrs	r3, r2
 8014af4:	9304      	str	r3, [sp, #16]
 8014af6:	46a2      	mov	sl, r4
 8014af8:	e7d2      	b.n	8014aa0 <_svfiprintf_r+0x9c>
 8014afa:	9b03      	ldr	r3, [sp, #12]
 8014afc:	1d19      	adds	r1, r3, #4
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	9103      	str	r1, [sp, #12]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	bfbb      	ittet	lt
 8014b06:	425b      	neglt	r3, r3
 8014b08:	f042 0202 	orrlt.w	r2, r2, #2
 8014b0c:	9307      	strge	r3, [sp, #28]
 8014b0e:	9307      	strlt	r3, [sp, #28]
 8014b10:	bfb8      	it	lt
 8014b12:	9204      	strlt	r2, [sp, #16]
 8014b14:	7823      	ldrb	r3, [r4, #0]
 8014b16:	2b2e      	cmp	r3, #46	; 0x2e
 8014b18:	d10c      	bne.n	8014b34 <_svfiprintf_r+0x130>
 8014b1a:	7863      	ldrb	r3, [r4, #1]
 8014b1c:	2b2a      	cmp	r3, #42	; 0x2a
 8014b1e:	d135      	bne.n	8014b8c <_svfiprintf_r+0x188>
 8014b20:	9b03      	ldr	r3, [sp, #12]
 8014b22:	1d1a      	adds	r2, r3, #4
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	9203      	str	r2, [sp, #12]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	bfb8      	it	lt
 8014b2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8014b30:	3402      	adds	r4, #2
 8014b32:	9305      	str	r3, [sp, #20]
 8014b34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014c00 <_svfiprintf_r+0x1fc>
 8014b38:	7821      	ldrb	r1, [r4, #0]
 8014b3a:	2203      	movs	r2, #3
 8014b3c:	4650      	mov	r0, sl
 8014b3e:	f7f1 fbc7 	bl	80062d0 <memchr>
 8014b42:	b140      	cbz	r0, 8014b56 <_svfiprintf_r+0x152>
 8014b44:	2340      	movs	r3, #64	; 0x40
 8014b46:	eba0 000a 	sub.w	r0, r0, sl
 8014b4a:	fa03 f000 	lsl.w	r0, r3, r0
 8014b4e:	9b04      	ldr	r3, [sp, #16]
 8014b50:	4303      	orrs	r3, r0
 8014b52:	3401      	adds	r4, #1
 8014b54:	9304      	str	r3, [sp, #16]
 8014b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b5a:	4826      	ldr	r0, [pc, #152]	; (8014bf4 <_svfiprintf_r+0x1f0>)
 8014b5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014b60:	2206      	movs	r2, #6
 8014b62:	f7f1 fbb5 	bl	80062d0 <memchr>
 8014b66:	2800      	cmp	r0, #0
 8014b68:	d038      	beq.n	8014bdc <_svfiprintf_r+0x1d8>
 8014b6a:	4b23      	ldr	r3, [pc, #140]	; (8014bf8 <_svfiprintf_r+0x1f4>)
 8014b6c:	bb1b      	cbnz	r3, 8014bb6 <_svfiprintf_r+0x1b2>
 8014b6e:	9b03      	ldr	r3, [sp, #12]
 8014b70:	3307      	adds	r3, #7
 8014b72:	f023 0307 	bic.w	r3, r3, #7
 8014b76:	3308      	adds	r3, #8
 8014b78:	9303      	str	r3, [sp, #12]
 8014b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b7c:	4433      	add	r3, r6
 8014b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8014b80:	e767      	b.n	8014a52 <_svfiprintf_r+0x4e>
 8014b82:	fb0c 3202 	mla	r2, ip, r2, r3
 8014b86:	460c      	mov	r4, r1
 8014b88:	2001      	movs	r0, #1
 8014b8a:	e7a5      	b.n	8014ad8 <_svfiprintf_r+0xd4>
 8014b8c:	2300      	movs	r3, #0
 8014b8e:	3401      	adds	r4, #1
 8014b90:	9305      	str	r3, [sp, #20]
 8014b92:	4619      	mov	r1, r3
 8014b94:	f04f 0c0a 	mov.w	ip, #10
 8014b98:	4620      	mov	r0, r4
 8014b9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014b9e:	3a30      	subs	r2, #48	; 0x30
 8014ba0:	2a09      	cmp	r2, #9
 8014ba2:	d903      	bls.n	8014bac <_svfiprintf_r+0x1a8>
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d0c5      	beq.n	8014b34 <_svfiprintf_r+0x130>
 8014ba8:	9105      	str	r1, [sp, #20]
 8014baa:	e7c3      	b.n	8014b34 <_svfiprintf_r+0x130>
 8014bac:	fb0c 2101 	mla	r1, ip, r1, r2
 8014bb0:	4604      	mov	r4, r0
 8014bb2:	2301      	movs	r3, #1
 8014bb4:	e7f0      	b.n	8014b98 <_svfiprintf_r+0x194>
 8014bb6:	ab03      	add	r3, sp, #12
 8014bb8:	9300      	str	r3, [sp, #0]
 8014bba:	462a      	mov	r2, r5
 8014bbc:	4b0f      	ldr	r3, [pc, #60]	; (8014bfc <_svfiprintf_r+0x1f8>)
 8014bbe:	a904      	add	r1, sp, #16
 8014bc0:	4638      	mov	r0, r7
 8014bc2:	f7fb feeb 	bl	801099c <_printf_float>
 8014bc6:	1c42      	adds	r2, r0, #1
 8014bc8:	4606      	mov	r6, r0
 8014bca:	d1d6      	bne.n	8014b7a <_svfiprintf_r+0x176>
 8014bcc:	89ab      	ldrh	r3, [r5, #12]
 8014bce:	065b      	lsls	r3, r3, #25
 8014bd0:	f53f af2c 	bmi.w	8014a2c <_svfiprintf_r+0x28>
 8014bd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014bd6:	b01d      	add	sp, #116	; 0x74
 8014bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bdc:	ab03      	add	r3, sp, #12
 8014bde:	9300      	str	r3, [sp, #0]
 8014be0:	462a      	mov	r2, r5
 8014be2:	4b06      	ldr	r3, [pc, #24]	; (8014bfc <_svfiprintf_r+0x1f8>)
 8014be4:	a904      	add	r1, sp, #16
 8014be6:	4638      	mov	r0, r7
 8014be8:	f7fc f97c 	bl	8010ee4 <_printf_i>
 8014bec:	e7eb      	b.n	8014bc6 <_svfiprintf_r+0x1c2>
 8014bee:	bf00      	nop
 8014bf0:	0814fc0c 	.word	0x0814fc0c
 8014bf4:	0814fc16 	.word	0x0814fc16
 8014bf8:	0801099d 	.word	0x0801099d
 8014bfc:	0801494d 	.word	0x0801494d
 8014c00:	0814fc12 	.word	0x0814fc12

08014c04 <__sfputc_r>:
 8014c04:	6893      	ldr	r3, [r2, #8]
 8014c06:	3b01      	subs	r3, #1
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	b410      	push	{r4}
 8014c0c:	6093      	str	r3, [r2, #8]
 8014c0e:	da08      	bge.n	8014c22 <__sfputc_r+0x1e>
 8014c10:	6994      	ldr	r4, [r2, #24]
 8014c12:	42a3      	cmp	r3, r4
 8014c14:	db01      	blt.n	8014c1a <__sfputc_r+0x16>
 8014c16:	290a      	cmp	r1, #10
 8014c18:	d103      	bne.n	8014c22 <__sfputc_r+0x1e>
 8014c1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014c1e:	f7fd bbf7 	b.w	8012410 <__swbuf_r>
 8014c22:	6813      	ldr	r3, [r2, #0]
 8014c24:	1c58      	adds	r0, r3, #1
 8014c26:	6010      	str	r0, [r2, #0]
 8014c28:	7019      	strb	r1, [r3, #0]
 8014c2a:	4608      	mov	r0, r1
 8014c2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014c30:	4770      	bx	lr

08014c32 <__sfputs_r>:
 8014c32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c34:	4606      	mov	r6, r0
 8014c36:	460f      	mov	r7, r1
 8014c38:	4614      	mov	r4, r2
 8014c3a:	18d5      	adds	r5, r2, r3
 8014c3c:	42ac      	cmp	r4, r5
 8014c3e:	d101      	bne.n	8014c44 <__sfputs_r+0x12>
 8014c40:	2000      	movs	r0, #0
 8014c42:	e007      	b.n	8014c54 <__sfputs_r+0x22>
 8014c44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c48:	463a      	mov	r2, r7
 8014c4a:	4630      	mov	r0, r6
 8014c4c:	f7ff ffda 	bl	8014c04 <__sfputc_r>
 8014c50:	1c43      	adds	r3, r0, #1
 8014c52:	d1f3      	bne.n	8014c3c <__sfputs_r+0xa>
 8014c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014c58 <_vfiprintf_r>:
 8014c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c5c:	460d      	mov	r5, r1
 8014c5e:	b09d      	sub	sp, #116	; 0x74
 8014c60:	4614      	mov	r4, r2
 8014c62:	4698      	mov	r8, r3
 8014c64:	4606      	mov	r6, r0
 8014c66:	b118      	cbz	r0, 8014c70 <_vfiprintf_r+0x18>
 8014c68:	6983      	ldr	r3, [r0, #24]
 8014c6a:	b90b      	cbnz	r3, 8014c70 <_vfiprintf_r+0x18>
 8014c6c:	f7fe fc24 	bl	80134b8 <__sinit>
 8014c70:	4b89      	ldr	r3, [pc, #548]	; (8014e98 <_vfiprintf_r+0x240>)
 8014c72:	429d      	cmp	r5, r3
 8014c74:	d11b      	bne.n	8014cae <_vfiprintf_r+0x56>
 8014c76:	6875      	ldr	r5, [r6, #4]
 8014c78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014c7a:	07d9      	lsls	r1, r3, #31
 8014c7c:	d405      	bmi.n	8014c8a <_vfiprintf_r+0x32>
 8014c7e:	89ab      	ldrh	r3, [r5, #12]
 8014c80:	059a      	lsls	r2, r3, #22
 8014c82:	d402      	bmi.n	8014c8a <_vfiprintf_r+0x32>
 8014c84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014c86:	f7ff f828 	bl	8013cda <__retarget_lock_acquire_recursive>
 8014c8a:	89ab      	ldrh	r3, [r5, #12]
 8014c8c:	071b      	lsls	r3, r3, #28
 8014c8e:	d501      	bpl.n	8014c94 <_vfiprintf_r+0x3c>
 8014c90:	692b      	ldr	r3, [r5, #16]
 8014c92:	b9eb      	cbnz	r3, 8014cd0 <_vfiprintf_r+0x78>
 8014c94:	4629      	mov	r1, r5
 8014c96:	4630      	mov	r0, r6
 8014c98:	f7fd fc0c 	bl	80124b4 <__swsetup_r>
 8014c9c:	b1c0      	cbz	r0, 8014cd0 <_vfiprintf_r+0x78>
 8014c9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014ca0:	07dc      	lsls	r4, r3, #31
 8014ca2:	d50e      	bpl.n	8014cc2 <_vfiprintf_r+0x6a>
 8014ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8014ca8:	b01d      	add	sp, #116	; 0x74
 8014caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cae:	4b7b      	ldr	r3, [pc, #492]	; (8014e9c <_vfiprintf_r+0x244>)
 8014cb0:	429d      	cmp	r5, r3
 8014cb2:	d101      	bne.n	8014cb8 <_vfiprintf_r+0x60>
 8014cb4:	68b5      	ldr	r5, [r6, #8]
 8014cb6:	e7df      	b.n	8014c78 <_vfiprintf_r+0x20>
 8014cb8:	4b79      	ldr	r3, [pc, #484]	; (8014ea0 <_vfiprintf_r+0x248>)
 8014cba:	429d      	cmp	r5, r3
 8014cbc:	bf08      	it	eq
 8014cbe:	68f5      	ldreq	r5, [r6, #12]
 8014cc0:	e7da      	b.n	8014c78 <_vfiprintf_r+0x20>
 8014cc2:	89ab      	ldrh	r3, [r5, #12]
 8014cc4:	0598      	lsls	r0, r3, #22
 8014cc6:	d4ed      	bmi.n	8014ca4 <_vfiprintf_r+0x4c>
 8014cc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014cca:	f7ff f807 	bl	8013cdc <__retarget_lock_release_recursive>
 8014cce:	e7e9      	b.n	8014ca4 <_vfiprintf_r+0x4c>
 8014cd0:	2300      	movs	r3, #0
 8014cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8014cd4:	2320      	movs	r3, #32
 8014cd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014cda:	f8cd 800c 	str.w	r8, [sp, #12]
 8014cde:	2330      	movs	r3, #48	; 0x30
 8014ce0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014ea4 <_vfiprintf_r+0x24c>
 8014ce4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014ce8:	f04f 0901 	mov.w	r9, #1
 8014cec:	4623      	mov	r3, r4
 8014cee:	469a      	mov	sl, r3
 8014cf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014cf4:	b10a      	cbz	r2, 8014cfa <_vfiprintf_r+0xa2>
 8014cf6:	2a25      	cmp	r2, #37	; 0x25
 8014cf8:	d1f9      	bne.n	8014cee <_vfiprintf_r+0x96>
 8014cfa:	ebba 0b04 	subs.w	fp, sl, r4
 8014cfe:	d00b      	beq.n	8014d18 <_vfiprintf_r+0xc0>
 8014d00:	465b      	mov	r3, fp
 8014d02:	4622      	mov	r2, r4
 8014d04:	4629      	mov	r1, r5
 8014d06:	4630      	mov	r0, r6
 8014d08:	f7ff ff93 	bl	8014c32 <__sfputs_r>
 8014d0c:	3001      	adds	r0, #1
 8014d0e:	f000 80aa 	beq.w	8014e66 <_vfiprintf_r+0x20e>
 8014d12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014d14:	445a      	add	r2, fp
 8014d16:	9209      	str	r2, [sp, #36]	; 0x24
 8014d18:	f89a 3000 	ldrb.w	r3, [sl]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	f000 80a2 	beq.w	8014e66 <_vfiprintf_r+0x20e>
 8014d22:	2300      	movs	r3, #0
 8014d24:	f04f 32ff 	mov.w	r2, #4294967295
 8014d28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014d2c:	f10a 0a01 	add.w	sl, sl, #1
 8014d30:	9304      	str	r3, [sp, #16]
 8014d32:	9307      	str	r3, [sp, #28]
 8014d34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014d38:	931a      	str	r3, [sp, #104]	; 0x68
 8014d3a:	4654      	mov	r4, sl
 8014d3c:	2205      	movs	r2, #5
 8014d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d42:	4858      	ldr	r0, [pc, #352]	; (8014ea4 <_vfiprintf_r+0x24c>)
 8014d44:	f7f1 fac4 	bl	80062d0 <memchr>
 8014d48:	9a04      	ldr	r2, [sp, #16]
 8014d4a:	b9d8      	cbnz	r0, 8014d84 <_vfiprintf_r+0x12c>
 8014d4c:	06d1      	lsls	r1, r2, #27
 8014d4e:	bf44      	itt	mi
 8014d50:	2320      	movmi	r3, #32
 8014d52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014d56:	0713      	lsls	r3, r2, #28
 8014d58:	bf44      	itt	mi
 8014d5a:	232b      	movmi	r3, #43	; 0x2b
 8014d5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014d60:	f89a 3000 	ldrb.w	r3, [sl]
 8014d64:	2b2a      	cmp	r3, #42	; 0x2a
 8014d66:	d015      	beq.n	8014d94 <_vfiprintf_r+0x13c>
 8014d68:	9a07      	ldr	r2, [sp, #28]
 8014d6a:	4654      	mov	r4, sl
 8014d6c:	2000      	movs	r0, #0
 8014d6e:	f04f 0c0a 	mov.w	ip, #10
 8014d72:	4621      	mov	r1, r4
 8014d74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014d78:	3b30      	subs	r3, #48	; 0x30
 8014d7a:	2b09      	cmp	r3, #9
 8014d7c:	d94e      	bls.n	8014e1c <_vfiprintf_r+0x1c4>
 8014d7e:	b1b0      	cbz	r0, 8014dae <_vfiprintf_r+0x156>
 8014d80:	9207      	str	r2, [sp, #28]
 8014d82:	e014      	b.n	8014dae <_vfiprintf_r+0x156>
 8014d84:	eba0 0308 	sub.w	r3, r0, r8
 8014d88:	fa09 f303 	lsl.w	r3, r9, r3
 8014d8c:	4313      	orrs	r3, r2
 8014d8e:	9304      	str	r3, [sp, #16]
 8014d90:	46a2      	mov	sl, r4
 8014d92:	e7d2      	b.n	8014d3a <_vfiprintf_r+0xe2>
 8014d94:	9b03      	ldr	r3, [sp, #12]
 8014d96:	1d19      	adds	r1, r3, #4
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	9103      	str	r1, [sp, #12]
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	bfbb      	ittet	lt
 8014da0:	425b      	neglt	r3, r3
 8014da2:	f042 0202 	orrlt.w	r2, r2, #2
 8014da6:	9307      	strge	r3, [sp, #28]
 8014da8:	9307      	strlt	r3, [sp, #28]
 8014daa:	bfb8      	it	lt
 8014dac:	9204      	strlt	r2, [sp, #16]
 8014dae:	7823      	ldrb	r3, [r4, #0]
 8014db0:	2b2e      	cmp	r3, #46	; 0x2e
 8014db2:	d10c      	bne.n	8014dce <_vfiprintf_r+0x176>
 8014db4:	7863      	ldrb	r3, [r4, #1]
 8014db6:	2b2a      	cmp	r3, #42	; 0x2a
 8014db8:	d135      	bne.n	8014e26 <_vfiprintf_r+0x1ce>
 8014dba:	9b03      	ldr	r3, [sp, #12]
 8014dbc:	1d1a      	adds	r2, r3, #4
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	9203      	str	r2, [sp, #12]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	bfb8      	it	lt
 8014dc6:	f04f 33ff 	movlt.w	r3, #4294967295
 8014dca:	3402      	adds	r4, #2
 8014dcc:	9305      	str	r3, [sp, #20]
 8014dce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014eb4 <_vfiprintf_r+0x25c>
 8014dd2:	7821      	ldrb	r1, [r4, #0]
 8014dd4:	2203      	movs	r2, #3
 8014dd6:	4650      	mov	r0, sl
 8014dd8:	f7f1 fa7a 	bl	80062d0 <memchr>
 8014ddc:	b140      	cbz	r0, 8014df0 <_vfiprintf_r+0x198>
 8014dde:	2340      	movs	r3, #64	; 0x40
 8014de0:	eba0 000a 	sub.w	r0, r0, sl
 8014de4:	fa03 f000 	lsl.w	r0, r3, r0
 8014de8:	9b04      	ldr	r3, [sp, #16]
 8014dea:	4303      	orrs	r3, r0
 8014dec:	3401      	adds	r4, #1
 8014dee:	9304      	str	r3, [sp, #16]
 8014df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014df4:	482c      	ldr	r0, [pc, #176]	; (8014ea8 <_vfiprintf_r+0x250>)
 8014df6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014dfa:	2206      	movs	r2, #6
 8014dfc:	f7f1 fa68 	bl	80062d0 <memchr>
 8014e00:	2800      	cmp	r0, #0
 8014e02:	d03f      	beq.n	8014e84 <_vfiprintf_r+0x22c>
 8014e04:	4b29      	ldr	r3, [pc, #164]	; (8014eac <_vfiprintf_r+0x254>)
 8014e06:	bb1b      	cbnz	r3, 8014e50 <_vfiprintf_r+0x1f8>
 8014e08:	9b03      	ldr	r3, [sp, #12]
 8014e0a:	3307      	adds	r3, #7
 8014e0c:	f023 0307 	bic.w	r3, r3, #7
 8014e10:	3308      	adds	r3, #8
 8014e12:	9303      	str	r3, [sp, #12]
 8014e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e16:	443b      	add	r3, r7
 8014e18:	9309      	str	r3, [sp, #36]	; 0x24
 8014e1a:	e767      	b.n	8014cec <_vfiprintf_r+0x94>
 8014e1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014e20:	460c      	mov	r4, r1
 8014e22:	2001      	movs	r0, #1
 8014e24:	e7a5      	b.n	8014d72 <_vfiprintf_r+0x11a>
 8014e26:	2300      	movs	r3, #0
 8014e28:	3401      	adds	r4, #1
 8014e2a:	9305      	str	r3, [sp, #20]
 8014e2c:	4619      	mov	r1, r3
 8014e2e:	f04f 0c0a 	mov.w	ip, #10
 8014e32:	4620      	mov	r0, r4
 8014e34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014e38:	3a30      	subs	r2, #48	; 0x30
 8014e3a:	2a09      	cmp	r2, #9
 8014e3c:	d903      	bls.n	8014e46 <_vfiprintf_r+0x1ee>
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d0c5      	beq.n	8014dce <_vfiprintf_r+0x176>
 8014e42:	9105      	str	r1, [sp, #20]
 8014e44:	e7c3      	b.n	8014dce <_vfiprintf_r+0x176>
 8014e46:	fb0c 2101 	mla	r1, ip, r1, r2
 8014e4a:	4604      	mov	r4, r0
 8014e4c:	2301      	movs	r3, #1
 8014e4e:	e7f0      	b.n	8014e32 <_vfiprintf_r+0x1da>
 8014e50:	ab03      	add	r3, sp, #12
 8014e52:	9300      	str	r3, [sp, #0]
 8014e54:	462a      	mov	r2, r5
 8014e56:	4b16      	ldr	r3, [pc, #88]	; (8014eb0 <_vfiprintf_r+0x258>)
 8014e58:	a904      	add	r1, sp, #16
 8014e5a:	4630      	mov	r0, r6
 8014e5c:	f7fb fd9e 	bl	801099c <_printf_float>
 8014e60:	4607      	mov	r7, r0
 8014e62:	1c78      	adds	r0, r7, #1
 8014e64:	d1d6      	bne.n	8014e14 <_vfiprintf_r+0x1bc>
 8014e66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014e68:	07d9      	lsls	r1, r3, #31
 8014e6a:	d405      	bmi.n	8014e78 <_vfiprintf_r+0x220>
 8014e6c:	89ab      	ldrh	r3, [r5, #12]
 8014e6e:	059a      	lsls	r2, r3, #22
 8014e70:	d402      	bmi.n	8014e78 <_vfiprintf_r+0x220>
 8014e72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014e74:	f7fe ff32 	bl	8013cdc <__retarget_lock_release_recursive>
 8014e78:	89ab      	ldrh	r3, [r5, #12]
 8014e7a:	065b      	lsls	r3, r3, #25
 8014e7c:	f53f af12 	bmi.w	8014ca4 <_vfiprintf_r+0x4c>
 8014e80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014e82:	e711      	b.n	8014ca8 <_vfiprintf_r+0x50>
 8014e84:	ab03      	add	r3, sp, #12
 8014e86:	9300      	str	r3, [sp, #0]
 8014e88:	462a      	mov	r2, r5
 8014e8a:	4b09      	ldr	r3, [pc, #36]	; (8014eb0 <_vfiprintf_r+0x258>)
 8014e8c:	a904      	add	r1, sp, #16
 8014e8e:	4630      	mov	r0, r6
 8014e90:	f7fc f828 	bl	8010ee4 <_printf_i>
 8014e94:	e7e4      	b.n	8014e60 <_vfiprintf_r+0x208>
 8014e96:	bf00      	nop
 8014e98:	0814f9f4 	.word	0x0814f9f4
 8014e9c:	0814fa14 	.word	0x0814fa14
 8014ea0:	0814f9d4 	.word	0x0814f9d4
 8014ea4:	0814fc0c 	.word	0x0814fc0c
 8014ea8:	0814fc16 	.word	0x0814fc16
 8014eac:	0801099d 	.word	0x0801099d
 8014eb0:	08014c33 	.word	0x08014c33
 8014eb4:	0814fc12 	.word	0x0814fc12

08014eb8 <nan>:
 8014eb8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014ec0 <nan+0x8>
 8014ebc:	4770      	bx	lr
 8014ebe:	bf00      	nop
 8014ec0:	00000000 	.word	0x00000000
 8014ec4:	7ff80000 	.word	0x7ff80000

08014ec8 <_sbrk_r>:
 8014ec8:	b538      	push	{r3, r4, r5, lr}
 8014eca:	4d06      	ldr	r5, [pc, #24]	; (8014ee4 <_sbrk_r+0x1c>)
 8014ecc:	2300      	movs	r3, #0
 8014ece:	4604      	mov	r4, r0
 8014ed0:	4608      	mov	r0, r1
 8014ed2:	602b      	str	r3, [r5, #0]
 8014ed4:	f7f3 fbfe 	bl	80086d4 <_sbrk>
 8014ed8:	1c43      	adds	r3, r0, #1
 8014eda:	d102      	bne.n	8014ee2 <_sbrk_r+0x1a>
 8014edc:	682b      	ldr	r3, [r5, #0]
 8014ede:	b103      	cbz	r3, 8014ee2 <_sbrk_r+0x1a>
 8014ee0:	6023      	str	r3, [r4, #0]
 8014ee2:	bd38      	pop	{r3, r4, r5, pc}
 8014ee4:	20019fe8 	.word	0x20019fe8

08014ee8 <__sread>:
 8014ee8:	b510      	push	{r4, lr}
 8014eea:	460c      	mov	r4, r1
 8014eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ef0:	f000 f93a 	bl	8015168 <_read_r>
 8014ef4:	2800      	cmp	r0, #0
 8014ef6:	bfab      	itete	ge
 8014ef8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014efa:	89a3      	ldrhlt	r3, [r4, #12]
 8014efc:	181b      	addge	r3, r3, r0
 8014efe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014f02:	bfac      	ite	ge
 8014f04:	6563      	strge	r3, [r4, #84]	; 0x54
 8014f06:	81a3      	strhlt	r3, [r4, #12]
 8014f08:	bd10      	pop	{r4, pc}

08014f0a <__swrite>:
 8014f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f0e:	461f      	mov	r7, r3
 8014f10:	898b      	ldrh	r3, [r1, #12]
 8014f12:	05db      	lsls	r3, r3, #23
 8014f14:	4605      	mov	r5, r0
 8014f16:	460c      	mov	r4, r1
 8014f18:	4616      	mov	r6, r2
 8014f1a:	d505      	bpl.n	8014f28 <__swrite+0x1e>
 8014f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f20:	2302      	movs	r3, #2
 8014f22:	2200      	movs	r2, #0
 8014f24:	f000 f8b8 	bl	8015098 <_lseek_r>
 8014f28:	89a3      	ldrh	r3, [r4, #12]
 8014f2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014f2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014f32:	81a3      	strh	r3, [r4, #12]
 8014f34:	4632      	mov	r2, r6
 8014f36:	463b      	mov	r3, r7
 8014f38:	4628      	mov	r0, r5
 8014f3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014f3e:	f000 b837 	b.w	8014fb0 <_write_r>

08014f42 <__sseek>:
 8014f42:	b510      	push	{r4, lr}
 8014f44:	460c      	mov	r4, r1
 8014f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f4a:	f000 f8a5 	bl	8015098 <_lseek_r>
 8014f4e:	1c43      	adds	r3, r0, #1
 8014f50:	89a3      	ldrh	r3, [r4, #12]
 8014f52:	bf15      	itete	ne
 8014f54:	6560      	strne	r0, [r4, #84]	; 0x54
 8014f56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014f5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014f5e:	81a3      	strheq	r3, [r4, #12]
 8014f60:	bf18      	it	ne
 8014f62:	81a3      	strhne	r3, [r4, #12]
 8014f64:	bd10      	pop	{r4, pc}

08014f66 <__sclose>:
 8014f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f6a:	f000 b851 	b.w	8015010 <_close_r>

08014f6e <strncmp>:
 8014f6e:	b510      	push	{r4, lr}
 8014f70:	b17a      	cbz	r2, 8014f92 <strncmp+0x24>
 8014f72:	4603      	mov	r3, r0
 8014f74:	3901      	subs	r1, #1
 8014f76:	1884      	adds	r4, r0, r2
 8014f78:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014f7c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014f80:	4290      	cmp	r0, r2
 8014f82:	d101      	bne.n	8014f88 <strncmp+0x1a>
 8014f84:	42a3      	cmp	r3, r4
 8014f86:	d101      	bne.n	8014f8c <strncmp+0x1e>
 8014f88:	1a80      	subs	r0, r0, r2
 8014f8a:	bd10      	pop	{r4, pc}
 8014f8c:	2800      	cmp	r0, #0
 8014f8e:	d1f3      	bne.n	8014f78 <strncmp+0xa>
 8014f90:	e7fa      	b.n	8014f88 <strncmp+0x1a>
 8014f92:	4610      	mov	r0, r2
 8014f94:	e7f9      	b.n	8014f8a <strncmp+0x1c>

08014f96 <__ascii_wctomb>:
 8014f96:	b149      	cbz	r1, 8014fac <__ascii_wctomb+0x16>
 8014f98:	2aff      	cmp	r2, #255	; 0xff
 8014f9a:	bf85      	ittet	hi
 8014f9c:	238a      	movhi	r3, #138	; 0x8a
 8014f9e:	6003      	strhi	r3, [r0, #0]
 8014fa0:	700a      	strbls	r2, [r1, #0]
 8014fa2:	f04f 30ff 	movhi.w	r0, #4294967295
 8014fa6:	bf98      	it	ls
 8014fa8:	2001      	movls	r0, #1
 8014faa:	4770      	bx	lr
 8014fac:	4608      	mov	r0, r1
 8014fae:	4770      	bx	lr

08014fb0 <_write_r>:
 8014fb0:	b538      	push	{r3, r4, r5, lr}
 8014fb2:	4d07      	ldr	r5, [pc, #28]	; (8014fd0 <_write_r+0x20>)
 8014fb4:	4604      	mov	r4, r0
 8014fb6:	4608      	mov	r0, r1
 8014fb8:	4611      	mov	r1, r2
 8014fba:	2200      	movs	r2, #0
 8014fbc:	602a      	str	r2, [r5, #0]
 8014fbe:	461a      	mov	r2, r3
 8014fc0:	f7f3 f8d6 	bl	8008170 <_write>
 8014fc4:	1c43      	adds	r3, r0, #1
 8014fc6:	d102      	bne.n	8014fce <_write_r+0x1e>
 8014fc8:	682b      	ldr	r3, [r5, #0]
 8014fca:	b103      	cbz	r3, 8014fce <_write_r+0x1e>
 8014fcc:	6023      	str	r3, [r4, #0]
 8014fce:	bd38      	pop	{r3, r4, r5, pc}
 8014fd0:	20019fe8 	.word	0x20019fe8

08014fd4 <__assert_func>:
 8014fd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014fd6:	4614      	mov	r4, r2
 8014fd8:	461a      	mov	r2, r3
 8014fda:	4b09      	ldr	r3, [pc, #36]	; (8015000 <__assert_func+0x2c>)
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	4605      	mov	r5, r0
 8014fe0:	68d8      	ldr	r0, [r3, #12]
 8014fe2:	b14c      	cbz	r4, 8014ff8 <__assert_func+0x24>
 8014fe4:	4b07      	ldr	r3, [pc, #28]	; (8015004 <__assert_func+0x30>)
 8014fe6:	9100      	str	r1, [sp, #0]
 8014fe8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014fec:	4906      	ldr	r1, [pc, #24]	; (8015008 <__assert_func+0x34>)
 8014fee:	462b      	mov	r3, r5
 8014ff0:	f000 f81e 	bl	8015030 <fiprintf>
 8014ff4:	f000 f8ca 	bl	801518c <abort>
 8014ff8:	4b04      	ldr	r3, [pc, #16]	; (801500c <__assert_func+0x38>)
 8014ffa:	461c      	mov	r4, r3
 8014ffc:	e7f3      	b.n	8014fe6 <__assert_func+0x12>
 8014ffe:	bf00      	nop
 8015000:	200008c8 	.word	0x200008c8
 8015004:	0814fc1d 	.word	0x0814fc1d
 8015008:	0814fc2a 	.word	0x0814fc2a
 801500c:	0814fc58 	.word	0x0814fc58

08015010 <_close_r>:
 8015010:	b538      	push	{r3, r4, r5, lr}
 8015012:	4d06      	ldr	r5, [pc, #24]	; (801502c <_close_r+0x1c>)
 8015014:	2300      	movs	r3, #0
 8015016:	4604      	mov	r4, r0
 8015018:	4608      	mov	r0, r1
 801501a:	602b      	str	r3, [r5, #0]
 801501c:	f7f3 fb25 	bl	800866a <_close>
 8015020:	1c43      	adds	r3, r0, #1
 8015022:	d102      	bne.n	801502a <_close_r+0x1a>
 8015024:	682b      	ldr	r3, [r5, #0]
 8015026:	b103      	cbz	r3, 801502a <_close_r+0x1a>
 8015028:	6023      	str	r3, [r4, #0]
 801502a:	bd38      	pop	{r3, r4, r5, pc}
 801502c:	20019fe8 	.word	0x20019fe8

08015030 <fiprintf>:
 8015030:	b40e      	push	{r1, r2, r3}
 8015032:	b503      	push	{r0, r1, lr}
 8015034:	4601      	mov	r1, r0
 8015036:	ab03      	add	r3, sp, #12
 8015038:	4805      	ldr	r0, [pc, #20]	; (8015050 <fiprintf+0x20>)
 801503a:	f853 2b04 	ldr.w	r2, [r3], #4
 801503e:	6800      	ldr	r0, [r0, #0]
 8015040:	9301      	str	r3, [sp, #4]
 8015042:	f7ff fe09 	bl	8014c58 <_vfiprintf_r>
 8015046:	b002      	add	sp, #8
 8015048:	f85d eb04 	ldr.w	lr, [sp], #4
 801504c:	b003      	add	sp, #12
 801504e:	4770      	bx	lr
 8015050:	200008c8 	.word	0x200008c8

08015054 <_fstat_r>:
 8015054:	b538      	push	{r3, r4, r5, lr}
 8015056:	4d07      	ldr	r5, [pc, #28]	; (8015074 <_fstat_r+0x20>)
 8015058:	2300      	movs	r3, #0
 801505a:	4604      	mov	r4, r0
 801505c:	4608      	mov	r0, r1
 801505e:	4611      	mov	r1, r2
 8015060:	602b      	str	r3, [r5, #0]
 8015062:	f7f3 fb0e 	bl	8008682 <_fstat>
 8015066:	1c43      	adds	r3, r0, #1
 8015068:	d102      	bne.n	8015070 <_fstat_r+0x1c>
 801506a:	682b      	ldr	r3, [r5, #0]
 801506c:	b103      	cbz	r3, 8015070 <_fstat_r+0x1c>
 801506e:	6023      	str	r3, [r4, #0]
 8015070:	bd38      	pop	{r3, r4, r5, pc}
 8015072:	bf00      	nop
 8015074:	20019fe8 	.word	0x20019fe8

08015078 <_isatty_r>:
 8015078:	b538      	push	{r3, r4, r5, lr}
 801507a:	4d06      	ldr	r5, [pc, #24]	; (8015094 <_isatty_r+0x1c>)
 801507c:	2300      	movs	r3, #0
 801507e:	4604      	mov	r4, r0
 8015080:	4608      	mov	r0, r1
 8015082:	602b      	str	r3, [r5, #0]
 8015084:	f7f3 fb0d 	bl	80086a2 <_isatty>
 8015088:	1c43      	adds	r3, r0, #1
 801508a:	d102      	bne.n	8015092 <_isatty_r+0x1a>
 801508c:	682b      	ldr	r3, [r5, #0]
 801508e:	b103      	cbz	r3, 8015092 <_isatty_r+0x1a>
 8015090:	6023      	str	r3, [r4, #0]
 8015092:	bd38      	pop	{r3, r4, r5, pc}
 8015094:	20019fe8 	.word	0x20019fe8

08015098 <_lseek_r>:
 8015098:	b538      	push	{r3, r4, r5, lr}
 801509a:	4d07      	ldr	r5, [pc, #28]	; (80150b8 <_lseek_r+0x20>)
 801509c:	4604      	mov	r4, r0
 801509e:	4608      	mov	r0, r1
 80150a0:	4611      	mov	r1, r2
 80150a2:	2200      	movs	r2, #0
 80150a4:	602a      	str	r2, [r5, #0]
 80150a6:	461a      	mov	r2, r3
 80150a8:	f7f3 fb06 	bl	80086b8 <_lseek>
 80150ac:	1c43      	adds	r3, r0, #1
 80150ae:	d102      	bne.n	80150b6 <_lseek_r+0x1e>
 80150b0:	682b      	ldr	r3, [r5, #0]
 80150b2:	b103      	cbz	r3, 80150b6 <_lseek_r+0x1e>
 80150b4:	6023      	str	r3, [r4, #0]
 80150b6:	bd38      	pop	{r3, r4, r5, pc}
 80150b8:	20019fe8 	.word	0x20019fe8

080150bc <memmove>:
 80150bc:	4288      	cmp	r0, r1
 80150be:	b510      	push	{r4, lr}
 80150c0:	eb01 0402 	add.w	r4, r1, r2
 80150c4:	d902      	bls.n	80150cc <memmove+0x10>
 80150c6:	4284      	cmp	r4, r0
 80150c8:	4623      	mov	r3, r4
 80150ca:	d807      	bhi.n	80150dc <memmove+0x20>
 80150cc:	1e43      	subs	r3, r0, #1
 80150ce:	42a1      	cmp	r1, r4
 80150d0:	d008      	beq.n	80150e4 <memmove+0x28>
 80150d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80150d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80150da:	e7f8      	b.n	80150ce <memmove+0x12>
 80150dc:	4402      	add	r2, r0
 80150de:	4601      	mov	r1, r0
 80150e0:	428a      	cmp	r2, r1
 80150e2:	d100      	bne.n	80150e6 <memmove+0x2a>
 80150e4:	bd10      	pop	{r4, pc}
 80150e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80150ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80150ee:	e7f7      	b.n	80150e0 <memmove+0x24>

080150f0 <__malloc_lock>:
 80150f0:	4801      	ldr	r0, [pc, #4]	; (80150f8 <__malloc_lock+0x8>)
 80150f2:	f7fe bdf2 	b.w	8013cda <__retarget_lock_acquire_recursive>
 80150f6:	bf00      	nop
 80150f8:	20019fdc 	.word	0x20019fdc

080150fc <__malloc_unlock>:
 80150fc:	4801      	ldr	r0, [pc, #4]	; (8015104 <__malloc_unlock+0x8>)
 80150fe:	f7fe bded 	b.w	8013cdc <__retarget_lock_release_recursive>
 8015102:	bf00      	nop
 8015104:	20019fdc 	.word	0x20019fdc

08015108 <_realloc_r>:
 8015108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801510c:	4680      	mov	r8, r0
 801510e:	4614      	mov	r4, r2
 8015110:	460e      	mov	r6, r1
 8015112:	b921      	cbnz	r1, 801511e <_realloc_r+0x16>
 8015114:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015118:	4611      	mov	r1, r2
 801511a:	f7ff bba3 	b.w	8014864 <_malloc_r>
 801511e:	b92a      	cbnz	r2, 801512c <_realloc_r+0x24>
 8015120:	f7ff fb34 	bl	801478c <_free_r>
 8015124:	4625      	mov	r5, r4
 8015126:	4628      	mov	r0, r5
 8015128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801512c:	f000 f835 	bl	801519a <_malloc_usable_size_r>
 8015130:	4284      	cmp	r4, r0
 8015132:	4607      	mov	r7, r0
 8015134:	d802      	bhi.n	801513c <_realloc_r+0x34>
 8015136:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801513a:	d812      	bhi.n	8015162 <_realloc_r+0x5a>
 801513c:	4621      	mov	r1, r4
 801513e:	4640      	mov	r0, r8
 8015140:	f7ff fb90 	bl	8014864 <_malloc_r>
 8015144:	4605      	mov	r5, r0
 8015146:	2800      	cmp	r0, #0
 8015148:	d0ed      	beq.n	8015126 <_realloc_r+0x1e>
 801514a:	42bc      	cmp	r4, r7
 801514c:	4622      	mov	r2, r4
 801514e:	4631      	mov	r1, r6
 8015150:	bf28      	it	cs
 8015152:	463a      	movcs	r2, r7
 8015154:	f7fb fb6c 	bl	8010830 <memcpy>
 8015158:	4631      	mov	r1, r6
 801515a:	4640      	mov	r0, r8
 801515c:	f7ff fb16 	bl	801478c <_free_r>
 8015160:	e7e1      	b.n	8015126 <_realloc_r+0x1e>
 8015162:	4635      	mov	r5, r6
 8015164:	e7df      	b.n	8015126 <_realloc_r+0x1e>
	...

08015168 <_read_r>:
 8015168:	b538      	push	{r3, r4, r5, lr}
 801516a:	4d07      	ldr	r5, [pc, #28]	; (8015188 <_read_r+0x20>)
 801516c:	4604      	mov	r4, r0
 801516e:	4608      	mov	r0, r1
 8015170:	4611      	mov	r1, r2
 8015172:	2200      	movs	r2, #0
 8015174:	602a      	str	r2, [r5, #0]
 8015176:	461a      	mov	r2, r3
 8015178:	f7f3 fa5a 	bl	8008630 <_read>
 801517c:	1c43      	adds	r3, r0, #1
 801517e:	d102      	bne.n	8015186 <_read_r+0x1e>
 8015180:	682b      	ldr	r3, [r5, #0]
 8015182:	b103      	cbz	r3, 8015186 <_read_r+0x1e>
 8015184:	6023      	str	r3, [r4, #0]
 8015186:	bd38      	pop	{r3, r4, r5, pc}
 8015188:	20019fe8 	.word	0x20019fe8

0801518c <abort>:
 801518c:	b508      	push	{r3, lr}
 801518e:	2006      	movs	r0, #6
 8015190:	f000 f834 	bl	80151fc <raise>
 8015194:	2001      	movs	r0, #1
 8015196:	f7f3 fa41 	bl	800861c <_exit>

0801519a <_malloc_usable_size_r>:
 801519a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801519e:	1f18      	subs	r0, r3, #4
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	bfbc      	itt	lt
 80151a4:	580b      	ldrlt	r3, [r1, r0]
 80151a6:	18c0      	addlt	r0, r0, r3
 80151a8:	4770      	bx	lr

080151aa <_raise_r>:
 80151aa:	291f      	cmp	r1, #31
 80151ac:	b538      	push	{r3, r4, r5, lr}
 80151ae:	4604      	mov	r4, r0
 80151b0:	460d      	mov	r5, r1
 80151b2:	d904      	bls.n	80151be <_raise_r+0x14>
 80151b4:	2316      	movs	r3, #22
 80151b6:	6003      	str	r3, [r0, #0]
 80151b8:	f04f 30ff 	mov.w	r0, #4294967295
 80151bc:	bd38      	pop	{r3, r4, r5, pc}
 80151be:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80151c0:	b112      	cbz	r2, 80151c8 <_raise_r+0x1e>
 80151c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80151c6:	b94b      	cbnz	r3, 80151dc <_raise_r+0x32>
 80151c8:	4620      	mov	r0, r4
 80151ca:	f000 f831 	bl	8015230 <_getpid_r>
 80151ce:	462a      	mov	r2, r5
 80151d0:	4601      	mov	r1, r0
 80151d2:	4620      	mov	r0, r4
 80151d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80151d8:	f000 b818 	b.w	801520c <_kill_r>
 80151dc:	2b01      	cmp	r3, #1
 80151de:	d00a      	beq.n	80151f6 <_raise_r+0x4c>
 80151e0:	1c59      	adds	r1, r3, #1
 80151e2:	d103      	bne.n	80151ec <_raise_r+0x42>
 80151e4:	2316      	movs	r3, #22
 80151e6:	6003      	str	r3, [r0, #0]
 80151e8:	2001      	movs	r0, #1
 80151ea:	e7e7      	b.n	80151bc <_raise_r+0x12>
 80151ec:	2400      	movs	r4, #0
 80151ee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80151f2:	4628      	mov	r0, r5
 80151f4:	4798      	blx	r3
 80151f6:	2000      	movs	r0, #0
 80151f8:	e7e0      	b.n	80151bc <_raise_r+0x12>
	...

080151fc <raise>:
 80151fc:	4b02      	ldr	r3, [pc, #8]	; (8015208 <raise+0xc>)
 80151fe:	4601      	mov	r1, r0
 8015200:	6818      	ldr	r0, [r3, #0]
 8015202:	f7ff bfd2 	b.w	80151aa <_raise_r>
 8015206:	bf00      	nop
 8015208:	200008c8 	.word	0x200008c8

0801520c <_kill_r>:
 801520c:	b538      	push	{r3, r4, r5, lr}
 801520e:	4d07      	ldr	r5, [pc, #28]	; (801522c <_kill_r+0x20>)
 8015210:	2300      	movs	r3, #0
 8015212:	4604      	mov	r4, r0
 8015214:	4608      	mov	r0, r1
 8015216:	4611      	mov	r1, r2
 8015218:	602b      	str	r3, [r5, #0]
 801521a:	f7f3 f9ef 	bl	80085fc <_kill>
 801521e:	1c43      	adds	r3, r0, #1
 8015220:	d102      	bne.n	8015228 <_kill_r+0x1c>
 8015222:	682b      	ldr	r3, [r5, #0]
 8015224:	b103      	cbz	r3, 8015228 <_kill_r+0x1c>
 8015226:	6023      	str	r3, [r4, #0]
 8015228:	bd38      	pop	{r3, r4, r5, pc}
 801522a:	bf00      	nop
 801522c:	20019fe8 	.word	0x20019fe8

08015230 <_getpid_r>:
 8015230:	f7f3 b9dc 	b.w	80085ec <_getpid>

08015234 <asinhf>:
 8015234:	b510      	push	{r4, lr}
 8015236:	ee10 4a10 	vmov	r4, s0
 801523a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801523e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015242:	ed2d 8b04 	vpush	{d8-d9}
 8015246:	eeb0 8a40 	vmov.f32	s16, s0
 801524a:	db06      	blt.n	801525a <asinhf+0x26>
 801524c:	ee30 8a00 	vadd.f32	s16, s0, s0
 8015250:	eeb0 0a48 	vmov.f32	s0, s16
 8015254:	ecbd 8b04 	vpop	{d8-d9}
 8015258:	bd10      	pop	{r4, pc}
 801525a:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
 801525e:	da21      	bge.n	80152a4 <asinhf+0x70>
 8015260:	eddf 7a26 	vldr	s15, [pc, #152]	; 80152fc <asinhf+0xc8>
 8015264:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015268:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801526c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015274:	dcec      	bgt.n	8015250 <asinhf+0x1c>
 8015276:	eeb0 0a48 	vmov.f32	s0, s16
 801527a:	f000 fb77 	bl	801596c <fabsf>
 801527e:	ee68 8a08 	vmul.f32	s17, s16, s16
 8015282:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8015286:	eeb0 8a40 	vmov.f32	s16, s0
 801528a:	ee38 0a89 	vadd.f32	s0, s17, s18
 801528e:	f002 f905 	bl	801749c <__ieee754_sqrtf>
 8015292:	ee30 0a09 	vadd.f32	s0, s0, s18
 8015296:	eec8 7a80 	vdiv.f32	s15, s17, s0
 801529a:	ee37 0a88 	vadd.f32	s0, s15, s16
 801529e:	f000 fbaf 	bl	8015a00 <log1pf>
 80152a2:	e028      	b.n	80152f6 <asinhf+0xc2>
 80152a4:	f1b3 4f9b 	cmp.w	r3, #1300234240	; 0x4d800000
 80152a8:	dd0c      	ble.n	80152c4 <asinhf+0x90>
 80152aa:	f000 fb5f 	bl	801596c <fabsf>
 80152ae:	f001 fb8b 	bl	80169c8 <__ieee754_logf>
 80152b2:	ed9f 8a13 	vldr	s16, [pc, #76]	; 8015300 <asinhf+0xcc>
 80152b6:	ee30 8a08 	vadd.f32	s16, s0, s16
 80152ba:	2c00      	cmp	r4, #0
 80152bc:	bfd8      	it	le
 80152be:	eeb1 8a48 	vnegle.f32	s16, s16
 80152c2:	e7c5      	b.n	8015250 <asinhf+0x1c>
 80152c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80152c8:	ddd5      	ble.n	8015276 <asinhf+0x42>
 80152ca:	f000 fb4f 	bl	801596c <fabsf>
 80152ce:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80152d2:	eef0 8a40 	vmov.f32	s17, s0
 80152d6:	eeb0 0a49 	vmov.f32	s0, s18
 80152da:	eea8 0a08 	vfma.f32	s0, s16, s16
 80152de:	f002 f8dd 	bl	801749c <__ieee754_sqrtf>
 80152e2:	ee70 7a28 	vadd.f32	s15, s0, s17
 80152e6:	ee89 0a27 	vdiv.f32	s0, s18, s15
 80152ea:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80152ee:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80152f2:	f001 fb69 	bl	80169c8 <__ieee754_logf>
 80152f6:	eeb0 8a40 	vmov.f32	s16, s0
 80152fa:	e7de      	b.n	80152ba <asinhf+0x86>
 80152fc:	7149f2ca 	.word	0x7149f2ca
 8015300:	3f317218 	.word	0x3f317218

08015304 <atanf>:
 8015304:	b538      	push	{r3, r4, r5, lr}
 8015306:	ee10 5a10 	vmov	r5, s0
 801530a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801530e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8015312:	eef0 7a40 	vmov.f32	s15, s0
 8015316:	db10      	blt.n	801533a <atanf+0x36>
 8015318:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801531c:	dd04      	ble.n	8015328 <atanf+0x24>
 801531e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8015322:	eeb0 0a67 	vmov.f32	s0, s15
 8015326:	bd38      	pop	{r3, r4, r5, pc}
 8015328:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8015460 <atanf+0x15c>
 801532c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8015464 <atanf+0x160>
 8015330:	2d00      	cmp	r5, #0
 8015332:	bfd8      	it	le
 8015334:	eef0 7a40 	vmovle.f32	s15, s0
 8015338:	e7f3      	b.n	8015322 <atanf+0x1e>
 801533a:	4b4b      	ldr	r3, [pc, #300]	; (8015468 <atanf+0x164>)
 801533c:	429c      	cmp	r4, r3
 801533e:	dc10      	bgt.n	8015362 <atanf+0x5e>
 8015340:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8015344:	da0a      	bge.n	801535c <atanf+0x58>
 8015346:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801546c <atanf+0x168>
 801534a:	ee30 7a07 	vadd.f32	s14, s0, s14
 801534e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015352:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801535a:	dce2      	bgt.n	8015322 <atanf+0x1e>
 801535c:	f04f 33ff 	mov.w	r3, #4294967295
 8015360:	e013      	b.n	801538a <atanf+0x86>
 8015362:	f000 fb03 	bl	801596c <fabsf>
 8015366:	4b42      	ldr	r3, [pc, #264]	; (8015470 <atanf+0x16c>)
 8015368:	429c      	cmp	r4, r3
 801536a:	dc4f      	bgt.n	801540c <atanf+0x108>
 801536c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8015370:	429c      	cmp	r4, r3
 8015372:	dc41      	bgt.n	80153f8 <atanf+0xf4>
 8015374:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8015378:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801537c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8015380:	2300      	movs	r3, #0
 8015382:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015386:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801538a:	1c5a      	adds	r2, r3, #1
 801538c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8015390:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8015474 <atanf+0x170>
 8015394:	eddf 5a38 	vldr	s11, [pc, #224]	; 8015478 <atanf+0x174>
 8015398:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801547c <atanf+0x178>
 801539c:	ee66 6a06 	vmul.f32	s13, s12, s12
 80153a0:	eee6 5a87 	vfma.f32	s11, s13, s14
 80153a4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8015480 <atanf+0x17c>
 80153a8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80153ac:	eddf 5a35 	vldr	s11, [pc, #212]	; 8015484 <atanf+0x180>
 80153b0:	eee7 5a26 	vfma.f32	s11, s14, s13
 80153b4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8015488 <atanf+0x184>
 80153b8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80153bc:	eddf 5a33 	vldr	s11, [pc, #204]	; 801548c <atanf+0x188>
 80153c0:	eee7 5a26 	vfma.f32	s11, s14, s13
 80153c4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8015490 <atanf+0x18c>
 80153c8:	eea6 5a87 	vfma.f32	s10, s13, s14
 80153cc:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8015494 <atanf+0x190>
 80153d0:	eea5 7a26 	vfma.f32	s14, s10, s13
 80153d4:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8015498 <atanf+0x194>
 80153d8:	eea7 5a26 	vfma.f32	s10, s14, s13
 80153dc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801549c <atanf+0x198>
 80153e0:	eea5 7a26 	vfma.f32	s14, s10, s13
 80153e4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80153e8:	eea5 7a86 	vfma.f32	s14, s11, s12
 80153ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80153f0:	d121      	bne.n	8015436 <atanf+0x132>
 80153f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80153f6:	e794      	b.n	8015322 <atanf+0x1e>
 80153f8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80153fc:	ee30 7a67 	vsub.f32	s14, s0, s15
 8015400:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015404:	2301      	movs	r3, #1
 8015406:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801540a:	e7be      	b.n	801538a <atanf+0x86>
 801540c:	4b24      	ldr	r3, [pc, #144]	; (80154a0 <atanf+0x19c>)
 801540e:	429c      	cmp	r4, r3
 8015410:	dc0b      	bgt.n	801542a <atanf+0x126>
 8015412:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8015416:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801541a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801541e:	2302      	movs	r3, #2
 8015420:	ee70 6a67 	vsub.f32	s13, s0, s15
 8015424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015428:	e7af      	b.n	801538a <atanf+0x86>
 801542a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801542e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015432:	2303      	movs	r3, #3
 8015434:	e7a9      	b.n	801538a <atanf+0x86>
 8015436:	4a1b      	ldr	r2, [pc, #108]	; (80154a4 <atanf+0x1a0>)
 8015438:	491b      	ldr	r1, [pc, #108]	; (80154a8 <atanf+0x1a4>)
 801543a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801543e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8015442:	ed93 0a00 	vldr	s0, [r3]
 8015446:	ee37 7a40 	vsub.f32	s14, s14, s0
 801544a:	ed92 0a00 	vldr	s0, [r2]
 801544e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015452:	2d00      	cmp	r5, #0
 8015454:	ee70 7a67 	vsub.f32	s15, s0, s15
 8015458:	bfb8      	it	lt
 801545a:	eef1 7a67 	vneglt.f32	s15, s15
 801545e:	e760      	b.n	8015322 <atanf+0x1e>
 8015460:	3fc90fdb 	.word	0x3fc90fdb
 8015464:	bfc90fdb 	.word	0xbfc90fdb
 8015468:	3edfffff 	.word	0x3edfffff
 801546c:	7149f2ca 	.word	0x7149f2ca
 8015470:	3f97ffff 	.word	0x3f97ffff
 8015474:	3c8569d7 	.word	0x3c8569d7
 8015478:	3d4bda59 	.word	0x3d4bda59
 801547c:	bd6ef16b 	.word	0xbd6ef16b
 8015480:	3d886b35 	.word	0x3d886b35
 8015484:	3dba2e6e 	.word	0x3dba2e6e
 8015488:	3e124925 	.word	0x3e124925
 801548c:	3eaaaaab 	.word	0x3eaaaaab
 8015490:	bd15a221 	.word	0xbd15a221
 8015494:	bd9d8795 	.word	0xbd9d8795
 8015498:	bde38e38 	.word	0xbde38e38
 801549c:	be4ccccd 	.word	0xbe4ccccd
 80154a0:	401bffff 	.word	0x401bffff
 80154a4:	0814fc5c 	.word	0x0814fc5c
 80154a8:	0814fc6c 	.word	0x0814fc6c

080154ac <ceilf>:
 80154ac:	ee10 3a10 	vmov	r3, s0
 80154b0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80154b4:	3a7f      	subs	r2, #127	; 0x7f
 80154b6:	2a16      	cmp	r2, #22
 80154b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80154bc:	dc2a      	bgt.n	8015514 <ceilf+0x68>
 80154be:	2a00      	cmp	r2, #0
 80154c0:	da11      	bge.n	80154e6 <ceilf+0x3a>
 80154c2:	eddf 7a19 	vldr	s15, [pc, #100]	; 8015528 <ceilf+0x7c>
 80154c6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80154ca:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80154ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154d2:	dd05      	ble.n	80154e0 <ceilf+0x34>
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	db23      	blt.n	8015520 <ceilf+0x74>
 80154d8:	2900      	cmp	r1, #0
 80154da:	bf18      	it	ne
 80154dc:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 80154e0:	ee00 3a10 	vmov	s0, r3
 80154e4:	4770      	bx	lr
 80154e6:	4911      	ldr	r1, [pc, #68]	; (801552c <ceilf+0x80>)
 80154e8:	4111      	asrs	r1, r2
 80154ea:	420b      	tst	r3, r1
 80154ec:	d0fa      	beq.n	80154e4 <ceilf+0x38>
 80154ee:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8015528 <ceilf+0x7c>
 80154f2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80154f6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80154fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154fe:	ddef      	ble.n	80154e0 <ceilf+0x34>
 8015500:	2b00      	cmp	r3, #0
 8015502:	bfc2      	ittt	gt
 8015504:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8015508:	fa40 f202 	asrgt.w	r2, r0, r2
 801550c:	189b      	addgt	r3, r3, r2
 801550e:	ea23 0301 	bic.w	r3, r3, r1
 8015512:	e7e5      	b.n	80154e0 <ceilf+0x34>
 8015514:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8015518:	d3e4      	bcc.n	80154e4 <ceilf+0x38>
 801551a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801551e:	4770      	bx	lr
 8015520:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015524:	e7dc      	b.n	80154e0 <ceilf+0x34>
 8015526:	bf00      	nop
 8015528:	7149f2ca 	.word	0x7149f2ca
 801552c:	007fffff 	.word	0x007fffff

08015530 <cosf>:
 8015530:	ee10 3a10 	vmov	r3, s0
 8015534:	b507      	push	{r0, r1, r2, lr}
 8015536:	4a1e      	ldr	r2, [pc, #120]	; (80155b0 <cosf+0x80>)
 8015538:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801553c:	4293      	cmp	r3, r2
 801553e:	dc06      	bgt.n	801554e <cosf+0x1e>
 8015540:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80155b4 <cosf+0x84>
 8015544:	b003      	add	sp, #12
 8015546:	f85d eb04 	ldr.w	lr, [sp], #4
 801554a:	f001 bfab 	b.w	80174a4 <__kernel_cosf>
 801554e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015552:	db04      	blt.n	801555e <cosf+0x2e>
 8015554:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015558:	b003      	add	sp, #12
 801555a:	f85d fb04 	ldr.w	pc, [sp], #4
 801555e:	4668      	mov	r0, sp
 8015560:	f001 fdf0 	bl	8017144 <__ieee754_rem_pio2f>
 8015564:	f000 0003 	and.w	r0, r0, #3
 8015568:	2801      	cmp	r0, #1
 801556a:	d009      	beq.n	8015580 <cosf+0x50>
 801556c:	2802      	cmp	r0, #2
 801556e:	d010      	beq.n	8015592 <cosf+0x62>
 8015570:	b9b0      	cbnz	r0, 80155a0 <cosf+0x70>
 8015572:	eddd 0a01 	vldr	s1, [sp, #4]
 8015576:	ed9d 0a00 	vldr	s0, [sp]
 801557a:	f001 ff93 	bl	80174a4 <__kernel_cosf>
 801557e:	e7eb      	b.n	8015558 <cosf+0x28>
 8015580:	eddd 0a01 	vldr	s1, [sp, #4]
 8015584:	ed9d 0a00 	vldr	s0, [sp]
 8015588:	f002 fa62 	bl	8017a50 <__kernel_sinf>
 801558c:	eeb1 0a40 	vneg.f32	s0, s0
 8015590:	e7e2      	b.n	8015558 <cosf+0x28>
 8015592:	eddd 0a01 	vldr	s1, [sp, #4]
 8015596:	ed9d 0a00 	vldr	s0, [sp]
 801559a:	f001 ff83 	bl	80174a4 <__kernel_cosf>
 801559e:	e7f5      	b.n	801558c <cosf+0x5c>
 80155a0:	eddd 0a01 	vldr	s1, [sp, #4]
 80155a4:	ed9d 0a00 	vldr	s0, [sp]
 80155a8:	2001      	movs	r0, #1
 80155aa:	f002 fa51 	bl	8017a50 <__kernel_sinf>
 80155ae:	e7d3      	b.n	8015558 <cosf+0x28>
 80155b0:	3f490fd8 	.word	0x3f490fd8
 80155b4:	00000000 	.word	0x00000000

080155b8 <erff>:
 80155b8:	b538      	push	{r3, r4, r5, lr}
 80155ba:	ee10 4a10 	vmov	r4, s0
 80155be:	f024 4500 	bic.w	r5, r4, #2147483648	; 0x80000000
 80155c2:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80155c6:	ed2d 8b06 	vpush	{d8-d10}
 80155ca:	eef0 7a40 	vmov.f32	s15, s0
 80155ce:	db10      	blt.n	80155f2 <erff+0x3a>
 80155d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80155d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80155d8:	0fe4      	lsrs	r4, r4, #31
 80155da:	0064      	lsls	r4, r4, #1
 80155dc:	f1c4 0301 	rsb	r3, r4, #1
 80155e0:	ee00 3a10 	vmov	s0, r3
 80155e4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80155e8:	ee30 0a07 	vadd.f32	s0, s0, s14
 80155ec:	ecbd 8b06 	vpop	{d8-d10}
 80155f0:	bd38      	pop	{r3, r4, r5, pc}
 80155f2:	4ba2      	ldr	r3, [pc, #648]	; (801587c <erff+0x2c4>)
 80155f4:	429d      	cmp	r5, r3
 80155f6:	dc48      	bgt.n	801568a <erff+0xd2>
 80155f8:	f1b5 5f46 	cmp.w	r5, #830472192	; 0x31800000
 80155fc:	da18      	bge.n	8015630 <erff+0x78>
 80155fe:	f014 4ff8 	tst.w	r4, #2080374784	; 0x7c000000
 8015602:	d10e      	bne.n	8015622 <erff+0x6a>
 8015604:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8015880 <erff+0x2c8>
 8015608:	ee27 0a80 	vmul.f32	s0, s15, s0
 801560c:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8015610:	eeb0 7a40 	vmov.f32	s14, s0
 8015614:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8015618:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801561c:	ee27 0a00 	vmul.f32	s0, s14, s0
 8015620:	e7e4      	b.n	80155ec <erff+0x34>
 8015622:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8015884 <erff+0x2cc>
 8015626:	eee7 7a87 	vfma.f32	s15, s15, s14
 801562a:	eeb0 0a67 	vmov.f32	s0, s15
 801562e:	e7dd      	b.n	80155ec <erff+0x34>
 8015630:	ee20 7a00 	vmul.f32	s14, s0, s0
 8015634:	ed9f 6a94 	vldr	s12, [pc, #592]	; 8015888 <erff+0x2d0>
 8015638:	eddf 6a94 	vldr	s13, [pc, #592]	; 801588c <erff+0x2d4>
 801563c:	eddf 5a94 	vldr	s11, [pc, #592]	; 8015890 <erff+0x2d8>
 8015640:	eee7 6a06 	vfma.f32	s13, s14, s12
 8015644:	ed9f 6a93 	vldr	s12, [pc, #588]	; 8015894 <erff+0x2dc>
 8015648:	eea6 6a87 	vfma.f32	s12, s13, s14
 801564c:	eddf 6a92 	vldr	s13, [pc, #584]	; 8015898 <erff+0x2e0>
 8015650:	eee6 6a07 	vfma.f32	s13, s12, s14
 8015654:	ed9f 6a8b 	vldr	s12, [pc, #556]	; 8015884 <erff+0x2cc>
 8015658:	eea6 6a87 	vfma.f32	s12, s13, s14
 801565c:	eddf 6a8f 	vldr	s13, [pc, #572]	; 801589c <erff+0x2e4>
 8015660:	eee7 6a25 	vfma.f32	s13, s14, s11
 8015664:	eddf 5a8e 	vldr	s11, [pc, #568]	; 80158a0 <erff+0x2e8>
 8015668:	eee6 5a87 	vfma.f32	s11, s13, s14
 801566c:	eddf 6a8d 	vldr	s13, [pc, #564]	; 80158a4 <erff+0x2ec>
 8015670:	eee5 6a87 	vfma.f32	s13, s11, s14
 8015674:	eddf 5a8c 	vldr	s11, [pc, #560]	; 80158a8 <erff+0x2f0>
 8015678:	eee6 5a87 	vfma.f32	s11, s13, s14
 801567c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015680:	eee5 6a87 	vfma.f32	s13, s11, s14
 8015684:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8015688:	e7cd      	b.n	8015626 <erff+0x6e>
 801568a:	4b88      	ldr	r3, [pc, #544]	; (80158ac <erff+0x2f4>)
 801568c:	429d      	cmp	r5, r3
 801568e:	dc44      	bgt.n	801571a <erff+0x162>
 8015690:	f000 f96c 	bl	801596c <fabsf>
 8015694:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015698:	ee30 0a67 	vsub.f32	s0, s0, s15
 801569c:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80158b0 <erff+0x2f8>
 80156a0:	eddf 6a84 	vldr	s13, [pc, #528]	; 80158b4 <erff+0x2fc>
 80156a4:	ed9f 6a84 	vldr	s12, [pc, #528]	; 80158b8 <erff+0x300>
 80156a8:	eee0 6a07 	vfma.f32	s13, s0, s14
 80156ac:	2c00      	cmp	r4, #0
 80156ae:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80158bc <erff+0x304>
 80156b2:	eea6 7a80 	vfma.f32	s14, s13, s0
 80156b6:	eddf 6a82 	vldr	s13, [pc, #520]	; 80158c0 <erff+0x308>
 80156ba:	eee7 6a00 	vfma.f32	s13, s14, s0
 80156be:	ed9f 7a81 	vldr	s14, [pc, #516]	; 80158c4 <erff+0x30c>
 80156c2:	eea6 7a80 	vfma.f32	s14, s13, s0
 80156c6:	eddf 6a80 	vldr	s13, [pc, #512]	; 80158c8 <erff+0x310>
 80156ca:	eee7 6a00 	vfma.f32	s13, s14, s0
 80156ce:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80158cc <erff+0x314>
 80156d2:	eea6 7a80 	vfma.f32	s14, s13, s0
 80156d6:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80158d0 <erff+0x318>
 80156da:	eee0 6a06 	vfma.f32	s13, s0, s12
 80156de:	ed9f 6a7d 	vldr	s12, [pc, #500]	; 80158d4 <erff+0x31c>
 80156e2:	eea6 6a80 	vfma.f32	s12, s13, s0
 80156e6:	eddf 6a7c 	vldr	s13, [pc, #496]	; 80158d8 <erff+0x320>
 80156ea:	eee6 6a00 	vfma.f32	s13, s12, s0
 80156ee:	ed9f 6a7b 	vldr	s12, [pc, #492]	; 80158dc <erff+0x324>
 80156f2:	eea6 6a80 	vfma.f32	s12, s13, s0
 80156f6:	eddf 6a7a 	vldr	s13, [pc, #488]	; 80158e0 <erff+0x328>
 80156fa:	eee6 6a00 	vfma.f32	s13, s12, s0
 80156fe:	eee6 7a80 	vfma.f32	s15, s13, s0
 8015702:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8015706:	bfab      	itete	ge
 8015708:	eddf 7a76 	vldrge	s15, [pc, #472]	; 80158e4 <erff+0x32c>
 801570c:	eddf 7a76 	vldrlt	s15, [pc, #472]	; 80158e8 <erff+0x330>
 8015710:	ee30 0a27 	vaddge.f32	s0, s0, s15
 8015714:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 8015718:	e768      	b.n	80155ec <erff+0x34>
 801571a:	4b74      	ldr	r3, [pc, #464]	; (80158ec <erff+0x334>)
 801571c:	429d      	cmp	r5, r3
 801571e:	dd08      	ble.n	8015732 <erff+0x17a>
 8015720:	2c00      	cmp	r4, #0
 8015722:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015726:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801572a:	bfb8      	it	lt
 801572c:	eeb0 0a67 	vmovlt.f32	s0, s15
 8015730:	e75c      	b.n	80155ec <erff+0x34>
 8015732:	f000 f91b 	bl	801596c <fabsf>
 8015736:	4b6e      	ldr	r3, [pc, #440]	; (80158f0 <erff+0x338>)
 8015738:	ee60 7a00 	vmul.f32	s15, s0, s0
 801573c:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 8015740:	429d      	cmp	r5, r3
 8015742:	ee89 7aa7 	vdiv.f32	s14, s19, s15
 8015746:	eeb0 8a40 	vmov.f32	s16, s0
 801574a:	dc64      	bgt.n	8015816 <erff+0x25e>
 801574c:	eddf 7a69 	vldr	s15, [pc, #420]	; 80158f4 <erff+0x33c>
 8015750:	eddf 6a69 	vldr	s13, [pc, #420]	; 80158f8 <erff+0x340>
 8015754:	ed9f 9a69 	vldr	s18, [pc, #420]	; 80158fc <erff+0x344>
 8015758:	eee7 6a27 	vfma.f32	s13, s14, s15
 801575c:	eddf 7a68 	vldr	s15, [pc, #416]	; 8015900 <erff+0x348>
 8015760:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015764:	eddf 6a67 	vldr	s13, [pc, #412]	; 8015904 <erff+0x34c>
 8015768:	eee7 6a87 	vfma.f32	s13, s15, s14
 801576c:	eddf 7a66 	vldr	s15, [pc, #408]	; 8015908 <erff+0x350>
 8015770:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015774:	eddf 6a65 	vldr	s13, [pc, #404]	; 801590c <erff+0x354>
 8015778:	eee7 6a87 	vfma.f32	s13, s15, s14
 801577c:	eddf 7a64 	vldr	s15, [pc, #400]	; 8015910 <erff+0x358>
 8015780:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015784:	eddf 6a63 	vldr	s13, [pc, #396]	; 8015914 <erff+0x35c>
 8015788:	eea7 9a87 	vfma.f32	s18, s15, s14
 801578c:	eddf 7a62 	vldr	s15, [pc, #392]	; 8015918 <erff+0x360>
 8015790:	eee7 7a26 	vfma.f32	s15, s14, s13
 8015794:	eddf 6a61 	vldr	s13, [pc, #388]	; 801591c <erff+0x364>
 8015798:	eee7 6a87 	vfma.f32	s13, s15, s14
 801579c:	eddf 7a60 	vldr	s15, [pc, #384]	; 8015920 <erff+0x368>
 80157a0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80157a4:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8015924 <erff+0x36c>
 80157a8:	eee7 6a87 	vfma.f32	s13, s15, s14
 80157ac:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8015928 <erff+0x370>
 80157b0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80157b4:	eddf 6a5d 	vldr	s13, [pc, #372]	; 801592c <erff+0x374>
 80157b8:	eee7 6a87 	vfma.f32	s13, s15, s14
 80157bc:	eddf 7a5c 	vldr	s15, [pc, #368]	; 8015930 <erff+0x378>
 80157c0:	ee18 3a10 	vmov	r3, s16
 80157c4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80157c8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80157cc:	f023 030f 	bic.w	r3, r3, #15
 80157d0:	ee08 3a90 	vmov	s17, r3
 80157d4:	eef0 aa69 	vmov.f32	s21, s19
 80157d8:	eebe 0a02 	vmov.f32	s0, #226	; 0xbf100000 -0.5625000
 80157dc:	eee7 aa87 	vfma.f32	s21, s15, s14
 80157e0:	eea8 0ae8 	vfms.f32	s0, s17, s17
 80157e4:	f000 ffa0 	bl	8016728 <__ieee754_expf>
 80157e8:	eeb0 aa40 	vmov.f32	s20, s0
 80157ec:	ee89 0a2a 	vdiv.f32	s0, s18, s21
 80157f0:	ee78 7ac8 	vsub.f32	s15, s17, s16
 80157f4:	ee78 8a28 	vadd.f32	s17, s16, s17
 80157f8:	eea7 0aa8 	vfma.f32	s0, s15, s17
 80157fc:	f000 ff94 	bl	8016728 <__ieee754_expf>
 8015800:	ee2a 0a00 	vmul.f32	s0, s20, s0
 8015804:	2c00      	cmp	r4, #0
 8015806:	eec0 7a08 	vdiv.f32	s15, s0, s16
 801580a:	bfac      	ite	ge
 801580c:	ee39 0ae7 	vsubge.f32	s0, s19, s15
 8015810:	ee37 0ae9 	vsublt.f32	s0, s15, s19
 8015814:	e6ea      	b.n	80155ec <erff+0x34>
 8015816:	eddf 6a47 	vldr	s13, [pc, #284]	; 8015934 <erff+0x37c>
 801581a:	eddf 7a47 	vldr	s15, [pc, #284]	; 8015938 <erff+0x380>
 801581e:	ed9f 9a47 	vldr	s18, [pc, #284]	; 801593c <erff+0x384>
 8015822:	eee7 7a26 	vfma.f32	s15, s14, s13
 8015826:	eddf 6a46 	vldr	s13, [pc, #280]	; 8015940 <erff+0x388>
 801582a:	eee7 6a87 	vfma.f32	s13, s15, s14
 801582e:	eddf 7a45 	vldr	s15, [pc, #276]	; 8015944 <erff+0x38c>
 8015832:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015836:	eddf 6a44 	vldr	s13, [pc, #272]	; 8015948 <erff+0x390>
 801583a:	eee7 6a87 	vfma.f32	s13, s15, s14
 801583e:	eddf 7a43 	vldr	s15, [pc, #268]	; 801594c <erff+0x394>
 8015842:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015846:	eddf 6a42 	vldr	s13, [pc, #264]	; 8015950 <erff+0x398>
 801584a:	eea7 9a87 	vfma.f32	s18, s15, s14
 801584e:	eddf 7a41 	vldr	s15, [pc, #260]	; 8015954 <erff+0x39c>
 8015852:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015856:	eddf 7a40 	vldr	s15, [pc, #256]	; 8015958 <erff+0x3a0>
 801585a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801585e:	eddf 6a3f 	vldr	s13, [pc, #252]	; 801595c <erff+0x3a4>
 8015862:	eee7 6a87 	vfma.f32	s13, s15, s14
 8015866:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8015960 <erff+0x3a8>
 801586a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801586e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8015964 <erff+0x3ac>
 8015872:	eee7 6a87 	vfma.f32	s13, s15, s14
 8015876:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8015968 <erff+0x3b0>
 801587a:	e7a1      	b.n	80157c0 <erff+0x208>
 801587c:	3f57ffff 	.word	0x3f57ffff
 8015880:	3f8375d4 	.word	0x3f8375d4
 8015884:	3e0375d4 	.word	0x3e0375d4
 8015888:	b7c756b1 	.word	0xb7c756b1
 801588c:	bbbd1489 	.word	0xbbbd1489
 8015890:	b684e21a 	.word	0xb684e21a
 8015894:	bce9528f 	.word	0xbce9528f
 8015898:	bea66beb 	.word	0xbea66beb
 801589c:	390aee49 	.word	0x390aee49
 80158a0:	3ba68116 	.word	0x3ba68116
 80158a4:	3d852a63 	.word	0x3d852a63
 80158a8:	3ecbbbce 	.word	0x3ecbbbce
 80158ac:	3f9fffff 	.word	0x3f9fffff
 80158b0:	bb0df9c0 	.word	0xbb0df9c0
 80158b4:	3d1151b3 	.word	0x3d1151b3
 80158b8:	3c445aa3 	.word	0x3c445aa3
 80158bc:	bde31cc2 	.word	0xbde31cc2
 80158c0:	3ea2fe54 	.word	0x3ea2fe54
 80158c4:	bebe9208 	.word	0xbebe9208
 80158c8:	3ed46805 	.word	0x3ed46805
 80158cc:	bb1acdc6 	.word	0xbb1acdc6
 80158d0:	3c5f6e13 	.word	0x3c5f6e13
 80158d4:	3e013307 	.word	0x3e013307
 80158d8:	3d931ae7 	.word	0x3d931ae7
 80158dc:	3f0a5785 	.word	0x3f0a5785
 80158e0:	3dd9f331 	.word	0x3dd9f331
 80158e4:	3f58560b 	.word	0x3f58560b
 80158e8:	bf58560b 	.word	0xbf58560b
 80158ec:	40bfffff 	.word	0x40bfffff
 80158f0:	4036db6d 	.word	0x4036db6d
 80158f4:	c11d077e 	.word	0xc11d077e
 80158f8:	c2a2932b 	.word	0xc2a2932b
 80158fc:	bc21a093 	.word	0xbc21a093
 8015900:	c3389ae7 	.word	0xc3389ae7
 8015904:	c322658c 	.word	0xc322658c
 8015908:	c2798057 	.word	0xc2798057
 801590c:	c128f022 	.word	0xc128f022
 8015910:	bf31a0b7 	.word	0xbf31a0b7
 8015914:	bd777f97 	.word	0xbd777f97
 8015918:	40d23f7c 	.word	0x40d23f7c
 801591c:	42d9451f 	.word	0x42d9451f
 8015920:	43d6810b 	.word	0x43d6810b
 8015924:	442158c9 	.word	0x442158c9
 8015928:	43d9486f 	.word	0x43d9486f
 801592c:	4309a863 	.word	0x4309a863
 8015930:	419d35ce 	.word	0x419d35ce
 8015934:	c3f1c275 	.word	0xc3f1c275
 8015938:	c480230b 	.word	0xc480230b
 801593c:	bc21a092 	.word	0xbc21a092
 8015940:	c41f6441 	.word	0xc41f6441
 8015944:	c320a2ea 	.word	0xc320a2ea
 8015948:	c18e104b 	.word	0xc18e104b
 801594c:	bf4c9dd4 	.word	0xbf4c9dd4
 8015950:	43ed43a7 	.word	0x43ed43a7
 8015954:	c1b38712 	.word	0xc1b38712
 8015958:	451f90ce 	.word	0x451f90ce
 801595c:	4547fdbb 	.word	0x4547fdbb
 8015960:	44c01759 	.word	0x44c01759
 8015964:	43a2e571 	.word	0x43a2e571
 8015968:	41f2b459 	.word	0x41f2b459

0801596c <fabsf>:
 801596c:	ee10 3a10 	vmov	r3, s0
 8015970:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015974:	ee00 3a10 	vmov	s0, r3
 8015978:	4770      	bx	lr
	...

0801597c <floorf>:
 801597c:	ee10 3a10 	vmov	r3, s0
 8015980:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8015984:	3a7f      	subs	r2, #127	; 0x7f
 8015986:	2a16      	cmp	r2, #22
 8015988:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801598c:	dc2a      	bgt.n	80159e4 <floorf+0x68>
 801598e:	2a00      	cmp	r2, #0
 8015990:	da11      	bge.n	80159b6 <floorf+0x3a>
 8015992:	eddf 7a18 	vldr	s15, [pc, #96]	; 80159f4 <floorf+0x78>
 8015996:	ee30 0a27 	vadd.f32	s0, s0, s15
 801599a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801599e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159a2:	dd05      	ble.n	80159b0 <floorf+0x34>
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	da23      	bge.n	80159f0 <floorf+0x74>
 80159a8:	4a13      	ldr	r2, [pc, #76]	; (80159f8 <floorf+0x7c>)
 80159aa:	2900      	cmp	r1, #0
 80159ac:	bf18      	it	ne
 80159ae:	4613      	movne	r3, r2
 80159b0:	ee00 3a10 	vmov	s0, r3
 80159b4:	4770      	bx	lr
 80159b6:	4911      	ldr	r1, [pc, #68]	; (80159fc <floorf+0x80>)
 80159b8:	4111      	asrs	r1, r2
 80159ba:	420b      	tst	r3, r1
 80159bc:	d0fa      	beq.n	80159b4 <floorf+0x38>
 80159be:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80159f4 <floorf+0x78>
 80159c2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80159c6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80159ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159ce:	ddef      	ble.n	80159b0 <floorf+0x34>
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	bfbe      	ittt	lt
 80159d4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80159d8:	fa40 f202 	asrlt.w	r2, r0, r2
 80159dc:	189b      	addlt	r3, r3, r2
 80159de:	ea23 0301 	bic.w	r3, r3, r1
 80159e2:	e7e5      	b.n	80159b0 <floorf+0x34>
 80159e4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80159e8:	d3e4      	bcc.n	80159b4 <floorf+0x38>
 80159ea:	ee30 0a00 	vadd.f32	s0, s0, s0
 80159ee:	4770      	bx	lr
 80159f0:	2300      	movs	r3, #0
 80159f2:	e7dd      	b.n	80159b0 <floorf+0x34>
 80159f4:	7149f2ca 	.word	0x7149f2ca
 80159f8:	bf800000 	.word	0xbf800000
 80159fc:	007fffff 	.word	0x007fffff

08015a00 <log1pf>:
 8015a00:	ee10 2a10 	vmov	r2, s0
 8015a04:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8015a08:	eef0 7a40 	vmov.f32	s15, s0
 8015a0c:	db04      	blt.n	8015a18 <log1pf+0x18>
 8015a0e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8015a12:	eeb0 0a67 	vmov.f32	s0, s15
 8015a16:	4770      	bx	lr
 8015a18:	4b6a      	ldr	r3, [pc, #424]	; (8015bc4 <log1pf+0x1c4>)
 8015a1a:	429a      	cmp	r2, r3
 8015a1c:	dc6f      	bgt.n	8015afe <log1pf+0xfe>
 8015a1e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8015a22:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8015a26:	db0b      	blt.n	8015a40 <log1pf+0x40>
 8015a28:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8015a2c:	eeb4 0a47 	vcmp.f32	s0, s14
 8015a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a34:	d102      	bne.n	8015a3c <log1pf+0x3c>
 8015a36:	2001      	movs	r0, #1
 8015a38:	f002 b954 	b.w	8017ce4 <__math_divzerof>
 8015a3c:	f002 b964 	b.w	8017d08 <__math_invalidf>
 8015a40:	f1b3 5f44 	cmp.w	r3, #822083584	; 0x31000000
 8015a44:	da12      	bge.n	8015a6c <log1pf+0x6c>
 8015a46:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8015bc8 <log1pf+0x1c8>
 8015a4a:	ee30 7a07 	vadd.f32	s14, s0, s14
 8015a4e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a56:	dd02      	ble.n	8015a5e <log1pf+0x5e>
 8015a58:	f1b3 5f12 	cmp.w	r3, #612368384	; 0x24800000
 8015a5c:	dbd9      	blt.n	8015a12 <log1pf+0x12>
 8015a5e:	ee67 6ae7 	vnmul.f32	s13, s15, s15
 8015a62:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015a66:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015a6a:	e7d2      	b.n	8015a12 <log1pf+0x12>
 8015a6c:	4b57      	ldr	r3, [pc, #348]	; (8015bcc <log1pf+0x1cc>)
 8015a6e:	441a      	add	r2, r3
 8015a70:	429a      	cmp	r2, r3
 8015a72:	d84c      	bhi.n	8015b0e <log1pf+0x10e>
 8015a74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015a78:	ee77 6a87 	vadd.f32	s13, s15, s14
 8015a7c:	ee16 2a90 	vmov	r2, s13
 8015a80:	15d3      	asrs	r3, r2, #23
 8015a82:	3b7f      	subs	r3, #127	; 0x7f
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	bfcb      	itete	gt
 8015a88:	ee76 7ae7 	vsubgt.f32	s15, s13, s15
 8015a8c:	ee36 7ac7 	vsuble.f32	s14, s13, s14
 8015a90:	ee77 7a67 	vsubgt.f32	s15, s14, s15
 8015a94:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8015a98:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8015a9c:	494c      	ldr	r1, [pc, #304]	; (8015bd0 <log1pf+0x1d0>)
 8015a9e:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8015aa2:	428a      	cmp	r2, r1
 8015aa4:	bfc9      	itett	gt
 8015aa6:	f042 517c 	orrgt.w	r1, r2, #1056964608	; 0x3f000000
 8015aaa:	f042 517e 	orrle.w	r1, r2, #1065353216	; 0x3f800000
 8015aae:	f5c2 0200 	rsbgt	r2, r2, #8388608	; 0x800000
 8015ab2:	3301      	addgt	r3, #1
 8015ab4:	bfc8      	it	gt
 8015ab6:	1092      	asrgt	r2, r2, #2
 8015ab8:	ee07 1a10 	vmov	s14, r1
 8015abc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015ac0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015ac4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8015ac8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8015acc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8015ad0:	bbea      	cbnz	r2, 8015b4e <log1pf+0x14e>
 8015ad2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ada:	d11b      	bne.n	8015b14 <log1pf+0x114>
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d06d      	beq.n	8015bbc <log1pf+0x1bc>
 8015ae0:	ee07 3a90 	vmov	s15, r3
 8015ae4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8015bd4 <log1pf+0x1d4>
 8015ae8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8015aec:	eef0 7a46 	vmov.f32	s15, s12
 8015af0:	eee7 7a26 	vfma.f32	s15, s14, s13
 8015af4:	eddf 6a38 	vldr	s13, [pc, #224]	; 8015bd8 <log1pf+0x1d8>
 8015af8:	eee7 7a26 	vfma.f32	s15, s14, s13
 8015afc:	e789      	b.n	8015a12 <log1pf+0x12>
 8015afe:	f1b2 4fb4 	cmp.w	r2, #1509949440	; 0x5a000000
 8015b02:	dbb7      	blt.n	8015a74 <log1pf+0x74>
 8015b04:	15d3      	asrs	r3, r2, #23
 8015b06:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8015bdc <log1pf+0x1dc>
 8015b0a:	3b7f      	subs	r3, #127	; 0x7f
 8015b0c:	e7c6      	b.n	8015a9c <log1pf+0x9c>
 8015b0e:	2201      	movs	r2, #1
 8015b10:	2300      	movs	r3, #0
 8015b12:	e7d7      	b.n	8015ac4 <log1pf+0xc4>
 8015b14:	eddf 5a32 	vldr	s11, [pc, #200]	; 8015be0 <log1pf+0x1e0>
 8015b18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015b1c:	eea7 7ae5 	vfms.f32	s14, s15, s11
 8015b20:	ee67 6a26 	vmul.f32	s13, s14, s13
 8015b24:	b913      	cbnz	r3, 8015b2c <log1pf+0x12c>
 8015b26:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015b2a:	e772      	b.n	8015a12 <log1pf+0x12>
 8015b2c:	ee07 3a10 	vmov	s14, r3
 8015b30:	eddf 5a28 	vldr	s11, [pc, #160]	; 8015bd4 <log1pf+0x1d4>
 8015b34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015b38:	eea7 6a25 	vfma.f32	s12, s14, s11
 8015b3c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8015b40:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8015b44:	eddf 6a24 	vldr	s13, [pc, #144]	; 8015bd8 <log1pf+0x1d8>
 8015b48:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8015b4c:	e761      	b.n	8015a12 <log1pf+0x12>
 8015b4e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8015b52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8015b56:	ed9f 5a23 	vldr	s10, [pc, #140]	; 8015be4 <log1pf+0x1e4>
 8015b5a:	eddf 4a23 	vldr	s9, [pc, #140]	; 8015be8 <log1pf+0x1e8>
 8015b5e:	eec7 5a87 	vdiv.f32	s11, s15, s14
 8015b62:	ee25 7aa5 	vmul.f32	s14, s11, s11
 8015b66:	eee7 4a05 	vfma.f32	s9, s14, s10
 8015b6a:	ed9f 5a20 	vldr	s10, [pc, #128]	; 8015bec <log1pf+0x1ec>
 8015b6e:	eea4 5a87 	vfma.f32	s10, s9, s14
 8015b72:	eddf 4a1f 	vldr	s9, [pc, #124]	; 8015bf0 <log1pf+0x1f0>
 8015b76:	eee5 4a07 	vfma.f32	s9, s10, s14
 8015b7a:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 8015bf4 <log1pf+0x1f4>
 8015b7e:	eea4 5a87 	vfma.f32	s10, s9, s14
 8015b82:	eddf 4a1d 	vldr	s9, [pc, #116]	; 8015bf8 <log1pf+0x1f8>
 8015b86:	eee5 4a07 	vfma.f32	s9, s10, s14
 8015b8a:	ed9f 5a15 	vldr	s10, [pc, #84]	; 8015be0 <log1pf+0x1e0>
 8015b8e:	eea4 5a87 	vfma.f32	s10, s9, s14
 8015b92:	eef0 4a66 	vmov.f32	s9, s13
 8015b96:	eee5 4a07 	vfma.f32	s9, s10, s14
 8015b9a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8015b9e:	b913      	cbnz	r3, 8015ba6 <log1pf+0x1a6>
 8015ba0:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8015ba4:	e7bf      	b.n	8015b26 <log1pf+0x126>
 8015ba6:	ee07 3a10 	vmov	s14, r3
 8015baa:	ed9f 5a0a 	vldr	s10, [pc, #40]	; 8015bd4 <log1pf+0x1d4>
 8015bae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015bb2:	eea7 6a05 	vfma.f32	s12, s14, s10
 8015bb6:	ee36 6a25 	vadd.f32	s12, s12, s11
 8015bba:	e7bf      	b.n	8015b3c <log1pf+0x13c>
 8015bbc:	eddf 7a07 	vldr	s15, [pc, #28]	; 8015bdc <log1pf+0x1dc>
 8015bc0:	e727      	b.n	8015a12 <log1pf+0x12>
 8015bc2:	bf00      	nop
 8015bc4:	3ed413d6 	.word	0x3ed413d6
 8015bc8:	4c000000 	.word	0x4c000000
 8015bcc:	416a09e0 	.word	0x416a09e0
 8015bd0:	003504f6 	.word	0x003504f6
 8015bd4:	3717f7d1 	.word	0x3717f7d1
 8015bd8:	3f317180 	.word	0x3f317180
 8015bdc:	00000000 	.word	0x00000000
 8015be0:	3f2aaaab 	.word	0x3f2aaaab
 8015be4:	3e178897 	.word	0x3e178897
 8015be8:	3e1cd04f 	.word	0x3e1cd04f
 8015bec:	3e3a3325 	.word	0x3e3a3325
 8015bf0:	3e638e29 	.word	0x3e638e29
 8015bf4:	3e924925 	.word	0x3e924925
 8015bf8:	3ecccccd 	.word	0x3ecccccd

08015bfc <roundf>:
 8015bfc:	ee10 0a10 	vmov	r0, s0
 8015c00:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8015c04:	3a7f      	subs	r2, #127	; 0x7f
 8015c06:	2a16      	cmp	r2, #22
 8015c08:	dc15      	bgt.n	8015c36 <roundf+0x3a>
 8015c0a:	2a00      	cmp	r2, #0
 8015c0c:	da08      	bge.n	8015c20 <roundf+0x24>
 8015c0e:	3201      	adds	r2, #1
 8015c10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8015c14:	d101      	bne.n	8015c1a <roundf+0x1e>
 8015c16:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8015c1a:	ee00 3a10 	vmov	s0, r3
 8015c1e:	4770      	bx	lr
 8015c20:	4907      	ldr	r1, [pc, #28]	; (8015c40 <roundf+0x44>)
 8015c22:	4111      	asrs	r1, r2
 8015c24:	4208      	tst	r0, r1
 8015c26:	d0fa      	beq.n	8015c1e <roundf+0x22>
 8015c28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8015c2c:	4113      	asrs	r3, r2
 8015c2e:	4403      	add	r3, r0
 8015c30:	ea23 0301 	bic.w	r3, r3, r1
 8015c34:	e7f1      	b.n	8015c1a <roundf+0x1e>
 8015c36:	2a80      	cmp	r2, #128	; 0x80
 8015c38:	d1f1      	bne.n	8015c1e <roundf+0x22>
 8015c3a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015c3e:	4770      	bx	lr
 8015c40:	007fffff 	.word	0x007fffff

08015c44 <sinf>:
 8015c44:	ee10 3a10 	vmov	r3, s0
 8015c48:	b507      	push	{r0, r1, r2, lr}
 8015c4a:	4a1f      	ldr	r2, [pc, #124]	; (8015cc8 <sinf+0x84>)
 8015c4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015c50:	4293      	cmp	r3, r2
 8015c52:	dc07      	bgt.n	8015c64 <sinf+0x20>
 8015c54:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8015ccc <sinf+0x88>
 8015c58:	2000      	movs	r0, #0
 8015c5a:	b003      	add	sp, #12
 8015c5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015c60:	f001 bef6 	b.w	8017a50 <__kernel_sinf>
 8015c64:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015c68:	db04      	blt.n	8015c74 <sinf+0x30>
 8015c6a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015c6e:	b003      	add	sp, #12
 8015c70:	f85d fb04 	ldr.w	pc, [sp], #4
 8015c74:	4668      	mov	r0, sp
 8015c76:	f001 fa65 	bl	8017144 <__ieee754_rem_pio2f>
 8015c7a:	f000 0003 	and.w	r0, r0, #3
 8015c7e:	2801      	cmp	r0, #1
 8015c80:	d00a      	beq.n	8015c98 <sinf+0x54>
 8015c82:	2802      	cmp	r0, #2
 8015c84:	d00f      	beq.n	8015ca6 <sinf+0x62>
 8015c86:	b9c0      	cbnz	r0, 8015cba <sinf+0x76>
 8015c88:	eddd 0a01 	vldr	s1, [sp, #4]
 8015c8c:	ed9d 0a00 	vldr	s0, [sp]
 8015c90:	2001      	movs	r0, #1
 8015c92:	f001 fedd 	bl	8017a50 <__kernel_sinf>
 8015c96:	e7ea      	b.n	8015c6e <sinf+0x2a>
 8015c98:	eddd 0a01 	vldr	s1, [sp, #4]
 8015c9c:	ed9d 0a00 	vldr	s0, [sp]
 8015ca0:	f001 fc00 	bl	80174a4 <__kernel_cosf>
 8015ca4:	e7e3      	b.n	8015c6e <sinf+0x2a>
 8015ca6:	eddd 0a01 	vldr	s1, [sp, #4]
 8015caa:	ed9d 0a00 	vldr	s0, [sp]
 8015cae:	2001      	movs	r0, #1
 8015cb0:	f001 fece 	bl	8017a50 <__kernel_sinf>
 8015cb4:	eeb1 0a40 	vneg.f32	s0, s0
 8015cb8:	e7d9      	b.n	8015c6e <sinf+0x2a>
 8015cba:	eddd 0a01 	vldr	s1, [sp, #4]
 8015cbe:	ed9d 0a00 	vldr	s0, [sp]
 8015cc2:	f001 fbef 	bl	80174a4 <__kernel_cosf>
 8015cc6:	e7f5      	b.n	8015cb4 <sinf+0x70>
 8015cc8:	3f490fd8 	.word	0x3f490fd8
 8015ccc:	00000000 	.word	0x00000000

08015cd0 <tanf>:
 8015cd0:	ee10 3a10 	vmov	r3, s0
 8015cd4:	b507      	push	{r0, r1, r2, lr}
 8015cd6:	4a12      	ldr	r2, [pc, #72]	; (8015d20 <tanf+0x50>)
 8015cd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015cdc:	4293      	cmp	r3, r2
 8015cde:	dc07      	bgt.n	8015cf0 <tanf+0x20>
 8015ce0:	eddf 0a10 	vldr	s1, [pc, #64]	; 8015d24 <tanf+0x54>
 8015ce4:	2001      	movs	r0, #1
 8015ce6:	b003      	add	sp, #12
 8015ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8015cec:	f001 bef8 	b.w	8017ae0 <__kernel_tanf>
 8015cf0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015cf4:	db04      	blt.n	8015d00 <tanf+0x30>
 8015cf6:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015cfa:	b003      	add	sp, #12
 8015cfc:	f85d fb04 	ldr.w	pc, [sp], #4
 8015d00:	4668      	mov	r0, sp
 8015d02:	f001 fa1f 	bl	8017144 <__ieee754_rem_pio2f>
 8015d06:	0040      	lsls	r0, r0, #1
 8015d08:	f000 0002 	and.w	r0, r0, #2
 8015d0c:	eddd 0a01 	vldr	s1, [sp, #4]
 8015d10:	ed9d 0a00 	vldr	s0, [sp]
 8015d14:	f1c0 0001 	rsb	r0, r0, #1
 8015d18:	f001 fee2 	bl	8017ae0 <__kernel_tanf>
 8015d1c:	e7ed      	b.n	8015cfa <tanf+0x2a>
 8015d1e:	bf00      	nop
 8015d20:	3f490fda 	.word	0x3f490fda
 8015d24:	00000000 	.word	0x00000000

08015d28 <tanhf>:
 8015d28:	b510      	push	{r4, lr}
 8015d2a:	ee10 4a10 	vmov	r4, s0
 8015d2e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015d32:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015d36:	ed2d 8b02 	vpush	{d8}
 8015d3a:	eeb0 7a40 	vmov.f32	s14, s0
 8015d3e:	db0c      	blt.n	8015d5a <tanhf+0x32>
 8015d40:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015d44:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8015d48:	2c00      	cmp	r4, #0
 8015d4a:	bfac      	ite	ge
 8015d4c:	ee37 0a80 	vaddge.f32	s0, s15, s0
 8015d50:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 8015d54:	ecbd 8b02 	vpop	{d8}
 8015d58:	bd10      	pop	{r4, pc}
 8015d5a:	4a1b      	ldr	r2, [pc, #108]	; (8015dc8 <tanhf+0xa0>)
 8015d5c:	4293      	cmp	r3, r2
 8015d5e:	dc30      	bgt.n	8015dc2 <tanhf+0x9a>
 8015d60:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8015d64:	da06      	bge.n	8015d74 <tanhf+0x4c>
 8015d66:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015d6a:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015d6e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015d72:	e7ef      	b.n	8015d54 <tanhf+0x2c>
 8015d74:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8015d78:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8015d7c:	db12      	blt.n	8015da4 <tanhf+0x7c>
 8015d7e:	f7ff fdf5 	bl	801596c <fabsf>
 8015d82:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015d86:	f001 ffcf 	bl	8017d28 <expm1f>
 8015d8a:	ee30 0a08 	vadd.f32	s0, s0, s16
 8015d8e:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8015d92:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015d96:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015d9a:	2c00      	cmp	r4, #0
 8015d9c:	bfb8      	it	lt
 8015d9e:	eeb1 0a40 	vneglt.f32	s0, s0
 8015da2:	e7d7      	b.n	8015d54 <tanhf+0x2c>
 8015da4:	f7ff fde2 	bl	801596c <fabsf>
 8015da8:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8015dac:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015db0:	f001 ffba 	bl	8017d28 <expm1f>
 8015db4:	ee70 7a08 	vadd.f32	s15, s0, s16
 8015db8:	eeb1 7a40 	vneg.f32	s14, s0
 8015dbc:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8015dc0:	e7eb      	b.n	8015d9a <tanhf+0x72>
 8015dc2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015dc6:	e7e8      	b.n	8015d9a <tanhf+0x72>
 8015dc8:	41afffff 	.word	0x41afffff

08015dcc <acosf>:
 8015dcc:	b508      	push	{r3, lr}
 8015dce:	ed2d 8b02 	vpush	{d8}
 8015dd2:	eeb0 8a40 	vmov.f32	s16, s0
 8015dd6:	f000 f9cf 	bl	8016178 <__ieee754_acosf>
 8015dda:	eeb4 8a48 	vcmp.f32	s16, s16
 8015dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015de2:	eef0 8a40 	vmov.f32	s17, s0
 8015de6:	d615      	bvs.n	8015e14 <acosf+0x48>
 8015de8:	eeb0 0a48 	vmov.f32	s0, s16
 8015dec:	f7ff fdbe 	bl	801596c <fabsf>
 8015df0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015df4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dfc:	dd0a      	ble.n	8015e14 <acosf+0x48>
 8015dfe:	f7fa fcdd 	bl	80107bc <__errno>
 8015e02:	ecbd 8b02 	vpop	{d8}
 8015e06:	2321      	movs	r3, #33	; 0x21
 8015e08:	6003      	str	r3, [r0, #0]
 8015e0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015e0e:	4804      	ldr	r0, [pc, #16]	; (8015e20 <acosf+0x54>)
 8015e10:	f7fb bc2c 	b.w	801166c <nanf>
 8015e14:	eeb0 0a68 	vmov.f32	s0, s17
 8015e18:	ecbd 8b02 	vpop	{d8}
 8015e1c:	bd08      	pop	{r3, pc}
 8015e1e:	bf00      	nop
 8015e20:	0814fc58 	.word	0x0814fc58

08015e24 <acoshf>:
 8015e24:	b508      	push	{r3, lr}
 8015e26:	ed2d 8b02 	vpush	{d8}
 8015e2a:	eeb0 8a40 	vmov.f32	s16, s0
 8015e2e:	f000 fa9b 	bl	8016368 <__ieee754_acoshf>
 8015e32:	eeb4 8a48 	vcmp.f32	s16, s16
 8015e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e3a:	d60e      	bvs.n	8015e5a <acoshf+0x36>
 8015e3c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015e40:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8015e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e48:	d507      	bpl.n	8015e5a <acoshf+0x36>
 8015e4a:	f7fa fcb7 	bl	80107bc <__errno>
 8015e4e:	eddf 7a04 	vldr	s15, [pc, #16]	; 8015e60 <acoshf+0x3c>
 8015e52:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8015e56:	2321      	movs	r3, #33	; 0x21
 8015e58:	6003      	str	r3, [r0, #0]
 8015e5a:	ecbd 8b02 	vpop	{d8}
 8015e5e:	bd08      	pop	{r3, pc}
 8015e60:	00000000 	.word	0x00000000

08015e64 <asinf>:
 8015e64:	b508      	push	{r3, lr}
 8015e66:	ed2d 8b02 	vpush	{d8}
 8015e6a:	eeb0 8a40 	vmov.f32	s16, s0
 8015e6e:	f000 facf 	bl	8016410 <__ieee754_asinf>
 8015e72:	eeb4 8a48 	vcmp.f32	s16, s16
 8015e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e7a:	eef0 8a40 	vmov.f32	s17, s0
 8015e7e:	d615      	bvs.n	8015eac <asinf+0x48>
 8015e80:	eeb0 0a48 	vmov.f32	s0, s16
 8015e84:	f7ff fd72 	bl	801596c <fabsf>
 8015e88:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015e8c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e94:	dd0a      	ble.n	8015eac <asinf+0x48>
 8015e96:	f7fa fc91 	bl	80107bc <__errno>
 8015e9a:	ecbd 8b02 	vpop	{d8}
 8015e9e:	2321      	movs	r3, #33	; 0x21
 8015ea0:	6003      	str	r3, [r0, #0]
 8015ea2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015ea6:	4804      	ldr	r0, [pc, #16]	; (8015eb8 <asinf+0x54>)
 8015ea8:	f7fb bbe0 	b.w	801166c <nanf>
 8015eac:	eeb0 0a68 	vmov.f32	s0, s17
 8015eb0:	ecbd 8b02 	vpop	{d8}
 8015eb4:	bd08      	pop	{r3, pc}
 8015eb6:	bf00      	nop
 8015eb8:	0814fc58 	.word	0x0814fc58

08015ebc <atanhf>:
 8015ebc:	b510      	push	{r4, lr}
 8015ebe:	ed2d 8b04 	vpush	{d8-d9}
 8015ec2:	eeb0 8a40 	vmov.f32	s16, s0
 8015ec6:	f000 fb89 	bl	80165dc <__ieee754_atanhf>
 8015eca:	eeb4 8a48 	vcmp.f32	s16, s16
 8015ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ed2:	eef0 8a40 	vmov.f32	s17, s0
 8015ed6:	d614      	bvs.n	8015f02 <atanhf+0x46>
 8015ed8:	eeb0 0a48 	vmov.f32	s0, s16
 8015edc:	f7ff fd46 	bl	801596c <fabsf>
 8015ee0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015ee4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eec:	db09      	blt.n	8015f02 <atanhf+0x46>
 8015eee:	ed9f 9a0a 	vldr	s18, [pc, #40]	; 8015f18 <atanhf+0x5c>
 8015ef2:	f04f 0421 	mov.w	r4, #33	; 0x21
 8015ef6:	dd09      	ble.n	8015f0c <atanhf+0x50>
 8015ef8:	f7fa fc60 	bl	80107bc <__errno>
 8015efc:	eec9 8a09 	vdiv.f32	s17, s18, s18
 8015f00:	6004      	str	r4, [r0, #0]
 8015f02:	eeb0 0a68 	vmov.f32	s0, s17
 8015f06:	ecbd 8b04 	vpop	{d8-d9}
 8015f0a:	bd10      	pop	{r4, pc}
 8015f0c:	f7fa fc56 	bl	80107bc <__errno>
 8015f10:	eec8 8a09 	vdiv.f32	s17, s16, s18
 8015f14:	6004      	str	r4, [r0, #0]
 8015f16:	e7f4      	b.n	8015f02 <atanhf+0x46>
 8015f18:	00000000 	.word	0x00000000

08015f1c <coshf>:
 8015f1c:	b508      	push	{r3, lr}
 8015f1e:	ed2d 8b02 	vpush	{d8}
 8015f22:	eeb0 8a40 	vmov.f32	s16, s0
 8015f26:	f000 fb9f 	bl	8016668 <__ieee754_coshf>
 8015f2a:	eeb4 8a48 	vcmp.f32	s16, s16
 8015f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f32:	eef0 8a40 	vmov.f32	s17, s0
 8015f36:	d610      	bvs.n	8015f5a <coshf+0x3e>
 8015f38:	eeb0 0a48 	vmov.f32	s0, s16
 8015f3c:	f7ff fd16 	bl	801596c <fabsf>
 8015f40:	eddf 7a08 	vldr	s15, [pc, #32]	; 8015f64 <coshf+0x48>
 8015f44:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f4c:	dd05      	ble.n	8015f5a <coshf+0x3e>
 8015f4e:	f7fa fc35 	bl	80107bc <__errno>
 8015f52:	eddf 8a05 	vldr	s17, [pc, #20]	; 8015f68 <coshf+0x4c>
 8015f56:	2322      	movs	r3, #34	; 0x22
 8015f58:	6003      	str	r3, [r0, #0]
 8015f5a:	eeb0 0a68 	vmov.f32	s0, s17
 8015f5e:	ecbd 8b02 	vpop	{d8}
 8015f62:	bd08      	pop	{r3, pc}
 8015f64:	42b2d4fc 	.word	0x42b2d4fc
 8015f68:	7f800000 	.word	0x7f800000

08015f6c <expf>:
 8015f6c:	b508      	push	{r3, lr}
 8015f6e:	ed2d 8b02 	vpush	{d8}
 8015f72:	eef0 8a40 	vmov.f32	s17, s0
 8015f76:	f000 fbd7 	bl	8016728 <__ieee754_expf>
 8015f7a:	eeb0 8a40 	vmov.f32	s16, s0
 8015f7e:	eeb0 0a68 	vmov.f32	s0, s17
 8015f82:	f001 ffed 	bl	8017f60 <finitef>
 8015f86:	b160      	cbz	r0, 8015fa2 <expf+0x36>
 8015f88:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8015fc8 <expf+0x5c>
 8015f8c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f94:	dd0a      	ble.n	8015fac <expf+0x40>
 8015f96:	f7fa fc11 	bl	80107bc <__errno>
 8015f9a:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8015fcc <expf+0x60>
 8015f9e:	2322      	movs	r3, #34	; 0x22
 8015fa0:	6003      	str	r3, [r0, #0]
 8015fa2:	eeb0 0a48 	vmov.f32	s0, s16
 8015fa6:	ecbd 8b02 	vpop	{d8}
 8015faa:	bd08      	pop	{r3, pc}
 8015fac:	eddf 7a08 	vldr	s15, [pc, #32]	; 8015fd0 <expf+0x64>
 8015fb0:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fb8:	d5f3      	bpl.n	8015fa2 <expf+0x36>
 8015fba:	f7fa fbff 	bl	80107bc <__errno>
 8015fbe:	2322      	movs	r3, #34	; 0x22
 8015fc0:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8015fd4 <expf+0x68>
 8015fc4:	6003      	str	r3, [r0, #0]
 8015fc6:	e7ec      	b.n	8015fa2 <expf+0x36>
 8015fc8:	42b17180 	.word	0x42b17180
 8015fcc:	7f800000 	.word	0x7f800000
 8015fd0:	c2cff1b5 	.word	0xc2cff1b5
 8015fd4:	00000000 	.word	0x00000000

08015fd8 <fmodf>:
 8015fd8:	b508      	push	{r3, lr}
 8015fda:	ed2d 8b02 	vpush	{d8}
 8015fde:	eef0 8a40 	vmov.f32	s17, s0
 8015fe2:	eeb0 8a60 	vmov.f32	s16, s1
 8015fe6:	f000 fc6d 	bl	80168c4 <__ieee754_fmodf>
 8015fea:	eef4 8a48 	vcmp.f32	s17, s16
 8015fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ff2:	d60c      	bvs.n	801600e <fmodf+0x36>
 8015ff4:	eddf 8a07 	vldr	s17, [pc, #28]	; 8016014 <fmodf+0x3c>
 8015ff8:	eeb4 8a68 	vcmp.f32	s16, s17
 8015ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016000:	d105      	bne.n	801600e <fmodf+0x36>
 8016002:	f7fa fbdb 	bl	80107bc <__errno>
 8016006:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801600a:	2321      	movs	r3, #33	; 0x21
 801600c:	6003      	str	r3, [r0, #0]
 801600e:	ecbd 8b02 	vpop	{d8}
 8016012:	bd08      	pop	{r3, pc}
 8016014:	00000000 	.word	0x00000000

08016018 <logf>:
 8016018:	b508      	push	{r3, lr}
 801601a:	ed2d 8b02 	vpush	{d8}
 801601e:	eeb0 8a40 	vmov.f32	s16, s0
 8016022:	f000 fcd1 	bl	80169c8 <__ieee754_logf>
 8016026:	eeb4 8a48 	vcmp.f32	s16, s16
 801602a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801602e:	d60f      	bvs.n	8016050 <logf+0x38>
 8016030:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8016034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016038:	dc0a      	bgt.n	8016050 <logf+0x38>
 801603a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801603e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016042:	d108      	bne.n	8016056 <logf+0x3e>
 8016044:	f7fa fbba 	bl	80107bc <__errno>
 8016048:	2322      	movs	r3, #34	; 0x22
 801604a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801606c <logf+0x54>
 801604e:	6003      	str	r3, [r0, #0]
 8016050:	ecbd 8b02 	vpop	{d8}
 8016054:	bd08      	pop	{r3, pc}
 8016056:	f7fa fbb1 	bl	80107bc <__errno>
 801605a:	ecbd 8b02 	vpop	{d8}
 801605e:	2321      	movs	r3, #33	; 0x21
 8016060:	6003      	str	r3, [r0, #0]
 8016062:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016066:	4802      	ldr	r0, [pc, #8]	; (8016070 <logf+0x58>)
 8016068:	f7fb bb00 	b.w	801166c <nanf>
 801606c:	ff800000 	.word	0xff800000
 8016070:	0814fc58 	.word	0x0814fc58

08016074 <powf>:
 8016074:	b508      	push	{r3, lr}
 8016076:	ed2d 8b04 	vpush	{d8-d9}
 801607a:	eeb0 8a60 	vmov.f32	s16, s1
 801607e:	eeb0 9a40 	vmov.f32	s18, s0
 8016082:	f000 fd91 	bl	8016ba8 <__ieee754_powf>
 8016086:	eeb4 8a48 	vcmp.f32	s16, s16
 801608a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801608e:	eef0 8a40 	vmov.f32	s17, s0
 8016092:	d63e      	bvs.n	8016112 <powf+0x9e>
 8016094:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8016098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801609c:	d112      	bne.n	80160c4 <powf+0x50>
 801609e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80160a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160a6:	d039      	beq.n	801611c <powf+0xa8>
 80160a8:	eeb0 0a48 	vmov.f32	s0, s16
 80160ac:	f001 ff58 	bl	8017f60 <finitef>
 80160b0:	b378      	cbz	r0, 8016112 <powf+0x9e>
 80160b2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80160b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160ba:	d52a      	bpl.n	8016112 <powf+0x9e>
 80160bc:	f7fa fb7e 	bl	80107bc <__errno>
 80160c0:	2322      	movs	r3, #34	; 0x22
 80160c2:	e014      	b.n	80160ee <powf+0x7a>
 80160c4:	f001 ff4c 	bl	8017f60 <finitef>
 80160c8:	b998      	cbnz	r0, 80160f2 <powf+0x7e>
 80160ca:	eeb0 0a49 	vmov.f32	s0, s18
 80160ce:	f001 ff47 	bl	8017f60 <finitef>
 80160d2:	b170      	cbz	r0, 80160f2 <powf+0x7e>
 80160d4:	eeb0 0a48 	vmov.f32	s0, s16
 80160d8:	f001 ff42 	bl	8017f60 <finitef>
 80160dc:	b148      	cbz	r0, 80160f2 <powf+0x7e>
 80160de:	eef4 8a68 	vcmp.f32	s17, s17
 80160e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160e6:	d7e9      	bvc.n	80160bc <powf+0x48>
 80160e8:	f7fa fb68 	bl	80107bc <__errno>
 80160ec:	2321      	movs	r3, #33	; 0x21
 80160ee:	6003      	str	r3, [r0, #0]
 80160f0:	e00f      	b.n	8016112 <powf+0x9e>
 80160f2:	eef5 8a40 	vcmp.f32	s17, #0.0
 80160f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160fa:	d10a      	bne.n	8016112 <powf+0x9e>
 80160fc:	eeb0 0a49 	vmov.f32	s0, s18
 8016100:	f001 ff2e 	bl	8017f60 <finitef>
 8016104:	b128      	cbz	r0, 8016112 <powf+0x9e>
 8016106:	eeb0 0a48 	vmov.f32	s0, s16
 801610a:	f001 ff29 	bl	8017f60 <finitef>
 801610e:	2800      	cmp	r0, #0
 8016110:	d1d4      	bne.n	80160bc <powf+0x48>
 8016112:	eeb0 0a68 	vmov.f32	s0, s17
 8016116:	ecbd 8b04 	vpop	{d8-d9}
 801611a:	bd08      	pop	{r3, pc}
 801611c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8016120:	e7f7      	b.n	8016112 <powf+0x9e>
	...

08016124 <sinhf>:
 8016124:	b508      	push	{r3, lr}
 8016126:	ed2d 8b02 	vpush	{d8}
 801612a:	eef0 8a40 	vmov.f32	s17, s0
 801612e:	f001 f945 	bl	80173bc <__ieee754_sinhf>
 8016132:	eeb0 8a40 	vmov.f32	s16, s0
 8016136:	f001 ff13 	bl	8017f60 <finitef>
 801613a:	b998      	cbnz	r0, 8016164 <sinhf+0x40>
 801613c:	eeb0 0a68 	vmov.f32	s0, s17
 8016140:	f001 ff0e 	bl	8017f60 <finitef>
 8016144:	b170      	cbz	r0, 8016164 <sinhf+0x40>
 8016146:	f7fa fb39 	bl	80107bc <__errno>
 801614a:	ed9f 8a09 	vldr	s16, [pc, #36]	; 8016170 <sinhf+0x4c>
 801614e:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8016174 <sinhf+0x50>
 8016152:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8016156:	2322      	movs	r3, #34	; 0x22
 8016158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801615c:	6003      	str	r3, [r0, #0]
 801615e:	bfd8      	it	le
 8016160:	eeb0 8a40 	vmovle.f32	s16, s0
 8016164:	eeb0 0a48 	vmov.f32	s0, s16
 8016168:	ecbd 8b02 	vpop	{d8}
 801616c:	bd08      	pop	{r3, pc}
 801616e:	bf00      	nop
 8016170:	7f800000 	.word	0x7f800000
 8016174:	ff800000 	.word	0xff800000

08016178 <__ieee754_acosf>:
 8016178:	b508      	push	{r3, lr}
 801617a:	ee10 3a10 	vmov	r3, s0
 801617e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016182:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8016186:	ed2d 8b0c 	vpush	{d8-d13}
 801618a:	d10a      	bne.n	80161a2 <__ieee754_acosf+0x2a>
 801618c:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8016324 <__ieee754_acosf+0x1ac>
 8016190:	ed9f 8a65 	vldr	s16, [pc, #404]	; 8016328 <__ieee754_acosf+0x1b0>
 8016194:	2b00      	cmp	r3, #0
 8016196:	bfd8      	it	le
 8016198:	eeb0 0a48 	vmovle.f32	s0, s16
 801619c:	ecbd 8b0c 	vpop	{d8-d13}
 80161a0:	bd08      	pop	{r3, pc}
 80161a2:	dd04      	ble.n	80161ae <__ieee754_acosf+0x36>
 80161a4:	ee30 8a40 	vsub.f32	s16, s0, s0
 80161a8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80161ac:	e7f6      	b.n	801619c <__ieee754_acosf+0x24>
 80161ae:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 80161b2:	da3c      	bge.n	801622e <__ieee754_acosf+0xb6>
 80161b4:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 80161b8:	f340 80b1 	ble.w	801631e <__ieee754_acosf+0x1a6>
 80161bc:	ee60 7a00 	vmul.f32	s15, s0, s0
 80161c0:	eddf 6a5a 	vldr	s13, [pc, #360]	; 801632c <__ieee754_acosf+0x1b4>
 80161c4:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8016330 <__ieee754_acosf+0x1b8>
 80161c8:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 8016334 <__ieee754_acosf+0x1bc>
 80161cc:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 8016338 <__ieee754_acosf+0x1c0>
 80161d0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80161d4:	eddf 6a59 	vldr	s13, [pc, #356]	; 801633c <__ieee754_acosf+0x1c4>
 80161d8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80161dc:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8016340 <__ieee754_acosf+0x1c8>
 80161e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80161e4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8016344 <__ieee754_acosf+0x1cc>
 80161e8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80161ec:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8016348 <__ieee754_acosf+0x1d0>
 80161f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80161f4:	eddf 6a55 	vldr	s13, [pc, #340]	; 801634c <__ieee754_acosf+0x1d4>
 80161f8:	eea7 6aa6 	vfma.f32	s12, s15, s13
 80161fc:	eddf 6a54 	vldr	s13, [pc, #336]	; 8016350 <__ieee754_acosf+0x1d8>
 8016200:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016204:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8016354 <__ieee754_acosf+0x1dc>
 8016208:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801620c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016210:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016214:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016218:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801621c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8016220:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8016358 <__ieee754_acosf+0x1e0>
 8016224:	ee30 0a48 	vsub.f32	s0, s0, s16
 8016228:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801622c:	e7b6      	b.n	801619c <__ieee754_acosf+0x24>
 801622e:	2b00      	cmp	r3, #0
 8016230:	eddf da3e 	vldr	s27, [pc, #248]	; 801632c <__ieee754_acosf+0x1b4>
 8016234:	eddf ca3e 	vldr	s25, [pc, #248]	; 8016330 <__ieee754_acosf+0x1b8>
 8016238:	ed9f ca40 	vldr	s24, [pc, #256]	; 801633c <__ieee754_acosf+0x1c4>
 801623c:	eddf ba40 	vldr	s23, [pc, #256]	; 8016340 <__ieee754_acosf+0x1c8>
 8016240:	ed9f ba40 	vldr	s22, [pc, #256]	; 8016344 <__ieee754_acosf+0x1cc>
 8016244:	eddf 8a40 	vldr	s17, [pc, #256]	; 8016348 <__ieee754_acosf+0x1d0>
 8016248:	ed9f da40 	vldr	s26, [pc, #256]	; 801634c <__ieee754_acosf+0x1d4>
 801624c:	eddf aa39 	vldr	s21, [pc, #228]	; 8016334 <__ieee754_acosf+0x1bc>
 8016250:	ed9f aa3f 	vldr	s20, [pc, #252]	; 8016350 <__ieee754_acosf+0x1d8>
 8016254:	eddf 9a3f 	vldr	s19, [pc, #252]	; 8016354 <__ieee754_acosf+0x1dc>
 8016258:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801625c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016260:	da28      	bge.n	80162b4 <__ieee754_acosf+0x13c>
 8016262:	ee30 0a09 	vadd.f32	s0, s0, s18
 8016266:	ee20 0a27 	vmul.f32	s0, s0, s15
 801626a:	eee0 ca2d 	vfma.f32	s25, s0, s27
 801626e:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8016272:	eeac ca80 	vfma.f32	s24, s25, s0
 8016276:	eeaa aa80 	vfma.f32	s20, s21, s0
 801627a:	eeec ba00 	vfma.f32	s23, s24, s0
 801627e:	eeea 9a00 	vfma.f32	s19, s20, s0
 8016282:	eeab ba80 	vfma.f32	s22, s23, s0
 8016286:	eea9 9a80 	vfma.f32	s18, s19, s0
 801628a:	eeeb 8a00 	vfma.f32	s17, s22, s0
 801628e:	ee68 8a80 	vmul.f32	s17, s17, s0
 8016292:	f001 f903 	bl	801749c <__ieee754_sqrtf>
 8016296:	ee88 7a89 	vdiv.f32	s14, s17, s18
 801629a:	eddf 7a30 	vldr	s15, [pc, #192]	; 801635c <__ieee754_acosf+0x1e4>
 801629e:	eee0 7a07 	vfma.f32	s15, s0, s14
 80162a2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80162a6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80162aa:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8016360 <__ieee754_acosf+0x1e8>
 80162ae:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80162b2:	e773      	b.n	801619c <__ieee754_acosf+0x24>
 80162b4:	ee39 8a40 	vsub.f32	s16, s18, s0
 80162b8:	ee28 8a27 	vmul.f32	s16, s16, s15
 80162bc:	eeb0 0a48 	vmov.f32	s0, s16
 80162c0:	f001 f8ec 	bl	801749c <__ieee754_sqrtf>
 80162c4:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80162c8:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80162cc:	eeac ca88 	vfma.f32	s24, s25, s16
 80162d0:	eeaa aa88 	vfma.f32	s20, s21, s16
 80162d4:	eeec ba08 	vfma.f32	s23, s24, s16
 80162d8:	ee10 3a10 	vmov	r3, s0
 80162dc:	eeab ba88 	vfma.f32	s22, s23, s16
 80162e0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80162e4:	f023 030f 	bic.w	r3, r3, #15
 80162e8:	eeea 9a08 	vfma.f32	s19, s20, s16
 80162ec:	ee07 3a90 	vmov	s15, r3
 80162f0:	eeeb 8a08 	vfma.f32	s17, s22, s16
 80162f4:	eeb0 6a48 	vmov.f32	s12, s16
 80162f8:	eea7 6ae7 	vfms.f32	s12, s15, s15
 80162fc:	eea9 9a88 	vfma.f32	s18, s19, s16
 8016300:	ee70 6a27 	vadd.f32	s13, s0, s15
 8016304:	ee68 8a88 	vmul.f32	s17, s17, s16
 8016308:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801630c:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8016310:	eea0 7a26 	vfma.f32	s14, s0, s13
 8016314:	ee37 0a87 	vadd.f32	s0, s15, s14
 8016318:	ee30 0a00 	vadd.f32	s0, s0, s0
 801631c:	e73e      	b.n	801619c <__ieee754_acosf+0x24>
 801631e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8016364 <__ieee754_acosf+0x1ec>
 8016322:	e73b      	b.n	801619c <__ieee754_acosf+0x24>
 8016324:	00000000 	.word	0x00000000
 8016328:	40490fdb 	.word	0x40490fdb
 801632c:	3811ef08 	.word	0x3811ef08
 8016330:	3a4f7f04 	.word	0x3a4f7f04
 8016334:	bf303361 	.word	0xbf303361
 8016338:	33a22168 	.word	0x33a22168
 801633c:	bd241146 	.word	0xbd241146
 8016340:	3e4e0aa8 	.word	0x3e4e0aa8
 8016344:	bea6b090 	.word	0xbea6b090
 8016348:	3e2aaaab 	.word	0x3e2aaaab
 801634c:	3d9dc62e 	.word	0x3d9dc62e
 8016350:	4001572d 	.word	0x4001572d
 8016354:	c019d139 	.word	0xc019d139
 8016358:	3fc90fda 	.word	0x3fc90fda
 801635c:	b3a22168 	.word	0xb3a22168
 8016360:	40490fda 	.word	0x40490fda
 8016364:	3fc90fdb 	.word	0x3fc90fdb

08016368 <__ieee754_acoshf>:
 8016368:	b508      	push	{r3, lr}
 801636a:	ee10 3a10 	vmov	r3, s0
 801636e:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8016372:	ed2d 8b04 	vpush	{d8-d9}
 8016376:	eeb0 8a40 	vmov.f32	s16, s0
 801637a:	da06      	bge.n	801638a <__ieee754_acoshf+0x22>
 801637c:	ee30 8a40 	vsub.f32	s16, s0, s0
 8016380:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8016384:	ecbd 8b04 	vpop	{d8-d9}
 8016388:	bd08      	pop	{r3, pc}
 801638a:	f1b3 4f9b 	cmp.w	r3, #1300234240	; 0x4d800000
 801638e:	db0c      	blt.n	80163aa <__ieee754_acoshf+0x42>
 8016390:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016394:	db02      	blt.n	801639c <__ieee754_acoshf+0x34>
 8016396:	ee30 0a00 	vadd.f32	s0, s0, s0
 801639a:	e7f3      	b.n	8016384 <__ieee754_acoshf+0x1c>
 801639c:	f000 fb14 	bl	80169c8 <__ieee754_logf>
 80163a0:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8016408 <__ieee754_acoshf+0xa0>
 80163a4:	ee30 0a08 	vadd.f32	s0, s0, s16
 80163a8:	e7ec      	b.n	8016384 <__ieee754_acoshf+0x1c>
 80163aa:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80163ae:	d028      	beq.n	8016402 <__ieee754_acoshf+0x9a>
 80163b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80163b4:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80163b8:	eef0 8a00 	vmov.f32	s17, #0	; 0x40000000  2.0
 80163bc:	dd11      	ble.n	80163e2 <__ieee754_acoshf+0x7a>
 80163be:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80163c2:	eea8 0a08 	vfma.f32	s0, s16, s16
 80163c6:	f001 f869 	bl	801749c <__ieee754_sqrtf>
 80163ca:	ee70 7a08 	vadd.f32	s15, s0, s16
 80163ce:	ee89 0a27 	vdiv.f32	s0, s18, s15
 80163d2:	ee98 0a28 	vfnms.f32	s0, s16, s17
 80163d6:	ecbd 8b04 	vpop	{d8-d9}
 80163da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80163de:	f000 baf3 	b.w	80169c8 <__ieee754_logf>
 80163e2:	ee30 8a49 	vsub.f32	s16, s0, s18
 80163e6:	ee28 0a08 	vmul.f32	s0, s16, s16
 80163ea:	eea8 0a28 	vfma.f32	s0, s16, s17
 80163ee:	f001 f855 	bl	801749c <__ieee754_sqrtf>
 80163f2:	ee30 0a08 	vadd.f32	s0, s0, s16
 80163f6:	ecbd 8b04 	vpop	{d8-d9}
 80163fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80163fe:	f7ff baff 	b.w	8015a00 <log1pf>
 8016402:	ed9f 0a02 	vldr	s0, [pc, #8]	; 801640c <__ieee754_acoshf+0xa4>
 8016406:	e7bd      	b.n	8016384 <__ieee754_acoshf+0x1c>
 8016408:	3f317218 	.word	0x3f317218
 801640c:	00000000 	.word	0x00000000

08016410 <__ieee754_asinf>:
 8016410:	b538      	push	{r3, r4, r5, lr}
 8016412:	ee10 5a10 	vmov	r5, s0
 8016416:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801641a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801641e:	ed2d 8b04 	vpush	{d8-d9}
 8016422:	d10c      	bne.n	801643e <__ieee754_asinf+0x2e>
 8016424:	eddf 7a5d 	vldr	s15, [pc, #372]	; 801659c <__ieee754_asinf+0x18c>
 8016428:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80165a0 <__ieee754_asinf+0x190>
 801642c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8016430:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016434:	eeb0 0a67 	vmov.f32	s0, s15
 8016438:	ecbd 8b04 	vpop	{d8-d9}
 801643c:	bd38      	pop	{r3, r4, r5, pc}
 801643e:	dd04      	ble.n	801644a <__ieee754_asinf+0x3a>
 8016440:	ee70 7a40 	vsub.f32	s15, s0, s0
 8016444:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8016448:	e7f6      	b.n	8016438 <__ieee754_asinf+0x28>
 801644a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801644e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8016452:	da0b      	bge.n	801646c <__ieee754_asinf+0x5c>
 8016454:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8016458:	da52      	bge.n	8016500 <__ieee754_asinf+0xf0>
 801645a:	eddf 7a52 	vldr	s15, [pc, #328]	; 80165a4 <__ieee754_asinf+0x194>
 801645e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8016462:	eef4 7ae8 	vcmpe.f32	s15, s17
 8016466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801646a:	dce5      	bgt.n	8016438 <__ieee754_asinf+0x28>
 801646c:	f7ff fa7e 	bl	801596c <fabsf>
 8016470:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8016474:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8016478:	ee20 8a08 	vmul.f32	s16, s0, s16
 801647c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80165a8 <__ieee754_asinf+0x198>
 8016480:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80165ac <__ieee754_asinf+0x19c>
 8016484:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 80165b0 <__ieee754_asinf+0x1a0>
 8016488:	eea8 7a27 	vfma.f32	s14, s16, s15
 801648c:	eddf 7a49 	vldr	s15, [pc, #292]	; 80165b4 <__ieee754_asinf+0x1a4>
 8016490:	eee7 7a08 	vfma.f32	s15, s14, s16
 8016494:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80165b8 <__ieee754_asinf+0x1a8>
 8016498:	eea7 7a88 	vfma.f32	s14, s15, s16
 801649c:	eddf 7a47 	vldr	s15, [pc, #284]	; 80165bc <__ieee754_asinf+0x1ac>
 80164a0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80164a4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80165c0 <__ieee754_asinf+0x1b0>
 80164a8:	eea7 9a88 	vfma.f32	s18, s15, s16
 80164ac:	eddf 7a45 	vldr	s15, [pc, #276]	; 80165c4 <__ieee754_asinf+0x1b4>
 80164b0:	eee8 7a07 	vfma.f32	s15, s16, s14
 80164b4:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80165c8 <__ieee754_asinf+0x1b8>
 80164b8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80164bc:	eddf 7a43 	vldr	s15, [pc, #268]	; 80165cc <__ieee754_asinf+0x1bc>
 80164c0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80164c4:	eeb0 0a48 	vmov.f32	s0, s16
 80164c8:	eee7 8a88 	vfma.f32	s17, s15, s16
 80164cc:	f000 ffe6 	bl	801749c <__ieee754_sqrtf>
 80164d0:	4b3f      	ldr	r3, [pc, #252]	; (80165d0 <__ieee754_asinf+0x1c0>)
 80164d2:	ee29 9a08 	vmul.f32	s18, s18, s16
 80164d6:	429c      	cmp	r4, r3
 80164d8:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80164dc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80164e0:	dd3d      	ble.n	801655e <__ieee754_asinf+0x14e>
 80164e2:	eea0 0a06 	vfma.f32	s0, s0, s12
 80164e6:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80165d4 <__ieee754_asinf+0x1c4>
 80164ea:	eee0 7a26 	vfma.f32	s15, s0, s13
 80164ee:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80165a0 <__ieee754_asinf+0x190>
 80164f2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80164f6:	2d00      	cmp	r5, #0
 80164f8:	bfd8      	it	le
 80164fa:	eeb1 0a40 	vnegle.f32	s0, s0
 80164fe:	e79b      	b.n	8016438 <__ieee754_asinf+0x28>
 8016500:	ee60 7a00 	vmul.f32	s15, s0, s0
 8016504:	eddf 6a28 	vldr	s13, [pc, #160]	; 80165a8 <__ieee754_asinf+0x198>
 8016508:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80165ac <__ieee754_asinf+0x19c>
 801650c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80165c0 <__ieee754_asinf+0x1b0>
 8016510:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8016514:	eddf 6a27 	vldr	s13, [pc, #156]	; 80165b4 <__ieee754_asinf+0x1a4>
 8016518:	eee7 6a27 	vfma.f32	s13, s14, s15
 801651c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80165b8 <__ieee754_asinf+0x1a8>
 8016520:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016524:	eddf 6a25 	vldr	s13, [pc, #148]	; 80165bc <__ieee754_asinf+0x1ac>
 8016528:	eee7 6a27 	vfma.f32	s13, s14, s15
 801652c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80165b0 <__ieee754_asinf+0x1a0>
 8016530:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016534:	eddf 6a23 	vldr	s13, [pc, #140]	; 80165c4 <__ieee754_asinf+0x1b4>
 8016538:	eee7 6a86 	vfma.f32	s13, s15, s12
 801653c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 80165c8 <__ieee754_asinf+0x1b8>
 8016540:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8016544:	eddf 6a21 	vldr	s13, [pc, #132]	; 80165cc <__ieee754_asinf+0x1bc>
 8016548:	eee6 6a27 	vfma.f32	s13, s12, s15
 801654c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016550:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8016554:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8016558:	eea0 0a27 	vfma.f32	s0, s0, s15
 801655c:	e76c      	b.n	8016438 <__ieee754_asinf+0x28>
 801655e:	ee10 3a10 	vmov	r3, s0
 8016562:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8016566:	f023 030f 	bic.w	r3, r3, #15
 801656a:	ee07 3a10 	vmov	s14, r3
 801656e:	eea7 8a47 	vfms.f32	s16, s14, s14
 8016572:	ee70 7a07 	vadd.f32	s15, s0, s14
 8016576:	ee30 0a00 	vadd.f32	s0, s0, s0
 801657a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 801657e:	eddf 7a07 	vldr	s15, [pc, #28]	; 801659c <__ieee754_asinf+0x18c>
 8016582:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8016586:	eed0 7a06 	vfnms.f32	s15, s0, s12
 801658a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80165d8 <__ieee754_asinf+0x1c8>
 801658e:	eeb0 6a40 	vmov.f32	s12, s0
 8016592:	eea7 6a66 	vfms.f32	s12, s14, s13
 8016596:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801659a:	e7aa      	b.n	80164f2 <__ieee754_asinf+0xe2>
 801659c:	b33bbd2e 	.word	0xb33bbd2e
 80165a0:	3fc90fdb 	.word	0x3fc90fdb
 80165a4:	7149f2ca 	.word	0x7149f2ca
 80165a8:	3811ef08 	.word	0x3811ef08
 80165ac:	3a4f7f04 	.word	0x3a4f7f04
 80165b0:	3e2aaaab 	.word	0x3e2aaaab
 80165b4:	bd241146 	.word	0xbd241146
 80165b8:	3e4e0aa8 	.word	0x3e4e0aa8
 80165bc:	bea6b090 	.word	0xbea6b090
 80165c0:	3d9dc62e 	.word	0x3d9dc62e
 80165c4:	bf303361 	.word	0xbf303361
 80165c8:	4001572d 	.word	0x4001572d
 80165cc:	c019d139 	.word	0xc019d139
 80165d0:	3f799999 	.word	0x3f799999
 80165d4:	333bbd2e 	.word	0x333bbd2e
 80165d8:	3f490fdb 	.word	0x3f490fdb

080165dc <__ieee754_atanhf>:
 80165dc:	b510      	push	{r4, lr}
 80165de:	ee10 4a10 	vmov	r4, s0
 80165e2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80165e6:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80165ea:	ed2d 8b02 	vpush	{d8}
 80165ee:	dd06      	ble.n	80165fe <__ieee754_atanhf+0x22>
 80165f0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80165f4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80165f8:	ecbd 8b02 	vpop	{d8}
 80165fc:	bd10      	pop	{r4, pc}
 80165fe:	d104      	bne.n	801660a <__ieee754_atanhf+0x2e>
 8016600:	eddf 7a17 	vldr	s15, [pc, #92]	; 8016660 <__ieee754_atanhf+0x84>
 8016604:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8016608:	e7f6      	b.n	80165f8 <__ieee754_atanhf+0x1c>
 801660a:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
 801660e:	da08      	bge.n	8016622 <__ieee754_atanhf+0x46>
 8016610:	eddf 7a14 	vldr	s15, [pc, #80]	; 8016664 <__ieee754_atanhf+0x88>
 8016614:	ee70 7a27 	vadd.f32	s15, s0, s15
 8016618:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801661c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016620:	dcea      	bgt.n	80165f8 <__ieee754_atanhf+0x1c>
 8016622:	ee07 3a90 	vmov	s15, r3
 8016626:	ee37 0aa7 	vadd.f32	s0, s15, s15
 801662a:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801662e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016632:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016636:	bfb6      	itet	lt
 8016638:	ee67 7a80 	vmullt.f32	s15, s15, s0
 801663c:	ee80 0a07 	vdivge.f32	s0, s0, s14
 8016640:	eec7 6a87 	vdivlt.f32	s13, s15, s14
 8016644:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8016648:	bfb8      	it	lt
 801664a:	ee36 0a80 	vaddlt.f32	s0, s13, s0
 801664e:	f7ff f9d7 	bl	8015a00 <log1pf>
 8016652:	ee20 0a08 	vmul.f32	s0, s0, s16
 8016656:	2c00      	cmp	r4, #0
 8016658:	bfb8      	it	lt
 801665a:	eeb1 0a40 	vneglt.f32	s0, s0
 801665e:	e7cb      	b.n	80165f8 <__ieee754_atanhf+0x1c>
 8016660:	00000000 	.word	0x00000000
 8016664:	7149f2ca 	.word	0x7149f2ca

08016668 <__ieee754_coshf>:
 8016668:	b510      	push	{r4, lr}
 801666a:	ee10 4a10 	vmov	r4, s0
 801666e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8016672:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8016676:	ed2d 8b02 	vpush	{d8}
 801667a:	db06      	blt.n	801668a <__ieee754_coshf+0x22>
 801667c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8016680:	ecbd 8b02 	vpop	{d8}
 8016684:	eeb0 0a67 	vmov.f32	s0, s15
 8016688:	bd10      	pop	{r4, pc}
 801668a:	4b23      	ldr	r3, [pc, #140]	; (8016718 <__ieee754_coshf+0xb0>)
 801668c:	429c      	cmp	r4, r3
 801668e:	dc13      	bgt.n	80166b8 <__ieee754_coshf+0x50>
 8016690:	f7ff f96c 	bl	801596c <fabsf>
 8016694:	f001 fb48 	bl	8017d28 <expm1f>
 8016698:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801669c:	f1b4 5f10 	cmp.w	r4, #603979776	; 0x24000000
 80166a0:	ee70 7a26 	vadd.f32	s15, s0, s13
 80166a4:	dbec      	blt.n	8016680 <__ieee754_coshf+0x18>
 80166a6:	ee20 7a00 	vmul.f32	s14, s0, s0
 80166aa:	ee37 0aa7 	vadd.f32	s0, s15, s15
 80166ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80166b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80166b6:	e7e3      	b.n	8016680 <__ieee754_coshf+0x18>
 80166b8:	4b18      	ldr	r3, [pc, #96]	; (801671c <__ieee754_coshf+0xb4>)
 80166ba:	429c      	cmp	r4, r3
 80166bc:	dc0a      	bgt.n	80166d4 <__ieee754_coshf+0x6c>
 80166be:	f7ff f955 	bl	801596c <fabsf>
 80166c2:	f000 f831 	bl	8016728 <__ieee754_expf>
 80166c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80166ca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80166ce:	eee0 7a07 	vfma.f32	s15, s0, s14
 80166d2:	e7d5      	b.n	8016680 <__ieee754_coshf+0x18>
 80166d4:	4b12      	ldr	r3, [pc, #72]	; (8016720 <__ieee754_coshf+0xb8>)
 80166d6:	429c      	cmp	r4, r3
 80166d8:	dc08      	bgt.n	80166ec <__ieee754_coshf+0x84>
 80166da:	f7ff f947 	bl	801596c <fabsf>
 80166de:	f000 f823 	bl	8016728 <__ieee754_expf>
 80166e2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80166e6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80166ea:	e7c9      	b.n	8016680 <__ieee754_coshf+0x18>
 80166ec:	4b0d      	ldr	r3, [pc, #52]	; (8016724 <__ieee754_coshf+0xbc>)
 80166ee:	429c      	cmp	r4, r3
 80166f0:	dc0a      	bgt.n	8016708 <__ieee754_coshf+0xa0>
 80166f2:	f7ff f93b 	bl	801596c <fabsf>
 80166f6:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80166fa:	ee20 0a08 	vmul.f32	s0, s0, s16
 80166fe:	f000 f813 	bl	8016728 <__ieee754_expf>
 8016702:	ee60 7a08 	vmul.f32	s15, s0, s16
 8016706:	e7ee      	b.n	80166e6 <__ieee754_coshf+0x7e>
 8016708:	ecbd 8b02 	vpop	{d8}
 801670c:	2000      	movs	r0, #0
 801670e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016712:	f001 bae1 	b.w	8017cd8 <__math_oflowf>
 8016716:	bf00      	nop
 8016718:	3eb17217 	.word	0x3eb17217
 801671c:	41afffff 	.word	0x41afffff
 8016720:	42b17217 	.word	0x42b17217
 8016724:	42b2d4fc 	.word	0x42b2d4fc

08016728 <__ieee754_expf>:
 8016728:	ee10 2a10 	vmov	r2, s0
 801672c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8016730:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8016734:	d902      	bls.n	801673c <__ieee754_expf+0x14>
 8016736:	ee30 0a00 	vadd.f32	s0, s0, s0
 801673a:	4770      	bx	lr
 801673c:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8016740:	d106      	bne.n	8016750 <__ieee754_expf+0x28>
 8016742:	eddf 7a4e 	vldr	s15, [pc, #312]	; 801687c <__ieee754_expf+0x154>
 8016746:	2b00      	cmp	r3, #0
 8016748:	bf18      	it	ne
 801674a:	eeb0 0a67 	vmovne.f32	s0, s15
 801674e:	4770      	bx	lr
 8016750:	484b      	ldr	r0, [pc, #300]	; (8016880 <__ieee754_expf+0x158>)
 8016752:	4282      	cmp	r2, r0
 8016754:	dd02      	ble.n	801675c <__ieee754_expf+0x34>
 8016756:	2000      	movs	r0, #0
 8016758:	f001 babe 	b.w	8017cd8 <__math_oflowf>
 801675c:	2a00      	cmp	r2, #0
 801675e:	da05      	bge.n	801676c <__ieee754_expf+0x44>
 8016760:	4a48      	ldr	r2, [pc, #288]	; (8016884 <__ieee754_expf+0x15c>)
 8016762:	4291      	cmp	r1, r2
 8016764:	d902      	bls.n	801676c <__ieee754_expf+0x44>
 8016766:	2000      	movs	r0, #0
 8016768:	f001 bab0 	b.w	8017ccc <__math_uflowf>
 801676c:	4a46      	ldr	r2, [pc, #280]	; (8016888 <__ieee754_expf+0x160>)
 801676e:	4291      	cmp	r1, r2
 8016770:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8016774:	d952      	bls.n	801681c <__ieee754_expf+0xf4>
 8016776:	4a45      	ldr	r2, [pc, #276]	; (801688c <__ieee754_expf+0x164>)
 8016778:	4291      	cmp	r1, r2
 801677a:	ea4f 0283 	mov.w	r2, r3, lsl #2
 801677e:	d834      	bhi.n	80167ea <__ieee754_expf+0xc2>
 8016780:	4943      	ldr	r1, [pc, #268]	; (8016890 <__ieee754_expf+0x168>)
 8016782:	4411      	add	r1, r2
 8016784:	ed91 7a00 	vldr	s14, [r1]
 8016788:	4942      	ldr	r1, [pc, #264]	; (8016894 <__ieee754_expf+0x16c>)
 801678a:	440a      	add	r2, r1
 801678c:	edd2 7a00 	vldr	s15, [r2]
 8016790:	ee30 7a47 	vsub.f32	s14, s0, s14
 8016794:	f1c3 0201 	rsb	r2, r3, #1
 8016798:	1ad2      	subs	r2, r2, r3
 801679a:	ee37 0a67 	vsub.f32	s0, s14, s15
 801679e:	ee20 6a00 	vmul.f32	s12, s0, s0
 80167a2:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8016898 <__ieee754_expf+0x170>
 80167a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801689c <__ieee754_expf+0x174>
 80167aa:	eee6 6a05 	vfma.f32	s13, s12, s10
 80167ae:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80168a0 <__ieee754_expf+0x178>
 80167b2:	eea6 5a86 	vfma.f32	s10, s13, s12
 80167b6:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80168a4 <__ieee754_expf+0x17c>
 80167ba:	eee5 6a06 	vfma.f32	s13, s10, s12
 80167be:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80168a8 <__ieee754_expf+0x180>
 80167c2:	eea6 5a86 	vfma.f32	s10, s13, s12
 80167c6:	eef0 6a40 	vmov.f32	s13, s0
 80167ca:	eee5 6a46 	vfms.f32	s13, s10, s12
 80167ce:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80167d2:	ee20 5a26 	vmul.f32	s10, s0, s13
 80167d6:	bb92      	cbnz	r2, 801683e <__ieee754_expf+0x116>
 80167d8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80167dc:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80167e0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80167e4:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80167e8:	4770      	bx	lr
 80167ea:	4b30      	ldr	r3, [pc, #192]	; (80168ac <__ieee754_expf+0x184>)
 80167ec:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80168b0 <__ieee754_expf+0x188>
 80167f0:	eddf 6a30 	vldr	s13, [pc, #192]	; 80168b4 <__ieee754_expf+0x18c>
 80167f4:	4413      	add	r3, r2
 80167f6:	edd3 7a00 	vldr	s15, [r3]
 80167fa:	eee0 7a07 	vfma.f32	s15, s0, s14
 80167fe:	eeb0 7a40 	vmov.f32	s14, s0
 8016802:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016806:	ee17 2a90 	vmov	r2, s15
 801680a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801680e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8016812:	eddf 6a29 	vldr	s13, [pc, #164]	; 80168b8 <__ieee754_expf+0x190>
 8016816:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801681a:	e7be      	b.n	801679a <__ieee754_expf+0x72>
 801681c:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8016820:	d20b      	bcs.n	801683a <__ieee754_expf+0x112>
 8016822:	eddf 6a26 	vldr	s13, [pc, #152]	; 80168bc <__ieee754_expf+0x194>
 8016826:	ee70 6a26 	vadd.f32	s13, s0, s13
 801682a:	eef4 6ae5 	vcmpe.f32	s13, s11
 801682e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016832:	dd02      	ble.n	801683a <__ieee754_expf+0x112>
 8016834:	ee30 0a25 	vadd.f32	s0, s0, s11
 8016838:	4770      	bx	lr
 801683a:	2200      	movs	r2, #0
 801683c:	e7af      	b.n	801679e <__ieee754_expf+0x76>
 801683e:	ee76 6a66 	vsub.f32	s13, s12, s13
 8016842:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8016846:	ee85 0a26 	vdiv.f32	s0, s10, s13
 801684a:	bfb8      	it	lt
 801684c:	3264      	addlt	r2, #100	; 0x64
 801684e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016852:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8016856:	ee75 7ac0 	vsub.f32	s15, s11, s0
 801685a:	ee17 3a90 	vmov	r3, s15
 801685e:	bfab      	itete	ge
 8016860:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8016864:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8016868:	ee00 3a10 	vmovge	s0, r3
 801686c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 80168c0 <__ieee754_expf+0x198>
 8016870:	bfbc      	itt	lt
 8016872:	ee00 3a10 	vmovlt	s0, r3
 8016876:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801687a:	4770      	bx	lr
 801687c:	00000000 	.word	0x00000000
 8016880:	42b17217 	.word	0x42b17217
 8016884:	42cff1b5 	.word	0x42cff1b5
 8016888:	3eb17218 	.word	0x3eb17218
 801688c:	3f851591 	.word	0x3f851591
 8016890:	0814fc84 	.word	0x0814fc84
 8016894:	0814fc8c 	.word	0x0814fc8c
 8016898:	3331bb4c 	.word	0x3331bb4c
 801689c:	b5ddea0e 	.word	0xb5ddea0e
 80168a0:	388ab355 	.word	0x388ab355
 80168a4:	bb360b61 	.word	0xbb360b61
 80168a8:	3e2aaaab 	.word	0x3e2aaaab
 80168ac:	0814fc7c 	.word	0x0814fc7c
 80168b0:	3fb8aa3b 	.word	0x3fb8aa3b
 80168b4:	3f317180 	.word	0x3f317180
 80168b8:	3717f7d1 	.word	0x3717f7d1
 80168bc:	7149f2ca 	.word	0x7149f2ca
 80168c0:	0d800000 	.word	0x0d800000

080168c4 <__ieee754_fmodf>:
 80168c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80168c6:	ee10 5a90 	vmov	r5, s1
 80168ca:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 80168ce:	d009      	beq.n	80168e4 <__ieee754_fmodf+0x20>
 80168d0:	ee10 2a10 	vmov	r2, s0
 80168d4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80168d8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80168dc:	da02      	bge.n	80168e4 <__ieee754_fmodf+0x20>
 80168de:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80168e2:	dd04      	ble.n	80168ee <__ieee754_fmodf+0x2a>
 80168e4:	ee60 0a20 	vmul.f32	s1, s0, s1
 80168e8:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80168ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80168ee:	42a3      	cmp	r3, r4
 80168f0:	dbfc      	blt.n	80168ec <__ieee754_fmodf+0x28>
 80168f2:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 80168f6:	d105      	bne.n	8016904 <__ieee754_fmodf+0x40>
 80168f8:	4b32      	ldr	r3, [pc, #200]	; (80169c4 <__ieee754_fmodf+0x100>)
 80168fa:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 80168fe:	ed93 0a00 	vldr	s0, [r3]
 8016902:	e7f3      	b.n	80168ec <__ieee754_fmodf+0x28>
 8016904:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8016908:	d13f      	bne.n	801698a <__ieee754_fmodf+0xc6>
 801690a:	0219      	lsls	r1, r3, #8
 801690c:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8016910:	2900      	cmp	r1, #0
 8016912:	dc37      	bgt.n	8016984 <__ieee754_fmodf+0xc0>
 8016914:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8016918:	d13d      	bne.n	8016996 <__ieee754_fmodf+0xd2>
 801691a:	0227      	lsls	r7, r4, #8
 801691c:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8016920:	2f00      	cmp	r7, #0
 8016922:	da35      	bge.n	8016990 <__ieee754_fmodf+0xcc>
 8016924:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8016928:	bfbb      	ittet	lt
 801692a:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 801692e:	1a12      	sublt	r2, r2, r0
 8016930:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8016934:	4093      	lsllt	r3, r2
 8016936:	bfa8      	it	ge
 8016938:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 801693c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8016940:	bfb5      	itete	lt
 8016942:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8016946:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 801694a:	1a52      	sublt	r2, r2, r1
 801694c:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 8016950:	bfb8      	it	lt
 8016952:	4094      	lsllt	r4, r2
 8016954:	1a40      	subs	r0, r0, r1
 8016956:	1b1a      	subs	r2, r3, r4
 8016958:	bb00      	cbnz	r0, 801699c <__ieee754_fmodf+0xd8>
 801695a:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 801695e:	bf38      	it	cc
 8016960:	4613      	movcc	r3, r2
 8016962:	2b00      	cmp	r3, #0
 8016964:	d0c8      	beq.n	80168f8 <__ieee754_fmodf+0x34>
 8016966:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801696a:	db1f      	blt.n	80169ac <__ieee754_fmodf+0xe8>
 801696c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8016970:	db1f      	blt.n	80169b2 <__ieee754_fmodf+0xee>
 8016972:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8016976:	317f      	adds	r1, #127	; 0x7f
 8016978:	4333      	orrs	r3, r6
 801697a:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 801697e:	ee00 3a10 	vmov	s0, r3
 8016982:	e7b3      	b.n	80168ec <__ieee754_fmodf+0x28>
 8016984:	3801      	subs	r0, #1
 8016986:	0049      	lsls	r1, r1, #1
 8016988:	e7c2      	b.n	8016910 <__ieee754_fmodf+0x4c>
 801698a:	15d8      	asrs	r0, r3, #23
 801698c:	387f      	subs	r0, #127	; 0x7f
 801698e:	e7c1      	b.n	8016914 <__ieee754_fmodf+0x50>
 8016990:	3901      	subs	r1, #1
 8016992:	007f      	lsls	r7, r7, #1
 8016994:	e7c4      	b.n	8016920 <__ieee754_fmodf+0x5c>
 8016996:	15e1      	asrs	r1, r4, #23
 8016998:	397f      	subs	r1, #127	; 0x7f
 801699a:	e7c3      	b.n	8016924 <__ieee754_fmodf+0x60>
 801699c:	2a00      	cmp	r2, #0
 801699e:	da02      	bge.n	80169a6 <__ieee754_fmodf+0xe2>
 80169a0:	005b      	lsls	r3, r3, #1
 80169a2:	3801      	subs	r0, #1
 80169a4:	e7d7      	b.n	8016956 <__ieee754_fmodf+0x92>
 80169a6:	d0a7      	beq.n	80168f8 <__ieee754_fmodf+0x34>
 80169a8:	0053      	lsls	r3, r2, #1
 80169aa:	e7fa      	b.n	80169a2 <__ieee754_fmodf+0xde>
 80169ac:	005b      	lsls	r3, r3, #1
 80169ae:	3901      	subs	r1, #1
 80169b0:	e7d9      	b.n	8016966 <__ieee754_fmodf+0xa2>
 80169b2:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 80169b6:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 80169ba:	3182      	adds	r1, #130	; 0x82
 80169bc:	410b      	asrs	r3, r1
 80169be:	4333      	orrs	r3, r6
 80169c0:	e7dd      	b.n	801697e <__ieee754_fmodf+0xba>
 80169c2:	bf00      	nop
 80169c4:	0814fc94 	.word	0x0814fc94

080169c8 <__ieee754_logf>:
 80169c8:	ee10 3a10 	vmov	r3, s0
 80169cc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80169d0:	d106      	bne.n	80169e0 <__ieee754_logf+0x18>
 80169d2:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8016b68 <__ieee754_logf+0x1a0>
 80169d6:	eddf 7a65 	vldr	s15, [pc, #404]	; 8016b6c <__ieee754_logf+0x1a4>
 80169da:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80169de:	4770      	bx	lr
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	da02      	bge.n	80169ea <__ieee754_logf+0x22>
 80169e4:	ee30 7a40 	vsub.f32	s14, s0, s0
 80169e8:	e7f5      	b.n	80169d6 <__ieee754_logf+0xe>
 80169ea:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80169ee:	db02      	blt.n	80169f6 <__ieee754_logf+0x2e>
 80169f0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80169f4:	4770      	bx	lr
 80169f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80169fa:	bfb8      	it	lt
 80169fc:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8016b70 <__ieee754_logf+0x1a8>
 8016a00:	485c      	ldr	r0, [pc, #368]	; (8016b74 <__ieee754_logf+0x1ac>)
 8016a02:	bfbe      	ittt	lt
 8016a04:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8016a08:	f06f 0118 	mvnlt.w	r1, #24
 8016a0c:	ee17 3a90 	vmovlt	r3, s15
 8016a10:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8016a14:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8016a18:	4418      	add	r0, r3
 8016a1a:	bfa8      	it	ge
 8016a1c:	2100      	movge	r1, #0
 8016a1e:	3a7f      	subs	r2, #127	; 0x7f
 8016a20:	440a      	add	r2, r1
 8016a22:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8016a26:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8016a2a:	4319      	orrs	r1, r3
 8016a2c:	ee00 1a10 	vmov	s0, r1
 8016a30:	4951      	ldr	r1, [pc, #324]	; (8016b78 <__ieee754_logf+0x1b0>)
 8016a32:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8016a36:	f103 000f 	add.w	r0, r3, #15
 8016a3a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016a3e:	4001      	ands	r1, r0
 8016a40:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016a44:	bb89      	cbnz	r1, 8016aaa <__ieee754_logf+0xe2>
 8016a46:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8016a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a4e:	d10f      	bne.n	8016a70 <__ieee754_logf+0xa8>
 8016a50:	2a00      	cmp	r2, #0
 8016a52:	f000 8085 	beq.w	8016b60 <__ieee754_logf+0x198>
 8016a56:	ee07 2a90 	vmov	s15, r2
 8016a5a:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8016b7c <__ieee754_logf+0x1b4>
 8016a5e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8016b80 <__ieee754_logf+0x1b8>
 8016a62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016a66:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016a6a:	eea7 0a87 	vfma.f32	s0, s15, s14
 8016a6e:	4770      	bx	lr
 8016a70:	eddf 6a44 	vldr	s13, [pc, #272]	; 8016b84 <__ieee754_logf+0x1bc>
 8016a74:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016a78:	eee0 7a66 	vfms.f32	s15, s0, s13
 8016a7c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8016a80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016a84:	b912      	cbnz	r2, 8016a8c <__ieee754_logf+0xc4>
 8016a86:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016a8a:	4770      	bx	lr
 8016a8c:	ee07 2a90 	vmov	s15, r2
 8016a90:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8016b7c <__ieee754_logf+0x1b4>
 8016a94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016a98:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8016a9c:	ee37 0a40 	vsub.f32	s0, s14, s0
 8016aa0:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8016b80 <__ieee754_logf+0x1b8>
 8016aa4:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8016aa8:	4770      	bx	lr
 8016aaa:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8016aae:	ee70 7a27 	vadd.f32	s15, s0, s15
 8016ab2:	eddf 5a35 	vldr	s11, [pc, #212]	; 8016b88 <__ieee754_logf+0x1c0>
 8016ab6:	eddf 4a35 	vldr	s9, [pc, #212]	; 8016b8c <__ieee754_logf+0x1c4>
 8016aba:	4935      	ldr	r1, [pc, #212]	; (8016b90 <__ieee754_logf+0x1c8>)
 8016abc:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8016ac0:	4419      	add	r1, r3
 8016ac2:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8016ac6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8016aca:	430b      	orrs	r3, r1
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	ee07 2a90 	vmov	s15, r2
 8016ad2:	ee26 5a06 	vmul.f32	s10, s12, s12
 8016ad6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016ada:	ee25 7a05 	vmul.f32	s14, s10, s10
 8016ade:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8016b94 <__ieee754_logf+0x1cc>
 8016ae2:	eee7 7a25 	vfma.f32	s15, s14, s11
 8016ae6:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8016b98 <__ieee754_logf+0x1d0>
 8016aea:	eee7 5a87 	vfma.f32	s11, s15, s14
 8016aee:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8016b9c <__ieee754_logf+0x1d4>
 8016af2:	eee7 7a24 	vfma.f32	s15, s14, s9
 8016af6:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8016ba0 <__ieee754_logf+0x1d8>
 8016afa:	eee7 4a87 	vfma.f32	s9, s15, s14
 8016afe:	eddf 7a29 	vldr	s15, [pc, #164]	; 8016ba4 <__ieee754_logf+0x1dc>
 8016b02:	eee4 7a87 	vfma.f32	s15, s9, s14
 8016b06:	ee67 7a85 	vmul.f32	s15, s15, s10
 8016b0a:	eee5 7a87 	vfma.f32	s15, s11, s14
 8016b0e:	dd1c      	ble.n	8016b4a <__ieee754_logf+0x182>
 8016b10:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016b14:	ee20 7a07 	vmul.f32	s14, s0, s14
 8016b18:	ee27 7a00 	vmul.f32	s14, s14, s0
 8016b1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016b20:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016b24:	b922      	cbnz	r2, 8016b30 <__ieee754_logf+0x168>
 8016b26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016b2a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016b2e:	4770      	bx	lr
 8016b30:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8016b7c <__ieee754_logf+0x1b4>
 8016b34:	eee6 7a86 	vfma.f32	s15, s13, s12
 8016b38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016b3c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016b40:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8016b80 <__ieee754_logf+0x1b8>
 8016b44:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8016b48:	4770      	bx	lr
 8016b4a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016b4e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016b52:	2a00      	cmp	r2, #0
 8016b54:	d0e9      	beq.n	8016b2a <__ieee754_logf+0x162>
 8016b56:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8016b7c <__ieee754_logf+0x1b4>
 8016b5a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8016b5e:	e7ed      	b.n	8016b3c <__ieee754_logf+0x174>
 8016b60:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8016b6c <__ieee754_logf+0x1a4>
 8016b64:	4770      	bx	lr
 8016b66:	bf00      	nop
 8016b68:	cc000000 	.word	0xcc000000
 8016b6c:	00000000 	.word	0x00000000
 8016b70:	4c000000 	.word	0x4c000000
 8016b74:	004afb20 	.word	0x004afb20
 8016b78:	007ffff0 	.word	0x007ffff0
 8016b7c:	3717f7d1 	.word	0x3717f7d1
 8016b80:	3f317180 	.word	0x3f317180
 8016b84:	3eaaaaab 	.word	0x3eaaaaab
 8016b88:	3e1cd04f 	.word	0x3e1cd04f
 8016b8c:	3e178897 	.word	0x3e178897
 8016b90:	ffcf5c30 	.word	0xffcf5c30
 8016b94:	3e638e29 	.word	0x3e638e29
 8016b98:	3ecccccd 	.word	0x3ecccccd
 8016b9c:	3e3a3325 	.word	0x3e3a3325
 8016ba0:	3e924925 	.word	0x3e924925
 8016ba4:	3f2aaaab 	.word	0x3f2aaaab

08016ba8 <__ieee754_powf>:
 8016ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bac:	ee10 4a90 	vmov	r4, s1
 8016bb0:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8016bb4:	ed2d 8b02 	vpush	{d8}
 8016bb8:	ee10 6a10 	vmov	r6, s0
 8016bbc:	eeb0 8a40 	vmov.f32	s16, s0
 8016bc0:	eef0 8a60 	vmov.f32	s17, s1
 8016bc4:	d10c      	bne.n	8016be0 <__ieee754_powf+0x38>
 8016bc6:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8016bca:	0076      	lsls	r6, r6, #1
 8016bcc:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8016bd0:	f240 8296 	bls.w	8017100 <__ieee754_powf+0x558>
 8016bd4:	ee38 0a28 	vadd.f32	s0, s16, s17
 8016bd8:	ecbd 8b02 	vpop	{d8}
 8016bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016be0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8016be4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8016be8:	dcf4      	bgt.n	8016bd4 <__ieee754_powf+0x2c>
 8016bea:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8016bee:	dd08      	ble.n	8016c02 <__ieee754_powf+0x5a>
 8016bf0:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8016bf4:	d1ee      	bne.n	8016bd4 <__ieee754_powf+0x2c>
 8016bf6:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8016bfa:	0064      	lsls	r4, r4, #1
 8016bfc:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8016c00:	e7e6      	b.n	8016bd0 <__ieee754_powf+0x28>
 8016c02:	2e00      	cmp	r6, #0
 8016c04:	da20      	bge.n	8016c48 <__ieee754_powf+0xa0>
 8016c06:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8016c0a:	da2d      	bge.n	8016c68 <__ieee754_powf+0xc0>
 8016c0c:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8016c10:	f2c0 827f 	blt.w	8017112 <__ieee754_powf+0x56a>
 8016c14:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8016c18:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8016c1c:	fa48 f703 	asr.w	r7, r8, r3
 8016c20:	fa07 f303 	lsl.w	r3, r7, r3
 8016c24:	4543      	cmp	r3, r8
 8016c26:	f040 8274 	bne.w	8017112 <__ieee754_powf+0x56a>
 8016c2a:	f007 0701 	and.w	r7, r7, #1
 8016c2e:	f1c7 0702 	rsb	r7, r7, #2
 8016c32:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8016c36:	d11f      	bne.n	8016c78 <__ieee754_powf+0xd0>
 8016c38:	2c00      	cmp	r4, #0
 8016c3a:	f280 8267 	bge.w	801710c <__ieee754_powf+0x564>
 8016c3e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016c42:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8016c46:	e7c7      	b.n	8016bd8 <__ieee754_powf+0x30>
 8016c48:	2700      	movs	r7, #0
 8016c4a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8016c4e:	d1f0      	bne.n	8016c32 <__ieee754_powf+0x8a>
 8016c50:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8016c54:	f000 8254 	beq.w	8017100 <__ieee754_powf+0x558>
 8016c58:	dd08      	ble.n	8016c6c <__ieee754_powf+0xc4>
 8016c5a:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8016f64 <__ieee754_powf+0x3bc>
 8016c5e:	2c00      	cmp	r4, #0
 8016c60:	bfa8      	it	ge
 8016c62:	eeb0 0a68 	vmovge.f32	s0, s17
 8016c66:	e7b7      	b.n	8016bd8 <__ieee754_powf+0x30>
 8016c68:	2702      	movs	r7, #2
 8016c6a:	e7ee      	b.n	8016c4a <__ieee754_powf+0xa2>
 8016c6c:	2c00      	cmp	r4, #0
 8016c6e:	f280 824a 	bge.w	8017106 <__ieee754_powf+0x55e>
 8016c72:	eeb1 0a68 	vneg.f32	s0, s17
 8016c76:	e7af      	b.n	8016bd8 <__ieee754_powf+0x30>
 8016c78:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8016c7c:	d102      	bne.n	8016c84 <__ieee754_powf+0xdc>
 8016c7e:	ee28 0a08 	vmul.f32	s0, s16, s16
 8016c82:	e7a9      	b.n	8016bd8 <__ieee754_powf+0x30>
 8016c84:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8016c88:	eeb0 0a48 	vmov.f32	s0, s16
 8016c8c:	d107      	bne.n	8016c9e <__ieee754_powf+0xf6>
 8016c8e:	2e00      	cmp	r6, #0
 8016c90:	db05      	blt.n	8016c9e <__ieee754_powf+0xf6>
 8016c92:	ecbd 8b02 	vpop	{d8}
 8016c96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c9a:	f000 bbff 	b.w	801749c <__ieee754_sqrtf>
 8016c9e:	f7fe fe65 	bl	801596c <fabsf>
 8016ca2:	b125      	cbz	r5, 8016cae <__ieee754_powf+0x106>
 8016ca4:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8016ca8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8016cac:	d116      	bne.n	8016cdc <__ieee754_powf+0x134>
 8016cae:	2c00      	cmp	r4, #0
 8016cb0:	bfbc      	itt	lt
 8016cb2:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8016cb6:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8016cba:	2e00      	cmp	r6, #0
 8016cbc:	da8c      	bge.n	8016bd8 <__ieee754_powf+0x30>
 8016cbe:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8016cc2:	ea55 0307 	orrs.w	r3, r5, r7
 8016cc6:	d104      	bne.n	8016cd2 <__ieee754_powf+0x12a>
 8016cc8:	ee70 7a40 	vsub.f32	s15, s0, s0
 8016ccc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8016cd0:	e782      	b.n	8016bd8 <__ieee754_powf+0x30>
 8016cd2:	2f01      	cmp	r7, #1
 8016cd4:	d180      	bne.n	8016bd8 <__ieee754_powf+0x30>
 8016cd6:	eeb1 0a40 	vneg.f32	s0, s0
 8016cda:	e77d      	b.n	8016bd8 <__ieee754_powf+0x30>
 8016cdc:	0ff0      	lsrs	r0, r6, #31
 8016cde:	3801      	subs	r0, #1
 8016ce0:	ea57 0300 	orrs.w	r3, r7, r0
 8016ce4:	d104      	bne.n	8016cf0 <__ieee754_powf+0x148>
 8016ce6:	ee38 8a48 	vsub.f32	s16, s16, s16
 8016cea:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8016cee:	e773      	b.n	8016bd8 <__ieee754_powf+0x30>
 8016cf0:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8016cf4:	dd74      	ble.n	8016de0 <__ieee754_powf+0x238>
 8016cf6:	4b9c      	ldr	r3, [pc, #624]	; (8016f68 <__ieee754_powf+0x3c0>)
 8016cf8:	429d      	cmp	r5, r3
 8016cfa:	dc08      	bgt.n	8016d0e <__ieee754_powf+0x166>
 8016cfc:	2c00      	cmp	r4, #0
 8016cfe:	da0b      	bge.n	8016d18 <__ieee754_powf+0x170>
 8016d00:	2000      	movs	r0, #0
 8016d02:	ecbd 8b02 	vpop	{d8}
 8016d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016d0a:	f000 bfe5 	b.w	8017cd8 <__math_oflowf>
 8016d0e:	4b97      	ldr	r3, [pc, #604]	; (8016f6c <__ieee754_powf+0x3c4>)
 8016d10:	429d      	cmp	r5, r3
 8016d12:	dd08      	ble.n	8016d26 <__ieee754_powf+0x17e>
 8016d14:	2c00      	cmp	r4, #0
 8016d16:	dcf3      	bgt.n	8016d00 <__ieee754_powf+0x158>
 8016d18:	2000      	movs	r0, #0
 8016d1a:	ecbd 8b02 	vpop	{d8}
 8016d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016d22:	f000 bfd3 	b.w	8017ccc <__math_uflowf>
 8016d26:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016d2a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016d2e:	eddf 6a90 	vldr	s13, [pc, #576]	; 8016f70 <__ieee754_powf+0x3c8>
 8016d32:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8016d36:	eee0 6a67 	vfms.f32	s13, s0, s15
 8016d3a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016d3e:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8016d42:	ee20 7a00 	vmul.f32	s14, s0, s0
 8016d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016d4a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8016f74 <__ieee754_powf+0x3cc>
 8016d4e:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8016d52:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8016f78 <__ieee754_powf+0x3d0>
 8016d56:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016d5a:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8016f7c <__ieee754_powf+0x3d4>
 8016d5e:	eef0 6a67 	vmov.f32	s13, s15
 8016d62:	eee0 6a07 	vfma.f32	s13, s0, s14
 8016d66:	ee16 3a90 	vmov	r3, s13
 8016d6a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8016d6e:	f023 030f 	bic.w	r3, r3, #15
 8016d72:	ee00 3a90 	vmov	s1, r3
 8016d76:	eee0 0a47 	vfms.f32	s1, s0, s14
 8016d7a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8016d7e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8016d82:	f024 040f 	bic.w	r4, r4, #15
 8016d86:	ee07 4a10 	vmov	s14, r4
 8016d8a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8016d8e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8016d92:	ee07 3a90 	vmov	s15, r3
 8016d96:	eee7 0a27 	vfma.f32	s1, s14, s15
 8016d9a:	3f01      	subs	r7, #1
 8016d9c:	ea57 0200 	orrs.w	r2, r7, r0
 8016da0:	ee07 4a10 	vmov	s14, r4
 8016da4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016da8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8016dac:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8016db0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8016db4:	ee17 4a10 	vmov	r4, s14
 8016db8:	bf08      	it	eq
 8016dba:	eeb0 8a40 	vmoveq.f32	s16, s0
 8016dbe:	2c00      	cmp	r4, #0
 8016dc0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8016dc4:	f340 817e 	ble.w	80170c4 <__ieee754_powf+0x51c>
 8016dc8:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8016dcc:	f340 80f8 	ble.w	8016fc0 <__ieee754_powf+0x418>
 8016dd0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8016dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dd8:	bf4c      	ite	mi
 8016dda:	2001      	movmi	r0, #1
 8016ddc:	2000      	movpl	r0, #0
 8016dde:	e790      	b.n	8016d02 <__ieee754_powf+0x15a>
 8016de0:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8016de4:	bf01      	itttt	eq
 8016de6:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8016f80 <__ieee754_powf+0x3d8>
 8016dea:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8016dee:	f06f 0217 	mvneq.w	r2, #23
 8016df2:	ee17 5a90 	vmoveq	r5, s15
 8016df6:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8016dfa:	bf18      	it	ne
 8016dfc:	2200      	movne	r2, #0
 8016dfe:	3b7f      	subs	r3, #127	; 0x7f
 8016e00:	4413      	add	r3, r2
 8016e02:	4a60      	ldr	r2, [pc, #384]	; (8016f84 <__ieee754_powf+0x3dc>)
 8016e04:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8016e08:	4295      	cmp	r5, r2
 8016e0a:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8016e0e:	dd06      	ble.n	8016e1e <__ieee754_powf+0x276>
 8016e10:	4a5d      	ldr	r2, [pc, #372]	; (8016f88 <__ieee754_powf+0x3e0>)
 8016e12:	4295      	cmp	r5, r2
 8016e14:	f340 80a4 	ble.w	8016f60 <__ieee754_powf+0x3b8>
 8016e18:	3301      	adds	r3, #1
 8016e1a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8016e1e:	2500      	movs	r5, #0
 8016e20:	4a5a      	ldr	r2, [pc, #360]	; (8016f8c <__ieee754_powf+0x3e4>)
 8016e22:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8016e26:	ee07 1a90 	vmov	s15, r1
 8016e2a:	ed92 7a00 	vldr	s14, [r2]
 8016e2e:	4a58      	ldr	r2, [pc, #352]	; (8016f90 <__ieee754_powf+0x3e8>)
 8016e30:	ee37 6a27 	vadd.f32	s12, s14, s15
 8016e34:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8016e38:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8016e3c:	1049      	asrs	r1, r1, #1
 8016e3e:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8016e42:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8016e46:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8016e4a:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8016e4e:	ee06 1a10 	vmov	s12, r1
 8016e52:	ee65 4a26 	vmul.f32	s9, s10, s13
 8016e56:	ee36 7a47 	vsub.f32	s14, s12, s14
 8016e5a:	ee14 6a90 	vmov	r6, s9
 8016e5e:	4016      	ands	r6, r2
 8016e60:	ee05 6a90 	vmov	s11, r6
 8016e64:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8016e68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016e6c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8016f94 <__ieee754_powf+0x3ec>
 8016e70:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8016e74:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8016e78:	ee25 6a26 	vmul.f32	s12, s10, s13
 8016e7c:	eddf 6a46 	vldr	s13, [pc, #280]	; 8016f98 <__ieee754_powf+0x3f0>
 8016e80:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8016e84:	eddf 6a45 	vldr	s13, [pc, #276]	; 8016f9c <__ieee754_powf+0x3f4>
 8016e88:	eee7 6a27 	vfma.f32	s13, s14, s15
 8016e8c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8016f70 <__ieee754_powf+0x3c8>
 8016e90:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016e94:	eddf 6a42 	vldr	s13, [pc, #264]	; 8016fa0 <__ieee754_powf+0x3f8>
 8016e98:	eee7 6a27 	vfma.f32	s13, s14, s15
 8016e9c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8016fa4 <__ieee754_powf+0x3fc>
 8016ea0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016ea4:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8016ea8:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8016eac:	ee66 6a86 	vmul.f32	s13, s13, s12
 8016eb0:	eee5 6a07 	vfma.f32	s13, s10, s14
 8016eb4:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8016eb8:	eef0 7a45 	vmov.f32	s15, s10
 8016ebc:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8016ec0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016ec4:	ee17 1a90 	vmov	r1, s15
 8016ec8:	4011      	ands	r1, r2
 8016eca:	ee07 1a90 	vmov	s15, r1
 8016ece:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8016ed2:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8016ed6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8016eda:	ee27 7a24 	vmul.f32	s14, s14, s9
 8016ede:	eea6 7a27 	vfma.f32	s14, s12, s15
 8016ee2:	eeb0 6a47 	vmov.f32	s12, s14
 8016ee6:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8016eea:	ee16 1a10 	vmov	r1, s12
 8016eee:	4011      	ands	r1, r2
 8016ef0:	ee06 1a90 	vmov	s13, r1
 8016ef4:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8016ef8:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8016fa8 <__ieee754_powf+0x400>
 8016efc:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8016fac <__ieee754_powf+0x404>
 8016f00:	ee37 7a66 	vsub.f32	s14, s14, s13
 8016f04:	ee06 1a10 	vmov	s12, r1
 8016f08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016f0c:	eddf 7a28 	vldr	s15, [pc, #160]	; 8016fb0 <__ieee754_powf+0x408>
 8016f10:	4928      	ldr	r1, [pc, #160]	; (8016fb4 <__ieee754_powf+0x40c>)
 8016f12:	eea6 7a27 	vfma.f32	s14, s12, s15
 8016f16:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8016f1a:	edd1 7a00 	vldr	s15, [r1]
 8016f1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016f22:	ee07 3a90 	vmov	s15, r3
 8016f26:	4b24      	ldr	r3, [pc, #144]	; (8016fb8 <__ieee754_powf+0x410>)
 8016f28:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016f2c:	eef0 7a47 	vmov.f32	s15, s14
 8016f30:	eee6 7a25 	vfma.f32	s15, s12, s11
 8016f34:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8016f38:	edd5 0a00 	vldr	s1, [r5]
 8016f3c:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8016f40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016f44:	ee17 3a90 	vmov	r3, s15
 8016f48:	4013      	ands	r3, r2
 8016f4a:	ee07 3a90 	vmov	s15, r3
 8016f4e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8016f52:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8016f56:	eee6 6a65 	vfms.f32	s13, s12, s11
 8016f5a:	ee77 7a66 	vsub.f32	s15, s14, s13
 8016f5e:	e70e      	b.n	8016d7e <__ieee754_powf+0x1d6>
 8016f60:	2501      	movs	r5, #1
 8016f62:	e75d      	b.n	8016e20 <__ieee754_powf+0x278>
 8016f64:	00000000 	.word	0x00000000
 8016f68:	3f7ffff3 	.word	0x3f7ffff3
 8016f6c:	3f800007 	.word	0x3f800007
 8016f70:	3eaaaaab 	.word	0x3eaaaaab
 8016f74:	3fb8aa3b 	.word	0x3fb8aa3b
 8016f78:	36eca570 	.word	0x36eca570
 8016f7c:	3fb8aa00 	.word	0x3fb8aa00
 8016f80:	4b800000 	.word	0x4b800000
 8016f84:	001cc471 	.word	0x001cc471
 8016f88:	005db3d6 	.word	0x005db3d6
 8016f8c:	0814fc9c 	.word	0x0814fc9c
 8016f90:	fffff000 	.word	0xfffff000
 8016f94:	3e6c3255 	.word	0x3e6c3255
 8016f98:	3e53f142 	.word	0x3e53f142
 8016f9c:	3e8ba305 	.word	0x3e8ba305
 8016fa0:	3edb6db7 	.word	0x3edb6db7
 8016fa4:	3f19999a 	.word	0x3f19999a
 8016fa8:	3f76384f 	.word	0x3f76384f
 8016fac:	3f763800 	.word	0x3f763800
 8016fb0:	369dc3a0 	.word	0x369dc3a0
 8016fb4:	0814fcac 	.word	0x0814fcac
 8016fb8:	0814fca4 	.word	0x0814fca4
 8016fbc:	3338aa3c 	.word	0x3338aa3c
 8016fc0:	f040 8095 	bne.w	80170ee <__ieee754_powf+0x546>
 8016fc4:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8016fbc <__ieee754_powf+0x414>
 8016fc8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016fcc:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8016fd0:	eef4 6ac7 	vcmpe.f32	s13, s14
 8016fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fd8:	f73f aefa 	bgt.w	8016dd0 <__ieee754_powf+0x228>
 8016fdc:	15db      	asrs	r3, r3, #23
 8016fde:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8016fe2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8016fe6:	4103      	asrs	r3, r0
 8016fe8:	4423      	add	r3, r4
 8016fea:	494b      	ldr	r1, [pc, #300]	; (8017118 <__ieee754_powf+0x570>)
 8016fec:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8016ff0:	3a7f      	subs	r2, #127	; 0x7f
 8016ff2:	4111      	asrs	r1, r2
 8016ff4:	ea23 0101 	bic.w	r1, r3, r1
 8016ff8:	ee07 1a10 	vmov	s14, r1
 8016ffc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8017000:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8017004:	f1c2 0217 	rsb	r2, r2, #23
 8017008:	4110      	asrs	r0, r2
 801700a:	2c00      	cmp	r4, #0
 801700c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017010:	bfb8      	it	lt
 8017012:	4240      	neglt	r0, r0
 8017014:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8017018:	ed9f 0a40 	vldr	s0, [pc, #256]	; 801711c <__ieee754_powf+0x574>
 801701c:	eddf 6a40 	vldr	s13, [pc, #256]	; 8017120 <__ieee754_powf+0x578>
 8017020:	ee17 3a10 	vmov	r3, s14
 8017024:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8017028:	f023 030f 	bic.w	r3, r3, #15
 801702c:	ee07 3a10 	vmov	s14, r3
 8017030:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017034:	ee27 0a00 	vmul.f32	s0, s14, s0
 8017038:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801703c:	eddf 7a39 	vldr	s15, [pc, #228]	; 8017124 <__ieee754_powf+0x57c>
 8017040:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8017044:	eef0 7a40 	vmov.f32	s15, s0
 8017048:	eee7 7a26 	vfma.f32	s15, s14, s13
 801704c:	eeb0 6a67 	vmov.f32	s12, s15
 8017050:	eea7 6a66 	vfms.f32	s12, s14, s13
 8017054:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8017058:	ee30 0a46 	vsub.f32	s0, s0, s12
 801705c:	eddf 6a32 	vldr	s13, [pc, #200]	; 8017128 <__ieee754_powf+0x580>
 8017060:	ed9f 6a32 	vldr	s12, [pc, #200]	; 801712c <__ieee754_powf+0x584>
 8017064:	eee7 6a06 	vfma.f32	s13, s14, s12
 8017068:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8017130 <__ieee754_powf+0x588>
 801706c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8017070:	eddf 6a30 	vldr	s13, [pc, #192]	; 8017134 <__ieee754_powf+0x58c>
 8017074:	eee6 6a07 	vfma.f32	s13, s12, s14
 8017078:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8017138 <__ieee754_powf+0x590>
 801707c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8017080:	eef0 6a67 	vmov.f32	s13, s15
 8017084:	eee6 6a47 	vfms.f32	s13, s12, s14
 8017088:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801708c:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8017090:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8017094:	eea7 0a80 	vfma.f32	s0, s15, s0
 8017098:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801709c:	ee37 0a40 	vsub.f32	s0, s14, s0
 80170a0:	ee70 7a67 	vsub.f32	s15, s0, s15
 80170a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80170a8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80170ac:	ee10 3a10 	vmov	r3, s0
 80170b0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80170b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80170b8:	da1f      	bge.n	80170fa <__ieee754_powf+0x552>
 80170ba:	f000 ff5f 	bl	8017f7c <scalbnf>
 80170be:	ee20 0a08 	vmul.f32	s0, s0, s16
 80170c2:	e589      	b.n	8016bd8 <__ieee754_powf+0x30>
 80170c4:	4a1d      	ldr	r2, [pc, #116]	; (801713c <__ieee754_powf+0x594>)
 80170c6:	4293      	cmp	r3, r2
 80170c8:	dd07      	ble.n	80170da <__ieee754_powf+0x532>
 80170ca:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80170ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170d2:	bf4c      	ite	mi
 80170d4:	2001      	movmi	r0, #1
 80170d6:	2000      	movpl	r0, #0
 80170d8:	e61f      	b.n	8016d1a <__ieee754_powf+0x172>
 80170da:	d108      	bne.n	80170ee <__ieee754_powf+0x546>
 80170dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80170e0:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80170e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170e8:	f6ff af78 	blt.w	8016fdc <__ieee754_powf+0x434>
 80170ec:	e7ed      	b.n	80170ca <__ieee754_powf+0x522>
 80170ee:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80170f2:	f73f af73 	bgt.w	8016fdc <__ieee754_powf+0x434>
 80170f6:	2000      	movs	r0, #0
 80170f8:	e78c      	b.n	8017014 <__ieee754_powf+0x46c>
 80170fa:	ee00 3a10 	vmov	s0, r3
 80170fe:	e7de      	b.n	80170be <__ieee754_powf+0x516>
 8017100:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8017104:	e568      	b.n	8016bd8 <__ieee754_powf+0x30>
 8017106:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8017140 <__ieee754_powf+0x598>
 801710a:	e565      	b.n	8016bd8 <__ieee754_powf+0x30>
 801710c:	eeb0 0a48 	vmov.f32	s0, s16
 8017110:	e562      	b.n	8016bd8 <__ieee754_powf+0x30>
 8017112:	2700      	movs	r7, #0
 8017114:	e58d      	b.n	8016c32 <__ieee754_powf+0x8a>
 8017116:	bf00      	nop
 8017118:	007fffff 	.word	0x007fffff
 801711c:	35bfbe8c 	.word	0x35bfbe8c
 8017120:	3f317200 	.word	0x3f317200
 8017124:	3f317218 	.word	0x3f317218
 8017128:	b5ddea0e 	.word	0xb5ddea0e
 801712c:	3331bb4c 	.word	0x3331bb4c
 8017130:	388ab355 	.word	0x388ab355
 8017134:	bb360b61 	.word	0xbb360b61
 8017138:	3e2aaaab 	.word	0x3e2aaaab
 801713c:	43160000 	.word	0x43160000
 8017140:	00000000 	.word	0x00000000

08017144 <__ieee754_rem_pio2f>:
 8017144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017146:	ee10 6a10 	vmov	r6, s0
 801714a:	4b8e      	ldr	r3, [pc, #568]	; (8017384 <__ieee754_rem_pio2f+0x240>)
 801714c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8017150:	429d      	cmp	r5, r3
 8017152:	b087      	sub	sp, #28
 8017154:	eef0 7a40 	vmov.f32	s15, s0
 8017158:	4604      	mov	r4, r0
 801715a:	dc05      	bgt.n	8017168 <__ieee754_rem_pio2f+0x24>
 801715c:	2300      	movs	r3, #0
 801715e:	ed80 0a00 	vstr	s0, [r0]
 8017162:	6043      	str	r3, [r0, #4]
 8017164:	2000      	movs	r0, #0
 8017166:	e01a      	b.n	801719e <__ieee754_rem_pio2f+0x5a>
 8017168:	4b87      	ldr	r3, [pc, #540]	; (8017388 <__ieee754_rem_pio2f+0x244>)
 801716a:	429d      	cmp	r5, r3
 801716c:	dc46      	bgt.n	80171fc <__ieee754_rem_pio2f+0xb8>
 801716e:	2e00      	cmp	r6, #0
 8017170:	ed9f 0a86 	vldr	s0, [pc, #536]	; 801738c <__ieee754_rem_pio2f+0x248>
 8017174:	4b86      	ldr	r3, [pc, #536]	; (8017390 <__ieee754_rem_pio2f+0x24c>)
 8017176:	f025 050f 	bic.w	r5, r5, #15
 801717a:	dd1f      	ble.n	80171bc <__ieee754_rem_pio2f+0x78>
 801717c:	429d      	cmp	r5, r3
 801717e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8017182:	d00e      	beq.n	80171a2 <__ieee754_rem_pio2f+0x5e>
 8017184:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8017394 <__ieee754_rem_pio2f+0x250>
 8017188:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801718c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8017190:	ed80 0a00 	vstr	s0, [r0]
 8017194:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017198:	2001      	movs	r0, #1
 801719a:	edc4 7a01 	vstr	s15, [r4, #4]
 801719e:	b007      	add	sp, #28
 80171a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80171a2:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8017398 <__ieee754_rem_pio2f+0x254>
 80171a6:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801739c <__ieee754_rem_pio2f+0x258>
 80171aa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80171ae:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80171b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80171b6:	edc0 6a00 	vstr	s13, [r0]
 80171ba:	e7eb      	b.n	8017194 <__ieee754_rem_pio2f+0x50>
 80171bc:	429d      	cmp	r5, r3
 80171be:	ee77 7a80 	vadd.f32	s15, s15, s0
 80171c2:	d00e      	beq.n	80171e2 <__ieee754_rem_pio2f+0x9e>
 80171c4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8017394 <__ieee754_rem_pio2f+0x250>
 80171c8:	ee37 0a87 	vadd.f32	s0, s15, s14
 80171cc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80171d0:	ed80 0a00 	vstr	s0, [r0]
 80171d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80171d8:	f04f 30ff 	mov.w	r0, #4294967295
 80171dc:	edc4 7a01 	vstr	s15, [r4, #4]
 80171e0:	e7dd      	b.n	801719e <__ieee754_rem_pio2f+0x5a>
 80171e2:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8017398 <__ieee754_rem_pio2f+0x254>
 80171e6:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 801739c <__ieee754_rem_pio2f+0x258>
 80171ea:	ee77 7a80 	vadd.f32	s15, s15, s0
 80171ee:	ee77 6a87 	vadd.f32	s13, s15, s14
 80171f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80171f6:	edc0 6a00 	vstr	s13, [r0]
 80171fa:	e7eb      	b.n	80171d4 <__ieee754_rem_pio2f+0x90>
 80171fc:	4b68      	ldr	r3, [pc, #416]	; (80173a0 <__ieee754_rem_pio2f+0x25c>)
 80171fe:	429d      	cmp	r5, r3
 8017200:	dc72      	bgt.n	80172e8 <__ieee754_rem_pio2f+0x1a4>
 8017202:	f7fe fbb3 	bl	801596c <fabsf>
 8017206:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80173a4 <__ieee754_rem_pio2f+0x260>
 801720a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801720e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8017212:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017216:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801721a:	ee17 0a90 	vmov	r0, s15
 801721e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801738c <__ieee754_rem_pio2f+0x248>
 8017222:	eea7 0a67 	vfms.f32	s0, s14, s15
 8017226:	281f      	cmp	r0, #31
 8017228:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8017394 <__ieee754_rem_pio2f+0x250>
 801722c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017230:	eeb1 6a47 	vneg.f32	s12, s14
 8017234:	ee70 6a67 	vsub.f32	s13, s0, s15
 8017238:	ee16 2a90 	vmov	r2, s13
 801723c:	dc1c      	bgt.n	8017278 <__ieee754_rem_pio2f+0x134>
 801723e:	495a      	ldr	r1, [pc, #360]	; (80173a8 <__ieee754_rem_pio2f+0x264>)
 8017240:	1e47      	subs	r7, r0, #1
 8017242:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8017246:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801724a:	428b      	cmp	r3, r1
 801724c:	d014      	beq.n	8017278 <__ieee754_rem_pio2f+0x134>
 801724e:	6022      	str	r2, [r4, #0]
 8017250:	ed94 7a00 	vldr	s14, [r4]
 8017254:	ee30 0a47 	vsub.f32	s0, s0, s14
 8017258:	2e00      	cmp	r6, #0
 801725a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801725e:	ed84 0a01 	vstr	s0, [r4, #4]
 8017262:	da9c      	bge.n	801719e <__ieee754_rem_pio2f+0x5a>
 8017264:	eeb1 7a47 	vneg.f32	s14, s14
 8017268:	eeb1 0a40 	vneg.f32	s0, s0
 801726c:	ed84 7a00 	vstr	s14, [r4]
 8017270:	ed84 0a01 	vstr	s0, [r4, #4]
 8017274:	4240      	negs	r0, r0
 8017276:	e792      	b.n	801719e <__ieee754_rem_pio2f+0x5a>
 8017278:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801727c:	15eb      	asrs	r3, r5, #23
 801727e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8017282:	2d08      	cmp	r5, #8
 8017284:	dde3      	ble.n	801724e <__ieee754_rem_pio2f+0x10a>
 8017286:	eddf 7a44 	vldr	s15, [pc, #272]	; 8017398 <__ieee754_rem_pio2f+0x254>
 801728a:	eddf 5a44 	vldr	s11, [pc, #272]	; 801739c <__ieee754_rem_pio2f+0x258>
 801728e:	eef0 6a40 	vmov.f32	s13, s0
 8017292:	eee6 6a27 	vfma.f32	s13, s12, s15
 8017296:	ee30 0a66 	vsub.f32	s0, s0, s13
 801729a:	eea6 0a27 	vfma.f32	s0, s12, s15
 801729e:	eef0 7a40 	vmov.f32	s15, s0
 80172a2:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80172a6:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80172aa:	ee15 2a90 	vmov	r2, s11
 80172ae:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80172b2:	1a5b      	subs	r3, r3, r1
 80172b4:	2b19      	cmp	r3, #25
 80172b6:	dc04      	bgt.n	80172c2 <__ieee754_rem_pio2f+0x17e>
 80172b8:	edc4 5a00 	vstr	s11, [r4]
 80172bc:	eeb0 0a66 	vmov.f32	s0, s13
 80172c0:	e7c6      	b.n	8017250 <__ieee754_rem_pio2f+0x10c>
 80172c2:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80173ac <__ieee754_rem_pio2f+0x268>
 80172c6:	eeb0 0a66 	vmov.f32	s0, s13
 80172ca:	eea6 0a25 	vfma.f32	s0, s12, s11
 80172ce:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80172d2:	eddf 6a37 	vldr	s13, [pc, #220]	; 80173b0 <__ieee754_rem_pio2f+0x26c>
 80172d6:	eee6 7a25 	vfma.f32	s15, s12, s11
 80172da:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80172de:	ee30 7a67 	vsub.f32	s14, s0, s15
 80172e2:	ed84 7a00 	vstr	s14, [r4]
 80172e6:	e7b3      	b.n	8017250 <__ieee754_rem_pio2f+0x10c>
 80172e8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80172ec:	db06      	blt.n	80172fc <__ieee754_rem_pio2f+0x1b8>
 80172ee:	ee70 7a40 	vsub.f32	s15, s0, s0
 80172f2:	edc0 7a01 	vstr	s15, [r0, #4]
 80172f6:	edc0 7a00 	vstr	s15, [r0]
 80172fa:	e733      	b.n	8017164 <__ieee754_rem_pio2f+0x20>
 80172fc:	15ea      	asrs	r2, r5, #23
 80172fe:	3a86      	subs	r2, #134	; 0x86
 8017300:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8017304:	ee07 3a90 	vmov	s15, r3
 8017308:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801730c:	eddf 6a29 	vldr	s13, [pc, #164]	; 80173b4 <__ieee754_rem_pio2f+0x270>
 8017310:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017314:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017318:	ed8d 7a03 	vstr	s14, [sp, #12]
 801731c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017320:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8017324:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017328:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801732c:	ed8d 7a04 	vstr	s14, [sp, #16]
 8017330:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017334:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801733c:	edcd 7a05 	vstr	s15, [sp, #20]
 8017340:	d11e      	bne.n	8017380 <__ieee754_rem_pio2f+0x23c>
 8017342:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8017346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801734a:	bf14      	ite	ne
 801734c:	2302      	movne	r3, #2
 801734e:	2301      	moveq	r3, #1
 8017350:	4919      	ldr	r1, [pc, #100]	; (80173b8 <__ieee754_rem_pio2f+0x274>)
 8017352:	9101      	str	r1, [sp, #4]
 8017354:	2102      	movs	r1, #2
 8017356:	9100      	str	r1, [sp, #0]
 8017358:	a803      	add	r0, sp, #12
 801735a:	4621      	mov	r1, r4
 801735c:	f000 f902 	bl	8017564 <__kernel_rem_pio2f>
 8017360:	2e00      	cmp	r6, #0
 8017362:	f6bf af1c 	bge.w	801719e <__ieee754_rem_pio2f+0x5a>
 8017366:	edd4 7a00 	vldr	s15, [r4]
 801736a:	eef1 7a67 	vneg.f32	s15, s15
 801736e:	edc4 7a00 	vstr	s15, [r4]
 8017372:	edd4 7a01 	vldr	s15, [r4, #4]
 8017376:	eef1 7a67 	vneg.f32	s15, s15
 801737a:	edc4 7a01 	vstr	s15, [r4, #4]
 801737e:	e779      	b.n	8017274 <__ieee754_rem_pio2f+0x130>
 8017380:	2303      	movs	r3, #3
 8017382:	e7e5      	b.n	8017350 <__ieee754_rem_pio2f+0x20c>
 8017384:	3f490fd8 	.word	0x3f490fd8
 8017388:	4016cbe3 	.word	0x4016cbe3
 801738c:	3fc90f80 	.word	0x3fc90f80
 8017390:	3fc90fd0 	.word	0x3fc90fd0
 8017394:	37354443 	.word	0x37354443
 8017398:	37354400 	.word	0x37354400
 801739c:	2e85a308 	.word	0x2e85a308
 80173a0:	43490f80 	.word	0x43490f80
 80173a4:	3f22f984 	.word	0x3f22f984
 80173a8:	0814fcb4 	.word	0x0814fcb4
 80173ac:	2e85a300 	.word	0x2e85a300
 80173b0:	248d3132 	.word	0x248d3132
 80173b4:	43800000 	.word	0x43800000
 80173b8:	0814fd34 	.word	0x0814fd34

080173bc <__ieee754_sinhf>:
 80173bc:	b510      	push	{r4, lr}
 80173be:	ee10 3a10 	vmov	r3, s0
 80173c2:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80173c6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80173ca:	ed2d 8b02 	vpush	{d8}
 80173ce:	eef0 7a40 	vmov.f32	s15, s0
 80173d2:	db06      	blt.n	80173e2 <__ieee754_sinhf+0x26>
 80173d4:	ee70 7a00 	vadd.f32	s15, s0, s0
 80173d8:	ecbd 8b02 	vpop	{d8}
 80173dc:	eeb0 0a67 	vmov.f32	s0, s15
 80173e0:	bd10      	pop	{r4, pc}
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	4b29      	ldr	r3, [pc, #164]	; (801748c <__ieee754_sinhf+0xd0>)
 80173e6:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 80173ea:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 80173ee:	bfa8      	it	ge
 80173f0:	eeb0 8a68 	vmovge.f32	s16, s17
 80173f4:	429c      	cmp	r4, r3
 80173f6:	dc2c      	bgt.n	8017452 <__ieee754_sinhf+0x96>
 80173f8:	f1b4 5f46 	cmp.w	r4, #830472192	; 0x31800000
 80173fc:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8017400:	da08      	bge.n	8017414 <__ieee754_sinhf+0x58>
 8017402:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8017490 <__ieee754_sinhf+0xd4>
 8017406:	ee30 7a07 	vadd.f32	s14, s0, s14
 801740a:	eeb4 7ae8 	vcmpe.f32	s14, s17
 801740e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017412:	dce1      	bgt.n	80173d8 <__ieee754_sinhf+0x1c>
 8017414:	eeb0 0a67 	vmov.f32	s0, s15
 8017418:	f7fe faa8 	bl	801596c <fabsf>
 801741c:	f000 fc84 	bl	8017d28 <expm1f>
 8017420:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8017424:	da0c      	bge.n	8017440 <__ieee754_sinhf+0x84>
 8017426:	ee60 7a00 	vmul.f32	s15, s0, s0
 801742a:	ee70 8a28 	vadd.f32	s17, s0, s17
 801742e:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8017432:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8017436:	ee90 7a27 	vfnms.f32	s14, s0, s15
 801743a:	ee67 7a08 	vmul.f32	s15, s14, s16
 801743e:	e7cb      	b.n	80173d8 <__ieee754_sinhf+0x1c>
 8017440:	ee70 8a28 	vadd.f32	s17, s0, s17
 8017444:	ee80 7a28 	vdiv.f32	s14, s0, s17
 8017448:	ee77 7a00 	vadd.f32	s15, s14, s0
 801744c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8017450:	e7c2      	b.n	80173d8 <__ieee754_sinhf+0x1c>
 8017452:	4b10      	ldr	r3, [pc, #64]	; (8017494 <__ieee754_sinhf+0xd8>)
 8017454:	429c      	cmp	r4, r3
 8017456:	dc06      	bgt.n	8017466 <__ieee754_sinhf+0xaa>
 8017458:	f7fe fa88 	bl	801596c <fabsf>
 801745c:	f7ff f964 	bl	8016728 <__ieee754_expf>
 8017460:	ee60 7a08 	vmul.f32	s15, s0, s16
 8017464:	e7b8      	b.n	80173d8 <__ieee754_sinhf+0x1c>
 8017466:	4b0c      	ldr	r3, [pc, #48]	; (8017498 <__ieee754_sinhf+0xdc>)
 8017468:	429c      	cmp	r4, r3
 801746a:	dc0a      	bgt.n	8017482 <__ieee754_sinhf+0xc6>
 801746c:	f7fe fa7e 	bl	801596c <fabsf>
 8017470:	ee20 0a28 	vmul.f32	s0, s0, s17
 8017474:	f7ff f958 	bl	8016728 <__ieee754_expf>
 8017478:	ee68 7a00 	vmul.f32	s15, s16, s0
 801747c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8017480:	e7aa      	b.n	80173d8 <__ieee754_sinhf+0x1c>
 8017482:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8017490 <__ieee754_sinhf+0xd4>
 8017486:	ee60 7a07 	vmul.f32	s15, s0, s14
 801748a:	e7a5      	b.n	80173d8 <__ieee754_sinhf+0x1c>
 801748c:	41afffff 	.word	0x41afffff
 8017490:	7cf0bdc2 	.word	0x7cf0bdc2
 8017494:	42b17217 	.word	0x42b17217
 8017498:	42b2d4fc 	.word	0x42b2d4fc

0801749c <__ieee754_sqrtf>:
 801749c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80174a0:	4770      	bx	lr
	...

080174a4 <__kernel_cosf>:
 80174a4:	ee10 3a10 	vmov	r3, s0
 80174a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80174ac:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80174b0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80174b4:	da05      	bge.n	80174c2 <__kernel_cosf+0x1e>
 80174b6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80174ba:	ee17 2a90 	vmov	r2, s15
 80174be:	2a00      	cmp	r2, #0
 80174c0:	d03d      	beq.n	801753e <__kernel_cosf+0x9a>
 80174c2:	ee60 5a00 	vmul.f32	s11, s0, s0
 80174c6:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8017544 <__kernel_cosf+0xa0>
 80174ca:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8017548 <__kernel_cosf+0xa4>
 80174ce:	eddf 6a1f 	vldr	s13, [pc, #124]	; 801754c <__kernel_cosf+0xa8>
 80174d2:	4a1f      	ldr	r2, [pc, #124]	; (8017550 <__kernel_cosf+0xac>)
 80174d4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80174d8:	4293      	cmp	r3, r2
 80174da:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8017554 <__kernel_cosf+0xb0>
 80174de:	eee7 7a25 	vfma.f32	s15, s14, s11
 80174e2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8017558 <__kernel_cosf+0xb4>
 80174e6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80174ea:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801755c <__kernel_cosf+0xb8>
 80174ee:	eee7 7a25 	vfma.f32	s15, s14, s11
 80174f2:	eeb0 7a66 	vmov.f32	s14, s13
 80174f6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80174fa:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80174fe:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8017502:	ee67 6a25 	vmul.f32	s13, s14, s11
 8017506:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 801750a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801750e:	dc04      	bgt.n	801751a <__kernel_cosf+0x76>
 8017510:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8017514:	ee36 0a47 	vsub.f32	s0, s12, s14
 8017518:	4770      	bx	lr
 801751a:	4a11      	ldr	r2, [pc, #68]	; (8017560 <__kernel_cosf+0xbc>)
 801751c:	4293      	cmp	r3, r2
 801751e:	bfda      	itte	le
 8017520:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8017524:	ee06 3a90 	vmovle	s13, r3
 8017528:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 801752c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017530:	ee36 0a66 	vsub.f32	s0, s12, s13
 8017534:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017538:	ee30 0a67 	vsub.f32	s0, s0, s15
 801753c:	4770      	bx	lr
 801753e:	eeb0 0a46 	vmov.f32	s0, s12
 8017542:	4770      	bx	lr
 8017544:	ad47d74e 	.word	0xad47d74e
 8017548:	310f74f6 	.word	0x310f74f6
 801754c:	3d2aaaab 	.word	0x3d2aaaab
 8017550:	3e999999 	.word	0x3e999999
 8017554:	b493f27c 	.word	0xb493f27c
 8017558:	37d00d01 	.word	0x37d00d01
 801755c:	bab60b61 	.word	0xbab60b61
 8017560:	3f480000 	.word	0x3f480000

08017564 <__kernel_rem_pio2f>:
 8017564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017568:	ed2d 8b04 	vpush	{d8-d9}
 801756c:	b0d9      	sub	sp, #356	; 0x164
 801756e:	4688      	mov	r8, r1
 8017570:	9002      	str	r0, [sp, #8]
 8017572:	49bb      	ldr	r1, [pc, #748]	; (8017860 <__kernel_rem_pio2f+0x2fc>)
 8017574:	9866      	ldr	r0, [sp, #408]	; 0x198
 8017576:	9301      	str	r3, [sp, #4]
 8017578:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801757c:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8017580:	1e59      	subs	r1, r3, #1
 8017582:	1d13      	adds	r3, r2, #4
 8017584:	db27      	blt.n	80175d6 <__kernel_rem_pio2f+0x72>
 8017586:	f1b2 0b03 	subs.w	fp, r2, #3
 801758a:	bf48      	it	mi
 801758c:	f102 0b04 	addmi.w	fp, r2, #4
 8017590:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8017594:	1c45      	adds	r5, r0, #1
 8017596:	00ec      	lsls	r4, r5, #3
 8017598:	1a47      	subs	r7, r0, r1
 801759a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8017870 <__kernel_rem_pio2f+0x30c>
 801759e:	9403      	str	r4, [sp, #12]
 80175a0:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80175a4:	eb0a 0c01 	add.w	ip, sl, r1
 80175a8:	ae1c      	add	r6, sp, #112	; 0x70
 80175aa:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 80175ae:	2400      	movs	r4, #0
 80175b0:	4564      	cmp	r4, ip
 80175b2:	dd12      	ble.n	80175da <__kernel_rem_pio2f+0x76>
 80175b4:	9b01      	ldr	r3, [sp, #4]
 80175b6:	ac1c      	add	r4, sp, #112	; 0x70
 80175b8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80175bc:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 80175c0:	f04f 0c00 	mov.w	ip, #0
 80175c4:	45d4      	cmp	ip, sl
 80175c6:	dc27      	bgt.n	8017618 <__kernel_rem_pio2f+0xb4>
 80175c8:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80175cc:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8017870 <__kernel_rem_pio2f+0x30c>
 80175d0:	4627      	mov	r7, r4
 80175d2:	2600      	movs	r6, #0
 80175d4:	e016      	b.n	8017604 <__kernel_rem_pio2f+0xa0>
 80175d6:	2000      	movs	r0, #0
 80175d8:	e7dc      	b.n	8017594 <__kernel_rem_pio2f+0x30>
 80175da:	42e7      	cmn	r7, r4
 80175dc:	bf5d      	ittte	pl
 80175de:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80175e2:	ee07 3a90 	vmovpl	s15, r3
 80175e6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80175ea:	eef0 7a47 	vmovmi.f32	s15, s14
 80175ee:	ece6 7a01 	vstmia	r6!, {s15}
 80175f2:	3401      	adds	r4, #1
 80175f4:	e7dc      	b.n	80175b0 <__kernel_rem_pio2f+0x4c>
 80175f6:	ecf9 6a01 	vldmia	r9!, {s13}
 80175fa:	ed97 7a00 	vldr	s14, [r7]
 80175fe:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017602:	3601      	adds	r6, #1
 8017604:	428e      	cmp	r6, r1
 8017606:	f1a7 0704 	sub.w	r7, r7, #4
 801760a:	ddf4      	ble.n	80175f6 <__kernel_rem_pio2f+0x92>
 801760c:	eceb 7a01 	vstmia	fp!, {s15}
 8017610:	f10c 0c01 	add.w	ip, ip, #1
 8017614:	3404      	adds	r4, #4
 8017616:	e7d5      	b.n	80175c4 <__kernel_rem_pio2f+0x60>
 8017618:	ab08      	add	r3, sp, #32
 801761a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801761e:	eddf 8a93 	vldr	s17, [pc, #588]	; 801786c <__kernel_rem_pio2f+0x308>
 8017622:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8017868 <__kernel_rem_pio2f+0x304>
 8017626:	9304      	str	r3, [sp, #16]
 8017628:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 801762c:	4656      	mov	r6, sl
 801762e:	00b3      	lsls	r3, r6, #2
 8017630:	9305      	str	r3, [sp, #20]
 8017632:	ab58      	add	r3, sp, #352	; 0x160
 8017634:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8017638:	ac08      	add	r4, sp, #32
 801763a:	ab44      	add	r3, sp, #272	; 0x110
 801763c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8017640:	46a4      	mov	ip, r4
 8017642:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8017646:	4637      	mov	r7, r6
 8017648:	2f00      	cmp	r7, #0
 801764a:	f1a0 0004 	sub.w	r0, r0, #4
 801764e:	dc4f      	bgt.n	80176f0 <__kernel_rem_pio2f+0x18c>
 8017650:	4628      	mov	r0, r5
 8017652:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8017656:	f000 fc91 	bl	8017f7c <scalbnf>
 801765a:	eeb0 8a40 	vmov.f32	s16, s0
 801765e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8017662:	ee28 0a00 	vmul.f32	s0, s16, s0
 8017666:	f7fe f989 	bl	801597c <floorf>
 801766a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801766e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8017672:	2d00      	cmp	r5, #0
 8017674:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8017678:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801767c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8017680:	ee17 9a90 	vmov	r9, s15
 8017684:	ee38 8a40 	vsub.f32	s16, s16, s0
 8017688:	dd44      	ble.n	8017714 <__kernel_rem_pio2f+0x1b0>
 801768a:	f106 3cff 	add.w	ip, r6, #4294967295
 801768e:	ab08      	add	r3, sp, #32
 8017690:	f1c5 0e08 	rsb	lr, r5, #8
 8017694:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8017698:	fa47 f00e 	asr.w	r0, r7, lr
 801769c:	4481      	add	r9, r0
 801769e:	fa00 f00e 	lsl.w	r0, r0, lr
 80176a2:	1a3f      	subs	r7, r7, r0
 80176a4:	f1c5 0007 	rsb	r0, r5, #7
 80176a8:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80176ac:	4107      	asrs	r7, r0
 80176ae:	2f00      	cmp	r7, #0
 80176b0:	dd3f      	ble.n	8017732 <__kernel_rem_pio2f+0x1ce>
 80176b2:	f04f 0e00 	mov.w	lr, #0
 80176b6:	f109 0901 	add.w	r9, r9, #1
 80176ba:	4673      	mov	r3, lr
 80176bc:	4576      	cmp	r6, lr
 80176be:	dc6b      	bgt.n	8017798 <__kernel_rem_pio2f+0x234>
 80176c0:	2d00      	cmp	r5, #0
 80176c2:	dd04      	ble.n	80176ce <__kernel_rem_pio2f+0x16a>
 80176c4:	2d01      	cmp	r5, #1
 80176c6:	d078      	beq.n	80177ba <__kernel_rem_pio2f+0x256>
 80176c8:	2d02      	cmp	r5, #2
 80176ca:	f000 8081 	beq.w	80177d0 <__kernel_rem_pio2f+0x26c>
 80176ce:	2f02      	cmp	r7, #2
 80176d0:	d12f      	bne.n	8017732 <__kernel_rem_pio2f+0x1ce>
 80176d2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80176d6:	ee30 8a48 	vsub.f32	s16, s0, s16
 80176da:	b353      	cbz	r3, 8017732 <__kernel_rem_pio2f+0x1ce>
 80176dc:	4628      	mov	r0, r5
 80176de:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80176e2:	f000 fc4b 	bl	8017f7c <scalbnf>
 80176e6:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80176ea:	ee38 8a40 	vsub.f32	s16, s16, s0
 80176ee:	e020      	b.n	8017732 <__kernel_rem_pio2f+0x1ce>
 80176f0:	ee60 7a28 	vmul.f32	s15, s0, s17
 80176f4:	3f01      	subs	r7, #1
 80176f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80176fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80176fe:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8017702:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8017706:	ecac 0a01 	vstmia	ip!, {s0}
 801770a:	ed90 0a00 	vldr	s0, [r0]
 801770e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8017712:	e799      	b.n	8017648 <__kernel_rem_pio2f+0xe4>
 8017714:	d105      	bne.n	8017722 <__kernel_rem_pio2f+0x1be>
 8017716:	1e70      	subs	r0, r6, #1
 8017718:	ab08      	add	r3, sp, #32
 801771a:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801771e:	11ff      	asrs	r7, r7, #7
 8017720:	e7c5      	b.n	80176ae <__kernel_rem_pio2f+0x14a>
 8017722:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8017726:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801772a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801772e:	da31      	bge.n	8017794 <__kernel_rem_pio2f+0x230>
 8017730:	2700      	movs	r7, #0
 8017732:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8017736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801773a:	f040 809b 	bne.w	8017874 <__kernel_rem_pio2f+0x310>
 801773e:	1e74      	subs	r4, r6, #1
 8017740:	46a4      	mov	ip, r4
 8017742:	2000      	movs	r0, #0
 8017744:	45d4      	cmp	ip, sl
 8017746:	da4a      	bge.n	80177de <__kernel_rem_pio2f+0x27a>
 8017748:	2800      	cmp	r0, #0
 801774a:	d07a      	beq.n	8017842 <__kernel_rem_pio2f+0x2de>
 801774c:	ab08      	add	r3, sp, #32
 801774e:	3d08      	subs	r5, #8
 8017750:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8017754:	2b00      	cmp	r3, #0
 8017756:	f000 8081 	beq.w	801785c <__kernel_rem_pio2f+0x2f8>
 801775a:	4628      	mov	r0, r5
 801775c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8017760:	00a5      	lsls	r5, r4, #2
 8017762:	f000 fc0b 	bl	8017f7c <scalbnf>
 8017766:	aa44      	add	r2, sp, #272	; 0x110
 8017768:	1d2b      	adds	r3, r5, #4
 801776a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801786c <__kernel_rem_pio2f+0x308>
 801776e:	18d1      	adds	r1, r2, r3
 8017770:	4622      	mov	r2, r4
 8017772:	2a00      	cmp	r2, #0
 8017774:	f280 80ae 	bge.w	80178d4 <__kernel_rem_pio2f+0x370>
 8017778:	4622      	mov	r2, r4
 801777a:	2a00      	cmp	r2, #0
 801777c:	f2c0 80cc 	blt.w	8017918 <__kernel_rem_pio2f+0x3b4>
 8017780:	a944      	add	r1, sp, #272	; 0x110
 8017782:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8017786:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8017864 <__kernel_rem_pio2f+0x300>
 801778a:	eddf 7a39 	vldr	s15, [pc, #228]	; 8017870 <__kernel_rem_pio2f+0x30c>
 801778e:	2000      	movs	r0, #0
 8017790:	1aa1      	subs	r1, r4, r2
 8017792:	e0b6      	b.n	8017902 <__kernel_rem_pio2f+0x39e>
 8017794:	2702      	movs	r7, #2
 8017796:	e78c      	b.n	80176b2 <__kernel_rem_pio2f+0x14e>
 8017798:	6820      	ldr	r0, [r4, #0]
 801779a:	b94b      	cbnz	r3, 80177b0 <__kernel_rem_pio2f+0x24c>
 801779c:	b118      	cbz	r0, 80177a6 <__kernel_rem_pio2f+0x242>
 801779e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80177a2:	6020      	str	r0, [r4, #0]
 80177a4:	2001      	movs	r0, #1
 80177a6:	f10e 0e01 	add.w	lr, lr, #1
 80177aa:	3404      	adds	r4, #4
 80177ac:	4603      	mov	r3, r0
 80177ae:	e785      	b.n	80176bc <__kernel_rem_pio2f+0x158>
 80177b0:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80177b4:	6020      	str	r0, [r4, #0]
 80177b6:	4618      	mov	r0, r3
 80177b8:	e7f5      	b.n	80177a6 <__kernel_rem_pio2f+0x242>
 80177ba:	1e74      	subs	r4, r6, #1
 80177bc:	a808      	add	r0, sp, #32
 80177be:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80177c2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80177c6:	f10d 0c20 	add.w	ip, sp, #32
 80177ca:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 80177ce:	e77e      	b.n	80176ce <__kernel_rem_pio2f+0x16a>
 80177d0:	1e74      	subs	r4, r6, #1
 80177d2:	a808      	add	r0, sp, #32
 80177d4:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80177d8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80177dc:	e7f3      	b.n	80177c6 <__kernel_rem_pio2f+0x262>
 80177de:	ab08      	add	r3, sp, #32
 80177e0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80177e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80177e8:	4318      	orrs	r0, r3
 80177ea:	e7ab      	b.n	8017744 <__kernel_rem_pio2f+0x1e0>
 80177ec:	f10c 0c01 	add.w	ip, ip, #1
 80177f0:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 80177f4:	2c00      	cmp	r4, #0
 80177f6:	d0f9      	beq.n	80177ec <__kernel_rem_pio2f+0x288>
 80177f8:	9b05      	ldr	r3, [sp, #20]
 80177fa:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80177fe:	eb0d 0003 	add.w	r0, sp, r3
 8017802:	9b01      	ldr	r3, [sp, #4]
 8017804:	18f4      	adds	r4, r6, r3
 8017806:	ab1c      	add	r3, sp, #112	; 0x70
 8017808:	1c77      	adds	r7, r6, #1
 801780a:	384c      	subs	r0, #76	; 0x4c
 801780c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017810:	4466      	add	r6, ip
 8017812:	42be      	cmp	r6, r7
 8017814:	f6ff af0b 	blt.w	801762e <__kernel_rem_pio2f+0xca>
 8017818:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 801781c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8017820:	ee07 3a90 	vmov	s15, r3
 8017824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017828:	f04f 0c00 	mov.w	ip, #0
 801782c:	ece4 7a01 	vstmia	r4!, {s15}
 8017830:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8017870 <__kernel_rem_pio2f+0x30c>
 8017834:	46a1      	mov	r9, r4
 8017836:	458c      	cmp	ip, r1
 8017838:	dd07      	ble.n	801784a <__kernel_rem_pio2f+0x2e6>
 801783a:	ece0 7a01 	vstmia	r0!, {s15}
 801783e:	3701      	adds	r7, #1
 8017840:	e7e7      	b.n	8017812 <__kernel_rem_pio2f+0x2ae>
 8017842:	9804      	ldr	r0, [sp, #16]
 8017844:	f04f 0c01 	mov.w	ip, #1
 8017848:	e7d2      	b.n	80177f0 <__kernel_rem_pio2f+0x28c>
 801784a:	ecfe 6a01 	vldmia	lr!, {s13}
 801784e:	ed39 7a01 	vldmdb	r9!, {s14}
 8017852:	f10c 0c01 	add.w	ip, ip, #1
 8017856:	eee6 7a87 	vfma.f32	s15, s13, s14
 801785a:	e7ec      	b.n	8017836 <__kernel_rem_pio2f+0x2d2>
 801785c:	3c01      	subs	r4, #1
 801785e:	e775      	b.n	801774c <__kernel_rem_pio2f+0x1e8>
 8017860:	08150078 	.word	0x08150078
 8017864:	0815004c 	.word	0x0815004c
 8017868:	43800000 	.word	0x43800000
 801786c:	3b800000 	.word	0x3b800000
 8017870:	00000000 	.word	0x00000000
 8017874:	9b03      	ldr	r3, [sp, #12]
 8017876:	eeb0 0a48 	vmov.f32	s0, s16
 801787a:	1a98      	subs	r0, r3, r2
 801787c:	f000 fb7e 	bl	8017f7c <scalbnf>
 8017880:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8017868 <__kernel_rem_pio2f+0x304>
 8017884:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8017888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801788c:	db19      	blt.n	80178c2 <__kernel_rem_pio2f+0x35e>
 801788e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801786c <__kernel_rem_pio2f+0x308>
 8017892:	ee60 7a27 	vmul.f32	s15, s0, s15
 8017896:	aa08      	add	r2, sp, #32
 8017898:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801789c:	1c74      	adds	r4, r6, #1
 801789e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80178a2:	3508      	adds	r5, #8
 80178a4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80178a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80178ac:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80178b0:	ee10 3a10 	vmov	r3, s0
 80178b4:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80178b8:	ee17 3a90 	vmov	r3, s15
 80178bc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80178c0:	e74b      	b.n	801775a <__kernel_rem_pio2f+0x1f6>
 80178c2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80178c6:	aa08      	add	r2, sp, #32
 80178c8:	ee10 3a10 	vmov	r3, s0
 80178cc:	4634      	mov	r4, r6
 80178ce:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80178d2:	e742      	b.n	801775a <__kernel_rem_pio2f+0x1f6>
 80178d4:	a808      	add	r0, sp, #32
 80178d6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80178da:	9001      	str	r0, [sp, #4]
 80178dc:	ee07 0a90 	vmov	s15, r0
 80178e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80178e4:	3a01      	subs	r2, #1
 80178e6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80178ea:	ee20 0a07 	vmul.f32	s0, s0, s14
 80178ee:	ed61 7a01 	vstmdb	r1!, {s15}
 80178f2:	e73e      	b.n	8017772 <__kernel_rem_pio2f+0x20e>
 80178f4:	ecfc 6a01 	vldmia	ip!, {s13}
 80178f8:	ecb6 7a01 	vldmia	r6!, {s14}
 80178fc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017900:	3001      	adds	r0, #1
 8017902:	4550      	cmp	r0, sl
 8017904:	dc01      	bgt.n	801790a <__kernel_rem_pio2f+0x3a6>
 8017906:	4288      	cmp	r0, r1
 8017908:	ddf4      	ble.n	80178f4 <__kernel_rem_pio2f+0x390>
 801790a:	a858      	add	r0, sp, #352	; 0x160
 801790c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017910:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8017914:	3a01      	subs	r2, #1
 8017916:	e730      	b.n	801777a <__kernel_rem_pio2f+0x216>
 8017918:	9a66      	ldr	r2, [sp, #408]	; 0x198
 801791a:	2a02      	cmp	r2, #2
 801791c:	dc09      	bgt.n	8017932 <__kernel_rem_pio2f+0x3ce>
 801791e:	2a00      	cmp	r2, #0
 8017920:	dc2a      	bgt.n	8017978 <__kernel_rem_pio2f+0x414>
 8017922:	d043      	beq.n	80179ac <__kernel_rem_pio2f+0x448>
 8017924:	f009 0007 	and.w	r0, r9, #7
 8017928:	b059      	add	sp, #356	; 0x164
 801792a:	ecbd 8b04 	vpop	{d8-d9}
 801792e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017932:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8017934:	2b03      	cmp	r3, #3
 8017936:	d1f5      	bne.n	8017924 <__kernel_rem_pio2f+0x3c0>
 8017938:	ab30      	add	r3, sp, #192	; 0xc0
 801793a:	442b      	add	r3, r5
 801793c:	461a      	mov	r2, r3
 801793e:	4619      	mov	r1, r3
 8017940:	4620      	mov	r0, r4
 8017942:	2800      	cmp	r0, #0
 8017944:	f1a1 0104 	sub.w	r1, r1, #4
 8017948:	dc51      	bgt.n	80179ee <__kernel_rem_pio2f+0x48a>
 801794a:	4621      	mov	r1, r4
 801794c:	2901      	cmp	r1, #1
 801794e:	f1a2 0204 	sub.w	r2, r2, #4
 8017952:	dc5c      	bgt.n	8017a0e <__kernel_rem_pio2f+0x4aa>
 8017954:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8017870 <__kernel_rem_pio2f+0x30c>
 8017958:	3304      	adds	r3, #4
 801795a:	2c01      	cmp	r4, #1
 801795c:	dc67      	bgt.n	8017a2e <__kernel_rem_pio2f+0x4ca>
 801795e:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8017962:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8017966:	2f00      	cmp	r7, #0
 8017968:	d167      	bne.n	8017a3a <__kernel_rem_pio2f+0x4d6>
 801796a:	edc8 6a00 	vstr	s13, [r8]
 801796e:	ed88 7a01 	vstr	s14, [r8, #4]
 8017972:	edc8 7a02 	vstr	s15, [r8, #8]
 8017976:	e7d5      	b.n	8017924 <__kernel_rem_pio2f+0x3c0>
 8017978:	aa30      	add	r2, sp, #192	; 0xc0
 801797a:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8017870 <__kernel_rem_pio2f+0x30c>
 801797e:	4413      	add	r3, r2
 8017980:	4622      	mov	r2, r4
 8017982:	2a00      	cmp	r2, #0
 8017984:	da24      	bge.n	80179d0 <__kernel_rem_pio2f+0x46c>
 8017986:	b34f      	cbz	r7, 80179dc <__kernel_rem_pio2f+0x478>
 8017988:	eef1 7a47 	vneg.f32	s15, s14
 801798c:	edc8 7a00 	vstr	s15, [r8]
 8017990:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8017994:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017998:	aa31      	add	r2, sp, #196	; 0xc4
 801799a:	2301      	movs	r3, #1
 801799c:	429c      	cmp	r4, r3
 801799e:	da20      	bge.n	80179e2 <__kernel_rem_pio2f+0x47e>
 80179a0:	b10f      	cbz	r7, 80179a6 <__kernel_rem_pio2f+0x442>
 80179a2:	eef1 7a67 	vneg.f32	s15, s15
 80179a6:	edc8 7a01 	vstr	s15, [r8, #4]
 80179aa:	e7bb      	b.n	8017924 <__kernel_rem_pio2f+0x3c0>
 80179ac:	aa30      	add	r2, sp, #192	; 0xc0
 80179ae:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8017870 <__kernel_rem_pio2f+0x30c>
 80179b2:	4413      	add	r3, r2
 80179b4:	2c00      	cmp	r4, #0
 80179b6:	da05      	bge.n	80179c4 <__kernel_rem_pio2f+0x460>
 80179b8:	b10f      	cbz	r7, 80179be <__kernel_rem_pio2f+0x45a>
 80179ba:	eef1 7a67 	vneg.f32	s15, s15
 80179be:	edc8 7a00 	vstr	s15, [r8]
 80179c2:	e7af      	b.n	8017924 <__kernel_rem_pio2f+0x3c0>
 80179c4:	ed33 7a01 	vldmdb	r3!, {s14}
 80179c8:	3c01      	subs	r4, #1
 80179ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80179ce:	e7f1      	b.n	80179b4 <__kernel_rem_pio2f+0x450>
 80179d0:	ed73 7a01 	vldmdb	r3!, {s15}
 80179d4:	3a01      	subs	r2, #1
 80179d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80179da:	e7d2      	b.n	8017982 <__kernel_rem_pio2f+0x41e>
 80179dc:	eef0 7a47 	vmov.f32	s15, s14
 80179e0:	e7d4      	b.n	801798c <__kernel_rem_pio2f+0x428>
 80179e2:	ecb2 7a01 	vldmia	r2!, {s14}
 80179e6:	3301      	adds	r3, #1
 80179e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80179ec:	e7d6      	b.n	801799c <__kernel_rem_pio2f+0x438>
 80179ee:	edd1 7a00 	vldr	s15, [r1]
 80179f2:	edd1 6a01 	vldr	s13, [r1, #4]
 80179f6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80179fa:	3801      	subs	r0, #1
 80179fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017a00:	ed81 7a00 	vstr	s14, [r1]
 8017a04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017a08:	edc1 7a01 	vstr	s15, [r1, #4]
 8017a0c:	e799      	b.n	8017942 <__kernel_rem_pio2f+0x3de>
 8017a0e:	edd2 7a00 	vldr	s15, [r2]
 8017a12:	edd2 6a01 	vldr	s13, [r2, #4]
 8017a16:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8017a1a:	3901      	subs	r1, #1
 8017a1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017a20:	ed82 7a00 	vstr	s14, [r2]
 8017a24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017a28:	edc2 7a01 	vstr	s15, [r2, #4]
 8017a2c:	e78e      	b.n	801794c <__kernel_rem_pio2f+0x3e8>
 8017a2e:	ed33 7a01 	vldmdb	r3!, {s14}
 8017a32:	3c01      	subs	r4, #1
 8017a34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017a38:	e78f      	b.n	801795a <__kernel_rem_pio2f+0x3f6>
 8017a3a:	eef1 6a66 	vneg.f32	s13, s13
 8017a3e:	eeb1 7a47 	vneg.f32	s14, s14
 8017a42:	edc8 6a00 	vstr	s13, [r8]
 8017a46:	ed88 7a01 	vstr	s14, [r8, #4]
 8017a4a:	eef1 7a67 	vneg.f32	s15, s15
 8017a4e:	e790      	b.n	8017972 <__kernel_rem_pio2f+0x40e>

08017a50 <__kernel_sinf>:
 8017a50:	ee10 3a10 	vmov	r3, s0
 8017a54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017a58:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8017a5c:	da04      	bge.n	8017a68 <__kernel_sinf+0x18>
 8017a5e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8017a62:	ee17 3a90 	vmov	r3, s15
 8017a66:	b35b      	cbz	r3, 8017ac0 <__kernel_sinf+0x70>
 8017a68:	ee20 7a00 	vmul.f32	s14, s0, s0
 8017a6c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8017ac4 <__kernel_sinf+0x74>
 8017a70:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8017ac8 <__kernel_sinf+0x78>
 8017a74:	eea7 6a27 	vfma.f32	s12, s14, s15
 8017a78:	eddf 7a14 	vldr	s15, [pc, #80]	; 8017acc <__kernel_sinf+0x7c>
 8017a7c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8017a80:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8017ad0 <__kernel_sinf+0x80>
 8017a84:	eea7 6a87 	vfma.f32	s12, s15, s14
 8017a88:	eddf 7a12 	vldr	s15, [pc, #72]	; 8017ad4 <__kernel_sinf+0x84>
 8017a8c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8017a90:	eee6 7a07 	vfma.f32	s15, s12, s14
 8017a94:	b930      	cbnz	r0, 8017aa4 <__kernel_sinf+0x54>
 8017a96:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8017ad8 <__kernel_sinf+0x88>
 8017a9a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8017a9e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8017aa2:	4770      	bx	lr
 8017aa4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8017aa8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8017aac:	eee0 7a86 	vfma.f32	s15, s1, s12
 8017ab0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8017ab4:	eddf 7a09 	vldr	s15, [pc, #36]	; 8017adc <__kernel_sinf+0x8c>
 8017ab8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8017abc:	ee30 0a60 	vsub.f32	s0, s0, s1
 8017ac0:	4770      	bx	lr
 8017ac2:	bf00      	nop
 8017ac4:	2f2ec9d3 	.word	0x2f2ec9d3
 8017ac8:	b2d72f34 	.word	0xb2d72f34
 8017acc:	3638ef1b 	.word	0x3638ef1b
 8017ad0:	b9500d01 	.word	0xb9500d01
 8017ad4:	3c088889 	.word	0x3c088889
 8017ad8:	be2aaaab 	.word	0xbe2aaaab
 8017adc:	3e2aaaab 	.word	0x3e2aaaab

08017ae0 <__kernel_tanf>:
 8017ae0:	b508      	push	{r3, lr}
 8017ae2:	ee10 3a10 	vmov	r3, s0
 8017ae6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8017aea:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8017aee:	eef0 7a40 	vmov.f32	s15, s0
 8017af2:	da17      	bge.n	8017b24 <__kernel_tanf+0x44>
 8017af4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8017af8:	ee17 1a10 	vmov	r1, s14
 8017afc:	bb41      	cbnz	r1, 8017b50 <__kernel_tanf+0x70>
 8017afe:	1c43      	adds	r3, r0, #1
 8017b00:	4313      	orrs	r3, r2
 8017b02:	d108      	bne.n	8017b16 <__kernel_tanf+0x36>
 8017b04:	f7fd ff32 	bl	801596c <fabsf>
 8017b08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017b0c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017b10:	eeb0 0a67 	vmov.f32	s0, s15
 8017b14:	bd08      	pop	{r3, pc}
 8017b16:	2801      	cmp	r0, #1
 8017b18:	d0fa      	beq.n	8017b10 <__kernel_tanf+0x30>
 8017b1a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8017b1e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017b22:	e7f5      	b.n	8017b10 <__kernel_tanf+0x30>
 8017b24:	494c      	ldr	r1, [pc, #304]	; (8017c58 <__kernel_tanf+0x178>)
 8017b26:	428a      	cmp	r2, r1
 8017b28:	db12      	blt.n	8017b50 <__kernel_tanf+0x70>
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	bfb8      	it	lt
 8017b2e:	eef1 7a40 	vneglt.f32	s15, s0
 8017b32:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8017c5c <__kernel_tanf+0x17c>
 8017b36:	ee70 7a67 	vsub.f32	s15, s0, s15
 8017b3a:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8017c60 <__kernel_tanf+0x180>
 8017b3e:	bfb8      	it	lt
 8017b40:	eef1 0a60 	vneglt.f32	s1, s1
 8017b44:	ee70 0a60 	vsub.f32	s1, s0, s1
 8017b48:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8017b4c:	eddf 0a45 	vldr	s1, [pc, #276]	; 8017c64 <__kernel_tanf+0x184>
 8017b50:	eddf 5a45 	vldr	s11, [pc, #276]	; 8017c68 <__kernel_tanf+0x188>
 8017b54:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8017c6c <__kernel_tanf+0x18c>
 8017b58:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8017c70 <__kernel_tanf+0x190>
 8017b5c:	493e      	ldr	r1, [pc, #248]	; (8017c58 <__kernel_tanf+0x178>)
 8017b5e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8017b62:	428a      	cmp	r2, r1
 8017b64:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8017b68:	eea7 6a25 	vfma.f32	s12, s14, s11
 8017b6c:	eddf 5a41 	vldr	s11, [pc, #260]	; 8017c74 <__kernel_tanf+0x194>
 8017b70:	eee6 5a07 	vfma.f32	s11, s12, s14
 8017b74:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8017c78 <__kernel_tanf+0x198>
 8017b78:	eea5 6a87 	vfma.f32	s12, s11, s14
 8017b7c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8017c7c <__kernel_tanf+0x19c>
 8017b80:	eee6 5a07 	vfma.f32	s11, s12, s14
 8017b84:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8017c80 <__kernel_tanf+0x1a0>
 8017b88:	eea5 6a87 	vfma.f32	s12, s11, s14
 8017b8c:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8017c84 <__kernel_tanf+0x1a4>
 8017b90:	eee7 5a05 	vfma.f32	s11, s14, s10
 8017b94:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8017c88 <__kernel_tanf+0x1a8>
 8017b98:	eea5 5a87 	vfma.f32	s10, s11, s14
 8017b9c:	eddf 5a3b 	vldr	s11, [pc, #236]	; 8017c8c <__kernel_tanf+0x1ac>
 8017ba0:	eee5 5a07 	vfma.f32	s11, s10, s14
 8017ba4:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8017c90 <__kernel_tanf+0x1b0>
 8017ba8:	eea5 5a87 	vfma.f32	s10, s11, s14
 8017bac:	eddf 5a39 	vldr	s11, [pc, #228]	; 8017c94 <__kernel_tanf+0x1b4>
 8017bb0:	eee5 5a07 	vfma.f32	s11, s10, s14
 8017bb4:	eeb0 7a46 	vmov.f32	s14, s12
 8017bb8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8017bbc:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8017bc0:	eeb0 6a60 	vmov.f32	s12, s1
 8017bc4:	eea7 6a05 	vfma.f32	s12, s14, s10
 8017bc8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8017c98 <__kernel_tanf+0x1b8>
 8017bcc:	eee6 0a26 	vfma.f32	s1, s12, s13
 8017bd0:	eee5 0a07 	vfma.f32	s1, s10, s14
 8017bd4:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8017bd8:	db1d      	blt.n	8017c16 <__kernel_tanf+0x136>
 8017bda:	ee06 0a90 	vmov	s13, r0
 8017bde:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 8017be2:	ee27 6a07 	vmul.f32	s12, s14, s14
 8017be6:	ee37 7a00 	vadd.f32	s14, s14, s0
 8017bea:	179b      	asrs	r3, r3, #30
 8017bec:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8017bf0:	f003 0302 	and.w	r3, r3, #2
 8017bf4:	f1c3 0301 	rsb	r3, r3, #1
 8017bf8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8017bfc:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8017c00:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8017c04:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8017c08:	ee07 3a90 	vmov	s15, r3
 8017c0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017c10:	ee67 7a80 	vmul.f32	s15, s15, s0
 8017c14:	e77c      	b.n	8017b10 <__kernel_tanf+0x30>
 8017c16:	2801      	cmp	r0, #1
 8017c18:	d01b      	beq.n	8017c52 <__kernel_tanf+0x172>
 8017c1a:	4b20      	ldr	r3, [pc, #128]	; (8017c9c <__kernel_tanf+0x1bc>)
 8017c1c:	ee17 2a10 	vmov	r2, s14
 8017c20:	401a      	ands	r2, r3
 8017c22:	ee06 2a10 	vmov	s12, r2
 8017c26:	ee76 7a67 	vsub.f32	s15, s12, s15
 8017c2a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8017c2e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8017c32:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8017c36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017c3a:	ee16 2a90 	vmov	r2, s13
 8017c3e:	4013      	ands	r3, r2
 8017c40:	ee07 3a90 	vmov	s15, r3
 8017c44:	eea6 7a27 	vfma.f32	s14, s12, s15
 8017c48:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8017c4c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8017c50:	e75e      	b.n	8017b10 <__kernel_tanf+0x30>
 8017c52:	eef0 7a47 	vmov.f32	s15, s14
 8017c56:	e75b      	b.n	8017b10 <__kernel_tanf+0x30>
 8017c58:	3f2ca140 	.word	0x3f2ca140
 8017c5c:	3f490fda 	.word	0x3f490fda
 8017c60:	33222168 	.word	0x33222168
 8017c64:	00000000 	.word	0x00000000
 8017c68:	b79bae5f 	.word	0xb79bae5f
 8017c6c:	38a3f445 	.word	0x38a3f445
 8017c70:	37d95384 	.word	0x37d95384
 8017c74:	3a1a26c8 	.word	0x3a1a26c8
 8017c78:	3b6b6916 	.word	0x3b6b6916
 8017c7c:	3cb327a4 	.word	0x3cb327a4
 8017c80:	3e088889 	.word	0x3e088889
 8017c84:	3895c07a 	.word	0x3895c07a
 8017c88:	398137b9 	.word	0x398137b9
 8017c8c:	3abede48 	.word	0x3abede48
 8017c90:	3c11371f 	.word	0x3c11371f
 8017c94:	3d5d0dd1 	.word	0x3d5d0dd1
 8017c98:	3eaaaaab 	.word	0x3eaaaaab
 8017c9c:	fffff000 	.word	0xfffff000

08017ca0 <with_errnof>:
 8017ca0:	b513      	push	{r0, r1, r4, lr}
 8017ca2:	4604      	mov	r4, r0
 8017ca4:	ed8d 0a01 	vstr	s0, [sp, #4]
 8017ca8:	f7f8 fd88 	bl	80107bc <__errno>
 8017cac:	ed9d 0a01 	vldr	s0, [sp, #4]
 8017cb0:	6004      	str	r4, [r0, #0]
 8017cb2:	b002      	add	sp, #8
 8017cb4:	bd10      	pop	{r4, pc}

08017cb6 <xflowf>:
 8017cb6:	b130      	cbz	r0, 8017cc6 <xflowf+0x10>
 8017cb8:	eef1 7a40 	vneg.f32	s15, s0
 8017cbc:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017cc0:	2022      	movs	r0, #34	; 0x22
 8017cc2:	f7ff bfed 	b.w	8017ca0 <with_errnof>
 8017cc6:	eef0 7a40 	vmov.f32	s15, s0
 8017cca:	e7f7      	b.n	8017cbc <xflowf+0x6>

08017ccc <__math_uflowf>:
 8017ccc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017cd4 <__math_uflowf+0x8>
 8017cd0:	f7ff bff1 	b.w	8017cb6 <xflowf>
 8017cd4:	10000000 	.word	0x10000000

08017cd8 <__math_oflowf>:
 8017cd8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017ce0 <__math_oflowf+0x8>
 8017cdc:	f7ff bfeb 	b.w	8017cb6 <xflowf>
 8017ce0:	70000000 	.word	0x70000000

08017ce4 <__math_divzerof>:
 8017ce4:	2800      	cmp	r0, #0
 8017ce6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8017cea:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8017cee:	bf08      	it	eq
 8017cf0:	eef0 7a40 	vmoveq.f32	s15, s0
 8017cf4:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8017d04 <__math_divzerof+0x20>
 8017cf8:	2022      	movs	r0, #34	; 0x22
 8017cfa:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8017cfe:	f7ff bfcf 	b.w	8017ca0 <with_errnof>
 8017d02:	bf00      	nop
 8017d04:	00000000 	.word	0x00000000

08017d08 <__math_invalidf>:
 8017d08:	eef0 7a40 	vmov.f32	s15, s0
 8017d0c:	ee30 7a40 	vsub.f32	s14, s0, s0
 8017d10:	eef4 7a67 	vcmp.f32	s15, s15
 8017d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d18:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8017d1c:	d602      	bvs.n	8017d24 <__math_invalidf+0x1c>
 8017d1e:	2021      	movs	r0, #33	; 0x21
 8017d20:	f7ff bfbe 	b.w	8017ca0 <with_errnof>
 8017d24:	4770      	bx	lr
	...

08017d28 <expm1f>:
 8017d28:	ee10 2a10 	vmov	r2, s0
 8017d2c:	497d      	ldr	r1, [pc, #500]	; (8017f24 <expm1f+0x1fc>)
 8017d2e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8017d32:	428b      	cmp	r3, r1
 8017d34:	d921      	bls.n	8017d7a <expm1f+0x52>
 8017d36:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017d3a:	d902      	bls.n	8017d42 <expm1f+0x1a>
 8017d3c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017d40:	4770      	bx	lr
 8017d42:	d106      	bne.n	8017d52 <expm1f+0x2a>
 8017d44:	2a00      	cmp	r2, #0
 8017d46:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8017d4a:	bfb8      	it	lt
 8017d4c:	eeb0 0a67 	vmovlt.f32	s0, s15
 8017d50:	4770      	bx	lr
 8017d52:	2a00      	cmp	r2, #0
 8017d54:	db05      	blt.n	8017d62 <expm1f+0x3a>
 8017d56:	4974      	ldr	r1, [pc, #464]	; (8017f28 <expm1f+0x200>)
 8017d58:	428b      	cmp	r3, r1
 8017d5a:	d95c      	bls.n	8017e16 <expm1f+0xee>
 8017d5c:	2000      	movs	r0, #0
 8017d5e:	f7ff bfbb 	b.w	8017cd8 <__math_oflowf>
 8017d62:	eddf 7a72 	vldr	s15, [pc, #456]	; 8017f2c <expm1f+0x204>
 8017d66:	ee70 7a27 	vadd.f32	s15, s0, s15
 8017d6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d72:	d550      	bpl.n	8017e16 <expm1f+0xee>
 8017d74:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8017d78:	4770      	bx	lr
 8017d7a:	496d      	ldr	r1, [pc, #436]	; (8017f30 <expm1f+0x208>)
 8017d7c:	428b      	cmp	r3, r1
 8017d7e:	d967      	bls.n	8017e50 <expm1f+0x128>
 8017d80:	496c      	ldr	r1, [pc, #432]	; (8017f34 <expm1f+0x20c>)
 8017d82:	428b      	cmp	r3, r1
 8017d84:	d847      	bhi.n	8017e16 <expm1f+0xee>
 8017d86:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8017f38 <expm1f+0x210>
 8017d8a:	2a00      	cmp	r2, #0
 8017d8c:	bfa7      	ittee	ge
 8017d8e:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8017d92:	eddf 7a6a 	vldrge	s15, [pc, #424]	; 8017f3c <expm1f+0x214>
 8017d96:	eddf 7a6a 	vldrlt	s15, [pc, #424]	; 8017f40 <expm1f+0x218>
 8017d9a:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 8017d9e:	bfac      	ite	ge
 8017da0:	2301      	movge	r3, #1
 8017da2:	f04f 33ff 	movlt.w	r3, #4294967295
 8017da6:	ee37 0a67 	vsub.f32	s0, s14, s15
 8017daa:	ee37 7a40 	vsub.f32	s14, s14, s0
 8017dae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017db2:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8017db6:	ee20 4a25 	vmul.f32	s8, s0, s11
 8017dba:	ed9f 6a62 	vldr	s12, [pc, #392]	; 8017f44 <expm1f+0x21c>
 8017dbe:	eddf 6a62 	vldr	s13, [pc, #392]	; 8017f48 <expm1f+0x220>
 8017dc2:	ed9f 5a62 	vldr	s10, [pc, #392]	; 8017f4c <expm1f+0x224>
 8017dc6:	ee20 7a04 	vmul.f32	s14, s0, s8
 8017dca:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 8017dce:	eee7 6a06 	vfma.f32	s13, s14, s12
 8017dd2:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 8017f50 <expm1f+0x228>
 8017dd6:	eea6 6a87 	vfma.f32	s12, s13, s14
 8017dda:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8017f54 <expm1f+0x22c>
 8017dde:	eee6 6a07 	vfma.f32	s13, s12, s14
 8017de2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8017de6:	eea6 5a87 	vfma.f32	s10, s13, s14
 8017dea:	eef0 6a46 	vmov.f32	s13, s12
 8017dee:	eee5 6a07 	vfma.f32	s13, s10, s14
 8017df2:	eee4 4a66 	vfms.f32	s9, s8, s13
 8017df6:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 8017dfa:	eea0 4a64 	vfms.f32	s8, s0, s9
 8017dfe:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8017e02:	eec5 6a04 	vdiv.f32	s13, s10, s8
 8017e06:	ee66 6a87 	vmul.f32	s13, s13, s14
 8017e0a:	bb7b      	cbnz	r3, 8017e6c <expm1f+0x144>
 8017e0c:	eef0 7a47 	vmov.f32	s15, s14
 8017e10:	eed0 7a26 	vfnms.f32	s15, s0, s13
 8017e14:	e025      	b.n	8017e62 <expm1f+0x13a>
 8017e16:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8017e1a:	2a00      	cmp	r2, #0
 8017e1c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8017e20:	bfb8      	it	lt
 8017e22:	eef0 7a47 	vmovlt.f32	s15, s14
 8017e26:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8017f58 <expm1f+0x230>
 8017e2a:	eddf 6a43 	vldr	s13, [pc, #268]	; 8017f38 <expm1f+0x210>
 8017e2e:	ee40 7a07 	vmla.f32	s15, s0, s14
 8017e32:	eeb0 7a40 	vmov.f32	s14, s0
 8017e36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017e3a:	ee17 3a90 	vmov	r3, s15
 8017e3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017e42:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8017e46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8017f3c <expm1f+0x214>
 8017e4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017e4e:	e7aa      	b.n	8017da6 <expm1f+0x7e>
 8017e50:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 8017e54:	d208      	bcs.n	8017e68 <expm1f+0x140>
 8017e56:	eddf 7a41 	vldr	s15, [pc, #260]	; 8017f5c <expm1f+0x234>
 8017e5a:	ee70 7a27 	vadd.f32	s15, s0, s15
 8017e5e:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8017e62:	ee30 0a67 	vsub.f32	s0, s0, s15
 8017e66:	4770      	bx	lr
 8017e68:	2300      	movs	r3, #0
 8017e6a:	e7a2      	b.n	8017db2 <expm1f+0x8a>
 8017e6c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8017e70:	1c5a      	adds	r2, r3, #1
 8017e72:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8017e76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017e7a:	d106      	bne.n	8017e8a <expm1f+0x162>
 8017e7c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8017e80:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8017e84:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8017e88:	4770      	bx	lr
 8017e8a:	2b01      	cmp	r3, #1
 8017e8c:	d118      	bne.n	8017ec0 <expm1f+0x198>
 8017e8e:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8017e92:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8017e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e9a:	bf5b      	ittet	pl
 8017e9c:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 8017ea0:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 8017ea4:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 8017ea8:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 8017eac:	bf43      	ittte	mi
 8017eae:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
 8017eb2:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 8017eb6:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 8017eba:	eeb0 0a46 	vmovpl.f32	s0, s12
 8017ebe:	4770      	bx	lr
 8017ec0:	1c5a      	adds	r2, r3, #1
 8017ec2:	2a39      	cmp	r2, #57	; 0x39
 8017ec4:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8017ec8:	d90b      	bls.n	8017ee2 <expm1f+0x1ba>
 8017eca:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8017ece:	ee36 0a40 	vsub.f32	s0, s12, s0
 8017ed2:	ee10 3a10 	vmov	r3, s0
 8017ed6:	440b      	add	r3, r1
 8017ed8:	ee00 3a10 	vmov	s0, r3
 8017edc:	ee30 0a46 	vsub.f32	s0, s0, s12
 8017ee0:	4770      	bx	lr
 8017ee2:	2b16      	cmp	r3, #22
 8017ee4:	dc11      	bgt.n	8017f0a <expm1f+0x1e2>
 8017ee6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8017eea:	fa42 f303 	asr.w	r3, r2, r3
 8017eee:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 8017ef2:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8017ef6:	ee07 3a90 	vmov	s15, r3
 8017efa:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8017efe:	ee10 3a10 	vmov	r3, s0
 8017f02:	440b      	add	r3, r1
 8017f04:	ee00 3a10 	vmov	s0, r3
 8017f08:	4770      	bx	lr
 8017f0a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8017f0e:	05db      	lsls	r3, r3, #23
 8017f10:	ee07 3a10 	vmov	s14, r3
 8017f14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017f18:	ee70 7a67 	vsub.f32	s15, s0, s15
 8017f1c:	ee37 0a86 	vadd.f32	s0, s15, s12
 8017f20:	e7ed      	b.n	8017efe <expm1f+0x1d6>
 8017f22:	bf00      	nop
 8017f24:	4195b843 	.word	0x4195b843
 8017f28:	42b17217 	.word	0x42b17217
 8017f2c:	0da24260 	.word	0x0da24260
 8017f30:	3eb17218 	.word	0x3eb17218
 8017f34:	3f851591 	.word	0x3f851591
 8017f38:	3f317180 	.word	0x3f317180
 8017f3c:	3717f7d1 	.word	0x3717f7d1
 8017f40:	b717f7d1 	.word	0xb717f7d1
 8017f44:	b457edbb 	.word	0xb457edbb
 8017f48:	36867e54 	.word	0x36867e54
 8017f4c:	bd088889 	.word	0xbd088889
 8017f50:	b8a670cd 	.word	0xb8a670cd
 8017f54:	3ad00d01 	.word	0x3ad00d01
 8017f58:	3fb8aa3b 	.word	0x3fb8aa3b
 8017f5c:	7149f2ca 	.word	0x7149f2ca

08017f60 <finitef>:
 8017f60:	b082      	sub	sp, #8
 8017f62:	ed8d 0a01 	vstr	s0, [sp, #4]
 8017f66:	9801      	ldr	r0, [sp, #4]
 8017f68:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017f6c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8017f70:	bfac      	ite	ge
 8017f72:	2000      	movge	r0, #0
 8017f74:	2001      	movlt	r0, #1
 8017f76:	b002      	add	sp, #8
 8017f78:	4770      	bx	lr
	...

08017f7c <scalbnf>:
 8017f7c:	ee10 3a10 	vmov	r3, s0
 8017f80:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8017f84:	d025      	beq.n	8017fd2 <scalbnf+0x56>
 8017f86:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8017f8a:	d302      	bcc.n	8017f92 <scalbnf+0x16>
 8017f8c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017f90:	4770      	bx	lr
 8017f92:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8017f96:	d122      	bne.n	8017fde <scalbnf+0x62>
 8017f98:	4b2a      	ldr	r3, [pc, #168]	; (8018044 <scalbnf+0xc8>)
 8017f9a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8018048 <scalbnf+0xcc>
 8017f9e:	4298      	cmp	r0, r3
 8017fa0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017fa4:	db16      	blt.n	8017fd4 <scalbnf+0x58>
 8017fa6:	ee10 3a10 	vmov	r3, s0
 8017faa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8017fae:	3a19      	subs	r2, #25
 8017fb0:	4402      	add	r2, r0
 8017fb2:	2afe      	cmp	r2, #254	; 0xfe
 8017fb4:	dd15      	ble.n	8017fe2 <scalbnf+0x66>
 8017fb6:	ee10 3a10 	vmov	r3, s0
 8017fba:	eddf 7a24 	vldr	s15, [pc, #144]	; 801804c <scalbnf+0xd0>
 8017fbe:	eddf 6a24 	vldr	s13, [pc, #144]	; 8018050 <scalbnf+0xd4>
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	eeb0 7a67 	vmov.f32	s14, s15
 8017fc8:	bfb8      	it	lt
 8017fca:	eef0 7a66 	vmovlt.f32	s15, s13
 8017fce:	ee27 0a27 	vmul.f32	s0, s14, s15
 8017fd2:	4770      	bx	lr
 8017fd4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8018054 <scalbnf+0xd8>
 8017fd8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017fdc:	4770      	bx	lr
 8017fde:	0dd2      	lsrs	r2, r2, #23
 8017fe0:	e7e6      	b.n	8017fb0 <scalbnf+0x34>
 8017fe2:	2a00      	cmp	r2, #0
 8017fe4:	dd06      	ble.n	8017ff4 <scalbnf+0x78>
 8017fe6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017fea:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8017fee:	ee00 3a10 	vmov	s0, r3
 8017ff2:	4770      	bx	lr
 8017ff4:	f112 0f16 	cmn.w	r2, #22
 8017ff8:	da1a      	bge.n	8018030 <scalbnf+0xb4>
 8017ffa:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017ffe:	4298      	cmp	r0, r3
 8018000:	ee10 3a10 	vmov	r3, s0
 8018004:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8018008:	dd0a      	ble.n	8018020 <scalbnf+0xa4>
 801800a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801804c <scalbnf+0xd0>
 801800e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8018050 <scalbnf+0xd4>
 8018012:	eef0 7a40 	vmov.f32	s15, s0
 8018016:	2b00      	cmp	r3, #0
 8018018:	bf18      	it	ne
 801801a:	eeb0 0a47 	vmovne.f32	s0, s14
 801801e:	e7db      	b.n	8017fd8 <scalbnf+0x5c>
 8018020:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8018054 <scalbnf+0xd8>
 8018024:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8018058 <scalbnf+0xdc>
 8018028:	eef0 7a40 	vmov.f32	s15, s0
 801802c:	2b00      	cmp	r3, #0
 801802e:	e7f3      	b.n	8018018 <scalbnf+0x9c>
 8018030:	3219      	adds	r2, #25
 8018032:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018036:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801803a:	eddf 7a08 	vldr	s15, [pc, #32]	; 801805c <scalbnf+0xe0>
 801803e:	ee07 3a10 	vmov	s14, r3
 8018042:	e7c4      	b.n	8017fce <scalbnf+0x52>
 8018044:	ffff3cb0 	.word	0xffff3cb0
 8018048:	4c000000 	.word	0x4c000000
 801804c:	7149f2ca 	.word	0x7149f2ca
 8018050:	f149f2ca 	.word	0xf149f2ca
 8018054:	0da24260 	.word	0x0da24260
 8018058:	8da24260 	.word	0x8da24260
 801805c:	33000000 	.word	0x33000000

08018060 <_init>:
 8018060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018062:	bf00      	nop
 8018064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018066:	bc08      	pop	{r3}
 8018068:	469e      	mov	lr, r3
 801806a:	4770      	bx	lr

0801806c <_fini>:
 801806c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801806e:	bf00      	nop
 8018070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018072:	bc08      	pop	{r3}
 8018074:	469e      	mov	lr, r3
 8018076:	4770      	bx	lr
